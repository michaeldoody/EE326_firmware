
webcam_firmware2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000092e4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004092e4  004092e4  000192e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20000000  004092ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c864  200009c0  00409cac  000209c0  2**2
                  ALLOC
  4 .stack        00003004  2000d224  00416510  000209c0  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209ea  2**0
                  CONTENTS, READONLY
  7 .debug_info   00017178  00000000  00000000  00020a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002f71  00000000  00000000  00037bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007000  00000000  00000000  0003ab2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c70  00000000  00000000  00041b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b68  00000000  00000000  0004279c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00015865  00000000  00000000  00043304  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f20a  00000000  00000000  00058b69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005211b  00000000  00000000  00067d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000040f8  00000000  00000000  000b9e90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	28 02 01 20 5d 2a 40 00 25 2b 40 00 25 2b 40 00     (.. ]*@.%+@.%+@.
  400010:	25 2b 40 00 25 2b 40 00 25 2b 40 00 00 00 00 00     %+@.%+@.%+@.....
	...
  40002c:	25 2b 40 00 25 2b 40 00 00 00 00 00 25 2b 40 00     %+@.%+@.....%+@.
  40003c:	25 2b 40 00 25 2b 40 00 25 2b 40 00 25 2b 40 00     %+@.%+@.%+@.%+@.
  40004c:	25 2b 40 00 25 2b 40 00 25 2b 40 00 25 2b 40 00     %+@.%+@.%+@.%+@.
  40005c:	00 00 00 00 25 2b 40 00 25 2b 40 00 00 00 00 00     ....%+@.%+@.....
  40006c:	51 0b 40 00 69 0b 40 00 00 00 00 00 25 2b 40 00     Q.@.i.@.....%+@.
  40007c:	25 2b 40 00 00 00 00 00 00 00 00 00 25 2b 40 00     %+@.........%+@.
  40008c:	25 2b 40 00 25 2b 40 00 25 2b 40 00 25 2b 40 00     %+@.%+@.%+@.%+@.
  40009c:	49 23 40 00 25 2b 40 00 25 2b 40 00 00 00 00 00     I#@.%+@.%+@.....
	...
  4000b4:	25 2b 40 00 25 2b 40 00 25 2b 40 00 25 2b 40 00     %+@.%+@.%+@.%+@.
  4000c4:	25 2b 40 00 25 2b 40 00                             %+@.%+@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009c0 	.word	0x200009c0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004092ec 	.word	0x004092ec

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	004092ec 	.word	0x004092ec
  40012c:	200009c4 	.word	0x200009c4
  400130:	004092ec 	.word	0x004092ec
  400134:	00000000 	.word	0x00000000

00400138 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400138:	b580      	push	{r7, lr}
  40013a:	b082      	sub	sp, #8
  40013c:	af00      	add	r7, sp, #0
  40013e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400140:	687b      	ldr	r3, [r7, #4]
  400142:	2b07      	cmp	r3, #7
  400144:	d831      	bhi.n	4001aa <osc_enable+0x72>
  400146:	a201      	add	r2, pc, #4	; (adr r2, 40014c <osc_enable+0x14>)
  400148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40014c:	004001a9 	.word	0x004001a9
  400150:	0040016d 	.word	0x0040016d
  400154:	00400175 	.word	0x00400175
  400158:	0040017d 	.word	0x0040017d
  40015c:	00400185 	.word	0x00400185
  400160:	0040018d 	.word	0x0040018d
  400164:	00400195 	.word	0x00400195
  400168:	0040019f 	.word	0x0040019f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40016c:	2000      	movs	r0, #0
  40016e:	4b11      	ldr	r3, [pc, #68]	; (4001b4 <osc_enable+0x7c>)
  400170:	4798      	blx	r3
		break;
  400172:	e01a      	b.n	4001aa <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400174:	2001      	movs	r0, #1
  400176:	4b0f      	ldr	r3, [pc, #60]	; (4001b4 <osc_enable+0x7c>)
  400178:	4798      	blx	r3
		break;
  40017a:	e016      	b.n	4001aa <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  40017c:	2000      	movs	r0, #0
  40017e:	4b0e      	ldr	r3, [pc, #56]	; (4001b8 <osc_enable+0x80>)
  400180:	4798      	blx	r3
		break;
  400182:	e012      	b.n	4001aa <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400184:	2010      	movs	r0, #16
  400186:	4b0c      	ldr	r3, [pc, #48]	; (4001b8 <osc_enable+0x80>)
  400188:	4798      	blx	r3
		break;
  40018a:	e00e      	b.n	4001aa <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40018c:	2020      	movs	r0, #32
  40018e:	4b0a      	ldr	r3, [pc, #40]	; (4001b8 <osc_enable+0x80>)
  400190:	4798      	blx	r3
		break;
  400192:	e00a      	b.n	4001aa <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400194:	213e      	movs	r1, #62	; 0x3e
  400196:	2000      	movs	r0, #0
  400198:	4b08      	ldr	r3, [pc, #32]	; (4001bc <osc_enable+0x84>)
  40019a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40019c:	e005      	b.n	4001aa <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40019e:	213e      	movs	r1, #62	; 0x3e
  4001a0:	2001      	movs	r0, #1
  4001a2:	4b06      	ldr	r3, [pc, #24]	; (4001bc <osc_enable+0x84>)
  4001a4:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4001a6:	e000      	b.n	4001aa <osc_enable+0x72>
		break;
  4001a8:	bf00      	nop
	}
}
  4001aa:	bf00      	nop
  4001ac:	3708      	adds	r7, #8
  4001ae:	46bd      	mov	sp, r7
  4001b0:	bd80      	pop	{r7, pc}
  4001b2:	bf00      	nop
  4001b4:	00400c01 	.word	0x00400c01
  4001b8:	00400c6d 	.word	0x00400c6d
  4001bc:	00400cdd 	.word	0x00400cdd

004001c0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4001c0:	b580      	push	{r7, lr}
  4001c2:	b082      	sub	sp, #8
  4001c4:	af00      	add	r7, sp, #0
  4001c6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001c8:	687b      	ldr	r3, [r7, #4]
  4001ca:	2b07      	cmp	r3, #7
  4001cc:	d826      	bhi.n	40021c <osc_is_ready+0x5c>
  4001ce:	a201      	add	r2, pc, #4	; (adr r2, 4001d4 <osc_is_ready+0x14>)
  4001d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001d4:	004001f5 	.word	0x004001f5
  4001d8:	004001f9 	.word	0x004001f9
  4001dc:	004001f9 	.word	0x004001f9
  4001e0:	0040020b 	.word	0x0040020b
  4001e4:	0040020b 	.word	0x0040020b
  4001e8:	0040020b 	.word	0x0040020b
  4001ec:	0040020b 	.word	0x0040020b
  4001f0:	0040020b 	.word	0x0040020b
	case OSC_SLCK_32K_RC:
		return 1;
  4001f4:	2301      	movs	r3, #1
  4001f6:	e012      	b.n	40021e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4001f8:	4b0b      	ldr	r3, [pc, #44]	; (400228 <osc_is_ready+0x68>)
  4001fa:	4798      	blx	r3
  4001fc:	4603      	mov	r3, r0
  4001fe:	2b00      	cmp	r3, #0
  400200:	bf14      	ite	ne
  400202:	2301      	movne	r3, #1
  400204:	2300      	moveq	r3, #0
  400206:	b2db      	uxtb	r3, r3
  400208:	e009      	b.n	40021e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40020a:	4b08      	ldr	r3, [pc, #32]	; (40022c <osc_is_ready+0x6c>)
  40020c:	4798      	blx	r3
  40020e:	4603      	mov	r3, r0
  400210:	2b00      	cmp	r3, #0
  400212:	bf14      	ite	ne
  400214:	2301      	movne	r3, #1
  400216:	2300      	moveq	r3, #0
  400218:	b2db      	uxtb	r3, r3
  40021a:	e000      	b.n	40021e <osc_is_ready+0x5e>
	}

	return 0;
  40021c:	2300      	movs	r3, #0
}
  40021e:	4618      	mov	r0, r3
  400220:	3708      	adds	r7, #8
  400222:	46bd      	mov	sp, r7
  400224:	bd80      	pop	{r7, pc}
  400226:	bf00      	nop
  400228:	00400c39 	.word	0x00400c39
  40022c:	00400d55 	.word	0x00400d55

00400230 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400230:	b480      	push	{r7}
  400232:	b083      	sub	sp, #12
  400234:	af00      	add	r7, sp, #0
  400236:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400238:	687b      	ldr	r3, [r7, #4]
  40023a:	2b07      	cmp	r3, #7
  40023c:	d825      	bhi.n	40028a <osc_get_rate+0x5a>
  40023e:	a201      	add	r2, pc, #4	; (adr r2, 400244 <osc_get_rate+0x14>)
  400240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400244:	00400265 	.word	0x00400265
  400248:	0040026b 	.word	0x0040026b
  40024c:	00400271 	.word	0x00400271
  400250:	00400277 	.word	0x00400277
  400254:	0040027b 	.word	0x0040027b
  400258:	0040027f 	.word	0x0040027f
  40025c:	00400283 	.word	0x00400283
  400260:	00400287 	.word	0x00400287
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400264:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400268:	e010      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40026a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40026e:	e00d      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400274:	e00a      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400276:	4b08      	ldr	r3, [pc, #32]	; (400298 <osc_get_rate+0x68>)
  400278:	e008      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40027a:	4b08      	ldr	r3, [pc, #32]	; (40029c <osc_get_rate+0x6c>)
  40027c:	e006      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_get_rate+0x70>)
  400280:	e004      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400282:	4b07      	ldr	r3, [pc, #28]	; (4002a0 <osc_get_rate+0x70>)
  400284:	e002      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400286:	4b06      	ldr	r3, [pc, #24]	; (4002a0 <osc_get_rate+0x70>)
  400288:	e000      	b.n	40028c <osc_get_rate+0x5c>
	}

	return 0;
  40028a:	2300      	movs	r3, #0
}
  40028c:	4618      	mov	r0, r3
  40028e:	370c      	adds	r7, #12
  400290:	46bd      	mov	sp, r7
  400292:	bc80      	pop	{r7}
  400294:	4770      	bx	lr
  400296:	bf00      	nop
  400298:	003d0900 	.word	0x003d0900
  40029c:	007a1200 	.word	0x007a1200
  4002a0:	00b71b00 	.word	0x00b71b00

004002a4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4002a4:	b580      	push	{r7, lr}
  4002a6:	b082      	sub	sp, #8
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	4603      	mov	r3, r0
  4002ac:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4002ae:	bf00      	nop
  4002b0:	79fb      	ldrb	r3, [r7, #7]
  4002b2:	4618      	mov	r0, r3
  4002b4:	4b05      	ldr	r3, [pc, #20]	; (4002cc <osc_wait_ready+0x28>)
  4002b6:	4798      	blx	r3
  4002b8:	4603      	mov	r3, r0
  4002ba:	f083 0301 	eor.w	r3, r3, #1
  4002be:	b2db      	uxtb	r3, r3
  4002c0:	2b00      	cmp	r3, #0
  4002c2:	d1f5      	bne.n	4002b0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4002c4:	bf00      	nop
  4002c6:	3708      	adds	r7, #8
  4002c8:	46bd      	mov	sp, r7
  4002ca:	bd80      	pop	{r7, pc}
  4002cc:	004001c1 	.word	0x004001c1

004002d0 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4002d0:	b580      	push	{r7, lr}
  4002d2:	b086      	sub	sp, #24
  4002d4:	af00      	add	r7, sp, #0
  4002d6:	60f8      	str	r0, [r7, #12]
  4002d8:	607a      	str	r2, [r7, #4]
  4002da:	603b      	str	r3, [r7, #0]
  4002dc:	460b      	mov	r3, r1
  4002de:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4002e0:	7afb      	ldrb	r3, [r7, #11]
  4002e2:	4618      	mov	r0, r3
  4002e4:	4b0d      	ldr	r3, [pc, #52]	; (40031c <pll_config_init+0x4c>)
  4002e6:	4798      	blx	r3
  4002e8:	4602      	mov	r2, r0
  4002ea:	687b      	ldr	r3, [r7, #4]
  4002ec:	fbb2 f3f3 	udiv	r3, r2, r3
  4002f0:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4002f2:	697b      	ldr	r3, [r7, #20]
  4002f4:	683a      	ldr	r2, [r7, #0]
  4002f6:	fb02 f303 	mul.w	r3, r2, r3
  4002fa:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4002fc:	683b      	ldr	r3, [r7, #0]
  4002fe:	3b01      	subs	r3, #1
  400300:	041a      	lsls	r2, r3, #16
  400302:	4b07      	ldr	r3, [pc, #28]	; (400320 <pll_config_init+0x50>)
  400304:	4013      	ands	r3, r2
  400306:	687a      	ldr	r2, [r7, #4]
  400308:	b2d2      	uxtb	r2, r2
  40030a:	4313      	orrs	r3, r2
  40030c:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400310:	68fb      	ldr	r3, [r7, #12]
  400312:	601a      	str	r2, [r3, #0]
}
  400314:	bf00      	nop
  400316:	3718      	adds	r7, #24
  400318:	46bd      	mov	sp, r7
  40031a:	bd80      	pop	{r7, pc}
  40031c:	00400231 	.word	0x00400231
  400320:	07ff0000 	.word	0x07ff0000

00400324 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400324:	b580      	push	{r7, lr}
  400326:	b082      	sub	sp, #8
  400328:	af00      	add	r7, sp, #0
  40032a:	6078      	str	r0, [r7, #4]
  40032c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40032e:	683b      	ldr	r3, [r7, #0]
  400330:	2b00      	cmp	r3, #0
  400332:	d108      	bne.n	400346 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400334:	4b09      	ldr	r3, [pc, #36]	; (40035c <pll_enable+0x38>)
  400336:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400338:	4a09      	ldr	r2, [pc, #36]	; (400360 <pll_enable+0x3c>)
  40033a:	687b      	ldr	r3, [r7, #4]
  40033c:	681b      	ldr	r3, [r3, #0]
  40033e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400342:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400344:	e005      	b.n	400352 <pll_enable+0x2e>
		pmc_disable_pllbck();
  400346:	4b07      	ldr	r3, [pc, #28]	; (400364 <pll_enable+0x40>)
  400348:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40034a:	4a05      	ldr	r2, [pc, #20]	; (400360 <pll_enable+0x3c>)
  40034c:	687b      	ldr	r3, [r7, #4]
  40034e:	681b      	ldr	r3, [r3, #0]
  400350:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  400352:	bf00      	nop
  400354:	3708      	adds	r7, #8
  400356:	46bd      	mov	sp, r7
  400358:	bd80      	pop	{r7, pc}
  40035a:	bf00      	nop
  40035c:	00400d6d 	.word	0x00400d6d
  400360:	400e0400 	.word	0x400e0400
  400364:	00400ded 	.word	0x00400ded

00400368 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400368:	b580      	push	{r7, lr}
  40036a:	b082      	sub	sp, #8
  40036c:	af00      	add	r7, sp, #0
  40036e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400370:	687b      	ldr	r3, [r7, #4]
  400372:	2b00      	cmp	r3, #0
  400374:	d103      	bne.n	40037e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400376:	4b05      	ldr	r3, [pc, #20]	; (40038c <pll_is_locked+0x24>)
  400378:	4798      	blx	r3
  40037a:	4603      	mov	r3, r0
  40037c:	e002      	b.n	400384 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40037e:	4b04      	ldr	r3, [pc, #16]	; (400390 <pll_is_locked+0x28>)
  400380:	4798      	blx	r3
  400382:	4603      	mov	r3, r0
	}
}
  400384:	4618      	mov	r0, r3
  400386:	3708      	adds	r7, #8
  400388:	46bd      	mov	sp, r7
  40038a:	bd80      	pop	{r7, pc}
  40038c:	00400d85 	.word	0x00400d85
  400390:	00400e05 	.word	0x00400e05

00400394 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400394:	b580      	push	{r7, lr}
  400396:	b082      	sub	sp, #8
  400398:	af00      	add	r7, sp, #0
  40039a:	4603      	mov	r3, r0
  40039c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40039e:	79fb      	ldrb	r3, [r7, #7]
  4003a0:	3b03      	subs	r3, #3
  4003a2:	2b04      	cmp	r3, #4
  4003a4:	d808      	bhi.n	4003b8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4003a6:	79fb      	ldrb	r3, [r7, #7]
  4003a8:	4618      	mov	r0, r3
  4003aa:	4b06      	ldr	r3, [pc, #24]	; (4003c4 <pll_enable_source+0x30>)
  4003ac:	4798      	blx	r3
		osc_wait_ready(e_src);
  4003ae:	79fb      	ldrb	r3, [r7, #7]
  4003b0:	4618      	mov	r0, r3
  4003b2:	4b05      	ldr	r3, [pc, #20]	; (4003c8 <pll_enable_source+0x34>)
  4003b4:	4798      	blx	r3
		break;
  4003b6:	e000      	b.n	4003ba <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4003b8:	bf00      	nop
	}
}
  4003ba:	bf00      	nop
  4003bc:	3708      	adds	r7, #8
  4003be:	46bd      	mov	sp, r7
  4003c0:	bd80      	pop	{r7, pc}
  4003c2:	bf00      	nop
  4003c4:	00400139 	.word	0x00400139
  4003c8:	004002a5 	.word	0x004002a5

004003cc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4003cc:	b580      	push	{r7, lr}
  4003ce:	b082      	sub	sp, #8
  4003d0:	af00      	add	r7, sp, #0
  4003d2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4003d4:	bf00      	nop
  4003d6:	6878      	ldr	r0, [r7, #4]
  4003d8:	4b04      	ldr	r3, [pc, #16]	; (4003ec <pll_wait_for_lock+0x20>)
  4003da:	4798      	blx	r3
  4003dc:	4603      	mov	r3, r0
  4003de:	2b00      	cmp	r3, #0
  4003e0:	d0f9      	beq.n	4003d6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4003e2:	2300      	movs	r3, #0
}
  4003e4:	4618      	mov	r0, r3
  4003e6:	3708      	adds	r7, #8
  4003e8:	46bd      	mov	sp, r7
  4003ea:	bd80      	pop	{r7, pc}
  4003ec:	00400369 	.word	0x00400369

004003f0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4003f4:	2006      	movs	r0, #6
  4003f6:	4b04      	ldr	r3, [pc, #16]	; (400408 <sysclk_get_main_hz+0x18>)
  4003f8:	4798      	blx	r3
  4003fa:	4602      	mov	r2, r0
  4003fc:	4613      	mov	r3, r2
  4003fe:	009b      	lsls	r3, r3, #2
  400400:	4413      	add	r3, r2
  400402:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400404:	4618      	mov	r0, r3
  400406:	bd80      	pop	{r7, pc}
  400408:	00400231 	.word	0x00400231

0040040c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40040c:	b580      	push	{r7, lr}
  40040e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400410:	4b02      	ldr	r3, [pc, #8]	; (40041c <sysclk_get_cpu_hz+0x10>)
  400412:	4798      	blx	r3
  400414:	4603      	mov	r3, r0
  400416:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400418:	4618      	mov	r0, r3
  40041a:	bd80      	pop	{r7, pc}
  40041c:	004003f1 	.word	0x004003f1

00400420 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400420:	b590      	push	{r4, r7, lr}
  400422:	b083      	sub	sp, #12
  400424:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400426:	4811      	ldr	r0, [pc, #68]	; (40046c <sysclk_init+0x4c>)
  400428:	4b11      	ldr	r3, [pc, #68]	; (400470 <sysclk_init+0x50>)
  40042a:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  40042c:	2006      	movs	r0, #6
  40042e:	4b11      	ldr	r3, [pc, #68]	; (400474 <sysclk_init+0x54>)
  400430:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400432:	1d38      	adds	r0, r7, #4
  400434:	2314      	movs	r3, #20
  400436:	2201      	movs	r2, #1
  400438:	2106      	movs	r1, #6
  40043a:	4c0f      	ldr	r4, [pc, #60]	; (400478 <sysclk_init+0x58>)
  40043c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40043e:	1d3b      	adds	r3, r7, #4
  400440:	2100      	movs	r1, #0
  400442:	4618      	mov	r0, r3
  400444:	4b0d      	ldr	r3, [pc, #52]	; (40047c <sysclk_init+0x5c>)
  400446:	4798      	blx	r3
		pll_wait_for_lock(0);
  400448:	2000      	movs	r0, #0
  40044a:	4b0d      	ldr	r3, [pc, #52]	; (400480 <sysclk_init+0x60>)
  40044c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40044e:	2010      	movs	r0, #16
  400450:	4b0c      	ldr	r3, [pc, #48]	; (400484 <sysclk_init+0x64>)
  400452:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400454:	4b0c      	ldr	r3, [pc, #48]	; (400488 <sysclk_init+0x68>)
  400456:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400458:	4b0c      	ldr	r3, [pc, #48]	; (40048c <sysclk_init+0x6c>)
  40045a:	4798      	blx	r3
  40045c:	4603      	mov	r3, r0
  40045e:	4618      	mov	r0, r3
  400460:	4b03      	ldr	r3, [pc, #12]	; (400470 <sysclk_init+0x50>)
  400462:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400464:	bf00      	nop
  400466:	370c      	adds	r7, #12
  400468:	46bd      	mov	sp, r7
  40046a:	bd90      	pop	{r4, r7, pc}
  40046c:	07270e00 	.word	0x07270e00
  400470:	00402cc5 	.word	0x00402cc5
  400474:	00400395 	.word	0x00400395
  400478:	004002d1 	.word	0x004002d1
  40047c:	00400325 	.word	0x00400325
  400480:	004003cd 	.word	0x004003cd
  400484:	00400b81 	.word	0x00400b81
  400488:	00402b2d 	.word	0x00402b2d
  40048c:	0040040d 	.word	0x0040040d

00400490 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400490:	b480      	push	{r7}
  400492:	b085      	sub	sp, #20
  400494:	af00      	add	r7, sp, #0
  400496:	60f8      	str	r0, [r7, #12]
  400498:	60b9      	str	r1, [r7, #8]
  40049a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40049c:	687b      	ldr	r3, [r7, #4]
  40049e:	2b00      	cmp	r3, #0
  4004a0:	d003      	beq.n	4004aa <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4004a2:	68fb      	ldr	r3, [r7, #12]
  4004a4:	68ba      	ldr	r2, [r7, #8]
  4004a6:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4004a8:	e002      	b.n	4004b0 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  4004aa:	68fb      	ldr	r3, [r7, #12]
  4004ac:	68ba      	ldr	r2, [r7, #8]
  4004ae:	661a      	str	r2, [r3, #96]	; 0x60
}
  4004b0:	bf00      	nop
  4004b2:	3714      	adds	r7, #20
  4004b4:	46bd      	mov	sp, r7
  4004b6:	bc80      	pop	{r7}
  4004b8:	4770      	bx	lr

004004ba <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  4004ba:	b480      	push	{r7}
  4004bc:	b085      	sub	sp, #20
  4004be:	af00      	add	r7, sp, #0
  4004c0:	60f8      	str	r0, [r7, #12]
  4004c2:	60b9      	str	r1, [r7, #8]
  4004c4:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4004c6:	68fb      	ldr	r3, [r7, #12]
  4004c8:	68ba      	ldr	r2, [r7, #8]
  4004ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4004ce:	687b      	ldr	r3, [r7, #4]
  4004d0:	005b      	lsls	r3, r3, #1
  4004d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4004d6:	fbb2 f3f3 	udiv	r3, r2, r3
  4004da:	3b01      	subs	r3, #1
  4004dc:	f3c3 020d 	ubfx	r2, r3, #0, #14
  4004e0:	68fb      	ldr	r3, [r7, #12]
  4004e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  4004e6:	bf00      	nop
  4004e8:	3714      	adds	r7, #20
  4004ea:	46bd      	mov	sp, r7
  4004ec:	bc80      	pop	{r7}
  4004ee:	4770      	bx	lr

004004f0 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4004f0:	b480      	push	{r7}
  4004f2:	b087      	sub	sp, #28
  4004f4:	af00      	add	r7, sp, #0
  4004f6:	60f8      	str	r0, [r7, #12]
  4004f8:	60b9      	str	r1, [r7, #8]
  4004fa:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4004fc:	68fb      	ldr	r3, [r7, #12]
  4004fe:	687a      	ldr	r2, [r7, #4]
  400500:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400502:	68bb      	ldr	r3, [r7, #8]
  400504:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400508:	d04a      	beq.n	4005a0 <pio_set_peripheral+0xb0>
  40050a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40050e:	d808      	bhi.n	400522 <pio_set_peripheral+0x32>
  400510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400514:	d016      	beq.n	400544 <pio_set_peripheral+0x54>
  400516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40051a:	d02c      	beq.n	400576 <pio_set_peripheral+0x86>
  40051c:	2b00      	cmp	r3, #0
  40051e:	d069      	beq.n	4005f4 <pio_set_peripheral+0x104>
  400520:	e064      	b.n	4005ec <pio_set_peripheral+0xfc>
  400522:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400526:	d065      	beq.n	4005f4 <pio_set_peripheral+0x104>
  400528:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40052c:	d803      	bhi.n	400536 <pio_set_peripheral+0x46>
  40052e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400532:	d04a      	beq.n	4005ca <pio_set_peripheral+0xda>
  400534:	e05a      	b.n	4005ec <pio_set_peripheral+0xfc>
  400536:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40053a:	d05b      	beq.n	4005f4 <pio_set_peripheral+0x104>
  40053c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400540:	d058      	beq.n	4005f4 <pio_set_peripheral+0x104>
  400542:	e053      	b.n	4005ec <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400544:	68fb      	ldr	r3, [r7, #12]
  400546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400548:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40054a:	68fb      	ldr	r3, [r7, #12]
  40054c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40054e:	687b      	ldr	r3, [r7, #4]
  400550:	43d9      	mvns	r1, r3
  400552:	697b      	ldr	r3, [r7, #20]
  400554:	400b      	ands	r3, r1
  400556:	401a      	ands	r2, r3
  400558:	68fb      	ldr	r3, [r7, #12]
  40055a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40055c:	68fb      	ldr	r3, [r7, #12]
  40055e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400560:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400562:	68fb      	ldr	r3, [r7, #12]
  400564:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400566:	687b      	ldr	r3, [r7, #4]
  400568:	43d9      	mvns	r1, r3
  40056a:	697b      	ldr	r3, [r7, #20]
  40056c:	400b      	ands	r3, r1
  40056e:	401a      	ands	r2, r3
  400570:	68fb      	ldr	r3, [r7, #12]
  400572:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400574:	e03a      	b.n	4005ec <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400576:	68fb      	ldr	r3, [r7, #12]
  400578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40057a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40057c:	687a      	ldr	r2, [r7, #4]
  40057e:	697b      	ldr	r3, [r7, #20]
  400580:	431a      	orrs	r2, r3
  400582:	68fb      	ldr	r3, [r7, #12]
  400584:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400586:	68fb      	ldr	r3, [r7, #12]
  400588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40058a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40058c:	68fb      	ldr	r3, [r7, #12]
  40058e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400590:	687b      	ldr	r3, [r7, #4]
  400592:	43d9      	mvns	r1, r3
  400594:	697b      	ldr	r3, [r7, #20]
  400596:	400b      	ands	r3, r1
  400598:	401a      	ands	r2, r3
  40059a:	68fb      	ldr	r3, [r7, #12]
  40059c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40059e:	e025      	b.n	4005ec <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005a0:	68fb      	ldr	r3, [r7, #12]
  4005a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4005a4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4005a6:	68fb      	ldr	r3, [r7, #12]
  4005a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005aa:	687b      	ldr	r3, [r7, #4]
  4005ac:	43d9      	mvns	r1, r3
  4005ae:	697b      	ldr	r3, [r7, #20]
  4005b0:	400b      	ands	r3, r1
  4005b2:	401a      	ands	r2, r3
  4005b4:	68fb      	ldr	r3, [r7, #12]
  4005b6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005b8:	68fb      	ldr	r3, [r7, #12]
  4005ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4005bc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4005be:	687a      	ldr	r2, [r7, #4]
  4005c0:	697b      	ldr	r3, [r7, #20]
  4005c2:	431a      	orrs	r2, r3
  4005c4:	68fb      	ldr	r3, [r7, #12]
  4005c6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4005c8:	e010      	b.n	4005ec <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005ca:	68fb      	ldr	r3, [r7, #12]
  4005cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4005ce:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4005d0:	687a      	ldr	r2, [r7, #4]
  4005d2:	697b      	ldr	r3, [r7, #20]
  4005d4:	431a      	orrs	r2, r3
  4005d6:	68fb      	ldr	r3, [r7, #12]
  4005d8:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005da:	68fb      	ldr	r3, [r7, #12]
  4005dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4005de:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4005e0:	687a      	ldr	r2, [r7, #4]
  4005e2:	697b      	ldr	r3, [r7, #20]
  4005e4:	431a      	orrs	r2, r3
  4005e6:	68fb      	ldr	r3, [r7, #12]
  4005e8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4005ea:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4005ec:	68fb      	ldr	r3, [r7, #12]
  4005ee:	687a      	ldr	r2, [r7, #4]
  4005f0:	605a      	str	r2, [r3, #4]
  4005f2:	e000      	b.n	4005f6 <pio_set_peripheral+0x106>
		return;
  4005f4:	bf00      	nop
}
  4005f6:	371c      	adds	r7, #28
  4005f8:	46bd      	mov	sp, r7
  4005fa:	bc80      	pop	{r7}
  4005fc:	4770      	bx	lr
	...

00400600 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400600:	b580      	push	{r7, lr}
  400602:	b084      	sub	sp, #16
  400604:	af00      	add	r7, sp, #0
  400606:	60f8      	str	r0, [r7, #12]
  400608:	60b9      	str	r1, [r7, #8]
  40060a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  40060c:	68b9      	ldr	r1, [r7, #8]
  40060e:	68f8      	ldr	r0, [r7, #12]
  400610:	4b19      	ldr	r3, [pc, #100]	; (400678 <pio_set_input+0x78>)
  400612:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400614:	687b      	ldr	r3, [r7, #4]
  400616:	f003 0301 	and.w	r3, r3, #1
  40061a:	461a      	mov	r2, r3
  40061c:	68b9      	ldr	r1, [r7, #8]
  40061e:	68f8      	ldr	r0, [r7, #12]
  400620:	4b16      	ldr	r3, [pc, #88]	; (40067c <pio_set_input+0x7c>)
  400622:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400624:	687b      	ldr	r3, [r7, #4]
  400626:	f003 030a 	and.w	r3, r3, #10
  40062a:	2b00      	cmp	r3, #0
  40062c:	d003      	beq.n	400636 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	68ba      	ldr	r2, [r7, #8]
  400632:	621a      	str	r2, [r3, #32]
  400634:	e002      	b.n	40063c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400636:	68fb      	ldr	r3, [r7, #12]
  400638:	68ba      	ldr	r2, [r7, #8]
  40063a:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40063c:	687b      	ldr	r3, [r7, #4]
  40063e:	f003 0302 	and.w	r3, r3, #2
  400642:	2b00      	cmp	r3, #0
  400644:	d004      	beq.n	400650 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400646:	68fb      	ldr	r3, [r7, #12]
  400648:	68ba      	ldr	r2, [r7, #8]
  40064a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40064e:	e008      	b.n	400662 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400650:	687b      	ldr	r3, [r7, #4]
  400652:	f003 0308 	and.w	r3, r3, #8
  400656:	2b00      	cmp	r3, #0
  400658:	d003      	beq.n	400662 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40065a:	68fb      	ldr	r3, [r7, #12]
  40065c:	68ba      	ldr	r2, [r7, #8]
  40065e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400662:	68fb      	ldr	r3, [r7, #12]
  400664:	68ba      	ldr	r2, [r7, #8]
  400666:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400668:	68fb      	ldr	r3, [r7, #12]
  40066a:	68ba      	ldr	r2, [r7, #8]
  40066c:	601a      	str	r2, [r3, #0]
}
  40066e:	bf00      	nop
  400670:	3710      	adds	r7, #16
  400672:	46bd      	mov	sp, r7
  400674:	bd80      	pop	{r7, pc}
  400676:	bf00      	nop
  400678:	00400769 	.word	0x00400769
  40067c:	00400491 	.word	0x00400491

00400680 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400680:	b580      	push	{r7, lr}
  400682:	b084      	sub	sp, #16
  400684:	af00      	add	r7, sp, #0
  400686:	60f8      	str	r0, [r7, #12]
  400688:	60b9      	str	r1, [r7, #8]
  40068a:	607a      	str	r2, [r7, #4]
  40068c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40068e:	68b9      	ldr	r1, [r7, #8]
  400690:	68f8      	ldr	r0, [r7, #12]
  400692:	4b12      	ldr	r3, [pc, #72]	; (4006dc <pio_set_output+0x5c>)
  400694:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400696:	69ba      	ldr	r2, [r7, #24]
  400698:	68b9      	ldr	r1, [r7, #8]
  40069a:	68f8      	ldr	r0, [r7, #12]
  40069c:	4b10      	ldr	r3, [pc, #64]	; (4006e0 <pio_set_output+0x60>)
  40069e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4006a0:	683b      	ldr	r3, [r7, #0]
  4006a2:	2b00      	cmp	r3, #0
  4006a4:	d003      	beq.n	4006ae <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4006a6:	68fb      	ldr	r3, [r7, #12]
  4006a8:	68ba      	ldr	r2, [r7, #8]
  4006aa:	651a      	str	r2, [r3, #80]	; 0x50
  4006ac:	e002      	b.n	4006b4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4006ae:	68fb      	ldr	r3, [r7, #12]
  4006b0:	68ba      	ldr	r2, [r7, #8]
  4006b2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4006b4:	687b      	ldr	r3, [r7, #4]
  4006b6:	2b00      	cmp	r3, #0
  4006b8:	d003      	beq.n	4006c2 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4006ba:	68fb      	ldr	r3, [r7, #12]
  4006bc:	68ba      	ldr	r2, [r7, #8]
  4006be:	631a      	str	r2, [r3, #48]	; 0x30
  4006c0:	e002      	b.n	4006c8 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4006c2:	68fb      	ldr	r3, [r7, #12]
  4006c4:	68ba      	ldr	r2, [r7, #8]
  4006c6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4006c8:	68fb      	ldr	r3, [r7, #12]
  4006ca:	68ba      	ldr	r2, [r7, #8]
  4006cc:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4006ce:	68fb      	ldr	r3, [r7, #12]
  4006d0:	68ba      	ldr	r2, [r7, #8]
  4006d2:	601a      	str	r2, [r3, #0]
}
  4006d4:	bf00      	nop
  4006d6:	3710      	adds	r7, #16
  4006d8:	46bd      	mov	sp, r7
  4006da:	bd80      	pop	{r7, pc}
  4006dc:	00400769 	.word	0x00400769
  4006e0:	00400491 	.word	0x00400491

004006e4 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  4006e4:	b480      	push	{r7}
  4006e6:	b085      	sub	sp, #20
  4006e8:	af00      	add	r7, sp, #0
  4006ea:	60f8      	str	r0, [r7, #12]
  4006ec:	60b9      	str	r1, [r7, #8]
  4006ee:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4006f0:	687b      	ldr	r3, [r7, #4]
  4006f2:	f003 0310 	and.w	r3, r3, #16
  4006f6:	2b00      	cmp	r3, #0
  4006f8:	d020      	beq.n	40073c <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4006fa:	68fb      	ldr	r3, [r7, #12]
  4006fc:	68ba      	ldr	r2, [r7, #8]
  4006fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400702:	687b      	ldr	r3, [r7, #4]
  400704:	f003 0320 	and.w	r3, r3, #32
  400708:	2b00      	cmp	r3, #0
  40070a:	d004      	beq.n	400716 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40070c:	68fb      	ldr	r3, [r7, #12]
  40070e:	68ba      	ldr	r2, [r7, #8]
  400710:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400714:	e003      	b.n	40071e <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400716:	68fb      	ldr	r3, [r7, #12]
  400718:	68ba      	ldr	r2, [r7, #8]
  40071a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40071e:	687b      	ldr	r3, [r7, #4]
  400720:	f003 0340 	and.w	r3, r3, #64	; 0x40
  400724:	2b00      	cmp	r3, #0
  400726:	d004      	beq.n	400732 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400728:	68fb      	ldr	r3, [r7, #12]
  40072a:	68ba      	ldr	r2, [r7, #8]
  40072c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400730:	e008      	b.n	400744 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  400732:	68fb      	ldr	r3, [r7, #12]
  400734:	68ba      	ldr	r2, [r7, #8]
  400736:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  40073a:	e003      	b.n	400744 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  40073c:	68fb      	ldr	r3, [r7, #12]
  40073e:	68ba      	ldr	r2, [r7, #8]
  400740:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  400744:	bf00      	nop
  400746:	3714      	adds	r7, #20
  400748:	46bd      	mov	sp, r7
  40074a:	bc80      	pop	{r7}
  40074c:	4770      	bx	lr

0040074e <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40074e:	b480      	push	{r7}
  400750:	b083      	sub	sp, #12
  400752:	af00      	add	r7, sp, #0
  400754:	6078      	str	r0, [r7, #4]
  400756:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  400758:	687b      	ldr	r3, [r7, #4]
  40075a:	683a      	ldr	r2, [r7, #0]
  40075c:	641a      	str	r2, [r3, #64]	; 0x40
}
  40075e:	bf00      	nop
  400760:	370c      	adds	r7, #12
  400762:	46bd      	mov	sp, r7
  400764:	bc80      	pop	{r7}
  400766:	4770      	bx	lr

00400768 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400768:	b480      	push	{r7}
  40076a:	b083      	sub	sp, #12
  40076c:	af00      	add	r7, sp, #0
  40076e:	6078      	str	r0, [r7, #4]
  400770:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400772:	687b      	ldr	r3, [r7, #4]
  400774:	683a      	ldr	r2, [r7, #0]
  400776:	645a      	str	r2, [r3, #68]	; 0x44
}
  400778:	bf00      	nop
  40077a:	370c      	adds	r7, #12
  40077c:	46bd      	mov	sp, r7
  40077e:	bc80      	pop	{r7}
  400780:	4770      	bx	lr

00400782 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400782:	b480      	push	{r7}
  400784:	b083      	sub	sp, #12
  400786:	af00      	add	r7, sp, #0
  400788:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40078a:	687b      	ldr	r3, [r7, #4]
  40078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40078e:	4618      	mov	r0, r3
  400790:	370c      	adds	r7, #12
  400792:	46bd      	mov	sp, r7
  400794:	bc80      	pop	{r7}
  400796:	4770      	bx	lr

00400798 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400798:	b480      	push	{r7}
  40079a:	b083      	sub	sp, #12
  40079c:	af00      	add	r7, sp, #0
  40079e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4007a0:	687b      	ldr	r3, [r7, #4]
  4007a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4007a4:	4618      	mov	r0, r3
  4007a6:	370c      	adds	r7, #12
  4007a8:	46bd      	mov	sp, r7
  4007aa:	bc80      	pop	{r7}
  4007ac:	4770      	bx	lr
	...

004007b0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4007b0:	b590      	push	{r4, r7, lr}
  4007b2:	b087      	sub	sp, #28
  4007b4:	af02      	add	r7, sp, #8
  4007b6:	6078      	str	r0, [r7, #4]
  4007b8:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4007ba:	6878      	ldr	r0, [r7, #4]
  4007bc:	4b63      	ldr	r3, [pc, #396]	; (40094c <pio_configure_pin+0x19c>)
  4007be:	4798      	blx	r3
  4007c0:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4007c2:	683b      	ldr	r3, [r7, #0]
  4007c4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4007c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4007cc:	d067      	beq.n	40089e <pio_configure_pin+0xee>
  4007ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4007d2:	d809      	bhi.n	4007e8 <pio_configure_pin+0x38>
  4007d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4007d8:	d02b      	beq.n	400832 <pio_configure_pin+0x82>
  4007da:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4007de:	d043      	beq.n	400868 <pio_configure_pin+0xb8>
  4007e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4007e4:	d00a      	beq.n	4007fc <pio_configure_pin+0x4c>
  4007e6:	e0a9      	b.n	40093c <pio_configure_pin+0x18c>
  4007e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4007ec:	d07e      	beq.n	4008ec <pio_configure_pin+0x13c>
  4007ee:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4007f2:	d07b      	beq.n	4008ec <pio_configure_pin+0x13c>
  4007f4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4007f8:	d06c      	beq.n	4008d4 <pio_configure_pin+0x124>
  4007fa:	e09f      	b.n	40093c <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4007fc:	687b      	ldr	r3, [r7, #4]
  4007fe:	f003 031f 	and.w	r3, r3, #31
  400802:	2201      	movs	r2, #1
  400804:	fa02 f303 	lsl.w	r3, r2, r3
  400808:	461a      	mov	r2, r3
  40080a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40080e:	68f8      	ldr	r0, [r7, #12]
  400810:	4b4f      	ldr	r3, [pc, #316]	; (400950 <pio_configure_pin+0x1a0>)
  400812:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400814:	687b      	ldr	r3, [r7, #4]
  400816:	f003 031f 	and.w	r3, r3, #31
  40081a:	2201      	movs	r2, #1
  40081c:	fa02 f303 	lsl.w	r3, r2, r3
  400820:	4619      	mov	r1, r3
  400822:	683b      	ldr	r3, [r7, #0]
  400824:	f003 0301 	and.w	r3, r3, #1
  400828:	461a      	mov	r2, r3
  40082a:	68f8      	ldr	r0, [r7, #12]
  40082c:	4b49      	ldr	r3, [pc, #292]	; (400954 <pio_configure_pin+0x1a4>)
  40082e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400830:	e086      	b.n	400940 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400832:	687b      	ldr	r3, [r7, #4]
  400834:	f003 031f 	and.w	r3, r3, #31
  400838:	2201      	movs	r2, #1
  40083a:	fa02 f303 	lsl.w	r3, r2, r3
  40083e:	461a      	mov	r2, r3
  400840:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400844:	68f8      	ldr	r0, [r7, #12]
  400846:	4b42      	ldr	r3, [pc, #264]	; (400950 <pio_configure_pin+0x1a0>)
  400848:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40084a:	687b      	ldr	r3, [r7, #4]
  40084c:	f003 031f 	and.w	r3, r3, #31
  400850:	2201      	movs	r2, #1
  400852:	fa02 f303 	lsl.w	r3, r2, r3
  400856:	4619      	mov	r1, r3
  400858:	683b      	ldr	r3, [r7, #0]
  40085a:	f003 0301 	and.w	r3, r3, #1
  40085e:	461a      	mov	r2, r3
  400860:	68f8      	ldr	r0, [r7, #12]
  400862:	4b3c      	ldr	r3, [pc, #240]	; (400954 <pio_configure_pin+0x1a4>)
  400864:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400866:	e06b      	b.n	400940 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400868:	687b      	ldr	r3, [r7, #4]
  40086a:	f003 031f 	and.w	r3, r3, #31
  40086e:	2201      	movs	r2, #1
  400870:	fa02 f303 	lsl.w	r3, r2, r3
  400874:	461a      	mov	r2, r3
  400876:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40087a:	68f8      	ldr	r0, [r7, #12]
  40087c:	4b34      	ldr	r3, [pc, #208]	; (400950 <pio_configure_pin+0x1a0>)
  40087e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400880:	687b      	ldr	r3, [r7, #4]
  400882:	f003 031f 	and.w	r3, r3, #31
  400886:	2201      	movs	r2, #1
  400888:	fa02 f303 	lsl.w	r3, r2, r3
  40088c:	4619      	mov	r1, r3
  40088e:	683b      	ldr	r3, [r7, #0]
  400890:	f003 0301 	and.w	r3, r3, #1
  400894:	461a      	mov	r2, r3
  400896:	68f8      	ldr	r0, [r7, #12]
  400898:	4b2e      	ldr	r3, [pc, #184]	; (400954 <pio_configure_pin+0x1a4>)
  40089a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40089c:	e050      	b.n	400940 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40089e:	687b      	ldr	r3, [r7, #4]
  4008a0:	f003 031f 	and.w	r3, r3, #31
  4008a4:	2201      	movs	r2, #1
  4008a6:	fa02 f303 	lsl.w	r3, r2, r3
  4008aa:	461a      	mov	r2, r3
  4008ac:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4008b0:	68f8      	ldr	r0, [r7, #12]
  4008b2:	4b27      	ldr	r3, [pc, #156]	; (400950 <pio_configure_pin+0x1a0>)
  4008b4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4008b6:	687b      	ldr	r3, [r7, #4]
  4008b8:	f003 031f 	and.w	r3, r3, #31
  4008bc:	2201      	movs	r2, #1
  4008be:	fa02 f303 	lsl.w	r3, r2, r3
  4008c2:	4619      	mov	r1, r3
  4008c4:	683b      	ldr	r3, [r7, #0]
  4008c6:	f003 0301 	and.w	r3, r3, #1
  4008ca:	461a      	mov	r2, r3
  4008cc:	68f8      	ldr	r0, [r7, #12]
  4008ce:	4b21      	ldr	r3, [pc, #132]	; (400954 <pio_configure_pin+0x1a4>)
  4008d0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4008d2:	e035      	b.n	400940 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4008d4:	687b      	ldr	r3, [r7, #4]
  4008d6:	f003 031f 	and.w	r3, r3, #31
  4008da:	2201      	movs	r2, #1
  4008dc:	fa02 f303 	lsl.w	r3, r2, r3
  4008e0:	683a      	ldr	r2, [r7, #0]
  4008e2:	4619      	mov	r1, r3
  4008e4:	68f8      	ldr	r0, [r7, #12]
  4008e6:	4b1c      	ldr	r3, [pc, #112]	; (400958 <pio_configure_pin+0x1a8>)
  4008e8:	4798      	blx	r3
		break;
  4008ea:	e029      	b.n	400940 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4008ec:	687b      	ldr	r3, [r7, #4]
  4008ee:	f003 031f 	and.w	r3, r3, #31
  4008f2:	2201      	movs	r2, #1
  4008f4:	fa02 f303 	lsl.w	r3, r2, r3
  4008f8:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4008fa:	683b      	ldr	r3, [r7, #0]
  4008fc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400900:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400904:	bf0c      	ite	eq
  400906:	2301      	moveq	r3, #1
  400908:	2300      	movne	r3, #0
  40090a:	b2db      	uxtb	r3, r3
  40090c:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40090e:	683b      	ldr	r3, [r7, #0]
  400910:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400914:	2b00      	cmp	r3, #0
  400916:	bf14      	ite	ne
  400918:	2301      	movne	r3, #1
  40091a:	2300      	moveq	r3, #0
  40091c:	b2db      	uxtb	r3, r3
  40091e:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  400920:	683b      	ldr	r3, [r7, #0]
  400922:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400926:	2b00      	cmp	r3, #0
  400928:	bf14      	ite	ne
  40092a:	2301      	movne	r3, #1
  40092c:	2300      	moveq	r3, #0
  40092e:	b2db      	uxtb	r3, r3
  400930:	9300      	str	r3, [sp, #0]
  400932:	4603      	mov	r3, r0
  400934:	68f8      	ldr	r0, [r7, #12]
  400936:	4c09      	ldr	r4, [pc, #36]	; (40095c <pio_configure_pin+0x1ac>)
  400938:	47a0      	blx	r4
		break;
  40093a:	e001      	b.n	400940 <pio_configure_pin+0x190>

	default:
		return 0;
  40093c:	2300      	movs	r3, #0
  40093e:	e000      	b.n	400942 <pio_configure_pin+0x192>
	}

	return 1;
  400940:	2301      	movs	r3, #1
}
  400942:	4618      	mov	r0, r3
  400944:	3714      	adds	r7, #20
  400946:	46bd      	mov	sp, r7
  400948:	bd90      	pop	{r4, r7, pc}
  40094a:	bf00      	nop
  40094c:	00400961 	.word	0x00400961
  400950:	004004f1 	.word	0x004004f1
  400954:	00400491 	.word	0x00400491
  400958:	00400601 	.word	0x00400601
  40095c:	00400681 	.word	0x00400681

00400960 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  400960:	b480      	push	{r7}
  400962:	b085      	sub	sp, #20
  400964:	af00      	add	r7, sp, #0
  400966:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400968:	687b      	ldr	r3, [r7, #4]
  40096a:	095b      	lsrs	r3, r3, #5
  40096c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400970:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400974:	025b      	lsls	r3, r3, #9
  400976:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  400978:	68fb      	ldr	r3, [r7, #12]
}
  40097a:	4618      	mov	r0, r3
  40097c:	3714      	adds	r7, #20
  40097e:	46bd      	mov	sp, r7
  400980:	bc80      	pop	{r7}
  400982:	4770      	bx	lr

00400984 <pio_capture_enable>:
 * \brief Enable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
  400984:	b480      	push	{r7}
  400986:	b083      	sub	sp, #12
  400988:	af00      	add	r7, sp, #0
  40098a:	6078      	str	r0, [r7, #4]
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  40098c:	687b      	ldr	r3, [r7, #4]
  40098e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  400992:	f043 0201 	orr.w	r2, r3, #1
  400996:	687b      	ldr	r3, [r7, #4]
  400998:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pio_capture_enable_flag = true;
  40099c:	4b03      	ldr	r3, [pc, #12]	; (4009ac <pio_capture_enable+0x28>)
  40099e:	2201      	movs	r2, #1
  4009a0:	601a      	str	r2, [r3, #0]
}
  4009a2:	bf00      	nop
  4009a4:	370c      	adds	r7, #12
  4009a6:	46bd      	mov	sp, r7
  4009a8:	bc80      	pop	{r7}
  4009aa:	4770      	bx	lr
  4009ac:	20000ab4 	.word	0x20000ab4

004009b0 <pio_capture_disable>:
 * \brief Disable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_disable(Pio *p_pio)
{
  4009b0:	b480      	push	{r7}
  4009b2:	b083      	sub	sp, #12
  4009b4:	af00      	add	r7, sp, #0
  4009b6:	6078      	str	r0, [r7, #4]
	p_pio->PIO_PCMR &= (~PIO_PCMR_PCEN);
  4009b8:	687b      	ldr	r3, [r7, #4]
  4009ba:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4009be:	f023 0201 	bic.w	r2, r3, #1
  4009c2:	687b      	ldr	r3, [r7, #4]
  4009c4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pio_capture_enable_flag = false;
  4009c8:	4b03      	ldr	r3, [pc, #12]	; (4009d8 <pio_capture_disable+0x28>)
  4009ca:	2200      	movs	r2, #0
  4009cc:	601a      	str	r2, [r3, #0]
}
  4009ce:	bf00      	nop
  4009d0:	370c      	adds	r7, #12
  4009d2:	46bd      	mov	sp, r7
  4009d4:	bc80      	pop	{r7}
  4009d6:	4770      	bx	lr
  4009d8:	20000ab4 	.word	0x20000ab4

004009dc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4009dc:	b580      	push	{r7, lr}
  4009de:	b084      	sub	sp, #16
  4009e0:	af00      	add	r7, sp, #0
  4009e2:	6078      	str	r0, [r7, #4]
  4009e4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4009e6:	6878      	ldr	r0, [r7, #4]
  4009e8:	4b2c      	ldr	r3, [pc, #176]	; (400a9c <pio_handler_process+0xc0>)
  4009ea:	4798      	blx	r3
  4009ec:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4009ee:	6878      	ldr	r0, [r7, #4]
  4009f0:	4b2b      	ldr	r3, [pc, #172]	; (400aa0 <pio_handler_process+0xc4>)
  4009f2:	4798      	blx	r3
  4009f4:	4602      	mov	r2, r0
  4009f6:	68fb      	ldr	r3, [r7, #12]
  4009f8:	4013      	ands	r3, r2
  4009fa:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4009fc:	68fb      	ldr	r3, [r7, #12]
  4009fe:	2b00      	cmp	r3, #0
  400a00:	d03c      	beq.n	400a7c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400a02:	2300      	movs	r3, #0
  400a04:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400a06:	e034      	b.n	400a72 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400a08:	4a26      	ldr	r2, [pc, #152]	; (400aa4 <pio_handler_process+0xc8>)
  400a0a:	68bb      	ldr	r3, [r7, #8]
  400a0c:	011b      	lsls	r3, r3, #4
  400a0e:	4413      	add	r3, r2
  400a10:	681a      	ldr	r2, [r3, #0]
  400a12:	683b      	ldr	r3, [r7, #0]
  400a14:	429a      	cmp	r2, r3
  400a16:	d126      	bne.n	400a66 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a18:	4a22      	ldr	r2, [pc, #136]	; (400aa4 <pio_handler_process+0xc8>)
  400a1a:	68bb      	ldr	r3, [r7, #8]
  400a1c:	011b      	lsls	r3, r3, #4
  400a1e:	4413      	add	r3, r2
  400a20:	3304      	adds	r3, #4
  400a22:	681a      	ldr	r2, [r3, #0]
  400a24:	68fb      	ldr	r3, [r7, #12]
  400a26:	4013      	ands	r3, r2
  400a28:	2b00      	cmp	r3, #0
  400a2a:	d01c      	beq.n	400a66 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a2c:	4a1d      	ldr	r2, [pc, #116]	; (400aa4 <pio_handler_process+0xc8>)
  400a2e:	68bb      	ldr	r3, [r7, #8]
  400a30:	011b      	lsls	r3, r3, #4
  400a32:	4413      	add	r3, r2
  400a34:	330c      	adds	r3, #12
  400a36:	681b      	ldr	r3, [r3, #0]
  400a38:	491a      	ldr	r1, [pc, #104]	; (400aa4 <pio_handler_process+0xc8>)
  400a3a:	68ba      	ldr	r2, [r7, #8]
  400a3c:	0112      	lsls	r2, r2, #4
  400a3e:	440a      	add	r2, r1
  400a40:	6810      	ldr	r0, [r2, #0]
  400a42:	4918      	ldr	r1, [pc, #96]	; (400aa4 <pio_handler_process+0xc8>)
  400a44:	68ba      	ldr	r2, [r7, #8]
  400a46:	0112      	lsls	r2, r2, #4
  400a48:	440a      	add	r2, r1
  400a4a:	3204      	adds	r2, #4
  400a4c:	6812      	ldr	r2, [r2, #0]
  400a4e:	4611      	mov	r1, r2
  400a50:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400a52:	4a14      	ldr	r2, [pc, #80]	; (400aa4 <pio_handler_process+0xc8>)
  400a54:	68bb      	ldr	r3, [r7, #8]
  400a56:	011b      	lsls	r3, r3, #4
  400a58:	4413      	add	r3, r2
  400a5a:	3304      	adds	r3, #4
  400a5c:	681b      	ldr	r3, [r3, #0]
  400a5e:	43db      	mvns	r3, r3
  400a60:	68fa      	ldr	r2, [r7, #12]
  400a62:	4013      	ands	r3, r2
  400a64:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400a66:	68bb      	ldr	r3, [r7, #8]
  400a68:	3301      	adds	r3, #1
  400a6a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a6c:	68bb      	ldr	r3, [r7, #8]
  400a6e:	2b06      	cmp	r3, #6
  400a70:	d803      	bhi.n	400a7a <pio_handler_process+0x9e>
		while (status != 0) {
  400a72:	68fb      	ldr	r3, [r7, #12]
  400a74:	2b00      	cmp	r3, #0
  400a76:	d1c7      	bne.n	400a08 <pio_handler_process+0x2c>
  400a78:	e000      	b.n	400a7c <pio_handler_process+0xa0>
				break;
  400a7a:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400a7c:	4b0a      	ldr	r3, [pc, #40]	; (400aa8 <pio_handler_process+0xcc>)
  400a7e:	681b      	ldr	r3, [r3, #0]
  400a80:	2b00      	cmp	r3, #0
  400a82:	d007      	beq.n	400a94 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400a84:	4b09      	ldr	r3, [pc, #36]	; (400aac <pio_handler_process+0xd0>)
  400a86:	681b      	ldr	r3, [r3, #0]
  400a88:	2b00      	cmp	r3, #0
  400a8a:	d003      	beq.n	400a94 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400a8c:	4b07      	ldr	r3, [pc, #28]	; (400aac <pio_handler_process+0xd0>)
  400a8e:	681b      	ldr	r3, [r3, #0]
  400a90:	6878      	ldr	r0, [r7, #4]
  400a92:	4798      	blx	r3
		}
	}
#endif
}
  400a94:	bf00      	nop
  400a96:	3710      	adds	r7, #16
  400a98:	46bd      	mov	sp, r7
  400a9a:	bd80      	pop	{r7, pc}
  400a9c:	00400783 	.word	0x00400783
  400aa0:	00400799 	.word	0x00400799
  400aa4:	200009dc 	.word	0x200009dc
  400aa8:	20000ab4 	.word	0x20000ab4
  400aac:	20000a50 	.word	0x20000a50

00400ab0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400ab0:	b580      	push	{r7, lr}
  400ab2:	b086      	sub	sp, #24
  400ab4:	af00      	add	r7, sp, #0
  400ab6:	60f8      	str	r0, [r7, #12]
  400ab8:	60b9      	str	r1, [r7, #8]
  400aba:	607a      	str	r2, [r7, #4]
  400abc:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400abe:	4b21      	ldr	r3, [pc, #132]	; (400b44 <pio_handler_set+0x94>)
  400ac0:	681b      	ldr	r3, [r3, #0]
  400ac2:	2b06      	cmp	r3, #6
  400ac4:	d901      	bls.n	400aca <pio_handler_set+0x1a>
		return 1;
  400ac6:	2301      	movs	r3, #1
  400ac8:	e038      	b.n	400b3c <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400aca:	2300      	movs	r3, #0
  400acc:	75fb      	strb	r3, [r7, #23]
  400ace:	e011      	b.n	400af4 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400ad0:	7dfb      	ldrb	r3, [r7, #23]
  400ad2:	011b      	lsls	r3, r3, #4
  400ad4:	4a1c      	ldr	r2, [pc, #112]	; (400b48 <pio_handler_set+0x98>)
  400ad6:	4413      	add	r3, r2
  400ad8:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400ada:	693b      	ldr	r3, [r7, #16]
  400adc:	681a      	ldr	r2, [r3, #0]
  400ade:	68bb      	ldr	r3, [r7, #8]
  400ae0:	429a      	cmp	r2, r3
  400ae2:	d104      	bne.n	400aee <pio_handler_set+0x3e>
  400ae4:	693b      	ldr	r3, [r7, #16]
  400ae6:	685a      	ldr	r2, [r3, #4]
  400ae8:	687b      	ldr	r3, [r7, #4]
  400aea:	429a      	cmp	r2, r3
  400aec:	d008      	beq.n	400b00 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400aee:	7dfb      	ldrb	r3, [r7, #23]
  400af0:	3301      	adds	r3, #1
  400af2:	75fb      	strb	r3, [r7, #23]
  400af4:	7dfa      	ldrb	r2, [r7, #23]
  400af6:	4b13      	ldr	r3, [pc, #76]	; (400b44 <pio_handler_set+0x94>)
  400af8:	681b      	ldr	r3, [r3, #0]
  400afa:	429a      	cmp	r2, r3
  400afc:	d9e8      	bls.n	400ad0 <pio_handler_set+0x20>
  400afe:	e000      	b.n	400b02 <pio_handler_set+0x52>
			break;
  400b00:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400b02:	693b      	ldr	r3, [r7, #16]
  400b04:	68ba      	ldr	r2, [r7, #8]
  400b06:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400b08:	693b      	ldr	r3, [r7, #16]
  400b0a:	687a      	ldr	r2, [r7, #4]
  400b0c:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  400b0e:	693b      	ldr	r3, [r7, #16]
  400b10:	683a      	ldr	r2, [r7, #0]
  400b12:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400b14:	693b      	ldr	r3, [r7, #16]
  400b16:	6a3a      	ldr	r2, [r7, #32]
  400b18:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400b1a:	7dfa      	ldrb	r2, [r7, #23]
  400b1c:	4b09      	ldr	r3, [pc, #36]	; (400b44 <pio_handler_set+0x94>)
  400b1e:	681b      	ldr	r3, [r3, #0]
  400b20:	3301      	adds	r3, #1
  400b22:	429a      	cmp	r2, r3
  400b24:	d104      	bne.n	400b30 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400b26:	4b07      	ldr	r3, [pc, #28]	; (400b44 <pio_handler_set+0x94>)
  400b28:	681b      	ldr	r3, [r3, #0]
  400b2a:	3301      	adds	r3, #1
  400b2c:	4a05      	ldr	r2, [pc, #20]	; (400b44 <pio_handler_set+0x94>)
  400b2e:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400b30:	683a      	ldr	r2, [r7, #0]
  400b32:	6879      	ldr	r1, [r7, #4]
  400b34:	68f8      	ldr	r0, [r7, #12]
  400b36:	4b05      	ldr	r3, [pc, #20]	; (400b4c <pio_handler_set+0x9c>)
  400b38:	4798      	blx	r3

	return 0;
  400b3a:	2300      	movs	r3, #0
}
  400b3c:	4618      	mov	r0, r3
  400b3e:	3718      	adds	r7, #24
  400b40:	46bd      	mov	sp, r7
  400b42:	bd80      	pop	{r7, pc}
  400b44:	20000a4c 	.word	0x20000a4c
  400b48:	200009dc 	.word	0x200009dc
  400b4c:	004006e5 	.word	0x004006e5

00400b50 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400b50:	b580      	push	{r7, lr}
  400b52:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400b54:	210b      	movs	r1, #11
  400b56:	4802      	ldr	r0, [pc, #8]	; (400b60 <PIOA_Handler+0x10>)
  400b58:	4b02      	ldr	r3, [pc, #8]	; (400b64 <PIOA_Handler+0x14>)
  400b5a:	4798      	blx	r3
}
  400b5c:	bf00      	nop
  400b5e:	bd80      	pop	{r7, pc}
  400b60:	400e0e00 	.word	0x400e0e00
  400b64:	004009dd 	.word	0x004009dd

00400b68 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400b68:	b580      	push	{r7, lr}
  400b6a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400b6c:	210c      	movs	r1, #12
  400b6e:	4802      	ldr	r0, [pc, #8]	; (400b78 <PIOB_Handler+0x10>)
  400b70:	4b02      	ldr	r3, [pc, #8]	; (400b7c <PIOB_Handler+0x14>)
  400b72:	4798      	blx	r3
}
  400b74:	bf00      	nop
  400b76:	bd80      	pop	{r7, pc}
  400b78:	400e1000 	.word	0x400e1000
  400b7c:	004009dd 	.word	0x004009dd

00400b80 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400b80:	b480      	push	{r7}
  400b82:	b085      	sub	sp, #20
  400b84:	af00      	add	r7, sp, #0
  400b86:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b88:	491c      	ldr	r1, [pc, #112]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400b8a:	4b1c      	ldr	r3, [pc, #112]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400b92:	687b      	ldr	r3, [r7, #4]
  400b94:	4313      	orrs	r3, r2
  400b96:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b98:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400b9c:	60fb      	str	r3, [r7, #12]
  400b9e:	e007      	b.n	400bb0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ba0:	68fb      	ldr	r3, [r7, #12]
  400ba2:	2b00      	cmp	r3, #0
  400ba4:	d101      	bne.n	400baa <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400ba6:	2301      	movs	r3, #1
  400ba8:	e023      	b.n	400bf2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400baa:	68fb      	ldr	r3, [r7, #12]
  400bac:	3b01      	subs	r3, #1
  400bae:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bb0:	4b12      	ldr	r3, [pc, #72]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400bb4:	f003 0308 	and.w	r3, r3, #8
  400bb8:	2b00      	cmp	r3, #0
  400bba:	d0f1      	beq.n	400ba0 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400bbc:	4a0f      	ldr	r2, [pc, #60]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400bbe:	4b0f      	ldr	r3, [pc, #60]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bc2:	f023 0303 	bic.w	r3, r3, #3
  400bc6:	f043 0302 	orr.w	r3, r3, #2
  400bca:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400bd0:	60fb      	str	r3, [r7, #12]
  400bd2:	e007      	b.n	400be4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400bd4:	68fb      	ldr	r3, [r7, #12]
  400bd6:	2b00      	cmp	r3, #0
  400bd8:	d101      	bne.n	400bde <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400bda:	2301      	movs	r3, #1
  400bdc:	e009      	b.n	400bf2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400bde:	68fb      	ldr	r3, [r7, #12]
  400be0:	3b01      	subs	r3, #1
  400be2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400be4:	4b05      	ldr	r3, [pc, #20]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400be8:	f003 0308 	and.w	r3, r3, #8
  400bec:	2b00      	cmp	r3, #0
  400bee:	d0f1      	beq.n	400bd4 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  400bf0:	2300      	movs	r3, #0
}
  400bf2:	4618      	mov	r0, r3
  400bf4:	3714      	adds	r7, #20
  400bf6:	46bd      	mov	sp, r7
  400bf8:	bc80      	pop	{r7}
  400bfa:	4770      	bx	lr
  400bfc:	400e0400 	.word	0x400e0400

00400c00 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400c00:	b480      	push	{r7}
  400c02:	b083      	sub	sp, #12
  400c04:	af00      	add	r7, sp, #0
  400c06:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400c08:	687b      	ldr	r3, [r7, #4]
  400c0a:	2b01      	cmp	r3, #1
  400c0c:	d107      	bne.n	400c1e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400c0e:	4a08      	ldr	r2, [pc, #32]	; (400c30 <pmc_switch_sclk_to_32kxtal+0x30>)
  400c10:	4b07      	ldr	r3, [pc, #28]	; (400c30 <pmc_switch_sclk_to_32kxtal+0x30>)
  400c12:	689b      	ldr	r3, [r3, #8]
  400c14:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  400c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  400c1c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400c1e:	4b04      	ldr	r3, [pc, #16]	; (400c30 <pmc_switch_sclk_to_32kxtal+0x30>)
  400c20:	4a04      	ldr	r2, [pc, #16]	; (400c34 <pmc_switch_sclk_to_32kxtal+0x34>)
  400c22:	601a      	str	r2, [r3, #0]
}
  400c24:	bf00      	nop
  400c26:	370c      	adds	r7, #12
  400c28:	46bd      	mov	sp, r7
  400c2a:	bc80      	pop	{r7}
  400c2c:	4770      	bx	lr
  400c2e:	bf00      	nop
  400c30:	400e1410 	.word	0x400e1410
  400c34:	a5000008 	.word	0xa5000008

00400c38 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400c38:	b480      	push	{r7}
  400c3a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400c3c:	4b09      	ldr	r3, [pc, #36]	; (400c64 <pmc_osc_is_ready_32kxtal+0x2c>)
  400c3e:	695b      	ldr	r3, [r3, #20]
  400c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400c44:	2b00      	cmp	r3, #0
  400c46:	d007      	beq.n	400c58 <pmc_osc_is_ready_32kxtal+0x20>
  400c48:	4b07      	ldr	r3, [pc, #28]	; (400c68 <pmc_osc_is_ready_32kxtal+0x30>)
  400c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400c50:	2b00      	cmp	r3, #0
  400c52:	d001      	beq.n	400c58 <pmc_osc_is_ready_32kxtal+0x20>
  400c54:	2301      	movs	r3, #1
  400c56:	e000      	b.n	400c5a <pmc_osc_is_ready_32kxtal+0x22>
  400c58:	2300      	movs	r3, #0
}
  400c5a:	4618      	mov	r0, r3
  400c5c:	46bd      	mov	sp, r7
  400c5e:	bc80      	pop	{r7}
  400c60:	4770      	bx	lr
  400c62:	bf00      	nop
  400c64:	400e1410 	.word	0x400e1410
  400c68:	400e0400 	.word	0x400e0400

00400c6c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400c6c:	b480      	push	{r7}
  400c6e:	b083      	sub	sp, #12
  400c70:	af00      	add	r7, sp, #0
  400c72:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400c74:	4a18      	ldr	r2, [pc, #96]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400c76:	4b18      	ldr	r3, [pc, #96]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400c78:	6a1b      	ldr	r3, [r3, #32]
  400c7a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400c7e:	f043 0308 	orr.w	r3, r3, #8
  400c82:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400c84:	bf00      	nop
  400c86:	4b14      	ldr	r3, [pc, #80]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400c8e:	2b00      	cmp	r3, #0
  400c90:	d0f9      	beq.n	400c86 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400c92:	4911      	ldr	r1, [pc, #68]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400c94:	4b10      	ldr	r3, [pc, #64]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400c96:	6a1b      	ldr	r3, [r3, #32]
  400c98:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400ca0:	687a      	ldr	r2, [r7, #4]
  400ca2:	4313      	orrs	r3, r2
  400ca4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400ca8:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400caa:	bf00      	nop
  400cac:	4b0a      	ldr	r3, [pc, #40]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400cb4:	2b00      	cmp	r3, #0
  400cb6:	d0f9      	beq.n	400cac <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400cb8:	4a07      	ldr	r2, [pc, #28]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400cba:	4b07      	ldr	r3, [pc, #28]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400cbc:	6a1b      	ldr	r3, [r3, #32]
  400cbe:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  400cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400cc6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400cca:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400ccc:	bf00      	nop
  400cce:	370c      	adds	r7, #12
  400cd0:	46bd      	mov	sp, r7
  400cd2:	bc80      	pop	{r7}
  400cd4:	4770      	bx	lr
  400cd6:	bf00      	nop
  400cd8:	400e0400 	.word	0x400e0400

00400cdc <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400cdc:	b480      	push	{r7}
  400cde:	b083      	sub	sp, #12
  400ce0:	af00      	add	r7, sp, #0
  400ce2:	6078      	str	r0, [r7, #4]
  400ce4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400ce6:	687b      	ldr	r3, [r7, #4]
  400ce8:	2b00      	cmp	r3, #0
  400cea:	d008      	beq.n	400cfe <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400cec:	4916      	ldr	r1, [pc, #88]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400cee:	4b16      	ldr	r3, [pc, #88]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400cf0:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400cf2:	4a16      	ldr	r2, [pc, #88]	; (400d4c <pmc_switch_mainck_to_xtal+0x70>)
  400cf4:	401a      	ands	r2, r3
  400cf6:	4b16      	ldr	r3, [pc, #88]	; (400d50 <pmc_switch_mainck_to_xtal+0x74>)
  400cf8:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400cfa:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400cfc:	e01e      	b.n	400d3c <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400cfe:	4912      	ldr	r1, [pc, #72]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400d00:	4b11      	ldr	r3, [pc, #68]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400d02:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400d04:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400d08:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400d0c:	683a      	ldr	r2, [r7, #0]
  400d0e:	0212      	lsls	r2, r2, #8
  400d10:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400d12:	4313      	orrs	r3, r2
  400d14:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400d18:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d1c:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400d1e:	bf00      	nop
  400d20:	4b09      	ldr	r3, [pc, #36]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d24:	f003 0301 	and.w	r3, r3, #1
  400d28:	2b00      	cmp	r3, #0
  400d2a:	d0f9      	beq.n	400d20 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400d2c:	4a06      	ldr	r2, [pc, #24]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400d2e:	4b06      	ldr	r3, [pc, #24]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400d30:	6a1b      	ldr	r3, [r3, #32]
  400d32:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400d3a:	6213      	str	r3, [r2, #32]
}
  400d3c:	bf00      	nop
  400d3e:	370c      	adds	r7, #12
  400d40:	46bd      	mov	sp, r7
  400d42:	bc80      	pop	{r7}
  400d44:	4770      	bx	lr
  400d46:	bf00      	nop
  400d48:	400e0400 	.word	0x400e0400
  400d4c:	fec8fffc 	.word	0xfec8fffc
  400d50:	01370002 	.word	0x01370002

00400d54 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400d54:	b480      	push	{r7}
  400d56:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400d58:	4b03      	ldr	r3, [pc, #12]	; (400d68 <pmc_osc_is_ready_mainck+0x14>)
  400d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400d60:	4618      	mov	r0, r3
  400d62:	46bd      	mov	sp, r7
  400d64:	bc80      	pop	{r7}
  400d66:	4770      	bx	lr
  400d68:	400e0400 	.word	0x400e0400

00400d6c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400d6c:	b480      	push	{r7}
  400d6e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400d70:	4b03      	ldr	r3, [pc, #12]	; (400d80 <pmc_disable_pllack+0x14>)
  400d72:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400d76:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400d78:	bf00      	nop
  400d7a:	46bd      	mov	sp, r7
  400d7c:	bc80      	pop	{r7}
  400d7e:	4770      	bx	lr
  400d80:	400e0400 	.word	0x400e0400

00400d84 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400d84:	b480      	push	{r7}
  400d86:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400d88:	4b03      	ldr	r3, [pc, #12]	; (400d98 <pmc_is_locked_pllack+0x14>)
  400d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d8c:	f003 0302 	and.w	r3, r3, #2
}
  400d90:	4618      	mov	r0, r3
  400d92:	46bd      	mov	sp, r7
  400d94:	bc80      	pop	{r7}
  400d96:	4770      	bx	lr
  400d98:	400e0400 	.word	0x400e0400

00400d9c <pmc_enable_pllbck>:
 * \param mulb PLLB multiplier.
 * \param pllbcount PLLB counter.
 * \param divb Divider.
 */
void pmc_enable_pllbck(uint32_t mulb, uint32_t pllbcount, uint32_t divb)
{
  400d9c:	b580      	push	{r7, lr}
  400d9e:	b084      	sub	sp, #16
  400da0:	af00      	add	r7, sp, #0
  400da2:	60f8      	str	r0, [r7, #12]
  400da4:	60b9      	str	r1, [r7, #8]
  400da6:	607a      	str	r2, [r7, #4]
	/* first disable the PLL to unlock the lock */
	pmc_disable_pllbck();
  400da8:	4b0d      	ldr	r3, [pc, #52]	; (400de0 <pmc_enable_pllbck+0x44>)
  400daa:	4798      	blx	r3

#if SAMG55
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(divb) |
		CKGR_PLLAR_PLLACOUNT(pllbcount) | CKGR_PLLAR_MULA(mulb);
#else
	PMC->CKGR_PLLBR =
  400dac:	480d      	ldr	r0, [pc, #52]	; (400de4 <pmc_enable_pllbck+0x48>)
			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
  400dae:	687b      	ldr	r3, [r7, #4]
  400db0:	b2da      	uxtb	r2, r3
  400db2:	68bb      	ldr	r3, [r7, #8]
  400db4:	021b      	lsls	r3, r3, #8
  400db6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
  400dba:	431a      	orrs	r2, r3
			| CKGR_PLLBR_MULB(mulb);
  400dbc:	68fb      	ldr	r3, [r7, #12]
  400dbe:	0419      	lsls	r1, r3, #16
  400dc0:	4b09      	ldr	r3, [pc, #36]	; (400de8 <pmc_enable_pllbck+0x4c>)
  400dc2:	400b      	ands	r3, r1
  400dc4:	4313      	orrs	r3, r2
	PMC->CKGR_PLLBR =
  400dc6:	62c3      	str	r3, [r0, #44]	; 0x2c
#endif
	while ((PMC->PMC_SR & PMC_SR_LOCKB) == 0);
  400dc8:	bf00      	nop
  400dca:	4b06      	ldr	r3, [pc, #24]	; (400de4 <pmc_enable_pllbck+0x48>)
  400dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400dce:	f003 0304 	and.w	r3, r3, #4
  400dd2:	2b00      	cmp	r3, #0
  400dd4:	d0f9      	beq.n	400dca <pmc_enable_pllbck+0x2e>
}
  400dd6:	bf00      	nop
  400dd8:	3710      	adds	r7, #16
  400dda:	46bd      	mov	sp, r7
  400ddc:	bd80      	pop	{r7, pc}
  400dde:	bf00      	nop
  400de0:	00400ded 	.word	0x00400ded
  400de4:	400e0400 	.word	0x400e0400
  400de8:	07ff0000 	.word	0x07ff0000

00400dec <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  400dec:	b480      	push	{r7}
  400dee:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  400df0:	4b03      	ldr	r3, [pc, #12]	; (400e00 <pmc_disable_pllbck+0x14>)
  400df2:	2200      	movs	r2, #0
  400df4:	62da      	str	r2, [r3, #44]	; 0x2c
}
  400df6:	bf00      	nop
  400df8:	46bd      	mov	sp, r7
  400dfa:	bc80      	pop	{r7}
  400dfc:	4770      	bx	lr
  400dfe:	bf00      	nop
  400e00:	400e0400 	.word	0x400e0400

00400e04 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  400e04:	b480      	push	{r7}
  400e06:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  400e08:	4b03      	ldr	r3, [pc, #12]	; (400e18 <pmc_is_locked_pllbck+0x14>)
  400e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e0c:	f003 0304 	and.w	r3, r3, #4
}
  400e10:	4618      	mov	r0, r3
  400e12:	46bd      	mov	sp, r7
  400e14:	bc80      	pop	{r7}
  400e16:	4770      	bx	lr
  400e18:	400e0400 	.word	0x400e0400

00400e1c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400e1c:	b480      	push	{r7}
  400e1e:	b083      	sub	sp, #12
  400e20:	af00      	add	r7, sp, #0
  400e22:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400e24:	687b      	ldr	r3, [r7, #4]
  400e26:	2b22      	cmp	r3, #34	; 0x22
  400e28:	d901      	bls.n	400e2e <pmc_enable_periph_clk+0x12>
		return 1;
  400e2a:	2301      	movs	r3, #1
  400e2c:	e02f      	b.n	400e8e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400e2e:	687b      	ldr	r3, [r7, #4]
  400e30:	2b1f      	cmp	r3, #31
  400e32:	d813      	bhi.n	400e5c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400e34:	4b18      	ldr	r3, [pc, #96]	; (400e98 <pmc_enable_periph_clk+0x7c>)
  400e36:	699a      	ldr	r2, [r3, #24]
  400e38:	2101      	movs	r1, #1
  400e3a:	687b      	ldr	r3, [r7, #4]
  400e3c:	fa01 f303 	lsl.w	r3, r1, r3
  400e40:	401a      	ands	r2, r3
  400e42:	2101      	movs	r1, #1
  400e44:	687b      	ldr	r3, [r7, #4]
  400e46:	fa01 f303 	lsl.w	r3, r1, r3
  400e4a:	429a      	cmp	r2, r3
  400e4c:	d01e      	beq.n	400e8c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400e4e:	4a12      	ldr	r2, [pc, #72]	; (400e98 <pmc_enable_periph_clk+0x7c>)
  400e50:	2101      	movs	r1, #1
  400e52:	687b      	ldr	r3, [r7, #4]
  400e54:	fa01 f303 	lsl.w	r3, r1, r3
  400e58:	6113      	str	r3, [r2, #16]
  400e5a:	e017      	b.n	400e8c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400e5c:	687b      	ldr	r3, [r7, #4]
  400e5e:	3b20      	subs	r3, #32
  400e60:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400e62:	4b0d      	ldr	r3, [pc, #52]	; (400e98 <pmc_enable_periph_clk+0x7c>)
  400e64:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400e68:	2101      	movs	r1, #1
  400e6a:	687b      	ldr	r3, [r7, #4]
  400e6c:	fa01 f303 	lsl.w	r3, r1, r3
  400e70:	401a      	ands	r2, r3
  400e72:	2101      	movs	r1, #1
  400e74:	687b      	ldr	r3, [r7, #4]
  400e76:	fa01 f303 	lsl.w	r3, r1, r3
  400e7a:	429a      	cmp	r2, r3
  400e7c:	d006      	beq.n	400e8c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400e7e:	4a06      	ldr	r2, [pc, #24]	; (400e98 <pmc_enable_periph_clk+0x7c>)
  400e80:	2101      	movs	r1, #1
  400e82:	687b      	ldr	r3, [r7, #4]
  400e84:	fa01 f303 	lsl.w	r3, r1, r3
  400e88:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400e8c:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400e8e:	4618      	mov	r0, r3
  400e90:	370c      	adds	r7, #12
  400e92:	46bd      	mov	sp, r7
  400e94:	bc80      	pop	{r7}
  400e96:	4770      	bx	lr
  400e98:	400e0400 	.word	0x400e0400

00400e9c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400e9c:	b480      	push	{r7}
  400e9e:	b087      	sub	sp, #28
  400ea0:	af00      	add	r7, sp, #0
  400ea2:	60f8      	str	r0, [r7, #12]
  400ea4:	60b9      	str	r1, [r7, #8]
  400ea6:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400ea8:	68fa      	ldr	r2, [r7, #12]
  400eaa:	68bb      	ldr	r3, [r7, #8]
  400eac:	019b      	lsls	r3, r3, #6
  400eae:	4413      	add	r3, r2
  400eb0:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400eb2:	697b      	ldr	r3, [r7, #20]
  400eb4:	2202      	movs	r2, #2
  400eb6:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400eb8:	697b      	ldr	r3, [r7, #20]
  400eba:	f04f 32ff 	mov.w	r2, #4294967295
  400ebe:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400ec0:	697b      	ldr	r3, [r7, #20]
  400ec2:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400ec4:	697b      	ldr	r3, [r7, #20]
  400ec6:	687a      	ldr	r2, [r7, #4]
  400ec8:	605a      	str	r2, [r3, #4]
}
  400eca:	bf00      	nop
  400ecc:	371c      	adds	r7, #28
  400ece:	46bd      	mov	sp, r7
  400ed0:	bc80      	pop	{r7}
  400ed2:	4770      	bx	lr

00400ed4 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400ed4:	b480      	push	{r7}
  400ed6:	b083      	sub	sp, #12
  400ed8:	af00      	add	r7, sp, #0
  400eda:	6078      	str	r0, [r7, #4]
  400edc:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400ede:	687a      	ldr	r2, [r7, #4]
  400ee0:	683b      	ldr	r3, [r7, #0]
  400ee2:	019b      	lsls	r3, r3, #6
  400ee4:	4413      	add	r3, r2
  400ee6:	2205      	movs	r2, #5
  400ee8:	601a      	str	r2, [r3, #0]
}
  400eea:	bf00      	nop
  400eec:	370c      	adds	r7, #12
  400eee:	46bd      	mov	sp, r7
  400ef0:	bc80      	pop	{r7}
  400ef2:	4770      	bx	lr

00400ef4 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  400ef4:	b480      	push	{r7}
  400ef6:	b085      	sub	sp, #20
  400ef8:	af00      	add	r7, sp, #0
  400efa:	60f8      	str	r0, [r7, #12]
  400efc:	60b9      	str	r1, [r7, #8]
  400efe:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400f00:	68fa      	ldr	r2, [r7, #12]
  400f02:	68bb      	ldr	r3, [r7, #8]
  400f04:	019b      	lsls	r3, r3, #6
  400f06:	4413      	add	r3, r2
  400f08:	331c      	adds	r3, #28
  400f0a:	687a      	ldr	r2, [r7, #4]
  400f0c:	601a      	str	r2, [r3, #0]
}
  400f0e:	bf00      	nop
  400f10:	3714      	adds	r7, #20
  400f12:	46bd      	mov	sp, r7
  400f14:	bc80      	pop	{r7}
  400f16:	4770      	bx	lr

00400f18 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  400f18:	b480      	push	{r7}
  400f1a:	b087      	sub	sp, #28
  400f1c:	af00      	add	r7, sp, #0
  400f1e:	60f8      	str	r0, [r7, #12]
  400f20:	60b9      	str	r1, [r7, #8]
  400f22:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400f24:	68fa      	ldr	r2, [r7, #12]
  400f26:	68bb      	ldr	r3, [r7, #8]
  400f28:	019b      	lsls	r3, r3, #6
  400f2a:	4413      	add	r3, r2
  400f2c:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  400f2e:	697b      	ldr	r3, [r7, #20]
  400f30:	687a      	ldr	r2, [r7, #4]
  400f32:	625a      	str	r2, [r3, #36]	; 0x24
}
  400f34:	bf00      	nop
  400f36:	371c      	adds	r7, #28
  400f38:	46bd      	mov	sp, r7
  400f3a:	bc80      	pop	{r7}
  400f3c:	4770      	bx	lr

00400f3e <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400f3e:	b480      	push	{r7}
  400f40:	b085      	sub	sp, #20
  400f42:	af00      	add	r7, sp, #0
  400f44:	6078      	str	r0, [r7, #4]
  400f46:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400f48:	687a      	ldr	r2, [r7, #4]
  400f4a:	683b      	ldr	r3, [r7, #0]
  400f4c:	019b      	lsls	r3, r3, #6
  400f4e:	4413      	add	r3, r2
  400f50:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  400f52:	68fb      	ldr	r3, [r7, #12]
  400f54:	6a1b      	ldr	r3, [r3, #32]
}
  400f56:	4618      	mov	r0, r3
  400f58:	3714      	adds	r7, #20
  400f5a:	46bd      	mov	sp, r7
  400f5c:	bc80      	pop	{r7}
  400f5e:	4770      	bx	lr

00400f60 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400f60:	b480      	push	{r7}
  400f62:	b08d      	sub	sp, #52	; 0x34
  400f64:	af00      	add	r7, sp, #0
  400f66:	60f8      	str	r0, [r7, #12]
  400f68:	60b9      	str	r1, [r7, #8]
  400f6a:	607a      	str	r2, [r7, #4]
  400f6c:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400f6e:	2302      	movs	r3, #2
  400f70:	613b      	str	r3, [r7, #16]
  400f72:	2308      	movs	r3, #8
  400f74:	617b      	str	r3, [r7, #20]
  400f76:	2320      	movs	r3, #32
  400f78:	61bb      	str	r3, [r7, #24]
  400f7a:	2380      	movs	r3, #128	; 0x80
  400f7c:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  400f80:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400f82:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400f84:	2300      	movs	r3, #0
  400f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  400f88:	e01a      	b.n	400fc0 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  400f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f8c:	009b      	lsls	r3, r3, #2
  400f8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400f92:	4413      	add	r3, r2
  400f94:	f853 3c20 	ldr.w	r3, [r3, #-32]
  400f98:	68ba      	ldr	r2, [r7, #8]
  400f9a:	fbb2 f3f3 	udiv	r3, r2, r3
  400f9e:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  400fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400fa2:	0c1b      	lsrs	r3, r3, #16
  400fa4:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  400fa6:	68fa      	ldr	r2, [r7, #12]
  400fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400faa:	429a      	cmp	r2, r3
  400fac:	d901      	bls.n	400fb2 <tc_find_mck_divisor+0x52>
			return 0;
  400fae:	2300      	movs	r3, #0
  400fb0:	e023      	b.n	400ffa <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  400fb2:	68fa      	ldr	r2, [r7, #12]
  400fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400fb6:	429a      	cmp	r2, r3
  400fb8:	d206      	bcs.n	400fc8 <tc_find_mck_divisor+0x68>
			ul_index++) {
  400fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fbc:	3301      	adds	r3, #1
  400fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  400fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fc2:	2b04      	cmp	r3, #4
  400fc4:	d9e1      	bls.n	400f8a <tc_find_mck_divisor+0x2a>
  400fc6:	e000      	b.n	400fca <tc_find_mck_divisor+0x6a>
			break;
  400fc8:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  400fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fcc:	2b04      	cmp	r3, #4
  400fce:	d901      	bls.n	400fd4 <tc_find_mck_divisor+0x74>
		return 0;
  400fd0:	2300      	movs	r3, #0
  400fd2:	e012      	b.n	400ffa <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400fd4:	687b      	ldr	r3, [r7, #4]
  400fd6:	2b00      	cmp	r3, #0
  400fd8:	d008      	beq.n	400fec <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  400fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fdc:	009b      	lsls	r3, r3, #2
  400fde:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400fe2:	4413      	add	r3, r2
  400fe4:	f853 2c20 	ldr.w	r2, [r3, #-32]
  400fe8:	687b      	ldr	r3, [r7, #4]
  400fea:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  400fec:	683b      	ldr	r3, [r7, #0]
  400fee:	2b00      	cmp	r3, #0
  400ff0:	d002      	beq.n	400ff8 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  400ff2:	683b      	ldr	r3, [r7, #0]
  400ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400ff6:	601a      	str	r2, [r3, #0]
	}

	return 1;
  400ff8:	2301      	movs	r3, #1
}
  400ffa:	4618      	mov	r0, r3
  400ffc:	3734      	adds	r7, #52	; 0x34
  400ffe:	46bd      	mov	sp, r7
  401000:	bc80      	pop	{r7}
  401002:	4770      	bx	lr

00401004 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  401004:	b480      	push	{r7}
  401006:	b083      	sub	sp, #12
  401008:	af00      	add	r7, sp, #0
  40100a:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  40100c:	687b      	ldr	r3, [r7, #4]
  40100e:	2208      	movs	r2, #8
  401010:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  401012:	687b      	ldr	r3, [r7, #4]
  401014:	2220      	movs	r2, #32
  401016:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  401018:	687b      	ldr	r3, [r7, #4]
  40101a:	2204      	movs	r2, #4
  40101c:	601a      	str	r2, [r3, #0]
}
  40101e:	bf00      	nop
  401020:	370c      	adds	r7, #12
  401022:	46bd      	mov	sp, r7
  401024:	bc80      	pop	{r7}
  401026:	4770      	bx	lr

00401028 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  401028:	b580      	push	{r7, lr}
  40102a:	b084      	sub	sp, #16
  40102c:	af00      	add	r7, sp, #0
  40102e:	6078      	str	r0, [r7, #4]
  401030:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  401032:	2300      	movs	r3, #0
  401034:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  401036:	687b      	ldr	r3, [r7, #4]
  401038:	f04f 32ff 	mov.w	r2, #4294967295
  40103c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  40103e:	687b      	ldr	r3, [r7, #4]
  401040:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  401042:	6878      	ldr	r0, [r7, #4]
  401044:	4b0e      	ldr	r3, [pc, #56]	; (401080 <twi_master_init+0x58>)
  401046:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  401048:	6878      	ldr	r0, [r7, #4]
  40104a:	4b0e      	ldr	r3, [pc, #56]	; (401084 <twi_master_init+0x5c>)
  40104c:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  40104e:	683b      	ldr	r3, [r7, #0]
  401050:	6859      	ldr	r1, [r3, #4]
  401052:	683b      	ldr	r3, [r7, #0]
  401054:	681b      	ldr	r3, [r3, #0]
  401056:	461a      	mov	r2, r3
  401058:	6878      	ldr	r0, [r7, #4]
  40105a:	4b0b      	ldr	r3, [pc, #44]	; (401088 <twi_master_init+0x60>)
  40105c:	4798      	blx	r3
  40105e:	4603      	mov	r3, r0
  401060:	2b01      	cmp	r3, #1
  401062:	d101      	bne.n	401068 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  401064:	2301      	movs	r3, #1
  401066:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  401068:	683b      	ldr	r3, [r7, #0]
  40106a:	7a5b      	ldrb	r3, [r3, #9]
  40106c:	2b01      	cmp	r3, #1
  40106e:	d102      	bne.n	401076 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  401070:	687b      	ldr	r3, [r7, #4]
  401072:	2240      	movs	r2, #64	; 0x40
  401074:	601a      	str	r2, [r3, #0]
	}

	return status;
  401076:	68fb      	ldr	r3, [r7, #12]
}
  401078:	4618      	mov	r0, r3
  40107a:	3710      	adds	r7, #16
  40107c:	46bd      	mov	sp, r7
  40107e:	bd80      	pop	{r7, pc}
  401080:	004013c5 	.word	0x004013c5
  401084:	00401005 	.word	0x00401005
  401088:	0040108d 	.word	0x0040108d

0040108c <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  40108c:	b480      	push	{r7}
  40108e:	b089      	sub	sp, #36	; 0x24
  401090:	af00      	add	r7, sp, #0
  401092:	60f8      	str	r0, [r7, #12]
  401094:	60b9      	str	r1, [r7, #8]
  401096:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  401098:	2300      	movs	r3, #0
  40109a:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  40109c:	68bb      	ldr	r3, [r7, #8]
  40109e:	4a34      	ldr	r2, [pc, #208]	; (401170 <twi_set_speed+0xe4>)
  4010a0:	4293      	cmp	r3, r2
  4010a2:	d901      	bls.n	4010a8 <twi_set_speed+0x1c>
		return FAIL;
  4010a4:	2301      	movs	r3, #1
  4010a6:	e05d      	b.n	401164 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4010a8:	68bb      	ldr	r3, [r7, #8]
  4010aa:	4a32      	ldr	r2, [pc, #200]	; (401174 <twi_set_speed+0xe8>)
  4010ac:	4293      	cmp	r3, r2
  4010ae:	d937      	bls.n	401120 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4010b0:	687b      	ldr	r3, [r7, #4]
  4010b2:	4a31      	ldr	r2, [pc, #196]	; (401178 <twi_set_speed+0xec>)
  4010b4:	fba2 2303 	umull	r2, r3, r2, r3
  4010b8:	0b9b      	lsrs	r3, r3, #14
  4010ba:	3b04      	subs	r3, #4
  4010bc:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4010be:	68ba      	ldr	r2, [r7, #8]
  4010c0:	4b2e      	ldr	r3, [pc, #184]	; (40117c <twi_set_speed+0xf0>)
  4010c2:	4413      	add	r3, r2
  4010c4:	009b      	lsls	r3, r3, #2
  4010c6:	687a      	ldr	r2, [r7, #4]
  4010c8:	fbb2 f3f3 	udiv	r3, r2, r3
  4010cc:	3b04      	subs	r3, #4
  4010ce:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4010d0:	e005      	b.n	4010de <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  4010d2:	69fb      	ldr	r3, [r7, #28]
  4010d4:	3301      	adds	r3, #1
  4010d6:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4010d8:	697b      	ldr	r3, [r7, #20]
  4010da:	085b      	lsrs	r3, r3, #1
  4010dc:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4010de:	697b      	ldr	r3, [r7, #20]
  4010e0:	2bff      	cmp	r3, #255	; 0xff
  4010e2:	d909      	bls.n	4010f8 <twi_set_speed+0x6c>
  4010e4:	69fb      	ldr	r3, [r7, #28]
  4010e6:	2b06      	cmp	r3, #6
  4010e8:	d9f3      	bls.n	4010d2 <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4010ea:	e005      	b.n	4010f8 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  4010ec:	69fb      	ldr	r3, [r7, #28]
  4010ee:	3301      	adds	r3, #1
  4010f0:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  4010f2:	693b      	ldr	r3, [r7, #16]
  4010f4:	085b      	lsrs	r3, r3, #1
  4010f6:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4010f8:	693b      	ldr	r3, [r7, #16]
  4010fa:	2bff      	cmp	r3, #255	; 0xff
  4010fc:	d902      	bls.n	401104 <twi_set_speed+0x78>
  4010fe:	69fb      	ldr	r3, [r7, #28]
  401100:	2b06      	cmp	r3, #6
  401102:	d9f3      	bls.n	4010ec <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401104:	697b      	ldr	r3, [r7, #20]
  401106:	b2da      	uxtb	r2, r3
  401108:	693b      	ldr	r3, [r7, #16]
  40110a:	021b      	lsls	r3, r3, #8
  40110c:	b29b      	uxth	r3, r3
  40110e:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  401110:	69fb      	ldr	r3, [r7, #28]
  401112:	041b      	lsls	r3, r3, #16
  401114:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401118:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  40111a:	68fb      	ldr	r3, [r7, #12]
  40111c:	611a      	str	r2, [r3, #16]
  40111e:	e020      	b.n	401162 <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401120:	68bb      	ldr	r3, [r7, #8]
  401122:	005b      	lsls	r3, r3, #1
  401124:	687a      	ldr	r2, [r7, #4]
  401126:	fbb2 f3f3 	udiv	r3, r2, r3
  40112a:	3b04      	subs	r3, #4
  40112c:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40112e:	e005      	b.n	40113c <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  401130:	69fb      	ldr	r3, [r7, #28]
  401132:	3301      	adds	r3, #1
  401134:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  401136:	69bb      	ldr	r3, [r7, #24]
  401138:	085b      	lsrs	r3, r3, #1
  40113a:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40113c:	69bb      	ldr	r3, [r7, #24]
  40113e:	2bff      	cmp	r3, #255	; 0xff
  401140:	d902      	bls.n	401148 <twi_set_speed+0xbc>
  401142:	69fb      	ldr	r3, [r7, #28]
  401144:	2b06      	cmp	r3, #6
  401146:	d9f3      	bls.n	401130 <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401148:	69bb      	ldr	r3, [r7, #24]
  40114a:	b2da      	uxtb	r2, r3
  40114c:	69bb      	ldr	r3, [r7, #24]
  40114e:	021b      	lsls	r3, r3, #8
  401150:	b29b      	uxth	r3, r3
  401152:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  401154:	69fb      	ldr	r3, [r7, #28]
  401156:	041b      	lsls	r3, r3, #16
  401158:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  40115c:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  40115e:	68fb      	ldr	r3, [r7, #12]
  401160:	611a      	str	r2, [r3, #16]
	}

	return PASS;
  401162:	2300      	movs	r3, #0
}
  401164:	4618      	mov	r0, r3
  401166:	3724      	adds	r7, #36	; 0x24
  401168:	46bd      	mov	sp, r7
  40116a:	bc80      	pop	{r7}
  40116c:	4770      	bx	lr
  40116e:	bf00      	nop
  401170:	00061a80 	.word	0x00061a80
  401174:	0005dc00 	.word	0x0005dc00
  401178:	057619f1 	.word	0x057619f1
  40117c:	3ffd1200 	.word	0x3ffd1200

00401180 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  401180:	b480      	push	{r7}
  401182:	b085      	sub	sp, #20
  401184:	af00      	add	r7, sp, #0
  401186:	6078      	str	r0, [r7, #4]
  401188:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  40118a:	683b      	ldr	r3, [r7, #0]
  40118c:	2b00      	cmp	r3, #0
  40118e:	d101      	bne.n	401194 <twi_mk_addr+0x14>
		return 0;
  401190:	2300      	movs	r3, #0
  401192:	e01d      	b.n	4011d0 <twi_mk_addr+0x50>

	val = addr[0];
  401194:	687b      	ldr	r3, [r7, #4]
  401196:	781b      	ldrb	r3, [r3, #0]
  401198:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  40119a:	683b      	ldr	r3, [r7, #0]
  40119c:	2b01      	cmp	r3, #1
  40119e:	dd09      	ble.n	4011b4 <twi_mk_addr+0x34>
		val <<= 8;
  4011a0:	68fb      	ldr	r3, [r7, #12]
  4011a2:	021b      	lsls	r3, r3, #8
  4011a4:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  4011a6:	687b      	ldr	r3, [r7, #4]
  4011a8:	3301      	adds	r3, #1
  4011aa:	781b      	ldrb	r3, [r3, #0]
  4011ac:	461a      	mov	r2, r3
  4011ae:	68fb      	ldr	r3, [r7, #12]
  4011b0:	4313      	orrs	r3, r2
  4011b2:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  4011b4:	683b      	ldr	r3, [r7, #0]
  4011b6:	2b02      	cmp	r3, #2
  4011b8:	dd09      	ble.n	4011ce <twi_mk_addr+0x4e>
		val <<= 8;
  4011ba:	68fb      	ldr	r3, [r7, #12]
  4011bc:	021b      	lsls	r3, r3, #8
  4011be:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  4011c0:	687b      	ldr	r3, [r7, #4]
  4011c2:	3302      	adds	r3, #2
  4011c4:	781b      	ldrb	r3, [r3, #0]
  4011c6:	461a      	mov	r2, r3
  4011c8:	68fb      	ldr	r3, [r7, #12]
  4011ca:	4313      	orrs	r3, r2
  4011cc:	60fb      	str	r3, [r7, #12]
	}
	return val;
  4011ce:	68fb      	ldr	r3, [r7, #12]
}
  4011d0:	4618      	mov	r0, r3
  4011d2:	3714      	adds	r7, #20
  4011d4:	46bd      	mov	sp, r7
  4011d6:	bc80      	pop	{r7}
  4011d8:	4770      	bx	lr
	...

004011dc <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  4011dc:	b580      	push	{r7, lr}
  4011de:	b088      	sub	sp, #32
  4011e0:	af00      	add	r7, sp, #0
  4011e2:	6078      	str	r0, [r7, #4]
  4011e4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4011e6:	683b      	ldr	r3, [r7, #0]
  4011e8:	68db      	ldr	r3, [r3, #12]
  4011ea:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  4011ec:	683b      	ldr	r3, [r7, #0]
  4011ee:	689b      	ldr	r3, [r3, #8]
  4011f0:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  4011f2:	2300      	movs	r3, #0
  4011f4:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  4011f6:	f247 5330 	movw	r3, #30000	; 0x7530
  4011fa:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  4011fc:	69fb      	ldr	r3, [r7, #28]
  4011fe:	2b00      	cmp	r3, #0
  401200:	d101      	bne.n	401206 <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  401202:	2301      	movs	r3, #1
  401204:	e069      	b.n	4012da <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401206:	687b      	ldr	r3, [r7, #4]
  401208:	2200      	movs	r2, #0
  40120a:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  40120c:	683b      	ldr	r3, [r7, #0]
  40120e:	7c1b      	ldrb	r3, [r3, #16]
  401210:	041b      	lsls	r3, r3, #16
  401212:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401216:	683b      	ldr	r3, [r7, #0]
  401218:	685b      	ldr	r3, [r3, #4]
  40121a:	021b      	lsls	r3, r3, #8
  40121c:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401220:	4313      	orrs	r3, r2
  401222:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  401226:	687b      	ldr	r3, [r7, #4]
  401228:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  40122a:	687b      	ldr	r3, [r7, #4]
  40122c:	2200      	movs	r2, #0
  40122e:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401230:	683a      	ldr	r2, [r7, #0]
  401232:	683b      	ldr	r3, [r7, #0]
  401234:	685b      	ldr	r3, [r3, #4]
  401236:	4619      	mov	r1, r3
  401238:	4610      	mov	r0, r2
  40123a:	4b2a      	ldr	r3, [pc, #168]	; (4012e4 <twi_master_read+0x108>)
  40123c:	4798      	blx	r3
  40123e:	4602      	mov	r2, r0
  401240:	687b      	ldr	r3, [r7, #4]
  401242:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  401244:	69fb      	ldr	r3, [r7, #28]
  401246:	2b01      	cmp	r3, #1
  401248:	d105      	bne.n	401256 <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40124a:	687b      	ldr	r3, [r7, #4]
  40124c:	2203      	movs	r2, #3
  40124e:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  401250:	2301      	movs	r3, #1
  401252:	75fb      	strb	r3, [r7, #23]
  401254:	e034      	b.n	4012c0 <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  401256:	687b      	ldr	r3, [r7, #4]
  401258:	2201      	movs	r2, #1
  40125a:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  40125c:	2300      	movs	r3, #0
  40125e:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  401260:	e02e      	b.n	4012c0 <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  401262:	687b      	ldr	r3, [r7, #4]
  401264:	6a1b      	ldr	r3, [r3, #32]
  401266:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  401268:	68fb      	ldr	r3, [r7, #12]
  40126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40126e:	2b00      	cmp	r3, #0
  401270:	d001      	beq.n	401276 <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  401272:	2305      	movs	r3, #5
  401274:	e031      	b.n	4012da <twi_master_read+0xfe>
		}

		if (!timeout--) {
  401276:	693b      	ldr	r3, [r7, #16]
  401278:	1e5a      	subs	r2, r3, #1
  40127a:	613a      	str	r2, [r7, #16]
  40127c:	2b00      	cmp	r3, #0
  40127e:	d101      	bne.n	401284 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  401280:	2309      	movs	r3, #9
  401282:	e02a      	b.n	4012da <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  401284:	69fb      	ldr	r3, [r7, #28]
  401286:	2b01      	cmp	r3, #1
  401288:	d107      	bne.n	40129a <twi_master_read+0xbe>
  40128a:	7dfb      	ldrb	r3, [r7, #23]
  40128c:	2b00      	cmp	r3, #0
  40128e:	d104      	bne.n	40129a <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  401290:	687b      	ldr	r3, [r7, #4]
  401292:	2202      	movs	r2, #2
  401294:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  401296:	2301      	movs	r3, #1
  401298:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  40129a:	68fb      	ldr	r3, [r7, #12]
  40129c:	f003 0302 	and.w	r3, r3, #2
  4012a0:	2b00      	cmp	r3, #0
  4012a2:	d100      	bne.n	4012a6 <twi_master_read+0xca>
			continue;
  4012a4:	e00c      	b.n	4012c0 <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  4012a6:	69bb      	ldr	r3, [r7, #24]
  4012a8:	1c5a      	adds	r2, r3, #1
  4012aa:	61ba      	str	r2, [r7, #24]
  4012ac:	687a      	ldr	r2, [r7, #4]
  4012ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4012b0:	b2d2      	uxtb	r2, r2
  4012b2:	701a      	strb	r2, [r3, #0]

		cnt--;
  4012b4:	69fb      	ldr	r3, [r7, #28]
  4012b6:	3b01      	subs	r3, #1
  4012b8:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  4012ba:	f247 5330 	movw	r3, #30000	; 0x7530
  4012be:	613b      	str	r3, [r7, #16]
	while (cnt > 0) {
  4012c0:	69fb      	ldr	r3, [r7, #28]
  4012c2:	2b00      	cmp	r3, #0
  4012c4:	d1cd      	bne.n	401262 <twi_master_read+0x86>
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4012c6:	bf00      	nop
  4012c8:	687b      	ldr	r3, [r7, #4]
  4012ca:	6a1b      	ldr	r3, [r3, #32]
  4012cc:	f003 0301 	and.w	r3, r3, #1
  4012d0:	2b00      	cmp	r3, #0
  4012d2:	d0f9      	beq.n	4012c8 <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  4012d4:	687b      	ldr	r3, [r7, #4]
  4012d6:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  4012d8:	2300      	movs	r3, #0
}
  4012da:	4618      	mov	r0, r3
  4012dc:	3720      	adds	r7, #32
  4012de:	46bd      	mov	sp, r7
  4012e0:	bd80      	pop	{r7, pc}
  4012e2:	bf00      	nop
  4012e4:	00401181 	.word	0x00401181

004012e8 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4012e8:	b580      	push	{r7, lr}
  4012ea:	b086      	sub	sp, #24
  4012ec:	af00      	add	r7, sp, #0
  4012ee:	6078      	str	r0, [r7, #4]
  4012f0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4012f2:	683b      	ldr	r3, [r7, #0]
  4012f4:	68db      	ldr	r3, [r3, #12]
  4012f6:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  4012f8:	683b      	ldr	r3, [r7, #0]
  4012fa:	689b      	ldr	r3, [r3, #8]
  4012fc:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  4012fe:	697b      	ldr	r3, [r7, #20]
  401300:	2b00      	cmp	r3, #0
  401302:	d101      	bne.n	401308 <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  401304:	2301      	movs	r3, #1
  401306:	e056      	b.n	4013b6 <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401308:	687b      	ldr	r3, [r7, #4]
  40130a:	2200      	movs	r2, #0
  40130c:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  40130e:	683b      	ldr	r3, [r7, #0]
  401310:	7c1b      	ldrb	r3, [r3, #16]
  401312:	041b      	lsls	r3, r3, #16
  401314:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401318:	683b      	ldr	r3, [r7, #0]
  40131a:	685b      	ldr	r3, [r3, #4]
  40131c:	021b      	lsls	r3, r3, #8
  40131e:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401322:	431a      	orrs	r2, r3
  401324:	687b      	ldr	r3, [r7, #4]
  401326:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401328:	687b      	ldr	r3, [r7, #4]
  40132a:	2200      	movs	r2, #0
  40132c:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40132e:	683a      	ldr	r2, [r7, #0]
  401330:	683b      	ldr	r3, [r7, #0]
  401332:	685b      	ldr	r3, [r3, #4]
  401334:	4619      	mov	r1, r3
  401336:	4610      	mov	r0, r2
  401338:	4b21      	ldr	r3, [pc, #132]	; (4013c0 <twi_master_write+0xd8>)
  40133a:	4798      	blx	r3
  40133c:	4602      	mov	r2, r0
  40133e:	687b      	ldr	r3, [r7, #4]
  401340:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  401342:	e019      	b.n	401378 <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  401344:	687b      	ldr	r3, [r7, #4]
  401346:	6a1b      	ldr	r3, [r3, #32]
  401348:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  40134a:	68fb      	ldr	r3, [r7, #12]
  40134c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401350:	2b00      	cmp	r3, #0
  401352:	d001      	beq.n	401358 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  401354:	2305      	movs	r3, #5
  401356:	e02e      	b.n	4013b6 <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  401358:	68fb      	ldr	r3, [r7, #12]
  40135a:	f003 0304 	and.w	r3, r3, #4
  40135e:	2b00      	cmp	r3, #0
  401360:	d100      	bne.n	401364 <twi_master_write+0x7c>
			continue;
  401362:	e009      	b.n	401378 <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  401364:	693b      	ldr	r3, [r7, #16]
  401366:	1c5a      	adds	r2, r3, #1
  401368:	613a      	str	r2, [r7, #16]
  40136a:	781b      	ldrb	r3, [r3, #0]
  40136c:	461a      	mov	r2, r3
  40136e:	687b      	ldr	r3, [r7, #4]
  401370:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  401372:	697b      	ldr	r3, [r7, #20]
  401374:	3b01      	subs	r3, #1
  401376:	617b      	str	r3, [r7, #20]
	while (cnt > 0) {
  401378:	697b      	ldr	r3, [r7, #20]
  40137a:	2b00      	cmp	r3, #0
  40137c:	d1e2      	bne.n	401344 <twi_master_write+0x5c>
	}

	while (1) {
		status = p_twi->TWI_SR;
  40137e:	687b      	ldr	r3, [r7, #4]
  401380:	6a1b      	ldr	r3, [r3, #32]
  401382:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  401384:	68fb      	ldr	r3, [r7, #12]
  401386:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40138a:	2b00      	cmp	r3, #0
  40138c:	d001      	beq.n	401392 <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  40138e:	2305      	movs	r3, #5
  401390:	e011      	b.n	4013b6 <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  401392:	68fb      	ldr	r3, [r7, #12]
  401394:	f003 0304 	and.w	r3, r3, #4
  401398:	2b00      	cmp	r3, #0
  40139a:	d100      	bne.n	40139e <twi_master_write+0xb6>
		status = p_twi->TWI_SR;
  40139c:	e7ef      	b.n	40137e <twi_master_write+0x96>
			break;
  40139e:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  4013a0:	687b      	ldr	r3, [r7, #4]
  4013a2:	2202      	movs	r2, #2
  4013a4:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4013a6:	bf00      	nop
  4013a8:	687b      	ldr	r3, [r7, #4]
  4013aa:	6a1b      	ldr	r3, [r3, #32]
  4013ac:	f003 0301 	and.w	r3, r3, #1
  4013b0:	2b00      	cmp	r3, #0
  4013b2:	d0f9      	beq.n	4013a8 <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  4013b4:	2300      	movs	r3, #0
}
  4013b6:	4618      	mov	r0, r3
  4013b8:	3718      	adds	r7, #24
  4013ba:	46bd      	mov	sp, r7
  4013bc:	bd80      	pop	{r7, pc}
  4013be:	bf00      	nop
  4013c0:	00401181 	.word	0x00401181

004013c4 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  4013c4:	b480      	push	{r7}
  4013c6:	b083      	sub	sp, #12
  4013c8:	af00      	add	r7, sp, #0
  4013ca:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4013cc:	687b      	ldr	r3, [r7, #4]
  4013ce:	2280      	movs	r2, #128	; 0x80
  4013d0:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  4013d2:	687b      	ldr	r3, [r7, #4]
  4013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4013d6:	bf00      	nop
  4013d8:	370c      	adds	r7, #12
  4013da:	46bd      	mov	sp, r7
  4013dc:	bc80      	pop	{r7}
  4013de:	4770      	bx	lr

004013e0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4013e0:	b480      	push	{r7}
  4013e2:	b089      	sub	sp, #36	; 0x24
  4013e4:	af00      	add	r7, sp, #0
  4013e6:	60f8      	str	r0, [r7, #12]
  4013e8:	60b9      	str	r1, [r7, #8]
  4013ea:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4013ec:	68bb      	ldr	r3, [r7, #8]
  4013ee:	011a      	lsls	r2, r3, #4
  4013f0:	687b      	ldr	r3, [r7, #4]
  4013f2:	429a      	cmp	r2, r3
  4013f4:	d802      	bhi.n	4013fc <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4013f6:	2310      	movs	r3, #16
  4013f8:	61fb      	str	r3, [r7, #28]
  4013fa:	e001      	b.n	401400 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4013fc:	2308      	movs	r3, #8
  4013fe:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401400:	687b      	ldr	r3, [r7, #4]
  401402:	00da      	lsls	r2, r3, #3
  401404:	69fb      	ldr	r3, [r7, #28]
  401406:	68b9      	ldr	r1, [r7, #8]
  401408:	fb01 f303 	mul.w	r3, r1, r3
  40140c:	085b      	lsrs	r3, r3, #1
  40140e:	441a      	add	r2, r3
  401410:	69fb      	ldr	r3, [r7, #28]
  401412:	68b9      	ldr	r1, [r7, #8]
  401414:	fb01 f303 	mul.w	r3, r1, r3
  401418:	fbb2 f3f3 	udiv	r3, r2, r3
  40141c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40141e:	69bb      	ldr	r3, [r7, #24]
  401420:	08db      	lsrs	r3, r3, #3
  401422:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401424:	69bb      	ldr	r3, [r7, #24]
  401426:	f003 0307 	and.w	r3, r3, #7
  40142a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40142c:	697b      	ldr	r3, [r7, #20]
  40142e:	2b00      	cmp	r3, #0
  401430:	d003      	beq.n	40143a <usart_set_async_baudrate+0x5a>
  401432:	697b      	ldr	r3, [r7, #20]
  401434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401438:	d301      	bcc.n	40143e <usart_set_async_baudrate+0x5e>
		return 1;
  40143a:	2301      	movs	r3, #1
  40143c:	e00f      	b.n	40145e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40143e:	69fb      	ldr	r3, [r7, #28]
  401440:	2b08      	cmp	r3, #8
  401442:	d105      	bne.n	401450 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401444:	68fb      	ldr	r3, [r7, #12]
  401446:	685b      	ldr	r3, [r3, #4]
  401448:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  40144c:	68fb      	ldr	r3, [r7, #12]
  40144e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401450:	693b      	ldr	r3, [r7, #16]
  401452:	041a      	lsls	r2, r3, #16
  401454:	697b      	ldr	r3, [r7, #20]
  401456:	431a      	orrs	r2, r3
  401458:	68fb      	ldr	r3, [r7, #12]
  40145a:	621a      	str	r2, [r3, #32]

	return 0;
  40145c:	2300      	movs	r3, #0
}
  40145e:	4618      	mov	r0, r3
  401460:	3724      	adds	r7, #36	; 0x24
  401462:	46bd      	mov	sp, r7
  401464:	bc80      	pop	{r7}
  401466:	4770      	bx	lr

00401468 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  401468:	b580      	push	{r7, lr}
  40146a:	b082      	sub	sp, #8
  40146c:	af00      	add	r7, sp, #0
  40146e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401470:	6878      	ldr	r0, [r7, #4]
  401472:	4b0f      	ldr	r3, [pc, #60]	; (4014b0 <usart_reset+0x48>)
  401474:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  401476:	687b      	ldr	r3, [r7, #4]
  401478:	2200      	movs	r2, #0
  40147a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  40147c:	687b      	ldr	r3, [r7, #4]
  40147e:	2200      	movs	r2, #0
  401480:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401482:	687b      	ldr	r3, [r7, #4]
  401484:	2200      	movs	r2, #0
  401486:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401488:	6878      	ldr	r0, [r7, #4]
  40148a:	4b0a      	ldr	r3, [pc, #40]	; (4014b4 <usart_reset+0x4c>)
  40148c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40148e:	6878      	ldr	r0, [r7, #4]
  401490:	4b09      	ldr	r3, [pc, #36]	; (4014b8 <usart_reset+0x50>)
  401492:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401494:	6878      	ldr	r0, [r7, #4]
  401496:	4b09      	ldr	r3, [pc, #36]	; (4014bc <usart_reset+0x54>)
  401498:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40149a:	6878      	ldr	r0, [r7, #4]
  40149c:	4b08      	ldr	r3, [pc, #32]	; (4014c0 <usart_reset+0x58>)
  40149e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  4014a0:	6878      	ldr	r0, [r7, #4]
  4014a2:	4b08      	ldr	r3, [pc, #32]	; (4014c4 <usart_reset+0x5c>)
  4014a4:	4798      	blx	r3
#endif
}
  4014a6:	bf00      	nop
  4014a8:	3708      	adds	r7, #8
  4014aa:	46bd      	mov	sp, r7
  4014ac:	bd80      	pop	{r7, pc}
  4014ae:	bf00      	nop
  4014b0:	004016cd 	.word	0x004016cd
  4014b4:	004015a5 	.word	0x004015a5
  4014b8:	004015d5 	.word	0x004015d5
  4014bc:	00401621 	.word	0x00401621
  4014c0:	00401655 	.word	0x00401655
  4014c4:	0040163b 	.word	0x0040163b

004014c8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4014c8:	b580      	push	{r7, lr}
  4014ca:	b084      	sub	sp, #16
  4014cc:	af00      	add	r7, sp, #0
  4014ce:	60f8      	str	r0, [r7, #12]
  4014d0:	60b9      	str	r1, [r7, #8]
  4014d2:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4014d4:	68f8      	ldr	r0, [r7, #12]
  4014d6:	4b1a      	ldr	r3, [pc, #104]	; (401540 <usart_init_rs232+0x78>)
  4014d8:	4798      	blx	r3

	ul_reg_val = 0;
  4014da:	4b1a      	ldr	r3, [pc, #104]	; (401544 <usart_init_rs232+0x7c>)
  4014dc:	2200      	movs	r2, #0
  4014de:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4014e0:	68bb      	ldr	r3, [r7, #8]
  4014e2:	2b00      	cmp	r3, #0
  4014e4:	d009      	beq.n	4014fa <usart_init_rs232+0x32>
  4014e6:	68bb      	ldr	r3, [r7, #8]
  4014e8:	681b      	ldr	r3, [r3, #0]
  4014ea:	687a      	ldr	r2, [r7, #4]
  4014ec:	4619      	mov	r1, r3
  4014ee:	68f8      	ldr	r0, [r7, #12]
  4014f0:	4b15      	ldr	r3, [pc, #84]	; (401548 <usart_init_rs232+0x80>)
  4014f2:	4798      	blx	r3
  4014f4:	4603      	mov	r3, r0
  4014f6:	2b00      	cmp	r3, #0
  4014f8:	d001      	beq.n	4014fe <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4014fa:	2301      	movs	r3, #1
  4014fc:	e01b      	b.n	401536 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4014fe:	68bb      	ldr	r3, [r7, #8]
  401500:	685a      	ldr	r2, [r3, #4]
  401502:	68bb      	ldr	r3, [r7, #8]
  401504:	689b      	ldr	r3, [r3, #8]
  401506:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401508:	68bb      	ldr	r3, [r7, #8]
  40150a:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40150c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40150e:	68bb      	ldr	r3, [r7, #8]
  401510:	68db      	ldr	r3, [r3, #12]
  401512:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401514:	4b0b      	ldr	r3, [pc, #44]	; (401544 <usart_init_rs232+0x7c>)
  401516:	681b      	ldr	r3, [r3, #0]
  401518:	4313      	orrs	r3, r2
  40151a:	4a0a      	ldr	r2, [pc, #40]	; (401544 <usart_init_rs232+0x7c>)
  40151c:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40151e:	4b09      	ldr	r3, [pc, #36]	; (401544 <usart_init_rs232+0x7c>)
  401520:	681b      	ldr	r3, [r3, #0]
  401522:	4a08      	ldr	r2, [pc, #32]	; (401544 <usart_init_rs232+0x7c>)
  401524:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401526:	68fb      	ldr	r3, [r7, #12]
  401528:	685a      	ldr	r2, [r3, #4]
  40152a:	4b06      	ldr	r3, [pc, #24]	; (401544 <usart_init_rs232+0x7c>)
  40152c:	681b      	ldr	r3, [r3, #0]
  40152e:	431a      	orrs	r2, r3
  401530:	68fb      	ldr	r3, [r7, #12]
  401532:	605a      	str	r2, [r3, #4]

	return 0;
  401534:	2300      	movs	r3, #0
}
  401536:	4618      	mov	r0, r3
  401538:	3710      	adds	r7, #16
  40153a:	46bd      	mov	sp, r7
  40153c:	bd80      	pop	{r7, pc}
  40153e:	bf00      	nop
  401540:	00401469 	.word	0x00401469
  401544:	20000a54 	.word	0x20000a54
  401548:	004013e1 	.word	0x004013e1

0040154c <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  40154c:	b580      	push	{r7, lr}
  40154e:	b084      	sub	sp, #16
  401550:	af00      	add	r7, sp, #0
  401552:	60f8      	str	r0, [r7, #12]
  401554:	60b9      	str	r1, [r7, #8]
  401556:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  401558:	687a      	ldr	r2, [r7, #4]
  40155a:	68b9      	ldr	r1, [r7, #8]
  40155c:	68f8      	ldr	r0, [r7, #12]
  40155e:	4b0a      	ldr	r3, [pc, #40]	; (401588 <usart_init_hw_handshaking+0x3c>)
  401560:	4798      	blx	r3
  401562:	4603      	mov	r3, r0
  401564:	2b00      	cmp	r3, #0
  401566:	d001      	beq.n	40156c <usart_init_hw_handshaking+0x20>
		return 1;
  401568:	2301      	movs	r3, #1
  40156a:	e008      	b.n	40157e <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  40156c:	68fb      	ldr	r3, [r7, #12]
  40156e:	685b      	ldr	r3, [r3, #4]
  401570:	f023 030f 	bic.w	r3, r3, #15
  401574:	f043 0202 	orr.w	r2, r3, #2
  401578:	68fb      	ldr	r3, [r7, #12]
  40157a:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  40157c:	2300      	movs	r3, #0
}
  40157e:	4618      	mov	r0, r3
  401580:	3710      	adds	r7, #16
  401582:	46bd      	mov	sp, r7
  401584:	bd80      	pop	{r7, pc}
  401586:	bf00      	nop
  401588:	004014c9 	.word	0x004014c9

0040158c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  40158c:	b480      	push	{r7}
  40158e:	b083      	sub	sp, #12
  401590:	af00      	add	r7, sp, #0
  401592:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401594:	687b      	ldr	r3, [r7, #4]
  401596:	2240      	movs	r2, #64	; 0x40
  401598:	601a      	str	r2, [r3, #0]
}
  40159a:	bf00      	nop
  40159c:	370c      	adds	r7, #12
  40159e:	46bd      	mov	sp, r7
  4015a0:	bc80      	pop	{r7}
  4015a2:	4770      	bx	lr

004015a4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4015a4:	b480      	push	{r7}
  4015a6:	b083      	sub	sp, #12
  4015a8:	af00      	add	r7, sp, #0
  4015aa:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4015ac:	687b      	ldr	r3, [r7, #4]
  4015ae:	2288      	movs	r2, #136	; 0x88
  4015b0:	601a      	str	r2, [r3, #0]
}
  4015b2:	bf00      	nop
  4015b4:	370c      	adds	r7, #12
  4015b6:	46bd      	mov	sp, r7
  4015b8:	bc80      	pop	{r7}
  4015ba:	4770      	bx	lr

004015bc <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4015bc:	b480      	push	{r7}
  4015be:	b083      	sub	sp, #12
  4015c0:	af00      	add	r7, sp, #0
  4015c2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4015c4:	687b      	ldr	r3, [r7, #4]
  4015c6:	2210      	movs	r2, #16
  4015c8:	601a      	str	r2, [r3, #0]
}
  4015ca:	bf00      	nop
  4015cc:	370c      	adds	r7, #12
  4015ce:	46bd      	mov	sp, r7
  4015d0:	bc80      	pop	{r7}
  4015d2:	4770      	bx	lr

004015d4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4015d4:	b480      	push	{r7}
  4015d6:	b083      	sub	sp, #12
  4015d8:	af00      	add	r7, sp, #0
  4015da:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4015dc:	687b      	ldr	r3, [r7, #4]
  4015de:	2224      	movs	r2, #36	; 0x24
  4015e0:	601a      	str	r2, [r3, #0]
}
  4015e2:	bf00      	nop
  4015e4:	370c      	adds	r7, #12
  4015e6:	46bd      	mov	sp, r7
  4015e8:	bc80      	pop	{r7}
  4015ea:	4770      	bx	lr

004015ec <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4015ec:	b480      	push	{r7}
  4015ee:	b083      	sub	sp, #12
  4015f0:	af00      	add	r7, sp, #0
  4015f2:	6078      	str	r0, [r7, #4]
  4015f4:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4015f6:	687b      	ldr	r3, [r7, #4]
  4015f8:	683a      	ldr	r2, [r7, #0]
  4015fa:	609a      	str	r2, [r3, #8]
}
  4015fc:	bf00      	nop
  4015fe:	370c      	adds	r7, #12
  401600:	46bd      	mov	sp, r7
  401602:	bc80      	pop	{r7}
  401604:	4770      	bx	lr

00401606 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  401606:	b480      	push	{r7}
  401608:	b083      	sub	sp, #12
  40160a:	af00      	add	r7, sp, #0
  40160c:	6078      	str	r0, [r7, #4]
  40160e:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  401610:	687b      	ldr	r3, [r7, #4]
  401612:	683a      	ldr	r2, [r7, #0]
  401614:	60da      	str	r2, [r3, #12]
}
  401616:	bf00      	nop
  401618:	370c      	adds	r7, #12
  40161a:	46bd      	mov	sp, r7
  40161c:	bc80      	pop	{r7}
  40161e:	4770      	bx	lr

00401620 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401620:	b480      	push	{r7}
  401622:	b083      	sub	sp, #12
  401624:	af00      	add	r7, sp, #0
  401626:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401628:	687b      	ldr	r3, [r7, #4]
  40162a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40162e:	601a      	str	r2, [r3, #0]
}
  401630:	bf00      	nop
  401632:	370c      	adds	r7, #12
  401634:	46bd      	mov	sp, r7
  401636:	bc80      	pop	{r7}
  401638:	4770      	bx	lr

0040163a <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  40163a:	b480      	push	{r7}
  40163c:	b083      	sub	sp, #12
  40163e:	af00      	add	r7, sp, #0
  401640:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  401642:	687b      	ldr	r3, [r7, #4]
  401644:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  401648:	601a      	str	r2, [r3, #0]
}
  40164a:	bf00      	nop
  40164c:	370c      	adds	r7, #12
  40164e:	46bd      	mov	sp, r7
  401650:	bc80      	pop	{r7}
  401652:	4770      	bx	lr

00401654 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401654:	b480      	push	{r7}
  401656:	b083      	sub	sp, #12
  401658:	af00      	add	r7, sp, #0
  40165a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  40165c:	687b      	ldr	r3, [r7, #4]
  40165e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401662:	601a      	str	r2, [r3, #0]
}
  401664:	bf00      	nop
  401666:	370c      	adds	r7, #12
  401668:	46bd      	mov	sp, r7
  40166a:	bc80      	pop	{r7}
  40166c:	4770      	bx	lr

0040166e <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  40166e:	b480      	push	{r7}
  401670:	b083      	sub	sp, #12
  401672:	af00      	add	r7, sp, #0
  401674:	6078      	str	r0, [r7, #4]
  401676:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401678:	bf00      	nop
  40167a:	687b      	ldr	r3, [r7, #4]
  40167c:	695b      	ldr	r3, [r3, #20]
  40167e:	f003 0302 	and.w	r3, r3, #2
  401682:	2b00      	cmp	r3, #0
  401684:	d0f9      	beq.n	40167a <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401686:	683b      	ldr	r3, [r7, #0]
  401688:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40168c:	687b      	ldr	r3, [r7, #4]
  40168e:	61da      	str	r2, [r3, #28]

	return 0;
  401690:	2300      	movs	r3, #0
}
  401692:	4618      	mov	r0, r3
  401694:	370c      	adds	r7, #12
  401696:	46bd      	mov	sp, r7
  401698:	bc80      	pop	{r7}
  40169a:	4770      	bx	lr

0040169c <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  40169c:	b580      	push	{r7, lr}
  40169e:	b082      	sub	sp, #8
  4016a0:	af00      	add	r7, sp, #0
  4016a2:	6078      	str	r0, [r7, #4]
  4016a4:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  4016a6:	e007      	b.n	4016b8 <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  4016a8:	683b      	ldr	r3, [r7, #0]
  4016aa:	1c5a      	adds	r2, r3, #1
  4016ac:	603a      	str	r2, [r7, #0]
  4016ae:	781b      	ldrb	r3, [r3, #0]
  4016b0:	4619      	mov	r1, r3
  4016b2:	6878      	ldr	r0, [r7, #4]
  4016b4:	4b04      	ldr	r3, [pc, #16]	; (4016c8 <usart_write_line+0x2c>)
  4016b6:	4798      	blx	r3
	while (*string != '\0') {
  4016b8:	683b      	ldr	r3, [r7, #0]
  4016ba:	781b      	ldrb	r3, [r3, #0]
  4016bc:	2b00      	cmp	r3, #0
  4016be:	d1f3      	bne.n	4016a8 <usart_write_line+0xc>
	}
}
  4016c0:	bf00      	nop
  4016c2:	3708      	adds	r7, #8
  4016c4:	46bd      	mov	sp, r7
  4016c6:	bd80      	pop	{r7, pc}
  4016c8:	0040166f 	.word	0x0040166f

004016cc <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4016cc:	b480      	push	{r7}
  4016ce:	b083      	sub	sp, #12
  4016d0:	af00      	add	r7, sp, #0
  4016d2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4016d4:	687b      	ldr	r3, [r7, #4]
  4016d6:	4a04      	ldr	r2, [pc, #16]	; (4016e8 <usart_disable_writeprotect+0x1c>)
  4016d8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4016dc:	bf00      	nop
  4016de:	370c      	adds	r7, #12
  4016e0:	46bd      	mov	sp, r7
  4016e2:	bc80      	pop	{r7}
  4016e4:	4770      	bx	lr
  4016e6:	bf00      	nop
  4016e8:	55534100 	.word	0x55534100

004016ec <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  4016ec:	b480      	push	{r7}
  4016ee:	b083      	sub	sp, #12
  4016f0:	af00      	add	r7, sp, #0
  4016f2:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4016f4:	687b      	ldr	r3, [r7, #4]
  4016f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4016fa:	605a      	str	r2, [r3, #4]

}
  4016fc:	bf00      	nop
  4016fe:	370c      	adds	r7, #12
  401700:	46bd      	mov	sp, r7
  401702:	bc80      	pop	{r7}
  401704:	4770      	bx	lr
	...

00401708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401708:	b480      	push	{r7}
  40170a:	b083      	sub	sp, #12
  40170c:	af00      	add	r7, sp, #0
  40170e:	4603      	mov	r3, r0
  401710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  401712:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401716:	2b00      	cmp	r3, #0
  401718:	db0b      	blt.n	401732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40171a:	4908      	ldr	r1, [pc, #32]	; (40173c <__NVIC_EnableIRQ+0x34>)
  40171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401720:	095b      	lsrs	r3, r3, #5
  401722:	79fa      	ldrb	r2, [r7, #7]
  401724:	f002 021f 	and.w	r2, r2, #31
  401728:	2001      	movs	r0, #1
  40172a:	fa00 f202 	lsl.w	r2, r0, r2
  40172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  401732:	bf00      	nop
  401734:	370c      	adds	r7, #12
  401736:	46bd      	mov	sp, r7
  401738:	bc80      	pop	{r7}
  40173a:	4770      	bx	lr
  40173c:	e000e100 	.word	0xe000e100

00401740 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  401740:	b480      	push	{r7}
  401742:	b083      	sub	sp, #12
  401744:	af00      	add	r7, sp, #0
  401746:	4603      	mov	r3, r0
  401748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40174e:	2b00      	cmp	r3, #0
  401750:	db10      	blt.n	401774 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401752:	490b      	ldr	r1, [pc, #44]	; (401780 <__NVIC_DisableIRQ+0x40>)
  401754:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401758:	095b      	lsrs	r3, r3, #5
  40175a:	79fa      	ldrb	r2, [r7, #7]
  40175c:	f002 021f 	and.w	r2, r2, #31
  401760:	2001      	movs	r0, #1
  401762:	fa00 f202 	lsl.w	r2, r0, r2
  401766:	3320      	adds	r3, #32
  401768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  40176c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401770:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
  401774:	bf00      	nop
  401776:	370c      	adds	r7, #12
  401778:	46bd      	mov	sp, r7
  40177a:	bc80      	pop	{r7}
  40177c:	4770      	bx	lr
  40177e:	bf00      	nop
  401780:	e000e100 	.word	0xe000e100

00401784 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  401784:	b480      	push	{r7}
  401786:	b083      	sub	sp, #12
  401788:	af00      	add	r7, sp, #0
  40178a:	4603      	mov	r3, r0
  40178c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401792:	2b00      	cmp	r3, #0
  401794:	db0c      	blt.n	4017b0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401796:	4909      	ldr	r1, [pc, #36]	; (4017bc <__NVIC_ClearPendingIRQ+0x38>)
  401798:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40179c:	095b      	lsrs	r3, r3, #5
  40179e:	79fa      	ldrb	r2, [r7, #7]
  4017a0:	f002 021f 	and.w	r2, r2, #31
  4017a4:	2001      	movs	r0, #1
  4017a6:	fa00 f202 	lsl.w	r2, r0, r2
  4017aa:	3360      	adds	r3, #96	; 0x60
  4017ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  4017b0:	bf00      	nop
  4017b2:	370c      	adds	r7, #12
  4017b4:	46bd      	mov	sp, r7
  4017b6:	bc80      	pop	{r7}
  4017b8:	4770      	bx	lr
  4017ba:	bf00      	nop
  4017bc:	e000e100 	.word	0xe000e100

004017c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  4017c0:	b480      	push	{r7}
  4017c2:	b083      	sub	sp, #12
  4017c4:	af00      	add	r7, sp, #0
  4017c6:	4603      	mov	r3, r0
  4017c8:	6039      	str	r1, [r7, #0]
  4017ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4017cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017d0:	2b00      	cmp	r3, #0
  4017d2:	db0a      	blt.n	4017ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4017d4:	490d      	ldr	r1, [pc, #52]	; (40180c <__NVIC_SetPriority+0x4c>)
  4017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017da:	683a      	ldr	r2, [r7, #0]
  4017dc:	b2d2      	uxtb	r2, r2
  4017de:	0112      	lsls	r2, r2, #4
  4017e0:	b2d2      	uxtb	r2, r2
  4017e2:	440b      	add	r3, r1
  4017e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
  4017e8:	e00a      	b.n	401800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4017ea:	4909      	ldr	r1, [pc, #36]	; (401810 <__NVIC_SetPriority+0x50>)
  4017ec:	79fb      	ldrb	r3, [r7, #7]
  4017ee:	f003 030f 	and.w	r3, r3, #15
  4017f2:	3b04      	subs	r3, #4
  4017f4:	683a      	ldr	r2, [r7, #0]
  4017f6:	b2d2      	uxtb	r2, r2
  4017f8:	0112      	lsls	r2, r2, #4
  4017fa:	b2d2      	uxtb	r2, r2
  4017fc:	440b      	add	r3, r1
  4017fe:	761a      	strb	r2, [r3, #24]
}
  401800:	bf00      	nop
  401802:	370c      	adds	r7, #12
  401804:	46bd      	mov	sp, r7
  401806:	bc80      	pop	{r7}
  401808:	4770      	bx	lr
  40180a:	bf00      	nop
  40180c:	e000e100 	.word	0xe000e100
  401810:	e000ed00 	.word	0xe000ed00

00401814 <osc_get_rate>:
{
  401814:	b480      	push	{r7}
  401816:	b083      	sub	sp, #12
  401818:	af00      	add	r7, sp, #0
  40181a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40181c:	687b      	ldr	r3, [r7, #4]
  40181e:	2b07      	cmp	r3, #7
  401820:	d825      	bhi.n	40186e <osc_get_rate+0x5a>
  401822:	a201      	add	r2, pc, #4	; (adr r2, 401828 <osc_get_rate+0x14>)
  401824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401828:	00401849 	.word	0x00401849
  40182c:	0040184f 	.word	0x0040184f
  401830:	00401855 	.word	0x00401855
  401834:	0040185b 	.word	0x0040185b
  401838:	0040185f 	.word	0x0040185f
  40183c:	00401863 	.word	0x00401863
  401840:	00401867 	.word	0x00401867
  401844:	0040186b 	.word	0x0040186b
		return OSC_SLCK_32K_RC_HZ;
  401848:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40184c:	e010      	b.n	401870 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40184e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401852:	e00d      	b.n	401870 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401858:	e00a      	b.n	401870 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40185a:	4b08      	ldr	r3, [pc, #32]	; (40187c <osc_get_rate+0x68>)
  40185c:	e008      	b.n	401870 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40185e:	4b08      	ldr	r3, [pc, #32]	; (401880 <osc_get_rate+0x6c>)
  401860:	e006      	b.n	401870 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401862:	4b08      	ldr	r3, [pc, #32]	; (401884 <osc_get_rate+0x70>)
  401864:	e004      	b.n	401870 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401866:	4b07      	ldr	r3, [pc, #28]	; (401884 <osc_get_rate+0x70>)
  401868:	e002      	b.n	401870 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40186a:	4b06      	ldr	r3, [pc, #24]	; (401884 <osc_get_rate+0x70>)
  40186c:	e000      	b.n	401870 <osc_get_rate+0x5c>
	return 0;
  40186e:	2300      	movs	r3, #0
}
  401870:	4618      	mov	r0, r3
  401872:	370c      	adds	r7, #12
  401874:	46bd      	mov	sp, r7
  401876:	bc80      	pop	{r7}
  401878:	4770      	bx	lr
  40187a:	bf00      	nop
  40187c:	003d0900 	.word	0x003d0900
  401880:	007a1200 	.word	0x007a1200
  401884:	00b71b00 	.word	0x00b71b00

00401888 <sysclk_get_main_hz>:
{
  401888:	b580      	push	{r7, lr}
  40188a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40188c:	2006      	movs	r0, #6
  40188e:	4b04      	ldr	r3, [pc, #16]	; (4018a0 <sysclk_get_main_hz+0x18>)
  401890:	4798      	blx	r3
  401892:	4602      	mov	r2, r0
  401894:	4613      	mov	r3, r2
  401896:	009b      	lsls	r3, r3, #2
  401898:	4413      	add	r3, r2
  40189a:	009b      	lsls	r3, r3, #2
}
  40189c:	4618      	mov	r0, r3
  40189e:	bd80      	pop	{r7, pc}
  4018a0:	00401815 	.word	0x00401815

004018a4 <sysclk_get_cpu_hz>:
{
  4018a4:	b580      	push	{r7, lr}
  4018a6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4018a8:	4b02      	ldr	r3, [pc, #8]	; (4018b4 <sysclk_get_cpu_hz+0x10>)
  4018aa:	4798      	blx	r3
  4018ac:	4603      	mov	r3, r0
  4018ae:	085b      	lsrs	r3, r3, #1
}
  4018b0:	4618      	mov	r0, r3
  4018b2:	bd80      	pop	{r7, pc}
  4018b4:	00401889 	.word	0x00401889

004018b8 <vsync_handler>:
#include "ov2640.h"

static volatile uint32_t g_ul_vsync_flag = false;

void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
  4018b8:	b480      	push	{r7}
  4018ba:	b083      	sub	sp, #12
  4018bc:	af00      	add	r7, sp, #0
  4018be:	6078      	str	r0, [r7, #4]
  4018c0:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	g_ul_vsync_flag = true;
  4018c2:	4b04      	ldr	r3, [pc, #16]	; (4018d4 <vsync_handler+0x1c>)
  4018c4:	2201      	movs	r2, #1
  4018c6:	601a      	str	r2, [r3, #0]
}
  4018c8:	bf00      	nop
  4018ca:	370c      	adds	r7, #12
  4018cc:	46bd      	mov	sp, r7
  4018ce:	bc80      	pop	{r7}
  4018d0:	4770      	bx	lr
  4018d2:	bf00      	nop
  4018d4:	20000a58 	.word	0x20000a58

004018d8 <init_vsync_interrupts>:

void init_vsync_interrupts(void)
{
  4018d8:	b590      	push	{r4, r7, lr}
  4018da:	b083      	sub	sp, #12
  4018dc:	af02      	add	r7, sp, #8
	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(OV2640_VSYNC_PIO, OV2640_VSYNC_ID, OV2640_VSYNC_MASK,
  4018de:	4b0a      	ldr	r3, [pc, #40]	; (401908 <init_vsync_interrupts+0x30>)
  4018e0:	9300      	str	r3, [sp, #0]
  4018e2:	2301      	movs	r3, #1
  4018e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4018e8:	210b      	movs	r1, #11
  4018ea:	4808      	ldr	r0, [pc, #32]	; (40190c <init_vsync_interrupts+0x34>)
  4018ec:	4c08      	ldr	r4, [pc, #32]	; (401910 <init_vsync_interrupts+0x38>)
  4018ee:	47a0      	blx	r4
			OV2640_VSYNC_TYPE, vsync_handler);

	/* Enable PIO controller IRQs */
	NVIC_EnableIRQ((IRQn_Type)OV2640_VSYNC_ID);
  4018f0:	200b      	movs	r0, #11
  4018f2:	4b08      	ldr	r3, [pc, #32]	; (401914 <init_vsync_interrupts+0x3c>)
  4018f4:	4798      	blx	r3
	
	pio_enable_interrupt(OV2640_VSYNC_PIO, OV2640_VSYNC_MASK);
  4018f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4018fa:	4804      	ldr	r0, [pc, #16]	; (40190c <init_vsync_interrupts+0x34>)
  4018fc:	4b06      	ldr	r3, [pc, #24]	; (401918 <init_vsync_interrupts+0x40>)
  4018fe:	4798      	blx	r3
}
  401900:	bf00      	nop
  401902:	3704      	adds	r7, #4
  401904:	46bd      	mov	sp, r7
  401906:	bd90      	pop	{r4, r7, pc}
  401908:	004018b9 	.word	0x004018b9
  40190c:	400e0e00 	.word	0x400e0e00
  401910:	00400ab1 	.word	0x00400ab1
  401914:	00401709 	.word	0x00401709
  401918:	0040074f 	.word	0x0040074f

0040191c <configure_twi>:

void configure_twi(void)
{
  40191c:	b580      	push	{r7, lr}
  40191e:	b084      	sub	sp, #16
  401920:	af00      	add	r7, sp, #0
	twi_options_t opt;
	
	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);
  401922:	2013      	movs	r0, #19
  401924:	4b13      	ldr	r3, [pc, #76]	; (401974 <configure_twi+0x58>)
  401926:	4798      	blx	r3

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  401928:	4b13      	ldr	r3, [pc, #76]	; (401978 <configure_twi+0x5c>)
  40192a:	4798      	blx	r3
  40192c:	4603      	mov	r3, r0
  40192e:	607b      	str	r3, [r7, #4]
	opt.speed      = TWI_CLK;
  401930:	4b12      	ldr	r3, [pc, #72]	; (40197c <configure_twi+0x60>)
  401932:	60bb      	str	r3, [r7, #8]
	twi_master_init(BOARD_TWI, &opt);
  401934:	1d3b      	adds	r3, r7, #4
  401936:	4619      	mov	r1, r3
  401938:	4811      	ldr	r0, [pc, #68]	; (401980 <configure_twi+0x64>)
  40193a:	4b12      	ldr	r3, [pc, #72]	; (401984 <configure_twi+0x68>)
  40193c:	4798      	blx	r3

	/* Configure TWI interrupts */
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
  40193e:	2013      	movs	r0, #19
  401940:	4b11      	ldr	r3, [pc, #68]	; (401988 <configure_twi+0x6c>)
  401942:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
  401944:	2013      	movs	r0, #19
  401946:	4b11      	ldr	r3, [pc, #68]	; (40198c <configure_twi+0x70>)
  401948:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
  40194a:	2100      	movs	r1, #0
  40194c:	2013      	movs	r0, #19
  40194e:	4b10      	ldr	r3, [pc, #64]	; (401990 <configure_twi+0x74>)
  401950:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
  401952:	2013      	movs	r0, #19
  401954:	4b0f      	ldr	r3, [pc, #60]	; (401994 <configure_twi+0x78>)
  401956:	4798      	blx	r3
	
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401958:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40195c:	2003      	movs	r0, #3
  40195e:	4b0e      	ldr	r3, [pc, #56]	; (401998 <configure_twi+0x7c>)
  401960:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  401962:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401966:	2004      	movs	r0, #4
  401968:	4b0b      	ldr	r3, [pc, #44]	; (401998 <configure_twi+0x7c>)
  40196a:	4798      	blx	r3
	
}
  40196c:	bf00      	nop
  40196e:	3710      	adds	r7, #16
  401970:	46bd      	mov	sp, r7
  401972:	bd80      	pop	{r7, pc}
  401974:	00400e1d 	.word	0x00400e1d
  401978:	004018a5 	.word	0x004018a5
  40197c:	00061a80 	.word	0x00061a80
  401980:	40018000 	.word	0x40018000
  401984:	00401029 	.word	0x00401029
  401988:	00401741 	.word	0x00401741
  40198c:	00401785 	.word	0x00401785
  401990:	004017c1 	.word	0x004017c1
  401994:	00401709 	.word	0x00401709
  401998:	004007b1 	.word	0x004007b1

0040199c <pio_capture_init>:



void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
  40199c:	b580      	push	{r7, lr}
  40199e:	b082      	sub	sp, #8
  4019a0:	af00      	add	r7, sp, #0
  4019a2:	6078      	str	r0, [r7, #4]
  4019a4:	6039      	str	r1, [r7, #0]
	/* Enable peripheral clock */
	pmc_enable_periph_clk(ul_id);
  4019a6:	6838      	ldr	r0, [r7, #0]
  4019a8:	4b1a      	ldr	r3, [pc, #104]	; (401a14 <pio_capture_init+0x78>)
  4019aa:	4798      	blx	r3

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  4019ac:	687b      	ldr	r3, [r7, #4]
  4019ae:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4019b2:	f023 0201 	bic.w	r2, r3, #1
  4019b6:	687b      	ldr	r3, [r7, #4]
  4019b8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  4019bc:	687b      	ldr	r3, [r7, #4]
  4019be:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
  4019c2:	f043 0208 	orr.w	r2, r3, #8
  4019c6:	687b      	ldr	r3, [r7, #4]
  4019c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  4019cc:	687b      	ldr	r3, [r7, #4]
  4019ce:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4019d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
  4019d6:	687b      	ldr	r3, [r7, #4]
  4019d8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  4019dc:	687b      	ldr	r3, [r7, #4]
  4019de:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4019e2:	f043 0220 	orr.w	r2, r3, #32
  4019e6:	687b      	ldr	r3, [r7, #4]
  4019e8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  4019ec:	687b      	ldr	r3, [r7, #4]
  4019ee:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4019f2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
  4019f6:	687b      	ldr	r3, [r7, #4]
  4019f8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  4019fc:	687b      	ldr	r3, [r7, #4]
  4019fe:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401a02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  401a06:	687b      	ldr	r3, [r7, #4]
  401a08:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150



}
  401a0c:	bf00      	nop
  401a0e:	3708      	adds	r7, #8
  401a10:	46bd      	mov	sp, r7
  401a12:	bd80      	pop	{r7, pc}
  401a14:	00400e1d 	.word	0x00400e1d

00401a18 <pio_capture_to_buffer>:

static uint8_t pio_capture_to_buffer(Pio *p_pio, uint8_t *uc_buf,
uint32_t ul_size)
{
  401a18:	b480      	push	{r7}
  401a1a:	b085      	sub	sp, #20
  401a1c:	af00      	add	r7, sp, #0
  401a1e:	60f8      	str	r0, [r7, #12]
  401a20:	60b9      	str	r1, [r7, #8]
  401a22:	607a      	str	r2, [r7, #4]
	/* Check if the first PDC bank is free */
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) {
  401a24:	68fb      	ldr	r3, [r7, #12]
  401a26:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
  401a2a:	2b00      	cmp	r3, #0
  401a2c:	d112      	bne.n	401a54 <pio_capture_to_buffer+0x3c>
  401a2e:	68fb      	ldr	r3, [r7, #12]
  401a30:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  401a34:	2b00      	cmp	r3, #0
  401a36:	d10d      	bne.n	401a54 <pio_capture_to_buffer+0x3c>
		p_pio->PIO_RPR = (uint32_t)uc_buf;
  401a38:	68ba      	ldr	r2, [r7, #8]
  401a3a:	68fb      	ldr	r3, [r7, #12]
  401a3c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		p_pio->PIO_RCR = ul_size;
  401a40:	68fb      	ldr	r3, [r7, #12]
  401a42:	687a      	ldr	r2, [r7, #4]
  401a44:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
		p_pio->PIO_PTCR = PIO_PTCR_RXTEN;
  401a48:	68fb      	ldr	r3, [r7, #12]
  401a4a:	2201      	movs	r2, #1
  401a4c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		return 1;
  401a50:	2301      	movs	r3, #1
  401a52:	e00f      	b.n	401a74 <pio_capture_to_buffer+0x5c>
		} else if (p_pio->PIO_RNCR == 0) {
  401a54:	68fb      	ldr	r3, [r7, #12]
  401a56:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  401a5a:	2b00      	cmp	r3, #0
  401a5c:	d109      	bne.n	401a72 <pio_capture_to_buffer+0x5a>
		p_pio->PIO_RNPR = (uint32_t)uc_buf;
  401a5e:	68ba      	ldr	r2, [r7, #8]
  401a60:	68fb      	ldr	r3, [r7, #12]
  401a62:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		p_pio->PIO_RNCR = ul_size;
  401a66:	68fb      	ldr	r3, [r7, #12]
  401a68:	687a      	ldr	r2, [r7, #4]
  401a6a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
		return 1;
  401a6e:	2301      	movs	r3, #1
  401a70:	e000      	b.n	401a74 <pio_capture_to_buffer+0x5c>
		} else {
		return 0;
  401a72:	2300      	movs	r3, #0
	}
}
  401a74:	4618      	mov	r0, r3
  401a76:	3714      	adds	r7, #20
  401a78:	46bd      	mov	sp, r7
  401a7a:	bc80      	pop	{r7}
  401a7c:	4770      	bx	lr
	...

00401a80 <init_camera>:


void init_camera(void)
{
  401a80:	b580      	push	{r7, lr}
  401a82:	af00      	add	r7, sp, #0
	
	pmc_enable_pllbck(7, 0x1, 1);
  401a84:	2201      	movs	r2, #1
  401a86:	2101      	movs	r1, #1
  401a88:	2007      	movs	r0, #7
  401a8a:	4b26      	ldr	r3, [pc, #152]	; (401b24 <init_camera+0xa4>)
  401a8c:	4798      	blx	r3
	
	pio_capture_init(OV_DATA_BUS_PIO, OV_DATA_BUS_ID);
  401a8e:	210b      	movs	r1, #11
  401a90:	4825      	ldr	r0, [pc, #148]	; (401b28 <init_camera+0xa8>)
  401a92:	4b26      	ldr	r3, [pc, #152]	; (401b2c <init_camera+0xac>)
  401a94:	4798      	blx	r3
	
	init_vsync_interrupts();
  401a96:	4b26      	ldr	r3, [pc, #152]	; (401b30 <init_camera+0xb0>)
  401a98:	4798      	blx	r3
	
	/* Init PCK1 to work at 24 Mhz */
	/* 96/4=24 Mhz */
	PMC->PMC_PCK[0] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLB_CLK);
  401a9a:	4b26      	ldr	r3, [pc, #152]	; (401b34 <init_camera+0xb4>)
  401a9c:	2223      	movs	r2, #35	; 0x23
  401a9e:	641a      	str	r2, [r3, #64]	; 0x40
	PMC->PMC_SCER = PMC_SCER_PCK0;
  401aa0:	4b24      	ldr	r3, [pc, #144]	; (401b34 <init_camera+0xb4>)
  401aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
  401aa6:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK0)) {
  401aa8:	bf00      	nop
  401aaa:	4b22      	ldr	r3, [pc, #136]	; (401b34 <init_camera+0xb4>)
  401aac:	689b      	ldr	r3, [r3, #8]
  401aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401ab2:	2b00      	cmp	r3, #0
  401ab4:	d0f9      	beq.n	401aaa <init_camera+0x2a>
	}
	
	configure_twi();	
  401ab6:	4b20      	ldr	r3, [pc, #128]	; (401b38 <init_camera+0xb8>)
  401ab8:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  401aba:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401abe:	2011      	movs	r0, #17
  401ac0:	4b1e      	ldr	r3, [pc, #120]	; (401b3c <init_camera+0xbc>)
  401ac2:	4798      	blx	r3
	
	
	gpio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
  401ac4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401ac8:	2014      	movs	r0, #20
  401aca:	4b1c      	ldr	r3, [pc, #112]	; (401b3c <init_camera+0xbc>)
  401acc:	4798      	blx	r3
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  401ace:	2171      	movs	r1, #113	; 0x71
  401ad0:	2010      	movs	r0, #16
  401ad2:	4b1a      	ldr	r3, [pc, #104]	; (401b3c <init_camera+0xbc>)
  401ad4:	4798      	blx	r3
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  401ad6:	2171      	movs	r1, #113	; 0x71
  401ad8:	200f      	movs	r0, #15
  401ada:	4b18      	ldr	r3, [pc, #96]	; (401b3c <init_camera+0xbc>)
  401adc:	4798      	blx	r3
	
	gpio_configure_pin(OV_DATA_BUS_D0, OV_DATA_BUS_FLAGS);
  401ade:	4918      	ldr	r1, [pc, #96]	; (401b40 <init_camera+0xc0>)
  401ae0:	2018      	movs	r0, #24
  401ae2:	4b16      	ldr	r3, [pc, #88]	; (401b3c <init_camera+0xbc>)
  401ae4:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D1, OV_DATA_BUS_FLAGS);
  401ae6:	4916      	ldr	r1, [pc, #88]	; (401b40 <init_camera+0xc0>)
  401ae8:	2019      	movs	r0, #25
  401aea:	4b14      	ldr	r3, [pc, #80]	; (401b3c <init_camera+0xbc>)
  401aec:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  401aee:	4914      	ldr	r1, [pc, #80]	; (401b40 <init_camera+0xc0>)
  401af0:	201a      	movs	r0, #26
  401af2:	4b12      	ldr	r3, [pc, #72]	; (401b3c <init_camera+0xbc>)
  401af4:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  401af6:	4912      	ldr	r1, [pc, #72]	; (401b40 <init_camera+0xc0>)
  401af8:	201b      	movs	r0, #27
  401afa:	4b10      	ldr	r3, [pc, #64]	; (401b3c <init_camera+0xbc>)
  401afc:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  401afe:	4910      	ldr	r1, [pc, #64]	; (401b40 <init_camera+0xc0>)
  401b00:	201c      	movs	r0, #28
  401b02:	4b0e      	ldr	r3, [pc, #56]	; (401b3c <init_camera+0xbc>)
  401b04:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  401b06:	490e      	ldr	r1, [pc, #56]	; (401b40 <init_camera+0xc0>)
  401b08:	201d      	movs	r0, #29
  401b0a:	4b0c      	ldr	r3, [pc, #48]	; (401b3c <init_camera+0xbc>)
  401b0c:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  401b0e:	490c      	ldr	r1, [pc, #48]	; (401b40 <init_camera+0xc0>)
  401b10:	201e      	movs	r0, #30
  401b12:	4b0a      	ldr	r3, [pc, #40]	; (401b3c <init_camera+0xbc>)
  401b14:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  401b16:	490a      	ldr	r1, [pc, #40]	; (401b40 <init_camera+0xc0>)
  401b18:	201f      	movs	r0, #31
  401b1a:	4b08      	ldr	r3, [pc, #32]	; (401b3c <init_camera+0xbc>)
  401b1c:	4798      	blx	r3


	/* Init PIO capture*/


}
  401b1e:	bf00      	nop
  401b20:	bd80      	pop	{r7, pc}
  401b22:	bf00      	nop
  401b24:	00400d9d 	.word	0x00400d9d
  401b28:	400e0e00 	.word	0x400e0e00
  401b2c:	0040199d 	.word	0x0040199d
  401b30:	004018d9 	.word	0x004018d9
  401b34:	400e0400 	.word	0x400e0400
  401b38:	0040191d 	.word	0x0040191d
  401b3c:	004007b1 	.word	0x004007b1
  401b40:	28000001 	.word	0x28000001

00401b44 <configure_camera>:

void configure_camera(void)
{
  401b44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b48:	af00      	add	r7, sp, #0
	/* ov7740 Initialization */
	while (ov_init(BOARD_TWI) == 1) {
  401b4a:	bf00      	nop
  401b4c:	482c      	ldr	r0, [pc, #176]	; (401c00 <configure_camera+0xbc>)
  401b4e:	4b2d      	ldr	r3, [pc, #180]	; (401c04 <configure_camera+0xc0>)
  401b50:	4798      	blx	r3
  401b52:	4603      	mov	r3, r0
  401b54:	2b01      	cmp	r3, #1
  401b56:	d0f9      	beq.n	401b4c <configure_camera+0x8>
	}

	/* ov7740 configuration */
	ov_configure(BOARD_TWI, JPEG_INIT);
  401b58:	2100      	movs	r1, #0
  401b5a:	4829      	ldr	r0, [pc, #164]	; (401c00 <configure_camera+0xbc>)
  401b5c:	4b2a      	ldr	r3, [pc, #168]	; (401c08 <configure_camera+0xc4>)
  401b5e:	4798      	blx	r3
	ov_configure(BOARD_TWI, YUV422);
  401b60:	2101      	movs	r1, #1
  401b62:	4827      	ldr	r0, [pc, #156]	; (401c00 <configure_camera+0xbc>)
  401b64:	4b28      	ldr	r3, [pc, #160]	; (401c08 <configure_camera+0xc4>)
  401b66:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG);
  401b68:	2102      	movs	r1, #2
  401b6a:	4825      	ldr	r0, [pc, #148]	; (401c00 <configure_camera+0xbc>)
  401b6c:	4b26      	ldr	r3, [pc, #152]	; (401c08 <configure_camera+0xc4>)
  401b6e:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG_640x480);
  401b70:	2104      	movs	r1, #4
  401b72:	4823      	ldr	r0, [pc, #140]	; (401c00 <configure_camera+0xbc>)
  401b74:	4b24      	ldr	r3, [pc, #144]	; (401c08 <configure_camera+0xc4>)
  401b76:	4798      	blx	r3

	/* Wait 3 seconds to let the image sensor to adapt to environment */
	delay_ms(3000);
  401b78:	4b24      	ldr	r3, [pc, #144]	; (401c0c <configure_camera+0xc8>)
  401b7a:	4798      	blx	r3
  401b7c:	4603      	mov	r3, r0
  401b7e:	4619      	mov	r1, r3
  401b80:	f04f 0200 	mov.w	r2, #0
  401b84:	460b      	mov	r3, r1
  401b86:	4614      	mov	r4, r2
  401b88:	18db      	adds	r3, r3, r3
  401b8a:	eb44 0404 	adc.w	r4, r4, r4
  401b8e:	185b      	adds	r3, r3, r1
  401b90:	eb44 0402 	adc.w	r4, r4, r2
  401b94:	ea4f 1b04 	mov.w	fp, r4, lsl #4
  401b98:	ea4b 7b13 	orr.w	fp, fp, r3, lsr #28
  401b9c:	ea4f 1a03 	mov.w	sl, r3, lsl #4
  401ba0:	4653      	mov	r3, sl
  401ba2:	465c      	mov	r4, fp
  401ba4:	1a5b      	subs	r3, r3, r1
  401ba6:	eb64 0402 	sbc.w	r4, r4, r2
  401baa:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  401bae:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  401bb2:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  401bb6:	4643      	mov	r3, r8
  401bb8:	464c      	mov	r4, r9
  401bba:	1a5b      	subs	r3, r3, r1
  401bbc:	eb64 0402 	sbc.w	r4, r4, r2
  401bc0:	00e6      	lsls	r6, r4, #3
  401bc2:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  401bc6:	00dd      	lsls	r5, r3, #3
  401bc8:	462b      	mov	r3, r5
  401bca:	4634      	mov	r4, r6
  401bcc:	4619      	mov	r1, r3
  401bce:	4622      	mov	r2, r4
  401bd0:	f243 63af 	movw	r3, #13999	; 0x36af
  401bd4:	f04f 0400 	mov.w	r4, #0
  401bd8:	18cd      	adds	r5, r1, r3
  401bda:	eb42 0604 	adc.w	r6, r2, r4
  401bde:	4628      	mov	r0, r5
  401be0:	4631      	mov	r1, r6
  401be2:	4c0b      	ldr	r4, [pc, #44]	; (401c10 <configure_camera+0xcc>)
  401be4:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401be8:	f04f 0300 	mov.w	r3, #0
  401bec:	47a0      	blx	r4
  401bee:	4603      	mov	r3, r0
  401bf0:	460c      	mov	r4, r1
  401bf2:	4618      	mov	r0, r3
  401bf4:	4b07      	ldr	r3, [pc, #28]	; (401c14 <configure_camera+0xd0>)
  401bf6:	4798      	blx	r3
}
  401bf8:	bf00      	nop
  401bfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401bfe:	bf00      	nop
  401c00:	40018000 	.word	0x40018000
  401c04:	004020a5 	.word	0x004020a5
  401c08:	00402131 	.word	0x00402131
  401c0c:	004018a5 	.word	0x004018a5
  401c10:	004033d9 	.word	0x004033d9
  401c14:	20000001 	.word	0x20000001

00401c18 <start_capture>:


uint8_t start_capture(void)
{
  401c18:	b580      	push	{r7, lr}
  401c1a:	b082      	sub	sp, #8
  401c1c:	af00      	add	r7, sp, #0

	/* Enable vsync interrupt*/
	pio_enable_interrupt(OV2640_VSYNC_PIO, OV2640_VSYNC_MASK);
  401c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401c22:	4818      	ldr	r0, [pc, #96]	; (401c84 <start_capture+0x6c>)
  401c24:	4b18      	ldr	r3, [pc, #96]	; (401c88 <start_capture+0x70>)
  401c26:	4798      	blx	r3

	/* Capture acquisition will start on rising edge of Vsync signal.
	 * So wait g_vsync_flag = 1 before start process
	 */
	while (!g_ul_vsync_flag) {
  401c28:	bf00      	nop
  401c2a:	4b18      	ldr	r3, [pc, #96]	; (401c8c <start_capture+0x74>)
  401c2c:	681b      	ldr	r3, [r3, #0]
  401c2e:	2b00      	cmp	r3, #0
  401c30:	d0fb      	beq.n	401c2a <start_capture+0x12>
	}

	/* Disable vsync interrupt*/
	pio_disable_interrupt(OV2640_VSYNC_PIO, OV2640_VSYNC_MASK);
  401c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401c36:	4813      	ldr	r0, [pc, #76]	; (401c84 <start_capture+0x6c>)
  401c38:	4b15      	ldr	r3, [pc, #84]	; (401c90 <start_capture+0x78>)
  401c3a:	4798      	blx	r3

	/* Enable pio capture*/
	pio_capture_enable(OV_DATA_BUS_PIO);
  401c3c:	4811      	ldr	r0, [pc, #68]	; (401c84 <start_capture+0x6c>)
  401c3e:	4b15      	ldr	r3, [pc, #84]	; (401c94 <start_capture+0x7c>)
  401c40:	4798      	blx	r3

	/* Capture data and send it to external SRAM memory thanks to PDC
	 * feature */
	pio_capture_to_buffer(OV_DATA_BUS_PIO, image_buffer,
  401c42:	f243 02d4 	movw	r2, #12500	; 0x30d4
  401c46:	4914      	ldr	r1, [pc, #80]	; (401c98 <start_capture+0x80>)
  401c48:	480e      	ldr	r0, [pc, #56]	; (401c84 <start_capture+0x6c>)
  401c4a:	4b14      	ldr	r3, [pc, #80]	; (401c9c <start_capture+0x84>)
  401c4c:	4798      	blx	r3
			IMAGE_MAX >> 2);


	/* Wait end of capture*/
	while (!((OV_DATA_BUS_PIO->PIO_PCISR & PIO_PCIMR_RXBUFF) ==
  401c4e:	bf00      	nop
  401c50:	4b0c      	ldr	r3, [pc, #48]	; (401c84 <start_capture+0x6c>)
  401c52:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
  401c56:	f003 0308 	and.w	r3, r3, #8
  401c5a:	2b08      	cmp	r3, #8
  401c5c:	d1f8      	bne.n	401c50 <start_capture+0x38>
			PIO_PCIMR_RXBUFF)) {
	}

	/* Disable pio capture*/
	pio_capture_disable(OV_DATA_BUS_PIO);
  401c5e:	4809      	ldr	r0, [pc, #36]	; (401c84 <start_capture+0x6c>)
  401c60:	4b0f      	ldr	r3, [pc, #60]	; (401ca0 <start_capture+0x88>)
  401c62:	4798      	blx	r3
	
				
				
	vsync_flag = false;
  401c64:	4b0f      	ldr	r3, [pc, #60]	; (401ca4 <start_capture+0x8c>)
  401c66:	2200      	movs	r2, #0
  401c68:	601a      	str	r2, [r3, #0]

	/* Reset vsync flag*/
	g_ul_vsync_flag = false;
  401c6a:	4b08      	ldr	r3, [pc, #32]	; (401c8c <start_capture+0x74>)
  401c6c:	2200      	movs	r2, #0
  401c6e:	601a      	str	r2, [r3, #0]
	
	uint8_t val = find_image_len();
  401c70:	4b0d      	ldr	r3, [pc, #52]	; (401ca8 <start_capture+0x90>)
  401c72:	4798      	blx	r3
  401c74:	4603      	mov	r3, r0
  401c76:	71fb      	strb	r3, [r7, #7]
	return val;
  401c78:	79fb      	ldrb	r3, [r7, #7]
}
  401c7a:	4618      	mov	r0, r3
  401c7c:	3708      	adds	r7, #8
  401c7e:	46bd      	mov	sp, r7
  401c80:	bd80      	pop	{r7, pc}
  401c82:	bf00      	nop
  401c84:	400e0e00 	.word	0x400e0e00
  401c88:	0040074f 	.word	0x0040074f
  401c8c:	20000a58 	.word	0x20000a58
  401c90:	00400769 	.word	0x00400769
  401c94:	00400985 	.word	0x00400985
  401c98:	20000ac4 	.word	0x20000ac4
  401c9c:	00401a19 	.word	0x00401a19
  401ca0:	004009b1 	.word	0x004009b1
  401ca4:	20000abc 	.word	0x20000abc
  401ca8:	00401cad 	.word	0x00401cad

00401cac <find_image_len>:


uint8_t find_image_len(void){
  401cac:	b480      	push	{r7}
  401cae:	b083      	sub	sp, #12
  401cb0:	af00      	add	r7, sp, #0
		uint8_t start_exists = 0;
  401cb2:	2300      	movs	r3, #0
  401cb4:	71fb      	strb	r3, [r7, #7]
		uint32_t arrSize = 0;
  401cb6:	2300      	movs	r3, #0
  401cb8:	603b      	str	r3, [r7, #0]
		start_of_image = 0;
  401cba:	4b21      	ldr	r3, [pc, #132]	; (401d40 <find_image_len+0x94>)
  401cbc:	2200      	movs	r2, #0
  401cbe:	601a      	str	r2, [r3, #0]
		end_of_image = 0;
  401cc0:	4b20      	ldr	r3, [pc, #128]	; (401d44 <find_image_len+0x98>)
  401cc2:	2200      	movs	r2, #0
  401cc4:	601a      	str	r2, [r3, #0]
		while( arrSize+1 < IMAGE_MAX){
  401cc6:	e028      	b.n	401d1a <find_image_len+0x6e>
			if(image_buffer[arrSize] == 0xff && image_buffer[arrSize+1] == 0xd8){
  401cc8:	4a1f      	ldr	r2, [pc, #124]	; (401d48 <find_image_len+0x9c>)
  401cca:	683b      	ldr	r3, [r7, #0]
  401ccc:	4413      	add	r3, r2
  401cce:	781b      	ldrb	r3, [r3, #0]
  401cd0:	2bff      	cmp	r3, #255	; 0xff
  401cd2:	d10a      	bne.n	401cea <find_image_len+0x3e>
  401cd4:	683b      	ldr	r3, [r7, #0]
  401cd6:	3301      	adds	r3, #1
  401cd8:	4a1b      	ldr	r2, [pc, #108]	; (401d48 <find_image_len+0x9c>)
  401cda:	5cd3      	ldrb	r3, [r2, r3]
  401cdc:	2bd8      	cmp	r3, #216	; 0xd8
  401cde:	d104      	bne.n	401cea <find_image_len+0x3e>
				start_of_image = arrSize;
  401ce0:	4a17      	ldr	r2, [pc, #92]	; (401d40 <find_image_len+0x94>)
  401ce2:	683b      	ldr	r3, [r7, #0]
  401ce4:	6013      	str	r3, [r2, #0]
				start_exists = 1;
  401ce6:	2301      	movs	r3, #1
  401ce8:	71fb      	strb	r3, [r7, #7]
			}
			if(image_buffer[arrSize] == 0xff && image_buffer[arrSize+1] == 0xd9 && start_exists == 1){
  401cea:	4a17      	ldr	r2, [pc, #92]	; (401d48 <find_image_len+0x9c>)
  401cec:	683b      	ldr	r3, [r7, #0]
  401cee:	4413      	add	r3, r2
  401cf0:	781b      	ldrb	r3, [r3, #0]
  401cf2:	2bff      	cmp	r3, #255	; 0xff
  401cf4:	d10e      	bne.n	401d14 <find_image_len+0x68>
  401cf6:	683b      	ldr	r3, [r7, #0]
  401cf8:	3301      	adds	r3, #1
  401cfa:	4a13      	ldr	r2, [pc, #76]	; (401d48 <find_image_len+0x9c>)
  401cfc:	5cd3      	ldrb	r3, [r2, r3]
  401cfe:	2bd9      	cmp	r3, #217	; 0xd9
  401d00:	d108      	bne.n	401d14 <find_image_len+0x68>
  401d02:	79fb      	ldrb	r3, [r7, #7]
  401d04:	2b01      	cmp	r3, #1
  401d06:	d105      	bne.n	401d14 <find_image_len+0x68>
				end_of_image = arrSize+2;
  401d08:	683b      	ldr	r3, [r7, #0]
  401d0a:	3302      	adds	r3, #2
  401d0c:	4a0d      	ldr	r2, [pc, #52]	; (401d44 <find_image_len+0x98>)
  401d0e:	6013      	str	r3, [r2, #0]
				return 1;
  401d10:	2301      	movs	r3, #1
  401d12:	e00f      	b.n	401d34 <find_image_len+0x88>
			}
			arrSize = arrSize + 1;
  401d14:	683b      	ldr	r3, [r7, #0]
  401d16:	3301      	adds	r3, #1
  401d18:	603b      	str	r3, [r7, #0]
		while( arrSize+1 < IMAGE_MAX){
  401d1a:	683b      	ldr	r3, [r7, #0]
  401d1c:	3301      	adds	r3, #1
  401d1e:	f24c 324f 	movw	r2, #49999	; 0xc34f
  401d22:	4293      	cmp	r3, r2
  401d24:	d9d0      	bls.n	401cc8 <find_image_len+0x1c>
		}
		start_of_image = 0;
  401d26:	4b06      	ldr	r3, [pc, #24]	; (401d40 <find_image_len+0x94>)
  401d28:	2200      	movs	r2, #0
  401d2a:	601a      	str	r2, [r3, #0]
		end_of_image = 0;
  401d2c:	4b05      	ldr	r3, [pc, #20]	; (401d44 <find_image_len+0x98>)
  401d2e:	2200      	movs	r2, #0
  401d30:	601a      	str	r2, [r3, #0]
		
		return 0;
  401d32:	2300      	movs	r3, #0
}
  401d34:	4618      	mov	r0, r3
  401d36:	370c      	adds	r7, #12
  401d38:	46bd      	mov	sp, r7
  401d3a:	bc80      	pop	{r7}
  401d3c:	4770      	bx	lr
  401d3e:	bf00      	nop
  401d40:	20000ab8 	.word	0x20000ab8
  401d44:	20000ac0 	.word	0x20000ac0
  401d48:	20000ac4 	.word	0x20000ac4

00401d4c <osc_get_rate>:
{
  401d4c:	b480      	push	{r7}
  401d4e:	b083      	sub	sp, #12
  401d50:	af00      	add	r7, sp, #0
  401d52:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401d54:	687b      	ldr	r3, [r7, #4]
  401d56:	2b07      	cmp	r3, #7
  401d58:	d825      	bhi.n	401da6 <osc_get_rate+0x5a>
  401d5a:	a201      	add	r2, pc, #4	; (adr r2, 401d60 <osc_get_rate+0x14>)
  401d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401d60:	00401d81 	.word	0x00401d81
  401d64:	00401d87 	.word	0x00401d87
  401d68:	00401d8d 	.word	0x00401d8d
  401d6c:	00401d93 	.word	0x00401d93
  401d70:	00401d97 	.word	0x00401d97
  401d74:	00401d9b 	.word	0x00401d9b
  401d78:	00401d9f 	.word	0x00401d9f
  401d7c:	00401da3 	.word	0x00401da3
		return OSC_SLCK_32K_RC_HZ;
  401d80:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401d84:	e010      	b.n	401da8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401d8a:	e00d      	b.n	401da8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401d8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401d90:	e00a      	b.n	401da8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401d92:	4b08      	ldr	r3, [pc, #32]	; (401db4 <osc_get_rate+0x68>)
  401d94:	e008      	b.n	401da8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401d96:	4b08      	ldr	r3, [pc, #32]	; (401db8 <osc_get_rate+0x6c>)
  401d98:	e006      	b.n	401da8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401d9a:	4b08      	ldr	r3, [pc, #32]	; (401dbc <osc_get_rate+0x70>)
  401d9c:	e004      	b.n	401da8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401d9e:	4b07      	ldr	r3, [pc, #28]	; (401dbc <osc_get_rate+0x70>)
  401da0:	e002      	b.n	401da8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401da2:	4b06      	ldr	r3, [pc, #24]	; (401dbc <osc_get_rate+0x70>)
  401da4:	e000      	b.n	401da8 <osc_get_rate+0x5c>
	return 0;
  401da6:	2300      	movs	r3, #0
}
  401da8:	4618      	mov	r0, r3
  401daa:	370c      	adds	r7, #12
  401dac:	46bd      	mov	sp, r7
  401dae:	bc80      	pop	{r7}
  401db0:	4770      	bx	lr
  401db2:	bf00      	nop
  401db4:	003d0900 	.word	0x003d0900
  401db8:	007a1200 	.word	0x007a1200
  401dbc:	00b71b00 	.word	0x00b71b00

00401dc0 <sysclk_get_main_hz>:
{
  401dc0:	b580      	push	{r7, lr}
  401dc2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401dc4:	2006      	movs	r0, #6
  401dc6:	4b04      	ldr	r3, [pc, #16]	; (401dd8 <sysclk_get_main_hz+0x18>)
  401dc8:	4798      	blx	r3
  401dca:	4602      	mov	r2, r0
  401dcc:	4613      	mov	r3, r2
  401dce:	009b      	lsls	r3, r3, #2
  401dd0:	4413      	add	r3, r2
  401dd2:	009b      	lsls	r3, r3, #2
}
  401dd4:	4618      	mov	r0, r3
  401dd6:	bd80      	pop	{r7, pc}
  401dd8:	00401d4d 	.word	0x00401d4d

00401ddc <sysclk_get_cpu_hz>:
{
  401ddc:	b580      	push	{r7, lr}
  401dde:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401de0:	4b02      	ldr	r3, [pc, #8]	; (401dec <sysclk_get_cpu_hz+0x10>)
  401de2:	4798      	blx	r3
  401de4:	4603      	mov	r3, r0
  401de6:	085b      	lsrs	r3, r3, #1
}
  401de8:	4618      	mov	r0, r3
  401dea:	bd80      	pop	{r7, pc}
  401dec:	00401dc1 	.word	0x00401dc1

00401df0 <ov_id>:
 *
 * \param p_twi TWI interface.
 * \return PID and VER.
 */
static uint32_t ov_id(Twi* const p_twi)
{
  401df0:	b580      	push	{r7, lr}
  401df2:	b08e      	sub	sp, #56	; 0x38
  401df4:	af00      	add	r7, sp, #0
  401df6:	6078      	str	r0, [r7, #4]
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  401df8:	2300      	movs	r3, #0
  401dfa:	60fb      	str	r3, [r7, #12]
	uint32_t ul_ver = 0;
  401dfc:	2300      	movs	r3, #0
  401dfe:	60bb      	str	r3, [r7, #8]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  401e00:	2330      	movs	r3, #48	; 0x30
  401e02:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	packet_pid.addr[0] = OV2640_PIDH;
  401e06:	230a      	movs	r3, #10
  401e08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	packet_pid.addr_length = 1;
  401e0c:	2301      	movs	r3, #1
  401e0e:	62bb      	str	r3, [r7, #40]	; 0x28
	packet_pid.buffer = &ul_id;
  401e10:	f107 030c 	add.w	r3, r7, #12
  401e14:	62fb      	str	r3, [r7, #44]	; 0x2c
	packet_pid.length = 1;
  401e16:	2301      	movs	r3, #1
  401e18:	633b      	str	r3, [r7, #48]	; 0x30

	ov_read_reg(p_twi, &packet_pid);
  401e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401e1e:	4619      	mov	r1, r3
  401e20:	6878      	ldr	r0, [r7, #4]
  401e22:	4b0e      	ldr	r3, [pc, #56]	; (401e5c <ov_id+0x6c>)
  401e24:	4798      	blx	r3

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  401e26:	2330      	movs	r3, #48	; 0x30
  401e28:	f887 3020 	strb.w	r3, [r7, #32]
	packet_ver.addr[0] = OV2640_PIDL;
  401e2c:	230b      	movs	r3, #11
  401e2e:	743b      	strb	r3, [r7, #16]
	packet_ver.addr_length = 1;
  401e30:	2301      	movs	r3, #1
  401e32:	617b      	str	r3, [r7, #20]
	packet_ver.buffer = &ul_ver;
  401e34:	f107 0308 	add.w	r3, r7, #8
  401e38:	61bb      	str	r3, [r7, #24]
	packet_ver.length = 1;
  401e3a:	2301      	movs	r3, #1
  401e3c:	61fb      	str	r3, [r7, #28]

	ov_read_reg(p_twi, &packet_ver);
  401e3e:	f107 0310 	add.w	r3, r7, #16
  401e42:	4619      	mov	r1, r3
  401e44:	6878      	ldr	r0, [r7, #4]
  401e46:	4b05      	ldr	r3, [pc, #20]	; (401e5c <ov_id+0x6c>)
  401e48:	4798      	blx	r3
	return ((uint32_t)(ul_id << 8) | ul_ver);
  401e4a:	68fb      	ldr	r3, [r7, #12]
  401e4c:	021a      	lsls	r2, r3, #8
  401e4e:	68bb      	ldr	r3, [r7, #8]
  401e50:	4313      	orrs	r3, r2
}
  401e52:	4618      	mov	r0, r3
  401e54:	3738      	adds	r7, #56	; 0x38
  401e56:	46bd      	mov	sp, r7
  401e58:	bd80      	pop	{r7, pc}
  401e5a:	bf00      	nop
  401e5c:	00401f89 	.word	0x00401f89

00401e60 <ov_manufacturer>:
 *
 * \param p_twi TWI interface.
 * \return 0 if the sensor is present, 1 otherwise.
 */
static uint32_t ov_manufacturer(Twi* const p_twi)
{
  401e60:	b580      	push	{r7, lr}
  401e62:	b08a      	sub	sp, #40	; 0x28
  401e64:	af00      	add	r7, sp, #0
  401e66:	6078      	str	r0, [r7, #4]
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
  401e68:	2300      	movs	r3, #0
  401e6a:	613b      	str	r3, [r7, #16]
	uint32_t ul_midl = 0;
  401e6c:	2300      	movs	r3, #0
  401e6e:	60fb      	str	r3, [r7, #12]

	/* OV_MIDH */
	twi_packet.addr[0] = OV2640_MIDH;
  401e70:	231c      	movs	r3, #28
  401e72:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401e74:	2301      	movs	r3, #1
  401e76:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401e78:	2330      	movs	r3, #48	; 0x30
  401e7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midh;
  401e7e:	f107 0310 	add.w	r3, r7, #16
  401e82:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  401e84:	2301      	movs	r3, #1
  401e86:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  401e88:	f107 0314 	add.w	r3, r7, #20
  401e8c:	4619      	mov	r1, r3
  401e8e:	6878      	ldr	r0, [r7, #4]
  401e90:	4b10      	ldr	r3, [pc, #64]	; (401ed4 <ov_manufacturer+0x74>)
  401e92:	4798      	blx	r3

	/* OV_MIDL */
	twi_packet.addr[0] = OV2640_MIDL;
  401e94:	231d      	movs	r3, #29
  401e96:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401e98:	2301      	movs	r3, #1
  401e9a:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401e9c:	2330      	movs	r3, #48	; 0x30
  401e9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midl;
  401ea2:	f107 030c 	add.w	r3, r7, #12
  401ea6:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  401ea8:	2301      	movs	r3, #1
  401eaa:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  401eac:	f107 0314 	add.w	r3, r7, #20
  401eb0:	4619      	mov	r1, r3
  401eb2:	6878      	ldr	r0, [r7, #4]
  401eb4:	4b07      	ldr	r3, [pc, #28]	; (401ed4 <ov_manufacturer+0x74>)
  401eb6:	4798      	blx	r3

	if ((ul_midh == OV2640_MIDH_DEFAULT) && (ul_midl == OV2640_MIDL_DEFAULT)) {
  401eb8:	693b      	ldr	r3, [r7, #16]
  401eba:	2b7f      	cmp	r3, #127	; 0x7f
  401ebc:	d104      	bne.n	401ec8 <ov_manufacturer+0x68>
  401ebe:	68fb      	ldr	r3, [r7, #12]
  401ec0:	2ba2      	cmp	r3, #162	; 0xa2
  401ec2:	d101      	bne.n	401ec8 <ov_manufacturer+0x68>
		return 0;
  401ec4:	2300      	movs	r3, #0
  401ec6:	e000      	b.n	401eca <ov_manufacturer+0x6a>
	}

	return 1;
  401ec8:	2301      	movs	r3, #1
}
  401eca:	4618      	mov	r0, r3
  401ecc:	3728      	adds	r7, #40	; 0x28
  401ece:	46bd      	mov	sp, r7
  401ed0:	bd80      	pop	{r7, pc}
  401ed2:	bf00      	nop
  401ed4:	00401f89 	.word	0x00401f89

00401ed8 <ov_test_write>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
static uint32_t ov_test_write(Twi* const p_twi)
{
  401ed8:	b580      	push	{r7, lr}
  401eda:	b08a      	sub	sp, #40	; 0x28
  401edc:	af00      	add	r7, sp, #0
  401ede:	6078      	str	r0, [r7, #4]
	twi_packet_t twi_packet;
	uint32_t ul_value = 0;
  401ee0:	2300      	movs	r3, #0
  401ee2:	613b      	str	r3, [r7, #16]
	uint32_t ul_oldvalue = 0;
  401ee4:	2300      	movs	r3, #0
  401ee6:	60fb      	str	r3, [r7, #12]
	uint32_t ul_entervalue = 0;
  401ee8:	2300      	movs	r3, #0
  401eea:	60bb      	str	r3, [r7, #8]

	/* OV_BLUE_GAIN */
	twi_packet.addr[0] = 0x01;
  401eec:	2301      	movs	r3, #1
  401eee:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401ef0:	2301      	movs	r3, #1
  401ef2:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401ef4:	2330      	movs	r3, #48	; 0x30
  401ef6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.length = 1;
  401efa:	2301      	movs	r3, #1
  401efc:	623b      	str	r3, [r7, #32]

	twi_packet.buffer = &ul_oldvalue;
  401efe:	f107 030c 	add.w	r3, r7, #12
  401f02:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401f04:	f107 0314 	add.w	r3, r7, #20
  401f08:	4619      	mov	r1, r3
  401f0a:	6878      	ldr	r0, [r7, #4]
  401f0c:	4b1c      	ldr	r3, [pc, #112]	; (401f80 <ov_test_write+0xa8>)
  401f0e:	4798      	blx	r3

	ul_entervalue = 0xAD;
  401f10:	23ad      	movs	r3, #173	; 0xad
  401f12:	60bb      	str	r3, [r7, #8]
	twi_packet.buffer = &ul_entervalue;
  401f14:	f107 0308 	add.w	r3, r7, #8
  401f18:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  401f1a:	f107 0314 	add.w	r3, r7, #20
  401f1e:	4619      	mov	r1, r3
  401f20:	6878      	ldr	r0, [r7, #4]
  401f22:	4b18      	ldr	r3, [pc, #96]	; (401f84 <ov_test_write+0xac>)
  401f24:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  401f26:	f107 0310 	add.w	r3, r7, #16
  401f2a:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401f2c:	f107 0314 	add.w	r3, r7, #20
  401f30:	4619      	mov	r1, r3
  401f32:	6878      	ldr	r0, [r7, #4]
  401f34:	4b12      	ldr	r3, [pc, #72]	; (401f80 <ov_test_write+0xa8>)
  401f36:	4798      	blx	r3

	if (ul_value != ul_entervalue) {
  401f38:	693a      	ldr	r2, [r7, #16]
  401f3a:	68bb      	ldr	r3, [r7, #8]
  401f3c:	429a      	cmp	r2, r3
  401f3e:	d001      	beq.n	401f44 <ov_test_write+0x6c>
		return 1;
  401f40:	2301      	movs	r3, #1
  401f42:	e018      	b.n	401f76 <ov_test_write+0x9e>
	}

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
  401f44:	f107 030c 	add.w	r3, r7, #12
  401f48:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  401f4a:	f107 0314 	add.w	r3, r7, #20
  401f4e:	4619      	mov	r1, r3
  401f50:	6878      	ldr	r0, [r7, #4]
  401f52:	4b0c      	ldr	r3, [pc, #48]	; (401f84 <ov_test_write+0xac>)
  401f54:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  401f56:	f107 0310 	add.w	r3, r7, #16
  401f5a:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401f5c:	f107 0314 	add.w	r3, r7, #20
  401f60:	4619      	mov	r1, r3
  401f62:	6878      	ldr	r0, [r7, #4]
  401f64:	4b06      	ldr	r3, [pc, #24]	; (401f80 <ov_test_write+0xa8>)
  401f66:	4798      	blx	r3

	if (ul_value != ul_oldvalue) {
  401f68:	693a      	ldr	r2, [r7, #16]
  401f6a:	68fb      	ldr	r3, [r7, #12]
  401f6c:	429a      	cmp	r2, r3
  401f6e:	d001      	beq.n	401f74 <ov_test_write+0x9c>
		return 1;
  401f70:	2301      	movs	r3, #1
  401f72:	e000      	b.n	401f76 <ov_test_write+0x9e>
	}

	return 0;
  401f74:	2300      	movs	r3, #0
}
  401f76:	4618      	mov	r0, r3
  401f78:	3728      	adds	r7, #40	; 0x28
  401f7a:	46bd      	mov	sp, r7
  401f7c:	bd80      	pop	{r7, pc}
  401f7e:	bf00      	nop
  401f80:	00401f89 	.word	0x00401f89
  401f84:	00401fad 	.word	0x00401fad

00401f88 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  401f88:	b580      	push	{r7, lr}
  401f8a:	b084      	sub	sp, #16
  401f8c:	af00      	add	r7, sp, #0
  401f8e:	6078      	str	r0, [r7, #4]
  401f90:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  401f92:	6839      	ldr	r1, [r7, #0]
  401f94:	6878      	ldr	r0, [r7, #4]
  401f96:	4b04      	ldr	r3, [pc, #16]	; (401fa8 <ov_read_reg+0x20>)
  401f98:	4798      	blx	r3
  401f9a:	60f8      	str	r0, [r7, #12]

	return ul_status;
  401f9c:	68fb      	ldr	r3, [r7, #12]
}
  401f9e:	4618      	mov	r0, r3
  401fa0:	3710      	adds	r7, #16
  401fa2:	46bd      	mov	sp, r7
  401fa4:	bd80      	pop	{r7, pc}
  401fa6:	bf00      	nop
  401fa8:	004011dd 	.word	0x004011dd

00401fac <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  401fac:	b580      	push	{r7, lr}
  401fae:	b084      	sub	sp, #16
  401fb0:	af00      	add	r7, sp, #0
  401fb2:	6078      	str	r0, [r7, #4]
  401fb4:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  401fb6:	6839      	ldr	r1, [r7, #0]
  401fb8:	6878      	ldr	r0, [r7, #4]
  401fba:	4b04      	ldr	r3, [pc, #16]	; (401fcc <ov_write_reg+0x20>)
  401fbc:	4798      	blx	r3
  401fbe:	60f8      	str	r0, [r7, #12]

	return ul_status;
  401fc0:	68fb      	ldr	r3, [r7, #12]
}
  401fc2:	4618      	mov	r0, r3
  401fc4:	3710      	adds	r7, #16
  401fc6:	46bd      	mov	sp, r7
  401fc8:	bd80      	pop	{r7, pc}
  401fca:	bf00      	nop
  401fcc:	004012e9 	.word	0x004012e9

00401fd0 <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  401fd0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  401fd4:	b08a      	sub	sp, #40	; 0x28
  401fd6:	af00      	add	r7, sp, #0
  401fd8:	6078      	str	r0, [r7, #4]
  401fda:	6039      	str	r1, [r7, #0]
	uint32_t ul_err;
	uint32_t ul_size = 0;
  401fdc:	2300      	movs	r3, #0
  401fde:	627b      	str	r3, [r7, #36]	; 0x24
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;
  401fe0:	683b      	ldr	r3, [r7, #0]
  401fe2:	623b      	str	r3, [r7, #32]

	while (!((p_next->reg == OV_REG_TERM) &&
  401fe4:	e048      	b.n	402078 <ov_write_regs+0xa8>
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
  401fe6:	6a3b      	ldr	r3, [r7, #32]
  401fe8:	781b      	ldrb	r3, [r3, #0]
  401fea:	2bfe      	cmp	r3, #254	; 0xfe
  401fec:	d126      	bne.n	40203c <ov_write_regs+0x6c>
			delay_ms(5);
  401fee:	4b29      	ldr	r3, [pc, #164]	; (402094 <ov_write_regs+0xc4>)
  401ff0:	4798      	blx	r3
  401ff2:	4603      	mov	r3, r0
  401ff4:	4619      	mov	r1, r3
  401ff6:	f04f 0200 	mov.w	r2, #0
  401ffa:	460b      	mov	r3, r1
  401ffc:	4614      	mov	r4, r2
  401ffe:	00a6      	lsls	r6, r4, #2
  402000:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  402004:	009d      	lsls	r5, r3, #2
  402006:	462b      	mov	r3, r5
  402008:	4634      	mov	r4, r6
  40200a:	185b      	adds	r3, r3, r1
  40200c:	eb44 0402 	adc.w	r4, r4, r2
  402010:	f243 61af 	movw	r1, #13999	; 0x36af
  402014:	f04f 0200 	mov.w	r2, #0
  402018:	eb13 0b01 	adds.w	fp, r3, r1
  40201c:	eb44 0c02 	adc.w	ip, r4, r2
  402020:	4658      	mov	r0, fp
  402022:	4661      	mov	r1, ip
  402024:	4c1c      	ldr	r4, [pc, #112]	; (402098 <ov_write_regs+0xc8>)
  402026:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40202a:	f04f 0300 	mov.w	r3, #0
  40202e:	47a0      	blx	r4
  402030:	4603      	mov	r3, r0
  402032:	460c      	mov	r4, r1
  402034:	4618      	mov	r0, r3
  402036:	4b19      	ldr	r3, [pc, #100]	; (40209c <ov_write_regs+0xcc>)
  402038:	4798      	blx	r3
  40203a:	e01a      	b.n	402072 <ov_write_regs+0xa2>
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
  40203c:	6a3b      	ldr	r3, [r7, #32]
  40203e:	781b      	ldrb	r3, [r3, #0]
  402040:	723b      	strb	r3, [r7, #8]
			twi_packet_regs.addr_length = 1;
  402042:	2301      	movs	r3, #1
  402044:	60fb      	str	r3, [r7, #12]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  402046:	2330      	movs	r3, #48	; 0x30
  402048:	763b      	strb	r3, [r7, #24]
			twi_packet_regs.length = 1;
  40204a:	2301      	movs	r3, #1
  40204c:	617b      	str	r3, [r7, #20]
			twi_packet_regs.buffer = &(p_next->val);
  40204e:	6a3b      	ldr	r3, [r7, #32]
  402050:	3301      	adds	r3, #1
  402052:	613b      	str	r3, [r7, #16]

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  402054:	f107 0308 	add.w	r3, r7, #8
  402058:	4619      	mov	r1, r3
  40205a:	6878      	ldr	r0, [r7, #4]
  40205c:	4b10      	ldr	r3, [pc, #64]	; (4020a0 <ov_write_regs+0xd0>)
  40205e:	4798      	blx	r3
  402060:	61f8      	str	r0, [r7, #28]
			ul_size++;
  402062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402064:	3301      	adds	r3, #1
  402066:	627b      	str	r3, [r7, #36]	; 0x24

			if (ul_err == TWI_BUSY) {
  402068:	69fb      	ldr	r3, [r7, #28]
  40206a:	2b08      	cmp	r3, #8
  40206c:	d101      	bne.n	402072 <ov_write_regs+0xa2>
				return ul_err;
  40206e:	69fb      	ldr	r3, [r7, #28]
  402070:	e00b      	b.n	40208a <ov_write_regs+0xba>
			}
		}

		p_next++;
  402072:	6a3b      	ldr	r3, [r7, #32]
  402074:	3302      	adds	r3, #2
  402076:	623b      	str	r3, [r7, #32]
	while (!((p_next->reg == OV_REG_TERM) &&
  402078:	6a3b      	ldr	r3, [r7, #32]
  40207a:	781b      	ldrb	r3, [r3, #0]
  40207c:	2bff      	cmp	r3, #255	; 0xff
  40207e:	d1b2      	bne.n	401fe6 <ov_write_regs+0x16>
			(p_next->val == OV_VAL_TERM))) {
  402080:	6a3b      	ldr	r3, [r7, #32]
  402082:	785b      	ldrb	r3, [r3, #1]
	while (!((p_next->reg == OV_REG_TERM) &&
  402084:	2bff      	cmp	r3, #255	; 0xff
  402086:	d1ae      	bne.n	401fe6 <ov_write_regs+0x16>
	}
	return 0;
  402088:	2300      	movs	r3, #0
}
  40208a:	4618      	mov	r0, r3
  40208c:	3728      	adds	r7, #40	; 0x28
  40208e:	46bd      	mov	sp, r7
  402090:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  402094:	00401ddd 	.word	0x00401ddd
  402098:	004033d9 	.word	0x004033d9
  40209c:	20000001 	.word	0x20000001
  4020a0:	00401fad 	.word	0x00401fad

004020a4 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  4020a4:	b580      	push	{r7, lr}
  4020a6:	b08a      	sub	sp, #40	; 0x28
  4020a8:	af00      	add	r7, sp, #0
  4020aa:	6078      	str	r0, [r7, #4]
	const uint8_t cont_reg_val = 1;
  4020ac:	2301      	movs	r3, #1
  4020ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	twi_packet_t init_packet = {
  4020b2:	f107 030c 	add.w	r3, r7, #12
  4020b6:	2200      	movs	r2, #0
  4020b8:	601a      	str	r2, [r3, #0]
  4020ba:	605a      	str	r2, [r3, #4]
  4020bc:	609a      	str	r2, [r3, #8]
  4020be:	60da      	str	r2, [r3, #12]
  4020c0:	611a      	str	r2, [r3, #16]
  4020c2:	23ff      	movs	r3, #255	; 0xff
  4020c4:	733b      	strb	r3, [r7, #12]
  4020c6:	2301      	movs	r3, #1
  4020c8:	613b      	str	r3, [r7, #16]
  4020ca:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4020ce:	617b      	str	r3, [r7, #20]
  4020d0:	2301      	movs	r3, #1
  4020d2:	61bb      	str	r3, [r7, #24]
  4020d4:	2330      	movs	r3, #48	; 0x30
  4020d6:	773b      	strb	r3, [r7, #28]
		.addr_length  = 1, //sizeof (uint16_t),    // TWI slave memory address data size
		.chip         = OV_I2C_SENSOR_ADDRESS,      // TWI slave bus address
		.buffer       = &cont_reg_val,        // transfer data destination buffer
		.length       = 1                    // transfer data size (bytes)
	};
	ov_write_reg(p_twi, &init_packet);
  4020d8:	f107 030c 	add.w	r3, r7, #12
  4020dc:	4619      	mov	r1, r3
  4020de:	6878      	ldr	r0, [r7, #4]
  4020e0:	4b0f      	ldr	r3, [pc, #60]	; (402120 <ov_init+0x7c>)
  4020e2:	4798      	blx	r3
	
	
	uint32_t ul_id = 0;
  4020e4:	2300      	movs	r3, #0
  4020e6:	627b      	str	r3, [r7, #36]	; 0x24

	ul_id = ov_id( p_twi );
  4020e8:	6878      	ldr	r0, [r7, #4]
  4020ea:	4b0e      	ldr	r3, [pc, #56]	; (402124 <ov_init+0x80>)
  4020ec:	4798      	blx	r3
  4020ee:	6278      	str	r0, [r7, #36]	; 0x24

	if (((ul_id >> 8)&0xff)  == OV2640_PIDH_DEFAULT) {
  4020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4020f2:	0a1b      	lsrs	r3, r3, #8
  4020f4:	b2db      	uxtb	r3, r3
  4020f6:	2b26      	cmp	r3, #38	; 0x26
  4020f8:	d10d      	bne.n	402116 <ov_init+0x72>
		if (ov_manufacturer( p_twi ) == 0) {
  4020fa:	6878      	ldr	r0, [r7, #4]
  4020fc:	4b0a      	ldr	r3, [pc, #40]	; (402128 <ov_init+0x84>)
  4020fe:	4798      	blx	r3
  402100:	4603      	mov	r3, r0
  402102:	2b00      	cmp	r3, #0
  402104:	d107      	bne.n	402116 <ov_init+0x72>
			if (ov_test_write( p_twi ) == 0) {
  402106:	6878      	ldr	r0, [r7, #4]
  402108:	4b08      	ldr	r3, [pc, #32]	; (40212c <ov_init+0x88>)
  40210a:	4798      	blx	r3
  40210c:	4603      	mov	r3, r0
  40210e:	2b00      	cmp	r3, #0
  402110:	d101      	bne.n	402116 <ov_init+0x72>
				return 0;
  402112:	2300      	movs	r3, #0
  402114:	e000      	b.n	402118 <ov_init+0x74>
			}
		}
	}
	
	return 1;
  402116:	2301      	movs	r3, #1
}
  402118:	4618      	mov	r0, r3
  40211a:	3728      	adds	r7, #40	; 0x28
  40211c:	46bd      	mov	sp, r7
  40211e:	bd80      	pop	{r7, pc}
  402120:	00401fad 	.word	0x00401fad
  402124:	00401df1 	.word	0x00401df1
  402128:	00401e61 	.word	0x00401e61
  40212c:	00401ed9 	.word	0x00401ed9

00402130 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_OV2640_format format)
{
  402130:	b580      	push	{r7, lr}
  402132:	b084      	sub	sp, #16
  402134:	af00      	add	r7, sp, #0
  402136:	6078      	str	r0, [r7, #4]
  402138:	460b      	mov	r3, r1
  40213a:	70fb      	strb	r3, [r7, #3]
	const ov_reg *p_regs_conf = NULL;
  40213c:	2300      	movs	r3, #0
  40213e:	60fb      	str	r3, [r7, #12]

	/* Common register initialization */
	switch (format) {
  402140:	78fb      	ldrb	r3, [r7, #3]
  402142:	2b11      	cmp	r3, #17
  402144:	d85c      	bhi.n	402200 <ov_configure+0xd0>
  402146:	a201      	add	r2, pc, #4	; (adr r2, 40214c <ov_configure+0x1c>)
  402148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40214c:	00402195 	.word	0x00402195
  402150:	0040219b 	.word	0x0040219b
  402154:	004021a1 	.word	0x004021a1
  402158:	004021a7 	.word	0x004021a7
  40215c:	004021ad 	.word	0x004021ad
  402160:	004021b3 	.word	0x004021b3
  402164:	004021b9 	.word	0x004021b9
  402168:	004021bf 	.word	0x004021bf
  40216c:	004021c5 	.word	0x004021c5
  402170:	004021cb 	.word	0x004021cb
  402174:	004021d1 	.word	0x004021d1
  402178:	004021d7 	.word	0x004021d7
  40217c:	004021dd 	.word	0x004021dd
  402180:	004021e3 	.word	0x004021e3
  402184:	004021e9 	.word	0x004021e9
  402188:	004021ef 	.word	0x004021ef
  40218c:	004021f5 	.word	0x004021f5
  402190:	004021fb 	.word	0x004021fb
		
	case JPEG_INIT:
		p_regs_conf = OV2640_JPEG_INIT;
  402194:	4b22      	ldr	r3, [pc, #136]	; (402220 <ov_configure+0xf0>)
  402196:	60fb      	str	r3, [r7, #12]
		break;
  402198:	e033      	b.n	402202 <ov_configure+0xd2>
		
	case YUV422:
		p_regs_conf = OV2640_YUV422;
  40219a:	4b22      	ldr	r3, [pc, #136]	; (402224 <ov_configure+0xf4>)
  40219c:	60fb      	str	r3, [r7, #12]
		break;
  40219e:	e030      	b.n	402202 <ov_configure+0xd2>
		
	case JPEG:
		p_regs_conf = OV2640_JPEG;
  4021a0:	4b21      	ldr	r3, [pc, #132]	; (402228 <ov_configure+0xf8>)
  4021a2:	60fb      	str	r3, [r7, #12]
		break;
  4021a4:	e02d      	b.n	402202 <ov_configure+0xd2>
		
	case JPEG_320x240:
		p_regs_conf = OV2640_JPEG_320x240;
  4021a6:	4b21      	ldr	r3, [pc, #132]	; (40222c <ov_configure+0xfc>)
  4021a8:	60fb      	str	r3, [r7, #12]
		break;
  4021aa:	e02a      	b.n	402202 <ov_configure+0xd2>
		
	case JPEG_640x480:
		p_regs_conf = OV2640_JPEG_640x480;
  4021ac:	4b20      	ldr	r3, [pc, #128]	; (402230 <ov_configure+0x100>)
  4021ae:	60fb      	str	r3, [r7, #12]
		break;
  4021b0:	e027      	b.n	402202 <ov_configure+0xd2>
		
	case JPEG_800x600:
		p_regs_conf = OV2640_JPEG_800x600;
  4021b2:	4b20      	ldr	r3, [pc, #128]	; (402234 <ov_configure+0x104>)
  4021b4:	60fb      	str	r3, [r7, #12]
		break;
  4021b6:	e024      	b.n	402202 <ov_configure+0xd2>
		
	case JPEG_1024x768:
		p_regs_conf = OV2640_JPEG_1024x768;
  4021b8:	4b1f      	ldr	r3, [pc, #124]	; (402238 <ov_configure+0x108>)
  4021ba:	60fb      	str	r3, [r7, #12]
		break;
  4021bc:	e021      	b.n	402202 <ov_configure+0xd2>
		
	case JPEG_1280x1024:
		p_regs_conf = OV2640_JPEG_1280x1024;
  4021be:	4b1f      	ldr	r3, [pc, #124]	; (40223c <ov_configure+0x10c>)
  4021c0:	60fb      	str	r3, [r7, #12]
		break;
  4021c2:	e01e      	b.n	402202 <ov_configure+0xd2>
		
	case JPEG_1600x1200:
		p_regs_conf = OV2640_JPEG_1600x1200;
  4021c4:	4b1e      	ldr	r3, [pc, #120]	; (402240 <ov_configure+0x110>)
  4021c6:	60fb      	str	r3, [r7, #12]
		break;
  4021c8:	e01b      	b.n	402202 <ov_configure+0xd2>
		
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV2640_QVGA_YUV422_10FPS;
  4021ca:	4b1e      	ldr	r3, [pc, #120]	; (402244 <ov_configure+0x114>)
  4021cc:	60fb      	str	r3, [r7, #12]
		break;
  4021ce:	e018      	b.n	402202 <ov_configure+0xd2>

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV2640_QVGA_YUV422_15FPS;
  4021d0:	4b1d      	ldr	r3, [pc, #116]	; (402248 <ov_configure+0x118>)
  4021d2:	60fb      	str	r3, [r7, #12]
		break;
  4021d4:	e015      	b.n	402202 <ov_configure+0xd2>

	case QVGA_YUV422_20FPS:
		p_regs_conf = OV2640_QVGA_YUV422_20FPS;
  4021d6:	4b1d      	ldr	r3, [pc, #116]	; (40224c <ov_configure+0x11c>)
  4021d8:	60fb      	str	r3, [r7, #12]
		break;
  4021da:	e012      	b.n	402202 <ov_configure+0xd2>

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV2640_QVGA_YUV422_30FPS;
  4021dc:	4b1c      	ldr	r3, [pc, #112]	; (402250 <ov_configure+0x120>)
  4021de:	60fb      	str	r3, [r7, #12]
		break;
  4021e0:	e00f      	b.n	402202 <ov_configure+0xd2>

	case QVGA_RGB888:
		p_regs_conf = OV2640_QVGA_RGB888;
  4021e2:	4b1c      	ldr	r3, [pc, #112]	; (402254 <ov_configure+0x124>)
  4021e4:	60fb      	str	r3, [r7, #12]
		break;
  4021e6:	e00c      	b.n	402202 <ov_configure+0xd2>

	case QQVGA_YUV422:
		p_regs_conf = OV2640_QQVGA_YUV422;
  4021e8:	4b1b      	ldr	r3, [pc, #108]	; (402258 <ov_configure+0x128>)
  4021ea:	60fb      	str	r3, [r7, #12]
		break;
  4021ec:	e009      	b.n	402202 <ov_configure+0xd2>

	case QQVGA_RGB888:
		p_regs_conf = OV2640_QQVGA_RGB888;
  4021ee:	4b1b      	ldr	r3, [pc, #108]	; (40225c <ov_configure+0x12c>)
  4021f0:	60fb      	str	r3, [r7, #12]
		break;
  4021f2:	e006      	b.n	402202 <ov_configure+0xd2>

	case TEST_PATTERN:
		p_regs_conf = OV2640_TEST_PATTERN;
  4021f4:	4b1a      	ldr	r3, [pc, #104]	; (402260 <ov_configure+0x130>)
  4021f6:	60fb      	str	r3, [r7, #12]
		break;
  4021f8:	e003      	b.n	402202 <ov_configure+0xd2>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV2640_VGA_YUV422_20FPS;
  4021fa:	4b1a      	ldr	r3, [pc, #104]	; (402264 <ov_configure+0x134>)
  4021fc:	60fb      	str	r3, [r7, #12]
		break;
  4021fe:	e000      	b.n	402202 <ov_configure+0xd2>

	default:
		break;
  402200:	bf00      	nop
	}

	if (p_regs_conf != NULL) {
  402202:	68fb      	ldr	r3, [r7, #12]
  402204:	2b00      	cmp	r3, #0
  402206:	d005      	beq.n	402214 <ov_configure+0xe4>
		ov_write_regs( p_twi, p_regs_conf );
  402208:	68f9      	ldr	r1, [r7, #12]
  40220a:	6878      	ldr	r0, [r7, #4]
  40220c:	4b16      	ldr	r3, [pc, #88]	; (402268 <ov_configure+0x138>)
  40220e:	4798      	blx	r3
		return 0;
  402210:	2300      	movs	r3, #0
  402212:	e000      	b.n	402216 <ov_configure+0xe6>
	}

	return 1;
  402214:	2301      	movs	r3, #1
}
  402216:	4618      	mov	r0, r3
  402218:	3710      	adds	r7, #16
  40221a:	46bd      	mov	sp, r7
  40221c:	bd80      	pop	{r7, pc}
  40221e:	bf00      	nop
  402220:	004082e4 	.word	0x004082e4
  402224:	00408464 	.word	0x00408464
  402228:	00408478 	.word	0x00408478
  40222c:	0040848c 	.word	0x0040848c
  402230:	004084dc 	.word	0x004084dc
  402234:	00408530 	.word	0x00408530
  402238:	00408584 	.word	0x00408584
  40223c:	004085d4 	.word	0x004085d4
  402240:	00408628 	.word	0x00408628
  402244:	0040867c 	.word	0x0040867c
  402248:	0040876c 	.word	0x0040876c
  40224c:	0040885c 	.word	0x0040885c
  402250:	0040894c 	.word	0x0040894c
  402254:	00408a3c 	.word	0x00408a3c
  402258:	00408b30 	.word	0x00408b30
  40225c:	00408c24 	.word	0x00408c24
  402260:	00408d18 	.word	0x00408d18
  402264:	00408e0c 	.word	0x00408e0c
  402268:	00401fd1 	.word	0x00401fd1

0040226c <__NVIC_EnableIRQ>:
{
  40226c:	b480      	push	{r7}
  40226e:	b083      	sub	sp, #12
  402270:	af00      	add	r7, sp, #0
  402272:	4603      	mov	r3, r0
  402274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  402276:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40227a:	2b00      	cmp	r3, #0
  40227c:	db0b      	blt.n	402296 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40227e:	4908      	ldr	r1, [pc, #32]	; (4022a0 <__NVIC_EnableIRQ+0x34>)
  402280:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402284:	095b      	lsrs	r3, r3, #5
  402286:	79fa      	ldrb	r2, [r7, #7]
  402288:	f002 021f 	and.w	r2, r2, #31
  40228c:	2001      	movs	r0, #1
  40228e:	fa00 f202 	lsl.w	r2, r0, r2
  402292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402296:	bf00      	nop
  402298:	370c      	adds	r7, #12
  40229a:	46bd      	mov	sp, r7
  40229c:	bc80      	pop	{r7}
  40229e:	4770      	bx	lr
  4022a0:	e000e100 	.word	0xe000e100

004022a4 <osc_get_rate>:
{
  4022a4:	b480      	push	{r7}
  4022a6:	b083      	sub	sp, #12
  4022a8:	af00      	add	r7, sp, #0
  4022aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4022ac:	687b      	ldr	r3, [r7, #4]
  4022ae:	2b07      	cmp	r3, #7
  4022b0:	d825      	bhi.n	4022fe <osc_get_rate+0x5a>
  4022b2:	a201      	add	r2, pc, #4	; (adr r2, 4022b8 <osc_get_rate+0x14>)
  4022b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4022b8:	004022d9 	.word	0x004022d9
  4022bc:	004022df 	.word	0x004022df
  4022c0:	004022e5 	.word	0x004022e5
  4022c4:	004022eb 	.word	0x004022eb
  4022c8:	004022ef 	.word	0x004022ef
  4022cc:	004022f3 	.word	0x004022f3
  4022d0:	004022f7 	.word	0x004022f7
  4022d4:	004022fb 	.word	0x004022fb
		return OSC_SLCK_32K_RC_HZ;
  4022d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4022dc:	e010      	b.n	402300 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4022de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4022e2:	e00d      	b.n	402300 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4022e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4022e8:	e00a      	b.n	402300 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4022ea:	4b08      	ldr	r3, [pc, #32]	; (40230c <osc_get_rate+0x68>)
  4022ec:	e008      	b.n	402300 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4022ee:	4b08      	ldr	r3, [pc, #32]	; (402310 <osc_get_rate+0x6c>)
  4022f0:	e006      	b.n	402300 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4022f2:	4b08      	ldr	r3, [pc, #32]	; (402314 <osc_get_rate+0x70>)
  4022f4:	e004      	b.n	402300 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4022f6:	4b07      	ldr	r3, [pc, #28]	; (402314 <osc_get_rate+0x70>)
  4022f8:	e002      	b.n	402300 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4022fa:	4b06      	ldr	r3, [pc, #24]	; (402314 <osc_get_rate+0x70>)
  4022fc:	e000      	b.n	402300 <osc_get_rate+0x5c>
	return 0;
  4022fe:	2300      	movs	r3, #0
}
  402300:	4618      	mov	r0, r3
  402302:	370c      	adds	r7, #12
  402304:	46bd      	mov	sp, r7
  402306:	bc80      	pop	{r7}
  402308:	4770      	bx	lr
  40230a:	bf00      	nop
  40230c:	003d0900 	.word	0x003d0900
  402310:	007a1200 	.word	0x007a1200
  402314:	00b71b00 	.word	0x00b71b00

00402318 <sysclk_get_main_hz>:
{
  402318:	b580      	push	{r7, lr}
  40231a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40231c:	2006      	movs	r0, #6
  40231e:	4b04      	ldr	r3, [pc, #16]	; (402330 <sysclk_get_main_hz+0x18>)
  402320:	4798      	blx	r3
  402322:	4602      	mov	r2, r0
  402324:	4613      	mov	r3, r2
  402326:	009b      	lsls	r3, r3, #2
  402328:	4413      	add	r3, r2
  40232a:	009b      	lsls	r3, r3, #2
}
  40232c:	4618      	mov	r0, r3
  40232e:	bd80      	pop	{r7, pc}
  402330:	004022a5 	.word	0x004022a5

00402334 <sysclk_get_cpu_hz>:
{
  402334:	b580      	push	{r7, lr}
  402336:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402338:	4b02      	ldr	r3, [pc, #8]	; (402344 <sysclk_get_cpu_hz+0x10>)
  40233a:	4798      	blx	r3
  40233c:	4603      	mov	r3, r0
  40233e:	085b      	lsrs	r3, r3, #1
}
  402340:	4618      	mov	r0, r3
  402342:	bd80      	pop	{r7, pc}
  402344:	00402319 	.word	0x00402319

00402348 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  402348:	b580      	push	{r7, lr}
  40234a:	b082      	sub	sp, #8
  40234c:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  40234e:	2100      	movs	r1, #0
  402350:	4809      	ldr	r0, [pc, #36]	; (402378 <TC0_Handler+0x30>)
  402352:	4b0a      	ldr	r3, [pc, #40]	; (40237c <TC0_Handler+0x34>)
  402354:	4798      	blx	r3
  402356:	6078      	str	r0, [r7, #4]

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  402358:	687b      	ldr	r3, [r7, #4]
  40235a:	f003 0310 	and.w	r3, r3, #16
  40235e:	2b00      	cmp	r3, #0
  402360:	d006      	beq.n	402370 <TC0_Handler+0x28>
		counts++;
  402362:	4b07      	ldr	r3, [pc, #28]	; (402380 <TC0_Handler+0x38>)
  402364:	781b      	ldrb	r3, [r3, #0]
  402366:	b2db      	uxtb	r3, r3
  402368:	3301      	adds	r3, #1
  40236a:	b2da      	uxtb	r2, r3
  40236c:	4b04      	ldr	r3, [pc, #16]	; (402380 <TC0_Handler+0x38>)
  40236e:	701a      	strb	r2, [r3, #0]
	}
}
  402370:	bf00      	nop
  402372:	3708      	adds	r7, #8
  402374:	46bd      	mov	sp, r7
  402376:	bd80      	pop	{r7, pc}
  402378:	40010000 	.word	0x40010000
  40237c:	00400f3f 	.word	0x00400f3f
  402380:	20000a74 	.word	0x20000a74

00402384 <configure_tc>:

void configure_tc(void)
{
  402384:	b590      	push	{r4, r7, lr}
  402386:	b087      	sub	sp, #28
  402388:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();
  40238a:	4b18      	ldr	r3, [pc, #96]	; (4023ec <configure_tc+0x68>)
  40238c:	4798      	blx	r3
  40238e:	60f8      	str	r0, [r7, #12]

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  402390:	2017      	movs	r0, #23
  402392:	4b17      	ldr	r3, [pc, #92]	; (4023f0 <configure_tc+0x6c>)
  402394:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  402396:	1d39      	adds	r1, r7, #4
  402398:	f107 0208 	add.w	r2, r7, #8
  40239c:	68fb      	ldr	r3, [r7, #12]
  40239e:	9300      	str	r3, [sp, #0]
  4023a0:	460b      	mov	r3, r1
  4023a2:	68f9      	ldr	r1, [r7, #12]
  4023a4:	2001      	movs	r0, #1
  4023a6:	4c13      	ldr	r4, [pc, #76]	; (4023f4 <configure_tc+0x70>)
  4023a8:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  4023aa:	687b      	ldr	r3, [r7, #4]
  4023ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4023b0:	461a      	mov	r2, r3
  4023b2:	2100      	movs	r1, #0
  4023b4:	4810      	ldr	r0, [pc, #64]	; (4023f8 <configure_tc+0x74>)
  4023b6:	4b11      	ldr	r3, [pc, #68]	; (4023fc <configure_tc+0x78>)
  4023b8:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  4023ba:	68bb      	ldr	r3, [r7, #8]
  4023bc:	68fa      	ldr	r2, [r7, #12]
  4023be:	fbb2 f3f3 	udiv	r3, r2, r3
  4023c2:	461a      	mov	r2, r3
  4023c4:	2100      	movs	r1, #0
  4023c6:	480c      	ldr	r0, [pc, #48]	; (4023f8 <configure_tc+0x74>)
  4023c8:	4b0d      	ldr	r3, [pc, #52]	; (402400 <configure_tc+0x7c>)
  4023ca:	4798      	blx	r3

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  4023cc:	2017      	movs	r0, #23
  4023ce:	4b0d      	ldr	r3, [pc, #52]	; (402404 <configure_tc+0x80>)
  4023d0:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  4023d2:	2210      	movs	r2, #16
  4023d4:	2100      	movs	r1, #0
  4023d6:	4808      	ldr	r0, [pc, #32]	; (4023f8 <configure_tc+0x74>)
  4023d8:	4b0b      	ldr	r3, [pc, #44]	; (402408 <configure_tc+0x84>)
  4023da:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  4023dc:	2100      	movs	r1, #0
  4023de:	4806      	ldr	r0, [pc, #24]	; (4023f8 <configure_tc+0x74>)
  4023e0:	4b0a      	ldr	r3, [pc, #40]	; (40240c <configure_tc+0x88>)
  4023e2:	4798      	blx	r3
  4023e4:	bf00      	nop
  4023e6:	3714      	adds	r7, #20
  4023e8:	46bd      	mov	sp, r7
  4023ea:	bd90      	pop	{r4, r7, pc}
  4023ec:	00402335 	.word	0x00402335
  4023f0:	00400e1d 	.word	0x00400e1d
  4023f4:	00400f61 	.word	0x00400f61
  4023f8:	40010000 	.word	0x40010000
  4023fc:	00400e9d 	.word	0x00400e9d
  402400:	00400ef5 	.word	0x00400ef5
  402404:	0040226d 	.word	0x0040226d
  402408:	00400f19 	.word	0x00400f19
  40240c:	00400ed5 	.word	0x00400ed5

00402410 <__NVIC_EnableIRQ>:
{
  402410:	b480      	push	{r7}
  402412:	b083      	sub	sp, #12
  402414:	af00      	add	r7, sp, #0
  402416:	4603      	mov	r3, r0
  402418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40241e:	2b00      	cmp	r3, #0
  402420:	db0b      	blt.n	40243a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402422:	4908      	ldr	r1, [pc, #32]	; (402444 <__NVIC_EnableIRQ+0x34>)
  402424:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402428:	095b      	lsrs	r3, r3, #5
  40242a:	79fa      	ldrb	r2, [r7, #7]
  40242c:	f002 021f 	and.w	r2, r2, #31
  402430:	2001      	movs	r0, #1
  402432:	fa00 f202 	lsl.w	r2, r0, r2
  402436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40243a:	bf00      	nop
  40243c:	370c      	adds	r7, #12
  40243e:	46bd      	mov	sp, r7
  402440:	bc80      	pop	{r7}
  402442:	4770      	bx	lr
  402444:	e000e100 	.word	0xe000e100

00402448 <osc_get_rate>:
{
  402448:	b480      	push	{r7}
  40244a:	b083      	sub	sp, #12
  40244c:	af00      	add	r7, sp, #0
  40244e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402450:	687b      	ldr	r3, [r7, #4]
  402452:	2b07      	cmp	r3, #7
  402454:	d825      	bhi.n	4024a2 <osc_get_rate+0x5a>
  402456:	a201      	add	r2, pc, #4	; (adr r2, 40245c <osc_get_rate+0x14>)
  402458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40245c:	0040247d 	.word	0x0040247d
  402460:	00402483 	.word	0x00402483
  402464:	00402489 	.word	0x00402489
  402468:	0040248f 	.word	0x0040248f
  40246c:	00402493 	.word	0x00402493
  402470:	00402497 	.word	0x00402497
  402474:	0040249b 	.word	0x0040249b
  402478:	0040249f 	.word	0x0040249f
		return OSC_SLCK_32K_RC_HZ;
  40247c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402480:	e010      	b.n	4024a4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402486:	e00d      	b.n	4024a4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40248c:	e00a      	b.n	4024a4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40248e:	4b08      	ldr	r3, [pc, #32]	; (4024b0 <osc_get_rate+0x68>)
  402490:	e008      	b.n	4024a4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402492:	4b08      	ldr	r3, [pc, #32]	; (4024b4 <osc_get_rate+0x6c>)
  402494:	e006      	b.n	4024a4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402496:	4b08      	ldr	r3, [pc, #32]	; (4024b8 <osc_get_rate+0x70>)
  402498:	e004      	b.n	4024a4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40249a:	4b07      	ldr	r3, [pc, #28]	; (4024b8 <osc_get_rate+0x70>)
  40249c:	e002      	b.n	4024a4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40249e:	4b06      	ldr	r3, [pc, #24]	; (4024b8 <osc_get_rate+0x70>)
  4024a0:	e000      	b.n	4024a4 <osc_get_rate+0x5c>
	return 0;
  4024a2:	2300      	movs	r3, #0
}
  4024a4:	4618      	mov	r0, r3
  4024a6:	370c      	adds	r7, #12
  4024a8:	46bd      	mov	sp, r7
  4024aa:	bc80      	pop	{r7}
  4024ac:	4770      	bx	lr
  4024ae:	bf00      	nop
  4024b0:	003d0900 	.word	0x003d0900
  4024b4:	007a1200 	.word	0x007a1200
  4024b8:	00b71b00 	.word	0x00b71b00

004024bc <sysclk_get_main_hz>:
{
  4024bc:	b580      	push	{r7, lr}
  4024be:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4024c0:	2006      	movs	r0, #6
  4024c2:	4b04      	ldr	r3, [pc, #16]	; (4024d4 <sysclk_get_main_hz+0x18>)
  4024c4:	4798      	blx	r3
  4024c6:	4602      	mov	r2, r0
  4024c8:	4613      	mov	r3, r2
  4024ca:	009b      	lsls	r3, r3, #2
  4024cc:	4413      	add	r3, r2
  4024ce:	009b      	lsls	r3, r3, #2
}
  4024d0:	4618      	mov	r0, r3
  4024d2:	bd80      	pop	{r7, pc}
  4024d4:	00402449 	.word	0x00402449

004024d8 <sysclk_get_cpu_hz>:
{
  4024d8:	b580      	push	{r7, lr}
  4024da:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4024dc:	4b02      	ldr	r3, [pc, #8]	; (4024e8 <sysclk_get_cpu_hz+0x10>)
  4024de:	4798      	blx	r3
  4024e0:	4603      	mov	r3, r0
  4024e2:	085b      	lsrs	r3, r3, #1
}
  4024e4:	4618      	mov	r0, r3
  4024e6:	bd80      	pop	{r7, pc}
  4024e8:	004024bd 	.word	0x004024bd

004024ec <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4024ec:	b580      	push	{r7, lr}
  4024ee:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4024f0:	4b02      	ldr	r3, [pc, #8]	; (4024fc <sysclk_get_peripheral_hz+0x10>)
  4024f2:	4798      	blx	r3
  4024f4:	4603      	mov	r3, r0
  4024f6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4024f8:	4618      	mov	r0, r3
  4024fa:	bd80      	pop	{r7, pc}
  4024fc:	004024bd 	.word	0x004024bd

00402500 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402500:	b580      	push	{r7, lr}
  402502:	b082      	sub	sp, #8
  402504:	af00      	add	r7, sp, #0
  402506:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402508:	6878      	ldr	r0, [r7, #4]
  40250a:	4b03      	ldr	r3, [pc, #12]	; (402518 <sysclk_enable_peripheral_clock+0x18>)
  40250c:	4798      	blx	r3
}
  40250e:	bf00      	nop
  402510:	3708      	adds	r7, #8
  402512:	46bd      	mov	sp, r7
  402514:	bd80      	pop	{r7, pc}
  402516:	bf00      	nop
  402518:	00400e1d 	.word	0x00400e1d

0040251c <wifi_command_response_handler>:
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
	}
}

static void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask)
{
  40251c:	b580      	push	{r7, lr}
  40251e:	b084      	sub	sp, #16
  402520:	af00      	add	r7, sp, #0
  402522:	6078      	str	r0, [r7, #4]
  402524:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	
	wifi_comm_success = true;
  402526:	4b0d      	ldr	r3, [pc, #52]	; (40255c <wifi_command_response_handler+0x40>)
  402528:	2201      	movs	r2, #1
  40252a:	601a      	str	r2, [r3, #0]

	process_data_wifi();
  40252c:	4b0c      	ldr	r3, [pc, #48]	; (402560 <wifi_command_response_handler+0x44>)
  40252e:	4798      	blx	r3
	for (int jj = 0;jj<1000;jj++) input_line_wifi[jj] = 0;
  402530:	2300      	movs	r3, #0
  402532:	60fb      	str	r3, [r7, #12]
  402534:	e007      	b.n	402546 <wifi_command_response_handler+0x2a>
  402536:	4a0b      	ldr	r2, [pc, #44]	; (402564 <wifi_command_response_handler+0x48>)
  402538:	68fb      	ldr	r3, [r7, #12]
  40253a:	4413      	add	r3, r2
  40253c:	2200      	movs	r2, #0
  40253e:	701a      	strb	r2, [r3, #0]
  402540:	68fb      	ldr	r3, [r7, #12]
  402542:	3301      	adds	r3, #1
  402544:	60fb      	str	r3, [r7, #12]
  402546:	68fb      	ldr	r3, [r7, #12]
  402548:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40254c:	dbf3      	blt.n	402536 <wifi_command_response_handler+0x1a>
	input_pos_wifi = 0;
  40254e:	4b06      	ldr	r3, [pc, #24]	; (402568 <wifi_command_response_handler+0x4c>)
  402550:	2200      	movs	r2, #0
  402552:	601a      	str	r2, [r3, #0]
}
  402554:	bf00      	nop
  402556:	3710      	adds	r7, #16
  402558:	46bd      	mov	sp, r7
  40255a:	bd80      	pop	{r7, pc}
  40255c:	20000a64 	.word	0x20000a64
  402560:	00402891 	.word	0x00402891
  402564:	2000ce14 	.word	0x2000ce14
  402568:	20000a5c 	.word	0x20000a5c

0040256c <wifi_web_setup_handler>:

void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask)
{
  40256c:	b480      	push	{r7}
  40256e:	b083      	sub	sp, #12
  402570:	af00      	add	r7, sp, #0
  402572:	6078      	str	r0, [r7, #4]
  402574:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	
	wifi_setup_button_flag = true;
  402576:	4b04      	ldr	r3, [pc, #16]	; (402588 <wifi_web_setup_handler+0x1c>)
  402578:	2201      	movs	r2, #1
  40257a:	601a      	str	r2, [r3, #0]
}
  40257c:	bf00      	nop
  40257e:	370c      	adds	r7, #12
  402580:	46bd      	mov	sp, r7
  402582:	bc80      	pop	{r7}
  402584:	4770      	bx	lr
  402586:	bf00      	nop
  402588:	20000a60 	.word	0x20000a60

0040258c <configure_usart_wifi>:

void configure_usart_wifi(void)
{
  40258c:	b5b0      	push	{r4, r5, r7, lr}
  40258e:	b086      	sub	sp, #24
  402590:	af00      	add	r7, sp, #0
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  402592:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402596:	2005      	movs	r0, #5
  402598:	4b1c      	ldr	r3, [pc, #112]	; (40260c <configure_usart_wifi+0x80>)
  40259a:	4798      	blx	r3
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  40259c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4025a0:	2006      	movs	r0, #6
  4025a2:	4b1a      	ldr	r3, [pc, #104]	; (40260c <configure_usart_wifi+0x80>)
  4025a4:	4798      	blx	r3
	gpio_configure_pin(PIN_USART1_CTS_IDX, PIN_USART1_CTS_FLAGS);
  4025a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4025aa:	2008      	movs	r0, #8
  4025ac:	4b17      	ldr	r3, [pc, #92]	; (40260c <configure_usart_wifi+0x80>)
  4025ae:	4798      	blx	r3
	//gpio_configure_pin(PIN_USART1_RTS_IDX, PIN_USART1_RTS_FLAGS);

	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  4025b0:	4b17      	ldr	r3, [pc, #92]	; (402610 <configure_usart_wifi+0x84>)
  4025b2:	463c      	mov	r4, r7
  4025b4:	461d      	mov	r5, r3
  4025b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4025b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4025ba:	e895 0003 	ldmia.w	r5, {r0, r1}
  4025be:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  4025c2:	4b14      	ldr	r3, [pc, #80]	; (402614 <configure_usart_wifi+0x88>)
  4025c4:	4798      	blx	r3
  4025c6:	4602      	mov	r2, r0
  4025c8:	4b13      	ldr	r3, [pc, #76]	; (402618 <configure_usart_wifi+0x8c>)
  4025ca:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  4025cc:	200e      	movs	r0, #14
  4025ce:	4b13      	ldr	r3, [pc, #76]	; (40261c <configure_usart_wifi+0x90>)
  4025d0:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(WIFI_USART, &usart_console_settings, ul_sysclk);
  4025d2:	4b11      	ldr	r3, [pc, #68]	; (402618 <configure_usart_wifi+0x8c>)
  4025d4:	681a      	ldr	r2, [r3, #0]
  4025d6:	463b      	mov	r3, r7
  4025d8:	4619      	mov	r1, r3
  4025da:	4811      	ldr	r0, [pc, #68]	; (402620 <configure_usart_wifi+0x94>)
  4025dc:	4b11      	ldr	r3, [pc, #68]	; (402624 <configure_usart_wifi+0x98>)
  4025de:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(WIFI_USART, ALL_INTERRUPT_MASK);
  4025e0:	f04f 31ff 	mov.w	r1, #4294967295
  4025e4:	480e      	ldr	r0, [pc, #56]	; (402620 <configure_usart_wifi+0x94>)
  4025e6:	4b10      	ldr	r3, [pc, #64]	; (402628 <configure_usart_wifi+0x9c>)
  4025e8:	4798      	blx	r3

	/* Enable TX & RX function. */
	usart_enable_tx(WIFI_USART);
  4025ea:	480d      	ldr	r0, [pc, #52]	; (402620 <configure_usart_wifi+0x94>)
  4025ec:	4b0f      	ldr	r3, [pc, #60]	; (40262c <configure_usart_wifi+0xa0>)
  4025ee:	4798      	blx	r3
	usart_enable_rx(WIFI_USART);
  4025f0:	480b      	ldr	r0, [pc, #44]	; (402620 <configure_usart_wifi+0x94>)
  4025f2:	4b0f      	ldr	r3, [pc, #60]	; (402630 <configure_usart_wifi+0xa4>)
  4025f4:	4798      	blx	r3

	usart_enable_interrupt(WIFI_USART, US_IER_RXRDY);
  4025f6:	2101      	movs	r1, #1
  4025f8:	4809      	ldr	r0, [pc, #36]	; (402620 <configure_usart_wifi+0x94>)
  4025fa:	4b0e      	ldr	r3, [pc, #56]	; (402634 <configure_usart_wifi+0xa8>)
  4025fc:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  4025fe:	200e      	movs	r0, #14
  402600:	4b0d      	ldr	r3, [pc, #52]	; (402638 <configure_usart_wifi+0xac>)
  402602:	4798      	blx	r3
}
  402604:	bf00      	nop
  402606:	3718      	adds	r7, #24
  402608:	46bd      	mov	sp, r7
  40260a:	bdb0      	pop	{r4, r5, r7, pc}
  40260c:	004007b1 	.word	0x004007b1
  402610:	00408efc 	.word	0x00408efc
  402614:	004024ed 	.word	0x004024ed
  402618:	20000a78 	.word	0x20000a78
  40261c:	00402501 	.word	0x00402501
  402620:	40024000 	.word	0x40024000
  402624:	0040154d 	.word	0x0040154d
  402628:	00401607 	.word	0x00401607
  40262c:	0040158d 	.word	0x0040158d
  402630:	004015bd 	.word	0x004015bd
  402634:	004015ed 	.word	0x004015ed
  402638:	00402411 	.word	0x00402411

0040263c <configure_wifi_command_pin>:

void configure_wifi_command_pin(void)
{
  40263c:	b590      	push	{r4, r7, lr}
  40263e:	b083      	sub	sp, #12
  402640:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_COMM_ID);
  402642:	200c      	movs	r0, #12
  402644:	4b0e      	ldr	r3, [pc, #56]	; (402680 <configure_wifi_command_pin+0x44>)
  402646:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK, 10);
  402648:	220a      	movs	r2, #10
  40264a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40264e:	480d      	ldr	r0, [pc, #52]	; (402684 <configure_wifi_command_pin+0x48>)
  402650:	4b0d      	ldr	r3, [pc, #52]	; (402688 <configure_wifi_command_pin+0x4c>)
  402652:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_MSK,
  402654:	4b0d      	ldr	r3, [pc, #52]	; (40268c <configure_wifi_command_pin+0x50>)
  402656:	9300      	str	r3, [sp, #0]
  402658:	2370      	movs	r3, #112	; 0x70
  40265a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40265e:	210c      	movs	r1, #12
  402660:	4808      	ldr	r0, [pc, #32]	; (402684 <configure_wifi_command_pin+0x48>)
  402662:	4c0b      	ldr	r4, [pc, #44]	; (402690 <configure_wifi_command_pin+0x54>)
  402664:	47a0      	blx	r4
			WIFI_COMM_ATTR, wifi_command_response_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  402666:	200c      	movs	r0, #12
  402668:	4b0a      	ldr	r3, [pc, #40]	; (402694 <configure_wifi_command_pin+0x58>)
  40266a:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK);
  40266c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402670:	4804      	ldr	r0, [pc, #16]	; (402684 <configure_wifi_command_pin+0x48>)
  402672:	4b09      	ldr	r3, [pc, #36]	; (402698 <configure_wifi_command_pin+0x5c>)
  402674:	4798      	blx	r3
}
  402676:	bf00      	nop
  402678:	3704      	adds	r7, #4
  40267a:	46bd      	mov	sp, r7
  40267c:	bd90      	pop	{r4, r7, pc}
  40267e:	bf00      	nop
  402680:	00400e1d 	.word	0x00400e1d
  402684:	400e1000 	.word	0x400e1000
  402688:	004004bb 	.word	0x004004bb
  40268c:	0040251d 	.word	0x0040251d
  402690:	00400ab1 	.word	0x00400ab1
  402694:	00402411 	.word	0x00402411
  402698:	0040074f 	.word	0x0040074f

0040269c <configure_wifi_web_setup_pin>:

void configure_wifi_web_setup_pin(void)
{
  40269c:	b590      	push	{r4, r7, lr}
  40269e:	b083      	sub	sp, #12
  4026a0:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WEB_SETUP_BUTTON_ID);
  4026a2:	200b      	movs	r0, #11
  4026a4:	4b0e      	ldr	r3, [pc, #56]	; (4026e0 <configure_wifi_web_setup_pin+0x44>)
  4026a6:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WEB_SETUP_BUTTON_PIO, WEB_SETUP_BUTTON_PIN_MSK, 10);
  4026a8:	220a      	movs	r2, #10
  4026aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  4026ae:	480d      	ldr	r0, [pc, #52]	; (4026e4 <configure_wifi_web_setup_pin+0x48>)
  4026b0:	4b0d      	ldr	r3, [pc, #52]	; (4026e8 <configure_wifi_web_setup_pin+0x4c>)
  4026b2:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WEB_SETUP_BUTTON_PIO, WEB_SETUP_BUTTON_ID, WEB_SETUP_BUTTON_PIN_MSK,
  4026b4:	4b0d      	ldr	r3, [pc, #52]	; (4026ec <configure_wifi_web_setup_pin+0x50>)
  4026b6:	9300      	str	r3, [sp, #0]
  4026b8:	2370      	movs	r3, #112	; 0x70
  4026ba:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4026be:	210b      	movs	r1, #11
  4026c0:	4808      	ldr	r0, [pc, #32]	; (4026e4 <configure_wifi_web_setup_pin+0x48>)
  4026c2:	4c0b      	ldr	r4, [pc, #44]	; (4026f0 <configure_wifi_web_setup_pin+0x54>)
  4026c4:	47a0      	blx	r4
			WEB_SETUP_BUTTON_ATTR, wifi_web_setup_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WEB_SETUP_BUTTON_ID);
  4026c6:	200b      	movs	r0, #11
  4026c8:	4b0a      	ldr	r3, [pc, #40]	; (4026f4 <configure_wifi_web_setup_pin+0x58>)
  4026ca:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WEB_SETUP_BUTTON_PIO, WEB_SETUP_BUTTON_PIN_MSK);
  4026cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  4026d0:	4804      	ldr	r0, [pc, #16]	; (4026e4 <configure_wifi_web_setup_pin+0x48>)
  4026d2:	4b09      	ldr	r3, [pc, #36]	; (4026f8 <configure_wifi_web_setup_pin+0x5c>)
  4026d4:	4798      	blx	r3
}
  4026d6:	bf00      	nop
  4026d8:	3704      	adds	r7, #4
  4026da:	46bd      	mov	sp, r7
  4026dc:	bd90      	pop	{r4, r7, pc}
  4026de:	bf00      	nop
  4026e0:	00400e1d 	.word	0x00400e1d
  4026e4:	400e0e00 	.word	0x400e0e00
  4026e8:	004004bb 	.word	0x004004bb
  4026ec:	0040256d 	.word	0x0040256d
  4026f0:	00400ab1 	.word	0x00400ab1
  4026f4:	00402411 	.word	0x00402411
  4026f8:	0040074f 	.word	0x0040074f

004026fc <write_wifi_command>:

void write_wifi_command(char* comm, uint8_t cnt)
{
  4026fc:	b580      	push	{r7, lr}
  4026fe:	b082      	sub	sp, #8
  402700:	af00      	add	r7, sp, #0
  402702:	6078      	str	r0, [r7, #4]
  402704:	460b      	mov	r3, r1
  402706:	70fb      	strb	r3, [r7, #3]
	//Write command to the AMW136
	usart_write_line(WIFI_USART, comm);
  402708:	6879      	ldr	r1, [r7, #4]
  40270a:	480c      	ldr	r0, [pc, #48]	; (40273c <write_wifi_command+0x40>)
  40270c:	4b0c      	ldr	r3, [pc, #48]	; (402740 <write_wifi_command+0x44>)
  40270e:	4798      	blx	r3
	
	//Wait for either an acknowledgment or a timeout
	counts = 0;
  402710:	4b0c      	ldr	r3, [pc, #48]	; (402744 <write_wifi_command+0x48>)
  402712:	2200      	movs	r2, #0
  402714:	601a      	str	r2, [r3, #0]
	while (counts < cnt)
  402716:	e007      	b.n	402728 <write_wifi_command+0x2c>
	{
		if (wifi_comm_success==true)
  402718:	4b0b      	ldr	r3, [pc, #44]	; (402748 <write_wifi_command+0x4c>)
  40271a:	681b      	ldr	r3, [r3, #0]
  40271c:	2b01      	cmp	r3, #1
  40271e:	d103      	bne.n	402728 <write_wifi_command+0x2c>
		{
			wifi_comm_success = false;
  402720:	4b09      	ldr	r3, [pc, #36]	; (402748 <write_wifi_command+0x4c>)
  402722:	2200      	movs	r2, #0
  402724:	601a      	str	r2, [r3, #0]
			return;
  402726:	e005      	b.n	402734 <write_wifi_command+0x38>
	while (counts < cnt)
  402728:	78fa      	ldrb	r2, [r7, #3]
  40272a:	4b06      	ldr	r3, [pc, #24]	; (402744 <write_wifi_command+0x48>)
  40272c:	681b      	ldr	r3, [r3, #0]
  40272e:	429a      	cmp	r2, r3
  402730:	d8f2      	bhi.n	402718 <write_wifi_command+0x1c>
		}
	}
	return;
  402732:	bf00      	nop
}
  402734:	3708      	adds	r7, #8
  402736:	46bd      	mov	sp, r7
  402738:	bd80      	pop	{r7, pc}
  40273a:	bf00      	nop
  40273c:	40024000 	.word	0x40024000
  402740:	0040169d 	.word	0x0040169d
  402744:	20000a74 	.word	0x20000a74
  402748:	20000a64 	.word	0x20000a64

0040274c <write_image_to_file>:

void write_image_to_file(void)
{
  40274c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402750:	b08f      	sub	sp, #60	; 0x3c
  402752:	af00      	add	r7, sp, #0
	if (find_image_len()==0)
  402754:	4b3d      	ldr	r3, [pc, #244]	; (40284c <write_image_to_file+0x100>)
  402756:	4798      	blx	r3
  402758:	4603      	mov	r3, r0
  40275a:	2b00      	cmp	r3, #0
  40275c:	d070      	beq.n	402840 <write_image_to_file+0xf4>
	{
		return;
	}
	
	image_length = end_of_image - start_of_image;
  40275e:	4b3c      	ldr	r3, [pc, #240]	; (402850 <write_image_to_file+0x104>)
  402760:	681a      	ldr	r2, [r3, #0]
  402762:	4b3c      	ldr	r3, [pc, #240]	; (402854 <write_image_to_file+0x108>)
  402764:	681b      	ldr	r3, [r3, #0]
  402766:	1ad3      	subs	r3, r2, r3
  402768:	4a3b      	ldr	r2, [pc, #236]	; (402858 <write_image_to_file+0x10c>)
  40276a:	6013      	str	r3, [r2, #0]
	char string[50] = {0};
  40276c:	463b      	mov	r3, r7
  40276e:	2232      	movs	r2, #50	; 0x32
  402770:	2100      	movs	r1, #0
  402772:	4618      	mov	r0, r3
  402774:	4b39      	ldr	r3, [pc, #228]	; (40285c <write_image_to_file+0x110>)
  402776:	4798      	blx	r3
	sprintf(string,"image_transfer %d\r\n", image_length);
  402778:	4b37      	ldr	r3, [pc, #220]	; (402858 <write_image_to_file+0x10c>)
  40277a:	681a      	ldr	r2, [r3, #0]
  40277c:	463b      	mov	r3, r7
  40277e:	4938      	ldr	r1, [pc, #224]	; (402860 <write_image_to_file+0x114>)
  402780:	4618      	mov	r0, r3
  402782:	4b38      	ldr	r3, [pc, #224]	; (402864 <write_image_to_file+0x118>)
  402784:	4798      	blx	r3
	write_wifi_command(string, 20);
  402786:	463b      	mov	r3, r7
  402788:	2114      	movs	r1, #20
  40278a:	4618      	mov	r0, r3
  40278c:	4b36      	ldr	r3, [pc, #216]	; (402868 <write_image_to_file+0x11c>)
  40278e:	4798      	blx	r3
	
	while(!wifi_comm_success)
  402790:	bf00      	nop
  402792:	4b36      	ldr	r3, [pc, #216]	; (40286c <write_image_to_file+0x120>)
  402794:	681b      	ldr	r3, [r3, #0]
  402796:	2b00      	cmp	r3, #0
  402798:	d0fb      	beq.n	402792 <write_image_to_file+0x46>
	{
		
	}
	
	uint32_t img = start_of_image;
  40279a:	4b2e      	ldr	r3, [pc, #184]	; (402854 <write_image_to_file+0x108>)
  40279c:	681b      	ldr	r3, [r3, #0]
  40279e:	637b      	str	r3, [r7, #52]	; 0x34
	while (img < end_of_image)
  4027a0:	e00a      	b.n	4027b8 <write_image_to_file+0x6c>
	{
		usart_putchar(WIFI_USART, image_buffer[img]);
  4027a2:	4a33      	ldr	r2, [pc, #204]	; (402870 <write_image_to_file+0x124>)
  4027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4027a6:	4413      	add	r3, r2
  4027a8:	781b      	ldrb	r3, [r3, #0]
  4027aa:	4619      	mov	r1, r3
  4027ac:	4831      	ldr	r0, [pc, #196]	; (402874 <write_image_to_file+0x128>)
  4027ae:	4b32      	ldr	r3, [pc, #200]	; (402878 <write_image_to_file+0x12c>)
  4027b0:	4798      	blx	r3
		img++;
  4027b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4027b4:	3301      	adds	r3, #1
  4027b6:	637b      	str	r3, [r7, #52]	; 0x34
	while (img < end_of_image)
  4027b8:	4b25      	ldr	r3, [pc, #148]	; (402850 <write_image_to_file+0x104>)
  4027ba:	681b      	ldr	r3, [r3, #0]
  4027bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  4027be:	429a      	cmp	r2, r3
  4027c0:	d3ef      	bcc.n	4027a2 <write_image_to_file+0x56>
	}
	
	usart_write_line(WIFI_USART, "Complete\r\n");
  4027c2:	492e      	ldr	r1, [pc, #184]	; (40287c <write_image_to_file+0x130>)
  4027c4:	482b      	ldr	r0, [pc, #172]	; (402874 <write_image_to_file+0x128>)
  4027c6:	4b2e      	ldr	r3, [pc, #184]	; (402880 <write_image_to_file+0x134>)
  4027c8:	4798      	blx	r3
	delay_s(2);
  4027ca:	4b2e      	ldr	r3, [pc, #184]	; (402884 <write_image_to_file+0x138>)
  4027cc:	4798      	blx	r3
  4027ce:	4603      	mov	r3, r0
  4027d0:	4619      	mov	r1, r3
  4027d2:	f04f 0200 	mov.w	r2, #0
  4027d6:	460b      	mov	r3, r1
  4027d8:	4614      	mov	r4, r2
  4027da:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  4027de:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
  4027e2:	ea4f 1a43 	mov.w	sl, r3, lsl #5
  4027e6:	4653      	mov	r3, sl
  4027e8:	465c      	mov	r4, fp
  4027ea:	1a5b      	subs	r3, r3, r1
  4027ec:	eb64 0402 	sbc.w	r4, r4, r2
  4027f0:	ea4f 0984 	mov.w	r9, r4, lsl #2
  4027f4:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  4027f8:	ea4f 0883 	mov.w	r8, r3, lsl #2
  4027fc:	4643      	mov	r3, r8
  4027fe:	464c      	mov	r4, r9
  402800:	185b      	adds	r3, r3, r1
  402802:	eb44 0402 	adc.w	r4, r4, r2
  402806:	0126      	lsls	r6, r4, #4
  402808:	ea46 7613 	orr.w	r6, r6, r3, lsr #28
  40280c:	011d      	lsls	r5, r3, #4
  40280e:	462b      	mov	r3, r5
  402810:	4634      	mov	r4, r6
  402812:	4619      	mov	r1, r3
  402814:	4622      	mov	r2, r4
  402816:	f243 63af 	movw	r3, #13999	; 0x36af
  40281a:	f04f 0400 	mov.w	r4, #0
  40281e:	18cd      	adds	r5, r1, r3
  402820:	eb42 0604 	adc.w	r6, r2, r4
  402824:	4628      	mov	r0, r5
  402826:	4631      	mov	r1, r6
  402828:	4c17      	ldr	r4, [pc, #92]	; (402888 <write_image_to_file+0x13c>)
  40282a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40282e:	f04f 0300 	mov.w	r3, #0
  402832:	47a0      	blx	r4
  402834:	4603      	mov	r3, r0
  402836:	460c      	mov	r4, r1
  402838:	4618      	mov	r0, r3
  40283a:	4b14      	ldr	r3, [pc, #80]	; (40288c <write_image_to_file+0x140>)
  40283c:	4798      	blx	r3
  40283e:	e000      	b.n	402842 <write_image_to_file+0xf6>
		return;
  402840:	bf00      	nop
	
}
  402842:	373c      	adds	r7, #60	; 0x3c
  402844:	46bd      	mov	sp, r7
  402846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40284a:	bf00      	nop
  40284c:	00401cad 	.word	0x00401cad
  402850:	20000ac0 	.word	0x20000ac0
  402854:	20000ab8 	.word	0x20000ab8
  402858:	20000a68 	.word	0x20000a68
  40285c:	00403739 	.word	0x00403739
  402860:	00408f14 	.word	0x00408f14
  402864:	004037d5 	.word	0x004037d5
  402868:	004026fd 	.word	0x004026fd
  40286c:	20000a64 	.word	0x20000a64
  402870:	20000ac4 	.word	0x20000ac4
  402874:	40024000 	.word	0x40024000
  402878:	0040166f 	.word	0x0040166f
  40287c:	00408f28 	.word	0x00408f28
  402880:	0040169d 	.word	0x0040169d
  402884:	004024d9 	.word	0x004024d9
  402888:	004033d9 	.word	0x004033d9
  40288c:	20000001 	.word	0x20000001

00402890 <process_data_wifi>:
void process_incoming_byte_wifi(uint8_t in_byte) {
	
	input_line_wifi[input_pos_wifi++ ] = in_byte;
}

void process_data_wifi(void) {
  402890:	b580      	push	{r7, lr}
  402892:	af00      	add	r7, sp, #0
	
	if (strstr(input_line_wifi, "None")) {
  402894:	490a      	ldr	r1, [pc, #40]	; (4028c0 <process_data_wifi+0x30>)
  402896:	480b      	ldr	r0, [pc, #44]	; (4028c4 <process_data_wifi+0x34>)
  402898:	4b0b      	ldr	r3, [pc, #44]	; (4028c8 <process_data_wifi+0x38>)
  40289a:	4798      	blx	r3
  40289c:	4603      	mov	r3, r0
  40289e:	2b00      	cmp	r3, #0
  4028a0:	d002      	beq.n	4028a8 <process_data_wifi+0x18>
		wait_flag = 1;
  4028a2:	4b0a      	ldr	r3, [pc, #40]	; (4028cc <process_data_wifi+0x3c>)
  4028a4:	2201      	movs	r2, #1
  4028a6:	601a      	str	r2, [r3, #0]
	} 
	if (strstr(input_line_wifi, "Image")){
  4028a8:	4909      	ldr	r1, [pc, #36]	; (4028d0 <process_data_wifi+0x40>)
  4028aa:	4806      	ldr	r0, [pc, #24]	; (4028c4 <process_data_wifi+0x34>)
  4028ac:	4b06      	ldr	r3, [pc, #24]	; (4028c8 <process_data_wifi+0x38>)
  4028ae:	4798      	blx	r3
  4028b0:	4603      	mov	r3, r0
  4028b2:	2b00      	cmp	r3, #0
  4028b4:	d002      	beq.n	4028bc <process_data_wifi+0x2c>
		start_image_transfer = 1;
  4028b6:	4b07      	ldr	r3, [pc, #28]	; (4028d4 <process_data_wifi+0x44>)
  4028b8:	2201      	movs	r2, #1
  4028ba:	601a      	str	r2, [r3, #0]
	}
  4028bc:	bf00      	nop
  4028be:	bd80      	pop	{r7, pc}
  4028c0:	00408f34 	.word	0x00408f34
  4028c4:	2000ce14 	.word	0x2000ce14
  4028c8:	00403ad1 	.word	0x00403ad1
  4028cc:	20000a70 	.word	0x20000a70
  4028d0:	00408f3c 	.word	0x00408f3c
  4028d4:	20000a6c 	.word	0x20000a6c

004028d8 <sysclk_enable_peripheral_clock>:
{
  4028d8:	b580      	push	{r7, lr}
  4028da:	b082      	sub	sp, #8
  4028dc:	af00      	add	r7, sp, #0
  4028de:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4028e0:	6878      	ldr	r0, [r7, #4]
  4028e2:	4b03      	ldr	r3, [pc, #12]	; (4028f0 <sysclk_enable_peripheral_clock+0x18>)
  4028e4:	4798      	blx	r3
}
  4028e6:	bf00      	nop
  4028e8:	3708      	adds	r7, #8
  4028ea:	46bd      	mov	sp, r7
  4028ec:	bd80      	pop	{r7, pc}
  4028ee:	bf00      	nop
  4028f0:	00400e1d 	.word	0x00400e1d

004028f4 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4028f4:	b580      	push	{r7, lr}
  4028f6:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4028f8:	200b      	movs	r0, #11
  4028fa:	4b03      	ldr	r3, [pc, #12]	; (402908 <ioport_init+0x14>)
  4028fc:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4028fe:	200c      	movs	r0, #12
  402900:	4b01      	ldr	r3, [pc, #4]	; (402908 <ioport_init+0x14>)
  402902:	4798      	blx	r3
	arch_ioport_init();
}
  402904:	bf00      	nop
  402906:	bd80      	pop	{r7, pc}
  402908:	004028d9 	.word	0x004028d9

0040290c <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  40290c:	b480      	push	{r7}
  40290e:	b08d      	sub	sp, #52	; 0x34
  402910:	af00      	add	r7, sp, #0
  402912:	6078      	str	r0, [r7, #4]
  402914:	460b      	mov	r3, r1
  402916:	70fb      	strb	r3, [r7, #3]
  402918:	687b      	ldr	r3, [r7, #4]
  40291a:	62fb      	str	r3, [r7, #44]	; 0x2c
  40291c:	78fb      	ldrb	r3, [r7, #3]
  40291e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402924:	627b      	str	r3, [r7, #36]	; 0x24
  402926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402928:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  40292a:	6a3b      	ldr	r3, [r7, #32]
  40292c:	095b      	lsrs	r3, r3, #5
  40292e:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402930:	69fb      	ldr	r3, [r7, #28]
  402932:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402936:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40293a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40293c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40293e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402942:	2b01      	cmp	r3, #1
  402944:	d109      	bne.n	40295a <ioport_set_pin_dir+0x4e>
  402946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402948:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  40294a:	697b      	ldr	r3, [r7, #20]
  40294c:	f003 031f 	and.w	r3, r3, #31
  402950:	2201      	movs	r2, #1
  402952:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402954:	69bb      	ldr	r3, [r7, #24]
  402956:	611a      	str	r2, [r3, #16]
  402958:	e00c      	b.n	402974 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  40295a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40295e:	2b00      	cmp	r3, #0
  402960:	d108      	bne.n	402974 <ioport_set_pin_dir+0x68>
  402962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402964:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  402966:	693b      	ldr	r3, [r7, #16]
  402968:	f003 031f 	and.w	r3, r3, #31
  40296c:	2201      	movs	r2, #1
  40296e:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402970:	69bb      	ldr	r3, [r7, #24]
  402972:	615a      	str	r2, [r3, #20]
  402974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402976:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402978:	68fb      	ldr	r3, [r7, #12]
  40297a:	f003 031f 	and.w	r3, r3, #31
  40297e:	2201      	movs	r2, #1
  402980:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402982:	69bb      	ldr	r3, [r7, #24]
  402984:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402988:	bf00      	nop
  40298a:	3734      	adds	r7, #52	; 0x34
  40298c:	46bd      	mov	sp, r7
  40298e:	bc80      	pop	{r7}
  402990:	4770      	bx	lr

00402992 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402992:	b480      	push	{r7}
  402994:	b08b      	sub	sp, #44	; 0x2c
  402996:	af00      	add	r7, sp, #0
  402998:	6078      	str	r0, [r7, #4]
  40299a:	460b      	mov	r3, r1
  40299c:	70fb      	strb	r3, [r7, #3]
  40299e:	687b      	ldr	r3, [r7, #4]
  4029a0:	627b      	str	r3, [r7, #36]	; 0x24
  4029a2:	78fb      	ldrb	r3, [r7, #3]
  4029a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4029aa:	61fb      	str	r3, [r7, #28]
  4029ac:	69fb      	ldr	r3, [r7, #28]
  4029ae:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4029b0:	69bb      	ldr	r3, [r7, #24]
  4029b2:	095b      	lsrs	r3, r3, #5
  4029b4:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4029b6:	697b      	ldr	r3, [r7, #20]
  4029b8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4029bc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4029c0:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4029c2:	613b      	str	r3, [r7, #16]

	if (level) {
  4029c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4029c8:	2b00      	cmp	r3, #0
  4029ca:	d009      	beq.n	4029e0 <ioport_set_pin_level+0x4e>
  4029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4029ce:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4029d0:	68fb      	ldr	r3, [r7, #12]
  4029d2:	f003 031f 	and.w	r3, r3, #31
  4029d6:	2201      	movs	r2, #1
  4029d8:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4029da:	693b      	ldr	r3, [r7, #16]
  4029dc:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4029de:	e008      	b.n	4029f2 <ioport_set_pin_level+0x60>
  4029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4029e2:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4029e4:	68bb      	ldr	r3, [r7, #8]
  4029e6:	f003 031f 	and.w	r3, r3, #31
  4029ea:	2201      	movs	r2, #1
  4029ec:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4029ee:	693b      	ldr	r3, [r7, #16]
  4029f0:	635a      	str	r2, [r3, #52]	; 0x34
  4029f2:	bf00      	nop
  4029f4:	372c      	adds	r7, #44	; 0x2c
  4029f6:	46bd      	mov	sp, r7
  4029f8:	bc80      	pop	{r7}
  4029fa:	4770      	bx	lr

004029fc <board_init>:
#include <board.h>
#include <conf_board.h>
#include "wifi.h"

void board_init(void)
{
  4029fc:	b580      	push	{r7, lr}
  4029fe:	af00      	add	r7, sp, #0
	
	ioport_init();
  402a00:	4b13      	ldr	r3, [pc, #76]	; (402a50 <board_init+0x54>)
  402a02:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_RESET_PIN, IOPORT_DIR_OUTPUT);
  402a04:	2101      	movs	r1, #1
  402a06:	2000      	movs	r0, #0
  402a08:	4b12      	ldr	r3, [pc, #72]	; (402a54 <board_init+0x58>)
  402a0a:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET_PIN, true);
  402a0c:	2101      	movs	r1, #1
  402a0e:	2000      	movs	r0, #0
  402a10:	4b11      	ldr	r3, [pc, #68]	; (402a58 <board_init+0x5c>)
  402a12:	4798      	blx	r3
	
	ioport_set_pin_dir(PIN_LED, IOPORT_DIR_OUTPUT);
  402a14:	2101      	movs	r1, #1
  402a16:	2016      	movs	r0, #22
  402a18:	4b0e      	ldr	r3, [pc, #56]	; (402a54 <board_init+0x58>)
  402a1a:	4798      	blx	r3
	ioport_set_pin_level(PIN_LED, false);
  402a1c:	2100      	movs	r1, #0
  402a1e:	2016      	movs	r0, #22
  402a20:	4b0d      	ldr	r3, [pc, #52]	; (402a58 <board_init+0x5c>)
  402a22:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_CTS_PIN, IOPORT_DIR_OUTPUT);
  402a24:	2101      	movs	r1, #1
  402a26:	2007      	movs	r0, #7
  402a28:	4b0a      	ldr	r3, [pc, #40]	; (402a54 <board_init+0x58>)
  402a2a:	4798      	blx	r3
	ioport_set_pin_level(WIFI_CTS_PIN, false);
  402a2c:	2100      	movs	r1, #0
  402a2e:	2007      	movs	r0, #7
  402a30:	4b09      	ldr	r3, [pc, #36]	; (402a58 <board_init+0x5c>)
  402a32:	4798      	blx	r3
	
	ioport_set_pin_dir(CAM_RST, IOPORT_DIR_OUTPUT);
  402a34:	2101      	movs	r1, #1
  402a36:	2014      	movs	r0, #20
  402a38:	4b06      	ldr	r3, [pc, #24]	; (402a54 <board_init+0x58>)
  402a3a:	4798      	blx	r3
	ioport_set_pin_dir(CAM_RST, true);
  402a3c:	2101      	movs	r1, #1
  402a3e:	2014      	movs	r0, #20
  402a40:	4b04      	ldr	r3, [pc, #16]	; (402a54 <board_init+0x58>)
  402a42:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_STATUS, IOPORT_DIR_INPUT);
  402a44:	2100      	movs	r1, #0
  402a46:	202e      	movs	r0, #46	; 0x2e
  402a48:	4b02      	ldr	r3, [pc, #8]	; (402a54 <board_init+0x58>)
  402a4a:	4798      	blx	r3
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
}
  402a4c:	bf00      	nop
  402a4e:	bd80      	pop	{r7, pc}
  402a50:	004028f5 	.word	0x004028f5
  402a54:	0040290d 	.word	0x0040290d
  402a58:	00402993 	.word	0x00402993

00402a5c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402a5c:	b580      	push	{r7, lr}
  402a5e:	b084      	sub	sp, #16
  402a60:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  402a62:	4b27      	ldr	r3, [pc, #156]	; (402b00 <Reset_Handler+0xa4>)
  402a64:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  402a66:	4b27      	ldr	r3, [pc, #156]	; (402b04 <Reset_Handler+0xa8>)
  402a68:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  402a6a:	68fa      	ldr	r2, [r7, #12]
  402a6c:	68bb      	ldr	r3, [r7, #8]
  402a6e:	429a      	cmp	r2, r3
  402a70:	d90d      	bls.n	402a8e <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  402a72:	e007      	b.n	402a84 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  402a74:	68bb      	ldr	r3, [r7, #8]
  402a76:	1d1a      	adds	r2, r3, #4
  402a78:	60ba      	str	r2, [r7, #8]
  402a7a:	68fa      	ldr	r2, [r7, #12]
  402a7c:	1d11      	adds	r1, r2, #4
  402a7e:	60f9      	str	r1, [r7, #12]
  402a80:	6812      	ldr	r2, [r2, #0]
  402a82:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  402a84:	68bb      	ldr	r3, [r7, #8]
  402a86:	4a20      	ldr	r2, [pc, #128]	; (402b08 <Reset_Handler+0xac>)
  402a88:	4293      	cmp	r3, r2
  402a8a:	d3f3      	bcc.n	402a74 <Reset_Handler+0x18>
  402a8c:	e020      	b.n	402ad0 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  402a8e:	68fa      	ldr	r2, [r7, #12]
  402a90:	68bb      	ldr	r3, [r7, #8]
  402a92:	429a      	cmp	r2, r3
  402a94:	d21c      	bcs.n	402ad0 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402a96:	4a1c      	ldr	r2, [pc, #112]	; (402b08 <Reset_Handler+0xac>)
  402a98:	4b1a      	ldr	r3, [pc, #104]	; (402b04 <Reset_Handler+0xa8>)
  402a9a:	1ad3      	subs	r3, r2, r3
  402a9c:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402a9e:	68fa      	ldr	r2, [r7, #12]
  402aa0:	687b      	ldr	r3, [r7, #4]
  402aa2:	4413      	add	r3, r2
  402aa4:	3b04      	subs	r3, #4
  402aa6:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  402aa8:	68ba      	ldr	r2, [r7, #8]
  402aaa:	687b      	ldr	r3, [r7, #4]
  402aac:	4413      	add	r3, r2
  402aae:	3b04      	subs	r3, #4
  402ab0:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  402ab2:	e00a      	b.n	402aca <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  402ab4:	68bb      	ldr	r3, [r7, #8]
  402ab6:	1f1a      	subs	r2, r3, #4
  402ab8:	60ba      	str	r2, [r7, #8]
  402aba:	68fa      	ldr	r2, [r7, #12]
  402abc:	1f11      	subs	r1, r2, #4
  402abe:	60f9      	str	r1, [r7, #12]
  402ac0:	6812      	ldr	r2, [r2, #0]
  402ac2:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  402ac4:	687b      	ldr	r3, [r7, #4]
  402ac6:	3b04      	subs	r3, #4
  402ac8:	607b      	str	r3, [r7, #4]
  402aca:	687b      	ldr	r3, [r7, #4]
  402acc:	2b00      	cmp	r3, #0
  402ace:	d1f1      	bne.n	402ab4 <Reset_Handler+0x58>
		}
	}
	__NOP();
  402ad0:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402ad2:	4b0e      	ldr	r3, [pc, #56]	; (402b0c <Reset_Handler+0xb0>)
  402ad4:	60bb      	str	r3, [r7, #8]
  402ad6:	e004      	b.n	402ae2 <Reset_Handler+0x86>
		*pDest++ = 0;
  402ad8:	68bb      	ldr	r3, [r7, #8]
  402ada:	1d1a      	adds	r2, r3, #4
  402adc:	60ba      	str	r2, [r7, #8]
  402ade:	2200      	movs	r2, #0
  402ae0:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  402ae2:	68bb      	ldr	r3, [r7, #8]
  402ae4:	4a0a      	ldr	r2, [pc, #40]	; (402b10 <Reset_Handler+0xb4>)
  402ae6:	4293      	cmp	r3, r2
  402ae8:	d3f6      	bcc.n	402ad8 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  402aea:	4b0a      	ldr	r3, [pc, #40]	; (402b14 <Reset_Handler+0xb8>)
  402aec:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  402aee:	4a0a      	ldr	r2, [pc, #40]	; (402b18 <Reset_Handler+0xbc>)
  402af0:	68fb      	ldr	r3, [r7, #12]
  402af2:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  402af4:	4b09      	ldr	r3, [pc, #36]	; (402b1c <Reset_Handler+0xc0>)
  402af6:	4798      	blx	r3

	/* Branch to main function */
	main();
  402af8:	4b09      	ldr	r3, [pc, #36]	; (402b20 <Reset_Handler+0xc4>)
  402afa:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402afc:	e7fe      	b.n	402afc <Reset_Handler+0xa0>
  402afe:	bf00      	nop
  402b00:	004092ec 	.word	0x004092ec
  402b04:	20000000 	.word	0x20000000
  402b08:	200009c0 	.word	0x200009c0
  402b0c:	200009c0 	.word	0x200009c0
  402b10:	2000d224 	.word	0x2000d224
  402b14:	00400000 	.word	0x00400000
  402b18:	e000ed00 	.word	0xe000ed00
  402b1c:	004036e9 	.word	0x004036e9
  402b20:	00402f0d 	.word	0x00402f0d

00402b24 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402b24:	b480      	push	{r7}
  402b26:	af00      	add	r7, sp, #0
	while (1) {
  402b28:	e7fe      	b.n	402b28 <Dummy_Handler+0x4>
	...

00402b2c <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  402b2c:	b480      	push	{r7}
  402b2e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402b30:	4b5d      	ldr	r3, [pc, #372]	; (402ca8 <SystemCoreClockUpdate+0x17c>)
  402b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b34:	f003 0303 	and.w	r3, r3, #3
  402b38:	2b03      	cmp	r3, #3
  402b3a:	f200 8096 	bhi.w	402c6a <SystemCoreClockUpdate+0x13e>
  402b3e:	a201      	add	r2, pc, #4	; (adr r2, 402b44 <SystemCoreClockUpdate+0x18>)
  402b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402b44:	00402b55 	.word	0x00402b55
  402b48:	00402b75 	.word	0x00402b75
  402b4c:	00402bbf 	.word	0x00402bbf
  402b50:	00402bbf 	.word	0x00402bbf
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402b54:	4b55      	ldr	r3, [pc, #340]	; (402cac <SystemCoreClockUpdate+0x180>)
  402b56:	695b      	ldr	r3, [r3, #20]
  402b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402b5c:	2b00      	cmp	r3, #0
  402b5e:	d004      	beq.n	402b6a <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402b60:	4b53      	ldr	r3, [pc, #332]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402b62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402b66:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  402b68:	e080      	b.n	402c6c <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402b6a:	4b51      	ldr	r3, [pc, #324]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402b6c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402b70:	601a      	str	r2, [r3, #0]
		break;
  402b72:	e07b      	b.n	402c6c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402b74:	4b4c      	ldr	r3, [pc, #304]	; (402ca8 <SystemCoreClockUpdate+0x17c>)
  402b76:	6a1b      	ldr	r3, [r3, #32]
  402b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402b7c:	2b00      	cmp	r3, #0
  402b7e:	d003      	beq.n	402b88 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402b80:	4b4b      	ldr	r3, [pc, #300]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402b82:	4a4c      	ldr	r2, [pc, #304]	; (402cb4 <SystemCoreClockUpdate+0x188>)
  402b84:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  402b86:	e071      	b.n	402c6c <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402b88:	4b49      	ldr	r3, [pc, #292]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402b8a:	4a4b      	ldr	r2, [pc, #300]	; (402cb8 <SystemCoreClockUpdate+0x18c>)
  402b8c:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402b8e:	4b46      	ldr	r3, [pc, #280]	; (402ca8 <SystemCoreClockUpdate+0x17c>)
  402b90:	6a1b      	ldr	r3, [r3, #32]
  402b92:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402b96:	2b10      	cmp	r3, #16
  402b98:	d008      	beq.n	402bac <SystemCoreClockUpdate+0x80>
  402b9a:	2b20      	cmp	r3, #32
  402b9c:	d00a      	beq.n	402bb4 <SystemCoreClockUpdate+0x88>
  402b9e:	2b00      	cmp	r3, #0
  402ba0:	d000      	beq.n	402ba4 <SystemCoreClockUpdate+0x78>
			break;
  402ba2:	e00b      	b.n	402bbc <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402ba4:	4b42      	ldr	r3, [pc, #264]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402ba6:	4a44      	ldr	r2, [pc, #272]	; (402cb8 <SystemCoreClockUpdate+0x18c>)
  402ba8:	601a      	str	r2, [r3, #0]
			break;
  402baa:	e007      	b.n	402bbc <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402bac:	4b40      	ldr	r3, [pc, #256]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402bae:	4a43      	ldr	r2, [pc, #268]	; (402cbc <SystemCoreClockUpdate+0x190>)
  402bb0:	601a      	str	r2, [r3, #0]
			break;
  402bb2:	e003      	b.n	402bbc <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402bb4:	4b3e      	ldr	r3, [pc, #248]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402bb6:	4a3f      	ldr	r2, [pc, #252]	; (402cb4 <SystemCoreClockUpdate+0x188>)
  402bb8:	601a      	str	r2, [r3, #0]
			break;
  402bba:	bf00      	nop
		break;
  402bbc:	e056      	b.n	402c6c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402bbe:	4b3a      	ldr	r3, [pc, #232]	; (402ca8 <SystemCoreClockUpdate+0x17c>)
  402bc0:	6a1b      	ldr	r3, [r3, #32]
  402bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402bc6:	2b00      	cmp	r3, #0
  402bc8:	d003      	beq.n	402bd2 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402bca:	4b39      	ldr	r3, [pc, #228]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402bcc:	4a39      	ldr	r2, [pc, #228]	; (402cb4 <SystemCoreClockUpdate+0x188>)
  402bce:	601a      	str	r2, [r3, #0]
  402bd0:	e019      	b.n	402c06 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402bd2:	4b37      	ldr	r3, [pc, #220]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402bd4:	4a38      	ldr	r2, [pc, #224]	; (402cb8 <SystemCoreClockUpdate+0x18c>)
  402bd6:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402bd8:	4b33      	ldr	r3, [pc, #204]	; (402ca8 <SystemCoreClockUpdate+0x17c>)
  402bda:	6a1b      	ldr	r3, [r3, #32]
  402bdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402be0:	2b10      	cmp	r3, #16
  402be2:	d008      	beq.n	402bf6 <SystemCoreClockUpdate+0xca>
  402be4:	2b20      	cmp	r3, #32
  402be6:	d00a      	beq.n	402bfe <SystemCoreClockUpdate+0xd2>
  402be8:	2b00      	cmp	r3, #0
  402bea:	d000      	beq.n	402bee <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402bec:	e00b      	b.n	402c06 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402bee:	4b30      	ldr	r3, [pc, #192]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402bf0:	4a31      	ldr	r2, [pc, #196]	; (402cb8 <SystemCoreClockUpdate+0x18c>)
  402bf2:	601a      	str	r2, [r3, #0]
					break;
  402bf4:	e007      	b.n	402c06 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402bf6:	4b2e      	ldr	r3, [pc, #184]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402bf8:	4a30      	ldr	r2, [pc, #192]	; (402cbc <SystemCoreClockUpdate+0x190>)
  402bfa:	601a      	str	r2, [r3, #0]
					break;
  402bfc:	e003      	b.n	402c06 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402bfe:	4b2c      	ldr	r3, [pc, #176]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402c00:	4a2c      	ldr	r2, [pc, #176]	; (402cb4 <SystemCoreClockUpdate+0x188>)
  402c02:	601a      	str	r2, [r3, #0]
					break;
  402c04:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402c06:	4b28      	ldr	r3, [pc, #160]	; (402ca8 <SystemCoreClockUpdate+0x17c>)
  402c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c0a:	f003 0303 	and.w	r3, r3, #3
  402c0e:	2b02      	cmp	r3, #2
  402c10:	d115      	bne.n	402c3e <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402c12:	4b25      	ldr	r3, [pc, #148]	; (402ca8 <SystemCoreClockUpdate+0x17c>)
  402c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  402c16:	0c1b      	lsrs	r3, r3, #16
  402c18:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402c1c:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402c1e:	4a24      	ldr	r2, [pc, #144]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402c20:	6812      	ldr	r2, [r2, #0]
  402c22:	fb02 f303 	mul.w	r3, r2, r3
  402c26:	4a22      	ldr	r2, [pc, #136]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402c28:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402c2a:	4b1f      	ldr	r3, [pc, #124]	; (402ca8 <SystemCoreClockUpdate+0x17c>)
  402c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  402c2e:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402c30:	4a1f      	ldr	r2, [pc, #124]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402c32:	6812      	ldr	r2, [r2, #0]
  402c34:	fbb2 f3f3 	udiv	r3, r2, r3
  402c38:	4a1d      	ldr	r2, [pc, #116]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402c3a:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402c3c:	e016      	b.n	402c6c <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402c3e:	4b1a      	ldr	r3, [pc, #104]	; (402ca8 <SystemCoreClockUpdate+0x17c>)
  402c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402c42:	0c1b      	lsrs	r3, r3, #16
  402c44:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402c48:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402c4a:	4a19      	ldr	r2, [pc, #100]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402c4c:	6812      	ldr	r2, [r2, #0]
  402c4e:	fb02 f303 	mul.w	r3, r2, r3
  402c52:	4a17      	ldr	r2, [pc, #92]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402c54:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402c56:	4b14      	ldr	r3, [pc, #80]	; (402ca8 <SystemCoreClockUpdate+0x17c>)
  402c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  402c5a:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402c5c:	4a14      	ldr	r2, [pc, #80]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402c5e:	6812      	ldr	r2, [r2, #0]
  402c60:	fbb2 f3f3 	udiv	r3, r2, r3
  402c64:	4a12      	ldr	r2, [pc, #72]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402c66:	6013      	str	r3, [r2, #0]
		break;
  402c68:	e000      	b.n	402c6c <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  402c6a:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402c6c:	4b0e      	ldr	r3, [pc, #56]	; (402ca8 <SystemCoreClockUpdate+0x17c>)
  402c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c70:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402c74:	2b70      	cmp	r3, #112	; 0x70
  402c76:	d108      	bne.n	402c8a <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  402c78:	4b0d      	ldr	r3, [pc, #52]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402c7a:	681b      	ldr	r3, [r3, #0]
  402c7c:	4a10      	ldr	r2, [pc, #64]	; (402cc0 <SystemCoreClockUpdate+0x194>)
  402c7e:	fba2 2303 	umull	r2, r3, r2, r3
  402c82:	085b      	lsrs	r3, r3, #1
  402c84:	4a0a      	ldr	r2, [pc, #40]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402c86:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  402c88:	e00a      	b.n	402ca0 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402c8a:	4b07      	ldr	r3, [pc, #28]	; (402ca8 <SystemCoreClockUpdate+0x17c>)
  402c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c8e:	091b      	lsrs	r3, r3, #4
  402c90:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  402c94:	4a06      	ldr	r2, [pc, #24]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402c96:	6812      	ldr	r2, [r2, #0]
  402c98:	fa22 f303 	lsr.w	r3, r2, r3
  402c9c:	4a04      	ldr	r2, [pc, #16]	; (402cb0 <SystemCoreClockUpdate+0x184>)
  402c9e:	6013      	str	r3, [r2, #0]
}
  402ca0:	bf00      	nop
  402ca2:	46bd      	mov	sp, r7
  402ca4:	bc80      	pop	{r7}
  402ca6:	4770      	bx	lr
  402ca8:	400e0400 	.word	0x400e0400
  402cac:	400e1410 	.word	0x400e1410
  402cb0:	2000000c 	.word	0x2000000c
  402cb4:	00b71b00 	.word	0x00b71b00
  402cb8:	003d0900 	.word	0x003d0900
  402cbc:	007a1200 	.word	0x007a1200
  402cc0:	aaaaaaab 	.word	0xaaaaaaab

00402cc4 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402cc4:	b480      	push	{r7}
  402cc6:	b083      	sub	sp, #12
  402cc8:	af00      	add	r7, sp, #0
  402cca:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402ccc:	687b      	ldr	r3, [r7, #4]
  402cce:	4a18      	ldr	r2, [pc, #96]	; (402d30 <system_init_flash+0x6c>)
  402cd0:	4293      	cmp	r3, r2
  402cd2:	d804      	bhi.n	402cde <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402cd4:	4b17      	ldr	r3, [pc, #92]	; (402d34 <system_init_flash+0x70>)
  402cd6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402cda:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402cdc:	e023      	b.n	402d26 <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402cde:	687b      	ldr	r3, [r7, #4]
  402ce0:	4a15      	ldr	r2, [pc, #84]	; (402d38 <system_init_flash+0x74>)
  402ce2:	4293      	cmp	r3, r2
  402ce4:	d803      	bhi.n	402cee <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402ce6:	4b13      	ldr	r3, [pc, #76]	; (402d34 <system_init_flash+0x70>)
  402ce8:	4a14      	ldr	r2, [pc, #80]	; (402d3c <system_init_flash+0x78>)
  402cea:	601a      	str	r2, [r3, #0]
}
  402cec:	e01b      	b.n	402d26 <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402cee:	687b      	ldr	r3, [r7, #4]
  402cf0:	4a13      	ldr	r2, [pc, #76]	; (402d40 <system_init_flash+0x7c>)
  402cf2:	4293      	cmp	r3, r2
  402cf4:	d803      	bhi.n	402cfe <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402cf6:	4b0f      	ldr	r3, [pc, #60]	; (402d34 <system_init_flash+0x70>)
  402cf8:	4a12      	ldr	r2, [pc, #72]	; (402d44 <system_init_flash+0x80>)
  402cfa:	601a      	str	r2, [r3, #0]
}
  402cfc:	e013      	b.n	402d26 <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402cfe:	687b      	ldr	r3, [r7, #4]
  402d00:	4a11      	ldr	r2, [pc, #68]	; (402d48 <system_init_flash+0x84>)
  402d02:	4293      	cmp	r3, r2
  402d04:	d803      	bhi.n	402d0e <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402d06:	4b0b      	ldr	r3, [pc, #44]	; (402d34 <system_init_flash+0x70>)
  402d08:	4a10      	ldr	r2, [pc, #64]	; (402d4c <system_init_flash+0x88>)
  402d0a:	601a      	str	r2, [r3, #0]
}
  402d0c:	e00b      	b.n	402d26 <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402d0e:	687b      	ldr	r3, [r7, #4]
  402d10:	4a0f      	ldr	r2, [pc, #60]	; (402d50 <system_init_flash+0x8c>)
  402d12:	4293      	cmp	r3, r2
  402d14:	d804      	bhi.n	402d20 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402d16:	4b07      	ldr	r3, [pc, #28]	; (402d34 <system_init_flash+0x70>)
  402d18:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402d1c:	601a      	str	r2, [r3, #0]
}
  402d1e:	e002      	b.n	402d26 <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402d20:	4b04      	ldr	r3, [pc, #16]	; (402d34 <system_init_flash+0x70>)
  402d22:	4a0c      	ldr	r2, [pc, #48]	; (402d54 <system_init_flash+0x90>)
  402d24:	601a      	str	r2, [r3, #0]
}
  402d26:	bf00      	nop
  402d28:	370c      	adds	r7, #12
  402d2a:	46bd      	mov	sp, r7
  402d2c:	bc80      	pop	{r7}
  402d2e:	4770      	bx	lr
  402d30:	01312cff 	.word	0x01312cff
  402d34:	400e0a00 	.word	0x400e0a00
  402d38:	026259ff 	.word	0x026259ff
  402d3c:	04000100 	.word	0x04000100
  402d40:	039386ff 	.word	0x039386ff
  402d44:	04000200 	.word	0x04000200
  402d48:	04c4b3ff 	.word	0x04c4b3ff
  402d4c:	04000300 	.word	0x04000300
  402d50:	05f5e0ff 	.word	0x05f5e0ff
  402d54:	04000500 	.word	0x04000500

00402d58 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  402d58:	b480      	push	{r7}
  402d5a:	b085      	sub	sp, #20
  402d5c:	af00      	add	r7, sp, #0
  402d5e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  402d60:	4b10      	ldr	r3, [pc, #64]	; (402da4 <_sbrk+0x4c>)
  402d62:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  402d64:	4b10      	ldr	r3, [pc, #64]	; (402da8 <_sbrk+0x50>)
  402d66:	681b      	ldr	r3, [r3, #0]
  402d68:	2b00      	cmp	r3, #0
  402d6a:	d102      	bne.n	402d72 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402d6c:	4b0e      	ldr	r3, [pc, #56]	; (402da8 <_sbrk+0x50>)
  402d6e:	4a0f      	ldr	r2, [pc, #60]	; (402dac <_sbrk+0x54>)
  402d70:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402d72:	4b0d      	ldr	r3, [pc, #52]	; (402da8 <_sbrk+0x50>)
  402d74:	681b      	ldr	r3, [r3, #0]
  402d76:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  402d78:	68ba      	ldr	r2, [r7, #8]
  402d7a:	687b      	ldr	r3, [r7, #4]
  402d7c:	441a      	add	r2, r3
  402d7e:	68fb      	ldr	r3, [r7, #12]
  402d80:	429a      	cmp	r2, r3
  402d82:	dd02      	ble.n	402d8a <_sbrk+0x32>
		return (caddr_t) -1;	
  402d84:	f04f 33ff 	mov.w	r3, #4294967295
  402d88:	e006      	b.n	402d98 <_sbrk+0x40>
	}

	heap += incr;
  402d8a:	4b07      	ldr	r3, [pc, #28]	; (402da8 <_sbrk+0x50>)
  402d8c:	681a      	ldr	r2, [r3, #0]
  402d8e:	687b      	ldr	r3, [r7, #4]
  402d90:	4413      	add	r3, r2
  402d92:	4a05      	ldr	r2, [pc, #20]	; (402da8 <_sbrk+0x50>)
  402d94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402d96:	68bb      	ldr	r3, [r7, #8]
}
  402d98:	4618      	mov	r0, r3
  402d9a:	3714      	adds	r7, #20
  402d9c:	46bd      	mov	sp, r7
  402d9e:	bc80      	pop	{r7}
  402da0:	4770      	bx	lr
  402da2:	bf00      	nop
  402da4:	2001fffc 	.word	0x2001fffc
  402da8:	20000a7c 	.word	0x20000a7c
  402dac:	20010228 	.word	0x20010228

00402db0 <osc_get_rate>:
{
  402db0:	b480      	push	{r7}
  402db2:	b083      	sub	sp, #12
  402db4:	af00      	add	r7, sp, #0
  402db6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402db8:	687b      	ldr	r3, [r7, #4]
  402dba:	2b07      	cmp	r3, #7
  402dbc:	d825      	bhi.n	402e0a <osc_get_rate+0x5a>
  402dbe:	a201      	add	r2, pc, #4	; (adr r2, 402dc4 <osc_get_rate+0x14>)
  402dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402dc4:	00402de5 	.word	0x00402de5
  402dc8:	00402deb 	.word	0x00402deb
  402dcc:	00402df1 	.word	0x00402df1
  402dd0:	00402df7 	.word	0x00402df7
  402dd4:	00402dfb 	.word	0x00402dfb
  402dd8:	00402dff 	.word	0x00402dff
  402ddc:	00402e03 	.word	0x00402e03
  402de0:	00402e07 	.word	0x00402e07
		return OSC_SLCK_32K_RC_HZ;
  402de4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402de8:	e010      	b.n	402e0c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402dee:	e00d      	b.n	402e0c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402df4:	e00a      	b.n	402e0c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402df6:	4b08      	ldr	r3, [pc, #32]	; (402e18 <osc_get_rate+0x68>)
  402df8:	e008      	b.n	402e0c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402dfa:	4b08      	ldr	r3, [pc, #32]	; (402e1c <osc_get_rate+0x6c>)
  402dfc:	e006      	b.n	402e0c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402dfe:	4b08      	ldr	r3, [pc, #32]	; (402e20 <osc_get_rate+0x70>)
  402e00:	e004      	b.n	402e0c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402e02:	4b07      	ldr	r3, [pc, #28]	; (402e20 <osc_get_rate+0x70>)
  402e04:	e002      	b.n	402e0c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402e06:	4b06      	ldr	r3, [pc, #24]	; (402e20 <osc_get_rate+0x70>)
  402e08:	e000      	b.n	402e0c <osc_get_rate+0x5c>
	return 0;
  402e0a:	2300      	movs	r3, #0
}
  402e0c:	4618      	mov	r0, r3
  402e0e:	370c      	adds	r7, #12
  402e10:	46bd      	mov	sp, r7
  402e12:	bc80      	pop	{r7}
  402e14:	4770      	bx	lr
  402e16:	bf00      	nop
  402e18:	003d0900 	.word	0x003d0900
  402e1c:	007a1200 	.word	0x007a1200
  402e20:	00b71b00 	.word	0x00b71b00

00402e24 <sysclk_get_main_hz>:
{
  402e24:	b580      	push	{r7, lr}
  402e26:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402e28:	2006      	movs	r0, #6
  402e2a:	4b04      	ldr	r3, [pc, #16]	; (402e3c <sysclk_get_main_hz+0x18>)
  402e2c:	4798      	blx	r3
  402e2e:	4602      	mov	r2, r0
  402e30:	4613      	mov	r3, r2
  402e32:	009b      	lsls	r3, r3, #2
  402e34:	4413      	add	r3, r2
  402e36:	009b      	lsls	r3, r3, #2
}
  402e38:	4618      	mov	r0, r3
  402e3a:	bd80      	pop	{r7, pc}
  402e3c:	00402db1 	.word	0x00402db1

00402e40 <sysclk_get_cpu_hz>:
{
  402e40:	b580      	push	{r7, lr}
  402e42:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402e44:	4b02      	ldr	r3, [pc, #8]	; (402e50 <sysclk_get_cpu_hz+0x10>)
  402e46:	4798      	blx	r3
  402e48:	4603      	mov	r3, r0
  402e4a:	085b      	lsrs	r3, r3, #1
}
  402e4c:	4618      	mov	r0, r3
  402e4e:	bd80      	pop	{r7, pc}
  402e50:	00402e25 	.word	0x00402e25

00402e54 <ioport_set_pin_level>:
{
  402e54:	b480      	push	{r7}
  402e56:	b08b      	sub	sp, #44	; 0x2c
  402e58:	af00      	add	r7, sp, #0
  402e5a:	6078      	str	r0, [r7, #4]
  402e5c:	460b      	mov	r3, r1
  402e5e:	70fb      	strb	r3, [r7, #3]
  402e60:	687b      	ldr	r3, [r7, #4]
  402e62:	627b      	str	r3, [r7, #36]	; 0x24
  402e64:	78fb      	ldrb	r3, [r7, #3]
  402e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402e6c:	61fb      	str	r3, [r7, #28]
  402e6e:	69fb      	ldr	r3, [r7, #28]
  402e70:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  402e72:	69bb      	ldr	r3, [r7, #24]
  402e74:	095b      	lsrs	r3, r3, #5
  402e76:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402e78:	697b      	ldr	r3, [r7, #20]
  402e7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402e7e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402e82:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  402e84:	613b      	str	r3, [r7, #16]
	if (level) {
  402e86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402e8a:	2b00      	cmp	r3, #0
  402e8c:	d009      	beq.n	402ea2 <ioport_set_pin_level+0x4e>
  402e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402e90:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402e92:	68fb      	ldr	r3, [r7, #12]
  402e94:	f003 031f 	and.w	r3, r3, #31
  402e98:	2201      	movs	r2, #1
  402e9a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402e9c:	693b      	ldr	r3, [r7, #16]
  402e9e:	631a      	str	r2, [r3, #48]	; 0x30
}
  402ea0:	e008      	b.n	402eb4 <ioport_set_pin_level+0x60>
  402ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402ea4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  402ea6:	68bb      	ldr	r3, [r7, #8]
  402ea8:	f003 031f 	and.w	r3, r3, #31
  402eac:	2201      	movs	r2, #1
  402eae:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402eb0:	693b      	ldr	r3, [r7, #16]
  402eb2:	635a      	str	r2, [r3, #52]	; 0x34
  402eb4:	bf00      	nop
  402eb6:	372c      	adds	r7, #44	; 0x2c
  402eb8:	46bd      	mov	sp, r7
  402eba:	bc80      	pop	{r7}
  402ebc:	4770      	bx	lr

00402ebe <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  402ebe:	b480      	push	{r7}
  402ec0:	b089      	sub	sp, #36	; 0x24
  402ec2:	af00      	add	r7, sp, #0
  402ec4:	6078      	str	r0, [r7, #4]
  402ec6:	687b      	ldr	r3, [r7, #4]
  402ec8:	61fb      	str	r3, [r7, #28]
  402eca:	69fb      	ldr	r3, [r7, #28]
  402ecc:	61bb      	str	r3, [r7, #24]
  402ece:	69bb      	ldr	r3, [r7, #24]
  402ed0:	617b      	str	r3, [r7, #20]
	return pin >> 5;
  402ed2:	697b      	ldr	r3, [r7, #20]
  402ed4:	095b      	lsrs	r3, r3, #5
  402ed6:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402ed8:	693b      	ldr	r3, [r7, #16]
  402eda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402ede:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402ee2:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  402ee6:	69fb      	ldr	r3, [r7, #28]
  402ee8:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402eea:	68fb      	ldr	r3, [r7, #12]
  402eec:	f003 031f 	and.w	r3, r3, #31
  402ef0:	2101      	movs	r1, #1
  402ef2:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402ef6:	4013      	ands	r3, r2
  402ef8:	2b00      	cmp	r3, #0
  402efa:	bf14      	ite	ne
  402efc:	2301      	movne	r3, #1
  402efe:	2300      	moveq	r3, #0
  402f00:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  402f02:	4618      	mov	r0, r3
  402f04:	3724      	adds	r7, #36	; 0x24
  402f06:	46bd      	mov	sp, r7
  402f08:	bc80      	pop	{r7}
  402f0a:	4770      	bx	lr

00402f0c <main>:
#include "conf_board.h"
#include "conf_clock.h"
#include "timer_interface.h"

int main (void)
{
  402f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402f10:	b093      	sub	sp, #76	; 0x4c
  402f12:	af00      	add	r7, sp, #0
	//Initialize clock and board definitions
	sysclk_init();
  402f14:	4b9b      	ldr	r3, [pc, #620]	; (403184 <main+0x278>)
  402f16:	4798      	blx	r3
	wdt_disable(WDT);
  402f18:	489b      	ldr	r0, [pc, #620]	; (403188 <main+0x27c>)
  402f1a:	4b9c      	ldr	r3, [pc, #624]	; (40318c <main+0x280>)
  402f1c:	4798      	blx	r3
	board_init();
  402f1e:	4b9c      	ldr	r3, [pc, #624]	; (403190 <main+0x284>)
  402f20:	4798      	blx	r3

	//Configure and start the Timer
	configure_tc();
  402f22:	4b9c      	ldr	r3, [pc, #624]	; (403194 <main+0x288>)
  402f24:	4798      	blx	r3
	
	//Configure the WiFi USART, Command pin, and Web Setup pin
	configure_usart_wifi();
  402f26:	4b9c      	ldr	r3, [pc, #624]	; (403198 <main+0x28c>)
  402f28:	4798      	blx	r3
	configure_wifi_command_pin();
  402f2a:	4b9c      	ldr	r3, [pc, #624]	; (40319c <main+0x290>)
  402f2c:	4798      	blx	r3
	configure_wifi_web_setup_pin();
  402f2e:	4b9c      	ldr	r3, [pc, #624]	; (4031a0 <main+0x294>)
  402f30:	4798      	blx	r3
	
	//Reset wiFi module
	ioport_set_pin_level(WIFI_RESET_PIN, 0);
  402f32:	2100      	movs	r1, #0
  402f34:	2000      	movs	r0, #0
  402f36:	4b9b      	ldr	r3, [pc, #620]	; (4031a4 <main+0x298>)
  402f38:	4798      	blx	r3
	delay_ms(100);
  402f3a:	4b9b      	ldr	r3, [pc, #620]	; (4031a8 <main+0x29c>)
  402f3c:	4798      	blx	r3
  402f3e:	4603      	mov	r3, r0
  402f40:	4619      	mov	r1, r3
  402f42:	f04f 0200 	mov.w	r2, #0
  402f46:	460b      	mov	r3, r1
  402f48:	4614      	mov	r4, r2
  402f4a:	18db      	adds	r3, r3, r3
  402f4c:	eb44 0404 	adc.w	r4, r4, r4
  402f50:	185b      	adds	r3, r3, r1
  402f52:	eb44 0402 	adc.w	r4, r4, r2
  402f56:	0166      	lsls	r6, r4, #5
  402f58:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  402f5c:	015d      	lsls	r5, r3, #5
  402f5e:	195b      	adds	r3, r3, r5
  402f60:	eb44 0406 	adc.w	r4, r4, r6
  402f64:	185b      	adds	r3, r3, r1
  402f66:	eb44 0402 	adc.w	r4, r4, r2
  402f6a:	f243 61af 	movw	r1, #13999	; 0x36af
  402f6e:	f04f 0200 	mov.w	r2, #0
  402f72:	185d      	adds	r5, r3, r1
  402f74:	eb44 0602 	adc.w	r6, r4, r2
  402f78:	4628      	mov	r0, r5
  402f7a:	4631      	mov	r1, r6
  402f7c:	4c8b      	ldr	r4, [pc, #556]	; (4031ac <main+0x2a0>)
  402f7e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402f82:	f04f 0300 	mov.w	r3, #0
  402f86:	47a0      	blx	r4
  402f88:	4603      	mov	r3, r0
  402f8a:	460c      	mov	r4, r1
  402f8c:	4618      	mov	r0, r3
  402f8e:	4b88      	ldr	r3, [pc, #544]	; (4031b0 <main+0x2a4>)
  402f90:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET_PIN, 1);
  402f92:	2101      	movs	r1, #1
  402f94:	2000      	movs	r0, #0
  402f96:	4b83      	ldr	r3, [pc, #524]	; (4031a4 <main+0x298>)
  402f98:	4798      	blx	r3
	
	//Initialize and configure the camera
	init_camera();
  402f9a:	4b86      	ldr	r3, [pc, #536]	; (4031b4 <main+0x2a8>)
  402f9c:	4798      	blx	r3
	configure_camera();
  402f9e:	4b86      	ldr	r3, [pc, #536]	; (4031b8 <main+0x2ac>)
  402fa0:	4798      	blx	r3
	
	write_wifi_command("set sy c p off\r\n", 2);
  402fa2:	2102      	movs	r1, #2
  402fa4:	4885      	ldr	r0, [pc, #532]	; (4031bc <main+0x2b0>)
  402fa6:	4b86      	ldr	r3, [pc, #536]	; (4031c0 <main+0x2b4>)
  402fa8:	4798      	blx	r3
	
	while (ioport_get_pin_level(WIFI_STATUS)==0) { //wait for network connection
  402faa:	e039      	b.n	403020 <main+0x114>
		if (wifi_setup_button_flag){
  402fac:	4b85      	ldr	r3, [pc, #532]	; (4031c4 <main+0x2b8>)
  402fae:	681b      	ldr	r3, [r3, #0]
  402fb0:	2b00      	cmp	r3, #0
  402fb2:	d035      	beq.n	403020 <main+0x114>
			write_wifi_command("setup web\r\n", 20);
  402fb4:	2114      	movs	r1, #20
  402fb6:	4884      	ldr	r0, [pc, #528]	; (4031c8 <main+0x2bc>)
  402fb8:	4b81      	ldr	r3, [pc, #516]	; (4031c0 <main+0x2b4>)
  402fba:	4798      	blx	r3
			delay_ms(100);
  402fbc:	4b7a      	ldr	r3, [pc, #488]	; (4031a8 <main+0x29c>)
  402fbe:	4798      	blx	r3
  402fc0:	4603      	mov	r3, r0
  402fc2:	4619      	mov	r1, r3
  402fc4:	f04f 0200 	mov.w	r2, #0
  402fc8:	460b      	mov	r3, r1
  402fca:	4614      	mov	r4, r2
  402fcc:	18db      	adds	r3, r3, r3
  402fce:	eb44 0404 	adc.w	r4, r4, r4
  402fd2:	185b      	adds	r3, r3, r1
  402fd4:	eb44 0402 	adc.w	r4, r4, r2
  402fd8:	ea4f 1944 	mov.w	r9, r4, lsl #5
  402fdc:	ea49 69d3 	orr.w	r9, r9, r3, lsr #27
  402fe0:	ea4f 1843 	mov.w	r8, r3, lsl #5
  402fe4:	eb13 0308 	adds.w	r3, r3, r8
  402fe8:	eb44 0409 	adc.w	r4, r4, r9
  402fec:	185b      	adds	r3, r3, r1
  402fee:	eb44 0402 	adc.w	r4, r4, r2
  402ff2:	f243 61af 	movw	r1, #13999	; 0x36af
  402ff6:	f04f 0200 	mov.w	r2, #0
  402ffa:	185d      	adds	r5, r3, r1
  402ffc:	eb44 0602 	adc.w	r6, r4, r2
  403000:	4628      	mov	r0, r5
  403002:	4631      	mov	r1, r6
  403004:	4c69      	ldr	r4, [pc, #420]	; (4031ac <main+0x2a0>)
  403006:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40300a:	f04f 0300 	mov.w	r3, #0
  40300e:	47a0      	blx	r4
  403010:	4603      	mov	r3, r0
  403012:	460c      	mov	r4, r1
  403014:	4618      	mov	r0, r3
  403016:	4b66      	ldr	r3, [pc, #408]	; (4031b0 <main+0x2a4>)
  403018:	4798      	blx	r3
			wifi_setup_button_flag = 0;
  40301a:	4a6a      	ldr	r2, [pc, #424]	; (4031c4 <main+0x2b8>)
  40301c:	2300      	movs	r3, #0
  40301e:	6013      	str	r3, [r2, #0]
	while (ioport_get_pin_level(WIFI_STATUS)==0) { //wait for network connection
  403020:	202e      	movs	r0, #46	; 0x2e
  403022:	4b6a      	ldr	r3, [pc, #424]	; (4031cc <main+0x2c0>)
  403024:	4798      	blx	r3
  403026:	4603      	mov	r3, r0
  403028:	f083 0301 	eor.w	r3, r3, #1
  40302c:	b2db      	uxtb	r3, r3
  40302e:	2b00      	cmp	r3, #0
  403030:	d1bc      	bne.n	402fac <main+0xa0>
		}
		
	}

	write_wifi_command("set uart.flow 0 on \r\n", 2);
  403032:	2102      	movs	r1, #2
  403034:	4866      	ldr	r0, [pc, #408]	; (4031d0 <main+0x2c4>)
  403036:	4b62      	ldr	r3, [pc, #392]	; (4031c0 <main+0x2b4>)
  403038:	4798      	blx	r3
	write_wifi_command("set bus.command.rx_bufsize 5000\r\n", 2);
  40303a:	2102      	movs	r1, #2
  40303c:	4865      	ldr	r0, [pc, #404]	; (4031d4 <main+0x2c8>)
  40303e:	4b60      	ldr	r3, [pc, #384]	; (4031c0 <main+0x2b4>)
  403040:	4798      	blx	r3
	write_wifi_command("set sy i g wlan 20\r\n", 2);
  403042:	2102      	movs	r1, #2
  403044:	4864      	ldr	r0, [pc, #400]	; (4031d8 <main+0x2cc>)
  403046:	4b5e      	ldr	r3, [pc, #376]	; (4031c0 <main+0x2b4>)
  403048:	4798      	blx	r3
	write_wifi_command("set sy i g network 19\r\n", 2);
  40304a:	2102      	movs	r1, #2
  40304c:	4863      	ldr	r0, [pc, #396]	; (4031dc <main+0x2d0>)
  40304e:	4b5c      	ldr	r3, [pc, #368]	; (4031c0 <main+0x2b4>)
  403050:	4798      	blx	r3
	write_wifi_command("set sy i g softap 21\r\n" ,2);
  403052:	2102      	movs	r1, #2
  403054:	4862      	ldr	r0, [pc, #392]	; (4031e0 <main+0x2d4>)
  403056:	4b5a      	ldr	r3, [pc, #360]	; (4031c0 <main+0x2b4>)
  403058:	4798      	blx	r3
	write_wifi_command("set system.cmd.gpio 13\r\n", 2);
  40305a:	2102      	movs	r1, #2
  40305c:	4861      	ldr	r0, [pc, #388]	; (4031e4 <main+0x2d8>)
  40305e:	4b58      	ldr	r3, [pc, #352]	; (4031c0 <main+0x2b4>)
  403060:	4798      	blx	r3
	write_wifi_command("set wl n o 14\r\n", 2);
  403062:	2102      	movs	r1, #2
  403064:	4860      	ldr	r0, [pc, #384]	; (4031e8 <main+0x2dc>)
  403066:	4b56      	ldr	r3, [pc, #344]	; (4031c0 <main+0x2b4>)
  403068:	4798      	blx	r3
	write_wifi_command("save\r\n", 2);
  40306a:	2102      	movs	r1, #2
  40306c:	485f      	ldr	r0, [pc, #380]	; (4031ec <main+0x2e0>)
  40306e:	4b54      	ldr	r3, [pc, #336]	; (4031c0 <main+0x2b4>)
  403070:	4798      	blx	r3
	write_wifi_command("reboot\r\n", 2);
  403072:	2102      	movs	r1, #2
  403074:	485e      	ldr	r0, [pc, #376]	; (4031f0 <main+0x2e4>)
  403076:	4b52      	ldr	r3, [pc, #328]	; (4031c0 <main+0x2b4>)
  403078:	4798      	blx	r3
	
	
	// tell Wifi to turn off command prompt and echo

	while(1) {
		if(wifi_setup_button_flag){
  40307a:	4b52      	ldr	r3, [pc, #328]	; (4031c4 <main+0x2b8>)
  40307c:	681b      	ldr	r3, [r3, #0]
  40307e:	2b00      	cmp	r3, #0
  403080:	f000 8136 	beq.w	4032f0 <main+0x3e4>
			write_wifi_command("setup web\r\n", 5);
  403084:	2105      	movs	r1, #5
  403086:	4850      	ldr	r0, [pc, #320]	; (4031c8 <main+0x2bc>)
  403088:	4b4d      	ldr	r3, [pc, #308]	; (4031c0 <main+0x2b4>)
  40308a:	4798      	blx	r3
			delay_ms(100);
  40308c:	4b46      	ldr	r3, [pc, #280]	; (4031a8 <main+0x29c>)
  40308e:	4798      	blx	r3
  403090:	4603      	mov	r3, r0
  403092:	4619      	mov	r1, r3
  403094:	f04f 0200 	mov.w	r2, #0
  403098:	460b      	mov	r3, r1
  40309a:	4614      	mov	r4, r2
  40309c:	18db      	adds	r3, r3, r3
  40309e:	eb44 0404 	adc.w	r4, r4, r4
  4030a2:	185b      	adds	r3, r3, r1
  4030a4:	eb44 0402 	adc.w	r4, r4, r2
  4030a8:	0160      	lsls	r0, r4, #5
  4030aa:	63f8      	str	r0, [r7, #60]	; 0x3c
  4030ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
  4030ae:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  4030b2:	63f8      	str	r0, [r7, #60]	; 0x3c
  4030b4:	0158      	lsls	r0, r3, #5
  4030b6:	63b8      	str	r0, [r7, #56]	; 0x38
  4030b8:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
  4030bc:	18ed      	adds	r5, r5, r3
  4030be:	eb46 0604 	adc.w	r6, r6, r4
  4030c2:	462b      	mov	r3, r5
  4030c4:	4634      	mov	r4, r6
  4030c6:	185b      	adds	r3, r3, r1
  4030c8:	eb44 0402 	adc.w	r4, r4, r2
  4030cc:	f243 61af 	movw	r1, #13999	; 0x36af
  4030d0:	f04f 0200 	mov.w	r2, #0
  4030d4:	185d      	adds	r5, r3, r1
  4030d6:	eb44 0602 	adc.w	r6, r4, r2
  4030da:	4628      	mov	r0, r5
  4030dc:	4631      	mov	r1, r6
  4030de:	4c33      	ldr	r4, [pc, #204]	; (4031ac <main+0x2a0>)
  4030e0:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4030e4:	f04f 0300 	mov.w	r3, #0
  4030e8:	47a0      	blx	r4
  4030ea:	4603      	mov	r3, r0
  4030ec:	460c      	mov	r4, r1
  4030ee:	4618      	mov	r0, r3
  4030f0:	4b2f      	ldr	r3, [pc, #188]	; (4031b0 <main+0x2a4>)
  4030f2:	4798      	blx	r3
			wifi_setup_button_flag=0;
  4030f4:	4a33      	ldr	r2, [pc, #204]	; (4031c4 <main+0x2b8>)
  4030f6:	2300      	movs	r3, #0
  4030f8:	6013      	str	r3, [r2, #0]
			while (ioport_get_pin_level(WIFI_STATUS)==0) { //wait for network connection
  4030fa:	e039      	b.n	403170 <main+0x264>
				if (wifi_setup_button_flag){
  4030fc:	4b31      	ldr	r3, [pc, #196]	; (4031c4 <main+0x2b8>)
  4030fe:	681b      	ldr	r3, [r3, #0]
  403100:	2b00      	cmp	r3, #0
  403102:	d035      	beq.n	403170 <main+0x264>
					write_wifi_command("setup web\r\n", 5);
  403104:	2105      	movs	r1, #5
  403106:	4830      	ldr	r0, [pc, #192]	; (4031c8 <main+0x2bc>)
  403108:	4b2d      	ldr	r3, [pc, #180]	; (4031c0 <main+0x2b4>)
  40310a:	4798      	blx	r3
					delay_ms(100);
  40310c:	4b26      	ldr	r3, [pc, #152]	; (4031a8 <main+0x29c>)
  40310e:	4798      	blx	r3
  403110:	4603      	mov	r3, r0
  403112:	4619      	mov	r1, r3
  403114:	f04f 0200 	mov.w	r2, #0
  403118:	460b      	mov	r3, r1
  40311a:	4614      	mov	r4, r2
  40311c:	18db      	adds	r3, r3, r3
  40311e:	eb44 0404 	adc.w	r4, r4, r4
  403122:	185b      	adds	r3, r3, r1
  403124:	eb44 0402 	adc.w	r4, r4, r2
  403128:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  40312c:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
  403130:	ea4f 1a43 	mov.w	sl, r3, lsl #5
  403134:	eb13 030a 	adds.w	r3, r3, sl
  403138:	eb44 040b 	adc.w	r4, r4, fp
  40313c:	185b      	adds	r3, r3, r1
  40313e:	eb44 0402 	adc.w	r4, r4, r2
  403142:	f243 61af 	movw	r1, #13999	; 0x36af
  403146:	f04f 0200 	mov.w	r2, #0
  40314a:	185d      	adds	r5, r3, r1
  40314c:	eb44 0602 	adc.w	r6, r4, r2
  403150:	4628      	mov	r0, r5
  403152:	4631      	mov	r1, r6
  403154:	4c15      	ldr	r4, [pc, #84]	; (4031ac <main+0x2a0>)
  403156:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40315a:	f04f 0300 	mov.w	r3, #0
  40315e:	47a0      	blx	r4
  403160:	4603      	mov	r3, r0
  403162:	460c      	mov	r4, r1
  403164:	4618      	mov	r0, r3
  403166:	4b12      	ldr	r3, [pc, #72]	; (4031b0 <main+0x2a4>)
  403168:	4798      	blx	r3
					wifi_setup_button_flag = 0;
  40316a:	4a16      	ldr	r2, [pc, #88]	; (4031c4 <main+0x2b8>)
  40316c:	2300      	movs	r3, #0
  40316e:	6013      	str	r3, [r2, #0]
			while (ioport_get_pin_level(WIFI_STATUS)==0) { //wait for network connection
  403170:	202e      	movs	r0, #46	; 0x2e
  403172:	4b16      	ldr	r3, [pc, #88]	; (4031cc <main+0x2c0>)
  403174:	4798      	blx	r3
  403176:	4603      	mov	r3, r0
  403178:	f083 0301 	eor.w	r3, r3, #1
  40317c:	b2db      	uxtb	r3, r3
  40317e:	2b00      	cmp	r3, #0
  403180:	d1bc      	bne.n	4030fc <main+0x1f0>
				}
				
			}
		}
		while(ioport_get_pin_level(WIFI_STATUS)==0){
  403182:	e0b5      	b.n	4032f0 <main+0x3e4>
  403184:	00400421 	.word	0x00400421
  403188:	400e1450 	.word	0x400e1450
  40318c:	004016ed 	.word	0x004016ed
  403190:	004029fd 	.word	0x004029fd
  403194:	00402385 	.word	0x00402385
  403198:	0040258d 	.word	0x0040258d
  40319c:	0040263d 	.word	0x0040263d
  4031a0:	0040269d 	.word	0x0040269d
  4031a4:	00402e55 	.word	0x00402e55
  4031a8:	00402e41 	.word	0x00402e41
  4031ac:	004033d9 	.word	0x004033d9
  4031b0:	20000001 	.word	0x20000001
  4031b4:	00401a81 	.word	0x00401a81
  4031b8:	00401b45 	.word	0x00401b45
  4031bc:	00408f44 	.word	0x00408f44
  4031c0:	004026fd 	.word	0x004026fd
  4031c4:	20000a60 	.word	0x20000a60
  4031c8:	00408f58 	.word	0x00408f58
  4031cc:	00402ebf 	.word	0x00402ebf
  4031d0:	00408f64 	.word	0x00408f64
  4031d4:	00408f7c 	.word	0x00408f7c
  4031d8:	00408fa0 	.word	0x00408fa0
  4031dc:	00408fb8 	.word	0x00408fb8
  4031e0:	00408fd0 	.word	0x00408fd0
  4031e4:	00408fe8 	.word	0x00408fe8
  4031e8:	00409004 	.word	0x00409004
  4031ec:	00409014 	.word	0x00409014
  4031f0:	0040901c 	.word	0x0040901c
			ioport_set_pin_level(WIFI_RESET_PIN, 0);
  4031f4:	2100      	movs	r1, #0
  4031f6:	2000      	movs	r0, #0
  4031f8:	4b6d      	ldr	r3, [pc, #436]	; (4033b0 <main+0x4a4>)
  4031fa:	4798      	blx	r3
			delay_ms(100);
  4031fc:	4b6d      	ldr	r3, [pc, #436]	; (4033b4 <main+0x4a8>)
  4031fe:	4798      	blx	r3
  403200:	4603      	mov	r3, r0
  403202:	4619      	mov	r1, r3
  403204:	f04f 0200 	mov.w	r2, #0
  403208:	460b      	mov	r3, r1
  40320a:	4614      	mov	r4, r2
  40320c:	18db      	adds	r3, r3, r3
  40320e:	eb44 0404 	adc.w	r4, r4, r4
  403212:	185b      	adds	r3, r3, r1
  403214:	eb44 0402 	adc.w	r4, r4, r2
  403218:	0160      	lsls	r0, r4, #5
  40321a:	6378      	str	r0, [r7, #52]	; 0x34
  40321c:	6b78      	ldr	r0, [r7, #52]	; 0x34
  40321e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  403222:	6378      	str	r0, [r7, #52]	; 0x34
  403224:	0158      	lsls	r0, r3, #5
  403226:	6338      	str	r0, [r7, #48]	; 0x30
  403228:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
  40322c:	18ed      	adds	r5, r5, r3
  40322e:	eb46 0604 	adc.w	r6, r6, r4
  403232:	462b      	mov	r3, r5
  403234:	4634      	mov	r4, r6
  403236:	185b      	adds	r3, r3, r1
  403238:	eb44 0402 	adc.w	r4, r4, r2
  40323c:	f243 61af 	movw	r1, #13999	; 0x36af
  403240:	f04f 0200 	mov.w	r2, #0
  403244:	185d      	adds	r5, r3, r1
  403246:	eb44 0602 	adc.w	r6, r4, r2
  40324a:	4628      	mov	r0, r5
  40324c:	4631      	mov	r1, r6
  40324e:	4c5a      	ldr	r4, [pc, #360]	; (4033b8 <main+0x4ac>)
  403250:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403254:	f04f 0300 	mov.w	r3, #0
  403258:	47a0      	blx	r4
  40325a:	4603      	mov	r3, r0
  40325c:	460c      	mov	r4, r1
  40325e:	4618      	mov	r0, r3
  403260:	4b56      	ldr	r3, [pc, #344]	; (4033bc <main+0x4b0>)
  403262:	4798      	blx	r3
			ioport_set_pin_level(WIFI_RESET_PIN, 1);
  403264:	2101      	movs	r1, #1
  403266:	2000      	movs	r0, #0
  403268:	4b51      	ldr	r3, [pc, #324]	; (4033b0 <main+0x4a4>)
  40326a:	4798      	blx	r3
			delay_ms(500);
  40326c:	4b51      	ldr	r3, [pc, #324]	; (4033b4 <main+0x4a8>)
  40326e:	4798      	blx	r3
  403270:	4603      	mov	r3, r0
  403272:	4619      	mov	r1, r3
  403274:	f04f 0200 	mov.w	r2, #0
  403278:	460b      	mov	r3, r1
  40327a:	4614      	mov	r4, r2
  40327c:	0160      	lsls	r0, r4, #5
  40327e:	62f8      	str	r0, [r7, #44]	; 0x2c
  403280:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  403282:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  403286:	62f8      	str	r0, [r7, #44]	; 0x2c
  403288:	015b      	lsls	r3, r3, #5
  40328a:	62bb      	str	r3, [r7, #40]	; 0x28
  40328c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
  403290:	1a5b      	subs	r3, r3, r1
  403292:	eb64 0402 	sbc.w	r4, r4, r2
  403296:	00a0      	lsls	r0, r4, #2
  403298:	6278      	str	r0, [r7, #36]	; 0x24
  40329a:	6a78      	ldr	r0, [r7, #36]	; 0x24
  40329c:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  4032a0:	6278      	str	r0, [r7, #36]	; 0x24
  4032a2:	009b      	lsls	r3, r3, #2
  4032a4:	623b      	str	r3, [r7, #32]
  4032a6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
  4032aa:	185b      	adds	r3, r3, r1
  4032ac:	eb44 0402 	adc.w	r4, r4, r2
  4032b0:	00a2      	lsls	r2, r4, #2
  4032b2:	61fa      	str	r2, [r7, #28]
  4032b4:	69fa      	ldr	r2, [r7, #28]
  4032b6:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
  4032ba:	61fa      	str	r2, [r7, #28]
  4032bc:	009b      	lsls	r3, r3, #2
  4032be:	61bb      	str	r3, [r7, #24]
  4032c0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  4032c4:	4619      	mov	r1, r3
  4032c6:	4622      	mov	r2, r4
  4032c8:	f243 63af 	movw	r3, #13999	; 0x36af
  4032cc:	f04f 0400 	mov.w	r4, #0
  4032d0:	18cd      	adds	r5, r1, r3
  4032d2:	eb42 0604 	adc.w	r6, r2, r4
  4032d6:	4628      	mov	r0, r5
  4032d8:	4631      	mov	r1, r6
  4032da:	4c37      	ldr	r4, [pc, #220]	; (4033b8 <main+0x4ac>)
  4032dc:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4032e0:	f04f 0300 	mov.w	r3, #0
  4032e4:	47a0      	blx	r4
  4032e6:	4603      	mov	r3, r0
  4032e8:	460c      	mov	r4, r1
  4032ea:	4618      	mov	r0, r3
  4032ec:	4b33      	ldr	r3, [pc, #204]	; (4033bc <main+0x4b0>)
  4032ee:	4798      	blx	r3
		while(ioport_get_pin_level(WIFI_STATUS)==0){
  4032f0:	202e      	movs	r0, #46	; 0x2e
  4032f2:	4b33      	ldr	r3, [pc, #204]	; (4033c0 <main+0x4b4>)
  4032f4:	4798      	blx	r3
  4032f6:	4603      	mov	r3, r0
  4032f8:	f083 0301 	eor.w	r3, r3, #1
  4032fc:	b2db      	uxtb	r3, r3
  4032fe:	2b00      	cmp	r3, #0
  403300:	f47f af78 	bne.w	4031f4 <main+0x2e8>
		}
		write_wifi_command("poll all\r\n", 5);
  403304:	2105      	movs	r1, #5
  403306:	482f      	ldr	r0, [pc, #188]	; (4033c4 <main+0x4b8>)
  403308:	4b2f      	ldr	r3, [pc, #188]	; (4033c8 <main+0x4bc>)
  40330a:	4798      	blx	r3
		if(wait_flag){
  40330c:	4b2f      	ldr	r3, [pc, #188]	; (4033cc <main+0x4c0>)
  40330e:	681b      	ldr	r3, [r3, #0]
  403310:	2b00      	cmp	r3, #0
  403312:	d045      	beq.n	4033a0 <main+0x494>
			delay_ms(1000);
  403314:	4b27      	ldr	r3, [pc, #156]	; (4033b4 <main+0x4a8>)
  403316:	4798      	blx	r3
  403318:	4603      	mov	r3, r0
  40331a:	4619      	mov	r1, r3
  40331c:	f04f 0200 	mov.w	r2, #0
  403320:	460b      	mov	r3, r1
  403322:	4614      	mov	r4, r2
  403324:	0160      	lsls	r0, r4, #5
  403326:	6178      	str	r0, [r7, #20]
  403328:	6978      	ldr	r0, [r7, #20]
  40332a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  40332e:	6178      	str	r0, [r7, #20]
  403330:	015b      	lsls	r3, r3, #5
  403332:	613b      	str	r3, [r7, #16]
  403334:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  403338:	1a5b      	subs	r3, r3, r1
  40333a:	eb64 0402 	sbc.w	r4, r4, r2
  40333e:	00a0      	lsls	r0, r4, #2
  403340:	60f8      	str	r0, [r7, #12]
  403342:	68f8      	ldr	r0, [r7, #12]
  403344:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  403348:	60f8      	str	r0, [r7, #12]
  40334a:	009b      	lsls	r3, r3, #2
  40334c:	60bb      	str	r3, [r7, #8]
  40334e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  403352:	185b      	adds	r3, r3, r1
  403354:	eb44 0402 	adc.w	r4, r4, r2
  403358:	00e2      	lsls	r2, r4, #3
  40335a:	607a      	str	r2, [r7, #4]
  40335c:	687a      	ldr	r2, [r7, #4]
  40335e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  403362:	607a      	str	r2, [r7, #4]
  403364:	00db      	lsls	r3, r3, #3
  403366:	603b      	str	r3, [r7, #0]
  403368:	e9d7 3400 	ldrd	r3, r4, [r7]
  40336c:	4619      	mov	r1, r3
  40336e:	4622      	mov	r2, r4
  403370:	f243 63af 	movw	r3, #13999	; 0x36af
  403374:	f04f 0400 	mov.w	r4, #0
  403378:	18cd      	adds	r5, r1, r3
  40337a:	eb42 0604 	adc.w	r6, r2, r4
  40337e:	4628      	mov	r0, r5
  403380:	4631      	mov	r1, r6
  403382:	4c0d      	ldr	r4, [pc, #52]	; (4033b8 <main+0x4ac>)
  403384:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403388:	f04f 0300 	mov.w	r3, #0
  40338c:	47a0      	blx	r4
  40338e:	4603      	mov	r3, r0
  403390:	460c      	mov	r4, r1
  403392:	4618      	mov	r0, r3
  403394:	4b09      	ldr	r3, [pc, #36]	; (4033bc <main+0x4b0>)
  403396:	4798      	blx	r3
			wait_flag=0;
  403398:	4a0c      	ldr	r2, [pc, #48]	; (4033cc <main+0x4c0>)
  40339a:	2300      	movs	r3, #0
  40339c:	6013      	str	r3, [r2, #0]
  40339e:	e66c      	b.n	40307a <main+0x16e>
			} else {
			uint8_t get_image = start_capture();
  4033a0:	4b0b      	ldr	r3, [pc, #44]	; (4033d0 <main+0x4c4>)
  4033a2:	4798      	blx	r3
  4033a4:	4603      	mov	r3, r0
  4033a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			write_image_to_file();
  4033aa:	4b0a      	ldr	r3, [pc, #40]	; (4033d4 <main+0x4c8>)
  4033ac:	4798      	blx	r3
		if(wifi_setup_button_flag){
  4033ae:	e664      	b.n	40307a <main+0x16e>
  4033b0:	00402e55 	.word	0x00402e55
  4033b4:	00402e41 	.word	0x00402e41
  4033b8:	004033d9 	.word	0x004033d9
  4033bc:	20000001 	.word	0x20000001
  4033c0:	00402ebf 	.word	0x00402ebf
  4033c4:	00409028 	.word	0x00409028
  4033c8:	004026fd 	.word	0x004026fd
  4033cc:	20000a70 	.word	0x20000a70
  4033d0:	00401c19 	.word	0x00401c19
  4033d4:	0040274d 	.word	0x0040274d

004033d8 <__aeabi_uldivmod>:
  4033d8:	b953      	cbnz	r3, 4033f0 <__aeabi_uldivmod+0x18>
  4033da:	b94a      	cbnz	r2, 4033f0 <__aeabi_uldivmod+0x18>
  4033dc:	2900      	cmp	r1, #0
  4033de:	bf08      	it	eq
  4033e0:	2800      	cmpeq	r0, #0
  4033e2:	bf1c      	itt	ne
  4033e4:	f04f 31ff 	movne.w	r1, #4294967295
  4033e8:	f04f 30ff 	movne.w	r0, #4294967295
  4033ec:	f000 b97a 	b.w	4036e4 <__aeabi_idiv0>
  4033f0:	f1ad 0c08 	sub.w	ip, sp, #8
  4033f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4033f8:	f000 f806 	bl	403408 <__udivmoddi4>
  4033fc:	f8dd e004 	ldr.w	lr, [sp, #4]
  403400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403404:	b004      	add	sp, #16
  403406:	4770      	bx	lr

00403408 <__udivmoddi4>:
  403408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40340c:	468c      	mov	ip, r1
  40340e:	460d      	mov	r5, r1
  403410:	4604      	mov	r4, r0
  403412:	9e08      	ldr	r6, [sp, #32]
  403414:	2b00      	cmp	r3, #0
  403416:	d151      	bne.n	4034bc <__udivmoddi4+0xb4>
  403418:	428a      	cmp	r2, r1
  40341a:	4617      	mov	r7, r2
  40341c:	d96d      	bls.n	4034fa <__udivmoddi4+0xf2>
  40341e:	fab2 fe82 	clz	lr, r2
  403422:	f1be 0f00 	cmp.w	lr, #0
  403426:	d00b      	beq.n	403440 <__udivmoddi4+0x38>
  403428:	f1ce 0c20 	rsb	ip, lr, #32
  40342c:	fa01 f50e 	lsl.w	r5, r1, lr
  403430:	fa20 fc0c 	lsr.w	ip, r0, ip
  403434:	fa02 f70e 	lsl.w	r7, r2, lr
  403438:	ea4c 0c05 	orr.w	ip, ip, r5
  40343c:	fa00 f40e 	lsl.w	r4, r0, lr
  403440:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403444:	0c25      	lsrs	r5, r4, #16
  403446:	fbbc f8fa 	udiv	r8, ip, sl
  40344a:	fa1f f987 	uxth.w	r9, r7
  40344e:	fb0a cc18 	mls	ip, sl, r8, ip
  403452:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403456:	fb08 f309 	mul.w	r3, r8, r9
  40345a:	42ab      	cmp	r3, r5
  40345c:	d90a      	bls.n	403474 <__udivmoddi4+0x6c>
  40345e:	19ed      	adds	r5, r5, r7
  403460:	f108 32ff 	add.w	r2, r8, #4294967295
  403464:	f080 8123 	bcs.w	4036ae <__udivmoddi4+0x2a6>
  403468:	42ab      	cmp	r3, r5
  40346a:	f240 8120 	bls.w	4036ae <__udivmoddi4+0x2a6>
  40346e:	f1a8 0802 	sub.w	r8, r8, #2
  403472:	443d      	add	r5, r7
  403474:	1aed      	subs	r5, r5, r3
  403476:	b2a4      	uxth	r4, r4
  403478:	fbb5 f0fa 	udiv	r0, r5, sl
  40347c:	fb0a 5510 	mls	r5, sl, r0, r5
  403480:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403484:	fb00 f909 	mul.w	r9, r0, r9
  403488:	45a1      	cmp	r9, r4
  40348a:	d909      	bls.n	4034a0 <__udivmoddi4+0x98>
  40348c:	19e4      	adds	r4, r4, r7
  40348e:	f100 33ff 	add.w	r3, r0, #4294967295
  403492:	f080 810a 	bcs.w	4036aa <__udivmoddi4+0x2a2>
  403496:	45a1      	cmp	r9, r4
  403498:	f240 8107 	bls.w	4036aa <__udivmoddi4+0x2a2>
  40349c:	3802      	subs	r0, #2
  40349e:	443c      	add	r4, r7
  4034a0:	eba4 0409 	sub.w	r4, r4, r9
  4034a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4034a8:	2100      	movs	r1, #0
  4034aa:	2e00      	cmp	r6, #0
  4034ac:	d061      	beq.n	403572 <__udivmoddi4+0x16a>
  4034ae:	fa24 f40e 	lsr.w	r4, r4, lr
  4034b2:	2300      	movs	r3, #0
  4034b4:	6034      	str	r4, [r6, #0]
  4034b6:	6073      	str	r3, [r6, #4]
  4034b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4034bc:	428b      	cmp	r3, r1
  4034be:	d907      	bls.n	4034d0 <__udivmoddi4+0xc8>
  4034c0:	2e00      	cmp	r6, #0
  4034c2:	d054      	beq.n	40356e <__udivmoddi4+0x166>
  4034c4:	2100      	movs	r1, #0
  4034c6:	e886 0021 	stmia.w	r6, {r0, r5}
  4034ca:	4608      	mov	r0, r1
  4034cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4034d0:	fab3 f183 	clz	r1, r3
  4034d4:	2900      	cmp	r1, #0
  4034d6:	f040 808e 	bne.w	4035f6 <__udivmoddi4+0x1ee>
  4034da:	42ab      	cmp	r3, r5
  4034dc:	d302      	bcc.n	4034e4 <__udivmoddi4+0xdc>
  4034de:	4282      	cmp	r2, r0
  4034e0:	f200 80fa 	bhi.w	4036d8 <__udivmoddi4+0x2d0>
  4034e4:	1a84      	subs	r4, r0, r2
  4034e6:	eb65 0503 	sbc.w	r5, r5, r3
  4034ea:	2001      	movs	r0, #1
  4034ec:	46ac      	mov	ip, r5
  4034ee:	2e00      	cmp	r6, #0
  4034f0:	d03f      	beq.n	403572 <__udivmoddi4+0x16a>
  4034f2:	e886 1010 	stmia.w	r6, {r4, ip}
  4034f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4034fa:	b912      	cbnz	r2, 403502 <__udivmoddi4+0xfa>
  4034fc:	2701      	movs	r7, #1
  4034fe:	fbb7 f7f2 	udiv	r7, r7, r2
  403502:	fab7 fe87 	clz	lr, r7
  403506:	f1be 0f00 	cmp.w	lr, #0
  40350a:	d134      	bne.n	403576 <__udivmoddi4+0x16e>
  40350c:	1beb      	subs	r3, r5, r7
  40350e:	0c3a      	lsrs	r2, r7, #16
  403510:	fa1f fc87 	uxth.w	ip, r7
  403514:	2101      	movs	r1, #1
  403516:	fbb3 f8f2 	udiv	r8, r3, r2
  40351a:	0c25      	lsrs	r5, r4, #16
  40351c:	fb02 3318 	mls	r3, r2, r8, r3
  403520:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403524:	fb0c f308 	mul.w	r3, ip, r8
  403528:	42ab      	cmp	r3, r5
  40352a:	d907      	bls.n	40353c <__udivmoddi4+0x134>
  40352c:	19ed      	adds	r5, r5, r7
  40352e:	f108 30ff 	add.w	r0, r8, #4294967295
  403532:	d202      	bcs.n	40353a <__udivmoddi4+0x132>
  403534:	42ab      	cmp	r3, r5
  403536:	f200 80d1 	bhi.w	4036dc <__udivmoddi4+0x2d4>
  40353a:	4680      	mov	r8, r0
  40353c:	1aed      	subs	r5, r5, r3
  40353e:	b2a3      	uxth	r3, r4
  403540:	fbb5 f0f2 	udiv	r0, r5, r2
  403544:	fb02 5510 	mls	r5, r2, r0, r5
  403548:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40354c:	fb0c fc00 	mul.w	ip, ip, r0
  403550:	45a4      	cmp	ip, r4
  403552:	d907      	bls.n	403564 <__udivmoddi4+0x15c>
  403554:	19e4      	adds	r4, r4, r7
  403556:	f100 33ff 	add.w	r3, r0, #4294967295
  40355a:	d202      	bcs.n	403562 <__udivmoddi4+0x15a>
  40355c:	45a4      	cmp	ip, r4
  40355e:	f200 80b8 	bhi.w	4036d2 <__udivmoddi4+0x2ca>
  403562:	4618      	mov	r0, r3
  403564:	eba4 040c 	sub.w	r4, r4, ip
  403568:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40356c:	e79d      	b.n	4034aa <__udivmoddi4+0xa2>
  40356e:	4631      	mov	r1, r6
  403570:	4630      	mov	r0, r6
  403572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403576:	f1ce 0420 	rsb	r4, lr, #32
  40357a:	fa05 f30e 	lsl.w	r3, r5, lr
  40357e:	fa07 f70e 	lsl.w	r7, r7, lr
  403582:	fa20 f804 	lsr.w	r8, r0, r4
  403586:	0c3a      	lsrs	r2, r7, #16
  403588:	fa25 f404 	lsr.w	r4, r5, r4
  40358c:	ea48 0803 	orr.w	r8, r8, r3
  403590:	fbb4 f1f2 	udiv	r1, r4, r2
  403594:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403598:	fb02 4411 	mls	r4, r2, r1, r4
  40359c:	fa1f fc87 	uxth.w	ip, r7
  4035a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4035a4:	fb01 f30c 	mul.w	r3, r1, ip
  4035a8:	42ab      	cmp	r3, r5
  4035aa:	fa00 f40e 	lsl.w	r4, r0, lr
  4035ae:	d909      	bls.n	4035c4 <__udivmoddi4+0x1bc>
  4035b0:	19ed      	adds	r5, r5, r7
  4035b2:	f101 30ff 	add.w	r0, r1, #4294967295
  4035b6:	f080 808a 	bcs.w	4036ce <__udivmoddi4+0x2c6>
  4035ba:	42ab      	cmp	r3, r5
  4035bc:	f240 8087 	bls.w	4036ce <__udivmoddi4+0x2c6>
  4035c0:	3902      	subs	r1, #2
  4035c2:	443d      	add	r5, r7
  4035c4:	1aeb      	subs	r3, r5, r3
  4035c6:	fa1f f588 	uxth.w	r5, r8
  4035ca:	fbb3 f0f2 	udiv	r0, r3, r2
  4035ce:	fb02 3310 	mls	r3, r2, r0, r3
  4035d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4035d6:	fb00 f30c 	mul.w	r3, r0, ip
  4035da:	42ab      	cmp	r3, r5
  4035dc:	d907      	bls.n	4035ee <__udivmoddi4+0x1e6>
  4035de:	19ed      	adds	r5, r5, r7
  4035e0:	f100 38ff 	add.w	r8, r0, #4294967295
  4035e4:	d26f      	bcs.n	4036c6 <__udivmoddi4+0x2be>
  4035e6:	42ab      	cmp	r3, r5
  4035e8:	d96d      	bls.n	4036c6 <__udivmoddi4+0x2be>
  4035ea:	3802      	subs	r0, #2
  4035ec:	443d      	add	r5, r7
  4035ee:	1aeb      	subs	r3, r5, r3
  4035f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4035f4:	e78f      	b.n	403516 <__udivmoddi4+0x10e>
  4035f6:	f1c1 0720 	rsb	r7, r1, #32
  4035fa:	fa22 f807 	lsr.w	r8, r2, r7
  4035fe:	408b      	lsls	r3, r1
  403600:	fa05 f401 	lsl.w	r4, r5, r1
  403604:	ea48 0303 	orr.w	r3, r8, r3
  403608:	fa20 fe07 	lsr.w	lr, r0, r7
  40360c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403610:	40fd      	lsrs	r5, r7
  403612:	ea4e 0e04 	orr.w	lr, lr, r4
  403616:	fbb5 f9fc 	udiv	r9, r5, ip
  40361a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40361e:	fb0c 5519 	mls	r5, ip, r9, r5
  403622:	fa1f f883 	uxth.w	r8, r3
  403626:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40362a:	fb09 f408 	mul.w	r4, r9, r8
  40362e:	42ac      	cmp	r4, r5
  403630:	fa02 f201 	lsl.w	r2, r2, r1
  403634:	fa00 fa01 	lsl.w	sl, r0, r1
  403638:	d908      	bls.n	40364c <__udivmoddi4+0x244>
  40363a:	18ed      	adds	r5, r5, r3
  40363c:	f109 30ff 	add.w	r0, r9, #4294967295
  403640:	d243      	bcs.n	4036ca <__udivmoddi4+0x2c2>
  403642:	42ac      	cmp	r4, r5
  403644:	d941      	bls.n	4036ca <__udivmoddi4+0x2c2>
  403646:	f1a9 0902 	sub.w	r9, r9, #2
  40364a:	441d      	add	r5, r3
  40364c:	1b2d      	subs	r5, r5, r4
  40364e:	fa1f fe8e 	uxth.w	lr, lr
  403652:	fbb5 f0fc 	udiv	r0, r5, ip
  403656:	fb0c 5510 	mls	r5, ip, r0, r5
  40365a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40365e:	fb00 f808 	mul.w	r8, r0, r8
  403662:	45a0      	cmp	r8, r4
  403664:	d907      	bls.n	403676 <__udivmoddi4+0x26e>
  403666:	18e4      	adds	r4, r4, r3
  403668:	f100 35ff 	add.w	r5, r0, #4294967295
  40366c:	d229      	bcs.n	4036c2 <__udivmoddi4+0x2ba>
  40366e:	45a0      	cmp	r8, r4
  403670:	d927      	bls.n	4036c2 <__udivmoddi4+0x2ba>
  403672:	3802      	subs	r0, #2
  403674:	441c      	add	r4, r3
  403676:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40367a:	eba4 0408 	sub.w	r4, r4, r8
  40367e:	fba0 8902 	umull	r8, r9, r0, r2
  403682:	454c      	cmp	r4, r9
  403684:	46c6      	mov	lr, r8
  403686:	464d      	mov	r5, r9
  403688:	d315      	bcc.n	4036b6 <__udivmoddi4+0x2ae>
  40368a:	d012      	beq.n	4036b2 <__udivmoddi4+0x2aa>
  40368c:	b156      	cbz	r6, 4036a4 <__udivmoddi4+0x29c>
  40368e:	ebba 030e 	subs.w	r3, sl, lr
  403692:	eb64 0405 	sbc.w	r4, r4, r5
  403696:	fa04 f707 	lsl.w	r7, r4, r7
  40369a:	40cb      	lsrs	r3, r1
  40369c:	431f      	orrs	r7, r3
  40369e:	40cc      	lsrs	r4, r1
  4036a0:	6037      	str	r7, [r6, #0]
  4036a2:	6074      	str	r4, [r6, #4]
  4036a4:	2100      	movs	r1, #0
  4036a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4036aa:	4618      	mov	r0, r3
  4036ac:	e6f8      	b.n	4034a0 <__udivmoddi4+0x98>
  4036ae:	4690      	mov	r8, r2
  4036b0:	e6e0      	b.n	403474 <__udivmoddi4+0x6c>
  4036b2:	45c2      	cmp	sl, r8
  4036b4:	d2ea      	bcs.n	40368c <__udivmoddi4+0x284>
  4036b6:	ebb8 0e02 	subs.w	lr, r8, r2
  4036ba:	eb69 0503 	sbc.w	r5, r9, r3
  4036be:	3801      	subs	r0, #1
  4036c0:	e7e4      	b.n	40368c <__udivmoddi4+0x284>
  4036c2:	4628      	mov	r0, r5
  4036c4:	e7d7      	b.n	403676 <__udivmoddi4+0x26e>
  4036c6:	4640      	mov	r0, r8
  4036c8:	e791      	b.n	4035ee <__udivmoddi4+0x1e6>
  4036ca:	4681      	mov	r9, r0
  4036cc:	e7be      	b.n	40364c <__udivmoddi4+0x244>
  4036ce:	4601      	mov	r1, r0
  4036d0:	e778      	b.n	4035c4 <__udivmoddi4+0x1bc>
  4036d2:	3802      	subs	r0, #2
  4036d4:	443c      	add	r4, r7
  4036d6:	e745      	b.n	403564 <__udivmoddi4+0x15c>
  4036d8:	4608      	mov	r0, r1
  4036da:	e708      	b.n	4034ee <__udivmoddi4+0xe6>
  4036dc:	f1a8 0802 	sub.w	r8, r8, #2
  4036e0:	443d      	add	r5, r7
  4036e2:	e72b      	b.n	40353c <__udivmoddi4+0x134>

004036e4 <__aeabi_idiv0>:
  4036e4:	4770      	bx	lr
  4036e6:	bf00      	nop

004036e8 <__libc_init_array>:
  4036e8:	b570      	push	{r4, r5, r6, lr}
  4036ea:	4e0f      	ldr	r6, [pc, #60]	; (403728 <__libc_init_array+0x40>)
  4036ec:	4d0f      	ldr	r5, [pc, #60]	; (40372c <__libc_init_array+0x44>)
  4036ee:	1b76      	subs	r6, r6, r5
  4036f0:	10b6      	asrs	r6, r6, #2
  4036f2:	bf18      	it	ne
  4036f4:	2400      	movne	r4, #0
  4036f6:	d005      	beq.n	403704 <__libc_init_array+0x1c>
  4036f8:	3401      	adds	r4, #1
  4036fa:	f855 3b04 	ldr.w	r3, [r5], #4
  4036fe:	4798      	blx	r3
  403700:	42a6      	cmp	r6, r4
  403702:	d1f9      	bne.n	4036f8 <__libc_init_array+0x10>
  403704:	4e0a      	ldr	r6, [pc, #40]	; (403730 <__libc_init_array+0x48>)
  403706:	4d0b      	ldr	r5, [pc, #44]	; (403734 <__libc_init_array+0x4c>)
  403708:	1b76      	subs	r6, r6, r5
  40370a:	f005 fdd9 	bl	4092c0 <_init>
  40370e:	10b6      	asrs	r6, r6, #2
  403710:	bf18      	it	ne
  403712:	2400      	movne	r4, #0
  403714:	d006      	beq.n	403724 <__libc_init_array+0x3c>
  403716:	3401      	adds	r4, #1
  403718:	f855 3b04 	ldr.w	r3, [r5], #4
  40371c:	4798      	blx	r3
  40371e:	42a6      	cmp	r6, r4
  403720:	d1f9      	bne.n	403716 <__libc_init_array+0x2e>
  403722:	bd70      	pop	{r4, r5, r6, pc}
  403724:	bd70      	pop	{r4, r5, r6, pc}
  403726:	bf00      	nop
  403728:	004092cc 	.word	0x004092cc
  40372c:	004092cc 	.word	0x004092cc
  403730:	004092d4 	.word	0x004092d4
  403734:	004092cc 	.word	0x004092cc

00403738 <memset>:
  403738:	b470      	push	{r4, r5, r6}
  40373a:	0786      	lsls	r6, r0, #30
  40373c:	d046      	beq.n	4037cc <memset+0x94>
  40373e:	1e54      	subs	r4, r2, #1
  403740:	2a00      	cmp	r2, #0
  403742:	d041      	beq.n	4037c8 <memset+0x90>
  403744:	b2ca      	uxtb	r2, r1
  403746:	4603      	mov	r3, r0
  403748:	e002      	b.n	403750 <memset+0x18>
  40374a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40374e:	d33b      	bcc.n	4037c8 <memset+0x90>
  403750:	f803 2b01 	strb.w	r2, [r3], #1
  403754:	079d      	lsls	r5, r3, #30
  403756:	d1f8      	bne.n	40374a <memset+0x12>
  403758:	2c03      	cmp	r4, #3
  40375a:	d92e      	bls.n	4037ba <memset+0x82>
  40375c:	b2cd      	uxtb	r5, r1
  40375e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403762:	2c0f      	cmp	r4, #15
  403764:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403768:	d919      	bls.n	40379e <memset+0x66>
  40376a:	f103 0210 	add.w	r2, r3, #16
  40376e:	4626      	mov	r6, r4
  403770:	3e10      	subs	r6, #16
  403772:	2e0f      	cmp	r6, #15
  403774:	f842 5c10 	str.w	r5, [r2, #-16]
  403778:	f842 5c0c 	str.w	r5, [r2, #-12]
  40377c:	f842 5c08 	str.w	r5, [r2, #-8]
  403780:	f842 5c04 	str.w	r5, [r2, #-4]
  403784:	f102 0210 	add.w	r2, r2, #16
  403788:	d8f2      	bhi.n	403770 <memset+0x38>
  40378a:	f1a4 0210 	sub.w	r2, r4, #16
  40378e:	f022 020f 	bic.w	r2, r2, #15
  403792:	f004 040f 	and.w	r4, r4, #15
  403796:	3210      	adds	r2, #16
  403798:	2c03      	cmp	r4, #3
  40379a:	4413      	add	r3, r2
  40379c:	d90d      	bls.n	4037ba <memset+0x82>
  40379e:	461e      	mov	r6, r3
  4037a0:	4622      	mov	r2, r4
  4037a2:	3a04      	subs	r2, #4
  4037a4:	2a03      	cmp	r2, #3
  4037a6:	f846 5b04 	str.w	r5, [r6], #4
  4037aa:	d8fa      	bhi.n	4037a2 <memset+0x6a>
  4037ac:	1f22      	subs	r2, r4, #4
  4037ae:	f022 0203 	bic.w	r2, r2, #3
  4037b2:	3204      	adds	r2, #4
  4037b4:	4413      	add	r3, r2
  4037b6:	f004 0403 	and.w	r4, r4, #3
  4037ba:	b12c      	cbz	r4, 4037c8 <memset+0x90>
  4037bc:	b2c9      	uxtb	r1, r1
  4037be:	441c      	add	r4, r3
  4037c0:	f803 1b01 	strb.w	r1, [r3], #1
  4037c4:	429c      	cmp	r4, r3
  4037c6:	d1fb      	bne.n	4037c0 <memset+0x88>
  4037c8:	bc70      	pop	{r4, r5, r6}
  4037ca:	4770      	bx	lr
  4037cc:	4614      	mov	r4, r2
  4037ce:	4603      	mov	r3, r0
  4037d0:	e7c2      	b.n	403758 <memset+0x20>
  4037d2:	bf00      	nop

004037d4 <sprintf>:
  4037d4:	b40e      	push	{r1, r2, r3}
  4037d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4037d8:	b09c      	sub	sp, #112	; 0x70
  4037da:	ab21      	add	r3, sp, #132	; 0x84
  4037dc:	490f      	ldr	r1, [pc, #60]	; (40381c <sprintf+0x48>)
  4037de:	f853 2b04 	ldr.w	r2, [r3], #4
  4037e2:	9301      	str	r3, [sp, #4]
  4037e4:	4605      	mov	r5, r0
  4037e6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4037ea:	6808      	ldr	r0, [r1, #0]
  4037ec:	9502      	str	r5, [sp, #8]
  4037ee:	f44f 7702 	mov.w	r7, #520	; 0x208
  4037f2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4037f6:	a902      	add	r1, sp, #8
  4037f8:	9506      	str	r5, [sp, #24]
  4037fa:	f8ad 7014 	strh.w	r7, [sp, #20]
  4037fe:	9404      	str	r4, [sp, #16]
  403800:	9407      	str	r4, [sp, #28]
  403802:	f8ad 6016 	strh.w	r6, [sp, #22]
  403806:	f000 fa6f 	bl	403ce8 <_svfprintf_r>
  40380a:	9b02      	ldr	r3, [sp, #8]
  40380c:	2200      	movs	r2, #0
  40380e:	701a      	strb	r2, [r3, #0]
  403810:	b01c      	add	sp, #112	; 0x70
  403812:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403816:	b003      	add	sp, #12
  403818:	4770      	bx	lr
  40381a:	bf00      	nop
  40381c:	20000010 	.word	0x20000010

00403820 <critical_factorization>:
  403820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403824:	f04f 0e01 	mov.w	lr, #1
  403828:	4674      	mov	r4, lr
  40382a:	2500      	movs	r5, #0
  40382c:	f04f 36ff 	mov.w	r6, #4294967295
  403830:	192b      	adds	r3, r5, r4
  403832:	428b      	cmp	r3, r1
  403834:	eb00 0706 	add.w	r7, r0, r6
  403838:	d20d      	bcs.n	403856 <critical_factorization+0x36>
  40383a:	5d3f      	ldrb	r7, [r7, r4]
  40383c:	f810 c003 	ldrb.w	ip, [r0, r3]
  403840:	45bc      	cmp	ip, r7
  403842:	d22d      	bcs.n	4038a0 <critical_factorization+0x80>
  403844:	461d      	mov	r5, r3
  403846:	2401      	movs	r4, #1
  403848:	eba3 0e06 	sub.w	lr, r3, r6
  40384c:	192b      	adds	r3, r5, r4
  40384e:	428b      	cmp	r3, r1
  403850:	eb00 0706 	add.w	r7, r0, r6
  403854:	d3f1      	bcc.n	40383a <critical_factorization+0x1a>
  403856:	f04f 0801 	mov.w	r8, #1
  40385a:	f8c2 e000 	str.w	lr, [r2]
  40385e:	4644      	mov	r4, r8
  403860:	2500      	movs	r5, #0
  403862:	f04f 37ff 	mov.w	r7, #4294967295
  403866:	192b      	adds	r3, r5, r4
  403868:	4299      	cmp	r1, r3
  40386a:	eb00 0e07 	add.w	lr, r0, r7
  40386e:	d90e      	bls.n	40388e <critical_factorization+0x6e>
  403870:	f81e e004 	ldrb.w	lr, [lr, r4]
  403874:	f810 c003 	ldrb.w	ip, [r0, r3]
  403878:	45f4      	cmp	ip, lr
  40387a:	d918      	bls.n	4038ae <critical_factorization+0x8e>
  40387c:	461d      	mov	r5, r3
  40387e:	2401      	movs	r4, #1
  403880:	eba3 0807 	sub.w	r8, r3, r7
  403884:	192b      	adds	r3, r5, r4
  403886:	4299      	cmp	r1, r3
  403888:	eb00 0e07 	add.w	lr, r0, r7
  40388c:	d8f0      	bhi.n	403870 <critical_factorization+0x50>
  40388e:	3701      	adds	r7, #1
  403890:	1c70      	adds	r0, r6, #1
  403892:	4287      	cmp	r7, r0
  403894:	bf24      	itt	cs
  403896:	f8c2 8000 	strcs.w	r8, [r2]
  40389a:	4638      	movcs	r0, r7
  40389c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4038a0:	d00c      	beq.n	4038bc <critical_factorization+0x9c>
  4038a2:	f04f 0e01 	mov.w	lr, #1
  4038a6:	462e      	mov	r6, r5
  4038a8:	4674      	mov	r4, lr
  4038aa:	4475      	add	r5, lr
  4038ac:	e7c0      	b.n	403830 <critical_factorization+0x10>
  4038ae:	d00b      	beq.n	4038c8 <critical_factorization+0xa8>
  4038b0:	f04f 0801 	mov.w	r8, #1
  4038b4:	462f      	mov	r7, r5
  4038b6:	4644      	mov	r4, r8
  4038b8:	4445      	add	r5, r8
  4038ba:	e7d4      	b.n	403866 <critical_factorization+0x46>
  4038bc:	4574      	cmp	r4, lr
  4038be:	bf12      	itee	ne
  4038c0:	3401      	addne	r4, #1
  4038c2:	461d      	moveq	r5, r3
  4038c4:	2401      	moveq	r4, #1
  4038c6:	e7b3      	b.n	403830 <critical_factorization+0x10>
  4038c8:	4544      	cmp	r4, r8
  4038ca:	bf12      	itee	ne
  4038cc:	3401      	addne	r4, #1
  4038ce:	461d      	moveq	r5, r3
  4038d0:	2401      	moveq	r4, #1
  4038d2:	e7c8      	b.n	403866 <critical_factorization+0x46>

004038d4 <two_way_long_needle>:
  4038d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4038d8:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  4038dc:	4616      	mov	r6, r2
  4038de:	4605      	mov	r5, r0
  4038e0:	468b      	mov	fp, r1
  4038e2:	4610      	mov	r0, r2
  4038e4:	4619      	mov	r1, r3
  4038e6:	aa03      	add	r2, sp, #12
  4038e8:	461c      	mov	r4, r3
  4038ea:	f7ff ff99 	bl	403820 <critical_factorization>
  4038ee:	ab03      	add	r3, sp, #12
  4038f0:	4681      	mov	r9, r0
  4038f2:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  4038f6:	f843 4f04 	str.w	r4, [r3, #4]!
  4038fa:	4293      	cmp	r3, r2
  4038fc:	d1fb      	bne.n	4038f6 <two_way_long_needle+0x22>
  4038fe:	b14c      	cbz	r4, 403914 <two_way_long_needle+0x40>
  403900:	1e63      	subs	r3, r4, #1
  403902:	1e72      	subs	r2, r6, #1
  403904:	a804      	add	r0, sp, #16
  403906:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  40390a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  40390e:	f113 33ff 	adds.w	r3, r3, #4294967295
  403912:	d2f8      	bcs.n	403906 <two_way_long_needle+0x32>
  403914:	9903      	ldr	r1, [sp, #12]
  403916:	464a      	mov	r2, r9
  403918:	4431      	add	r1, r6
  40391a:	4630      	mov	r0, r6
  40391c:	f002 ff10 	bl	406740 <memcmp>
  403920:	2800      	cmp	r0, #0
  403922:	d16f      	bne.n	403a04 <two_way_long_needle+0x130>
  403924:	f109 33ff 	add.w	r3, r9, #4294967295
  403928:	9300      	str	r3, [sp, #0]
  40392a:	18f3      	adds	r3, r6, r3
  40392c:	4682      	mov	sl, r0
  40392e:	9301      	str	r3, [sp, #4]
  403930:	4623      	mov	r3, r4
  403932:	4680      	mov	r8, r0
  403934:	4654      	mov	r4, sl
  403936:	4658      	mov	r0, fp
  403938:	469a      	mov	sl, r3
  40393a:	eb08 070a 	add.w	r7, r8, sl
  40393e:	1a3a      	subs	r2, r7, r0
  403940:	2100      	movs	r1, #0
  403942:	4428      	add	r0, r5
  403944:	f002 feac 	bl	4066a0 <memchr>
  403948:	2800      	cmp	r0, #0
  40394a:	d156      	bne.n	4039fa <two_way_long_needle+0x126>
  40394c:	2f00      	cmp	r7, #0
  40394e:	d054      	beq.n	4039fa <two_way_long_needle+0x126>
  403950:	19eb      	adds	r3, r5, r7
  403952:	aa04      	add	r2, sp, #16
  403954:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40395c:	b14b      	cbz	r3, 403972 <two_way_long_needle+0x9e>
  40395e:	b124      	cbz	r4, 40396a <two_way_long_needle+0x96>
  403960:	9a03      	ldr	r2, [sp, #12]
  403962:	4293      	cmp	r3, r2
  403964:	d201      	bcs.n	40396a <two_way_long_needle+0x96>
  403966:	ebaa 0302 	sub.w	r3, sl, r2
  40396a:	4498      	add	r8, r3
  40396c:	2400      	movs	r4, #0
  40396e:	4638      	mov	r0, r7
  403970:	e7e3      	b.n	40393a <two_way_long_needle+0x66>
  403972:	454c      	cmp	r4, r9
  403974:	4623      	mov	r3, r4
  403976:	f10a 3eff 	add.w	lr, sl, #4294967295
  40397a:	bf38      	it	cc
  40397c:	464b      	movcc	r3, r9
  40397e:	4573      	cmp	r3, lr
  403980:	d213      	bcs.n	4039aa <two_way_long_needle+0xd6>
  403982:	eb08 0203 	add.w	r2, r8, r3
  403986:	f816 c003 	ldrb.w	ip, [r6, r3]
  40398a:	5ca8      	ldrb	r0, [r5, r2]
  40398c:	4584      	cmp	ip, r0
  40398e:	442a      	add	r2, r5
  403990:	eb06 0103 	add.w	r1, r6, r3
  403994:	d006      	beq.n	4039a4 <two_way_long_needle+0xd0>
  403996:	e02c      	b.n	4039f2 <two_way_long_needle+0x11e>
  403998:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  40399c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  4039a0:	4584      	cmp	ip, r0
  4039a2:	d126      	bne.n	4039f2 <two_way_long_needle+0x11e>
  4039a4:	3301      	adds	r3, #1
  4039a6:	4573      	cmp	r3, lr
  4039a8:	d3f6      	bcc.n	403998 <two_way_long_needle+0xc4>
  4039aa:	454c      	cmp	r4, r9
  4039ac:	9900      	ldr	r1, [sp, #0]
  4039ae:	f080 8089 	bcs.w	403ac4 <two_way_long_needle+0x1f0>
  4039b2:	9b00      	ldr	r3, [sp, #0]
  4039b4:	eb08 0203 	add.w	r2, r8, r3
  4039b8:	9b01      	ldr	r3, [sp, #4]
  4039ba:	5ca8      	ldrb	r0, [r5, r2]
  4039bc:	781b      	ldrb	r3, [r3, #0]
  4039be:	4298      	cmp	r0, r3
  4039c0:	442a      	add	r2, r5
  4039c2:	d17f      	bne.n	403ac4 <two_way_long_needle+0x1f0>
  4039c4:	9801      	ldr	r0, [sp, #4]
  4039c6:	f104 3bff 	add.w	fp, r4, #4294967295
  4039ca:	e006      	b.n	4039da <two_way_long_needle+0x106>
  4039cc:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  4039d0:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4039d4:	45f4      	cmp	ip, lr
  4039d6:	d103      	bne.n	4039e0 <two_way_long_needle+0x10c>
  4039d8:	4619      	mov	r1, r3
  4039da:	1e4b      	subs	r3, r1, #1
  4039dc:	459b      	cmp	fp, r3
  4039de:	d1f5      	bne.n	4039cc <two_way_long_needle+0xf8>
  4039e0:	3401      	adds	r4, #1
  4039e2:	428c      	cmp	r4, r1
  4039e4:	d870      	bhi.n	403ac8 <two_way_long_needle+0x1f4>
  4039e6:	9c03      	ldr	r4, [sp, #12]
  4039e8:	4638      	mov	r0, r7
  4039ea:	44a0      	add	r8, r4
  4039ec:	ebaa 0404 	sub.w	r4, sl, r4
  4039f0:	e7a3      	b.n	40393a <two_way_long_needle+0x66>
  4039f2:	f1c9 0201 	rsb	r2, r9, #1
  4039f6:	4490      	add	r8, r2
  4039f8:	e7b7      	b.n	40396a <two_way_long_needle+0x96>
  4039fa:	2000      	movs	r0, #0
  4039fc:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a04:	eba4 0309 	sub.w	r3, r4, r9
  403a08:	454b      	cmp	r3, r9
  403a0a:	bf38      	it	cc
  403a0c:	464b      	movcc	r3, r9
  403a0e:	3301      	adds	r3, #1
  403a10:	f109 38ff 	add.w	r8, r9, #4294967295
  403a14:	9303      	str	r3, [sp, #12]
  403a16:	eb06 0308 	add.w	r3, r6, r8
  403a1a:	4658      	mov	r0, fp
  403a1c:	f04f 0a00 	mov.w	sl, #0
  403a20:	46cb      	mov	fp, r9
  403a22:	4699      	mov	r9, r3
  403a24:	eb0a 0704 	add.w	r7, sl, r4
  403a28:	1a3a      	subs	r2, r7, r0
  403a2a:	2100      	movs	r1, #0
  403a2c:	4428      	add	r0, r5
  403a2e:	f002 fe37 	bl	4066a0 <memchr>
  403a32:	2800      	cmp	r0, #0
  403a34:	d1e1      	bne.n	4039fa <two_way_long_needle+0x126>
  403a36:	2f00      	cmp	r7, #0
  403a38:	d0df      	beq.n	4039fa <two_way_long_needle+0x126>
  403a3a:	19eb      	adds	r3, r5, r7
  403a3c:	aa04      	add	r2, sp, #16
  403a3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403a46:	bba3      	cbnz	r3, 403ab2 <two_way_long_needle+0x1de>
  403a48:	1e61      	subs	r1, r4, #1
  403a4a:	458b      	cmp	fp, r1
  403a4c:	d215      	bcs.n	403a7a <two_way_long_needle+0x1a6>
  403a4e:	eb0a 020b 	add.w	r2, sl, fp
  403a52:	f816 300b 	ldrb.w	r3, [r6, fp]
  403a56:	f815 e002 	ldrb.w	lr, [r5, r2]
  403a5a:	459e      	cmp	lr, r3
  403a5c:	442a      	add	r2, r5
  403a5e:	eb06 000b 	add.w	r0, r6, fp
  403a62:	465b      	mov	r3, fp
  403a64:	d006      	beq.n	403a74 <two_way_long_needle+0x1a0>
  403a66:	e027      	b.n	403ab8 <two_way_long_needle+0x1e4>
  403a68:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  403a6c:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  403a70:	45f4      	cmp	ip, lr
  403a72:	d121      	bne.n	403ab8 <two_way_long_needle+0x1e4>
  403a74:	3301      	adds	r3, #1
  403a76:	428b      	cmp	r3, r1
  403a78:	d3f6      	bcc.n	403a68 <two_way_long_needle+0x194>
  403a7a:	f1b8 3fff 	cmp.w	r8, #4294967295
  403a7e:	d011      	beq.n	403aa4 <two_way_long_needle+0x1d0>
  403a80:	eb0a 0208 	add.w	r2, sl, r8
  403a84:	f899 1000 	ldrb.w	r1, [r9]
  403a88:	5cab      	ldrb	r3, [r5, r2]
  403a8a:	4299      	cmp	r1, r3
  403a8c:	442a      	add	r2, r5
  403a8e:	d10f      	bne.n	403ab0 <two_way_long_needle+0x1dc>
  403a90:	464b      	mov	r3, r9
  403a92:	e005      	b.n	403aa0 <two_way_long_needle+0x1cc>
  403a94:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403a98:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403a9c:	4288      	cmp	r0, r1
  403a9e:	d107      	bne.n	403ab0 <two_way_long_needle+0x1dc>
  403aa0:	42b3      	cmp	r3, r6
  403aa2:	d1f7      	bne.n	403a94 <two_way_long_needle+0x1c0>
  403aa4:	eb05 000a 	add.w	r0, r5, sl
  403aa8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ab0:	9b03      	ldr	r3, [sp, #12]
  403ab2:	449a      	add	sl, r3
  403ab4:	4638      	mov	r0, r7
  403ab6:	e7b5      	b.n	403a24 <two_way_long_needle+0x150>
  403ab8:	f1cb 0201 	rsb	r2, fp, #1
  403abc:	4492      	add	sl, r2
  403abe:	449a      	add	sl, r3
  403ac0:	4638      	mov	r0, r7
  403ac2:	e7af      	b.n	403a24 <two_way_long_needle+0x150>
  403ac4:	4649      	mov	r1, r9
  403ac6:	e78b      	b.n	4039e0 <two_way_long_needle+0x10c>
  403ac8:	eb05 0008 	add.w	r0, r5, r8
  403acc:	e796      	b.n	4039fc <two_way_long_needle+0x128>
  403ace:	bf00      	nop

00403ad0 <strstr>:
  403ad0:	7802      	ldrb	r2, [r0, #0]
  403ad2:	2a00      	cmp	r2, #0
  403ad4:	f000 8101 	beq.w	403cda <strstr+0x20a>
  403ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403adc:	f891 8000 	ldrb.w	r8, [r1]
  403ae0:	b085      	sub	sp, #20
  403ae2:	4644      	mov	r4, r8
  403ae4:	f1b8 0f00 	cmp.w	r8, #0
  403ae8:	d016      	beq.n	403b18 <strstr+0x48>
  403aea:	4686      	mov	lr, r0
  403aec:	f101 0c01 	add.w	ip, r1, #1
  403af0:	2701      	movs	r7, #1
  403af2:	e003      	b.n	403afc <strstr+0x2c>
  403af4:	f813 4b01 	ldrb.w	r4, [r3], #1
  403af8:	b16c      	cbz	r4, 403b16 <strstr+0x46>
  403afa:	469c      	mov	ip, r3
  403afc:	42a2      	cmp	r2, r4
  403afe:	bf14      	ite	ne
  403b00:	2700      	movne	r7, #0
  403b02:	f007 0701 	andeq.w	r7, r7, #1
  403b06:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  403b0a:	4663      	mov	r3, ip
  403b0c:	2a00      	cmp	r2, #0
  403b0e:	d1f1      	bne.n	403af4 <strstr+0x24>
  403b10:	f89c 3000 	ldrb.w	r3, [ip]
  403b14:	b9fb      	cbnz	r3, 403b56 <strstr+0x86>
  403b16:	b117      	cbz	r7, 403b1e <strstr+0x4e>
  403b18:	b005      	add	sp, #20
  403b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b1e:	460e      	mov	r6, r1
  403b20:	4605      	mov	r5, r0
  403b22:	4641      	mov	r1, r8
  403b24:	3001      	adds	r0, #1
  403b26:	ebac 0406 	sub.w	r4, ip, r6
  403b2a:	f003 f9eb 	bl	406f04 <strchr>
  403b2e:	4607      	mov	r7, r0
  403b30:	b188      	cbz	r0, 403b56 <strstr+0x86>
  403b32:	2c01      	cmp	r4, #1
  403b34:	d0f0      	beq.n	403b18 <strstr+0x48>
  403b36:	1928      	adds	r0, r5, r4
  403b38:	4287      	cmp	r7, r0
  403b3a:	bf94      	ite	ls
  403b3c:	1bc1      	subls	r1, r0, r7
  403b3e:	2101      	movhi	r1, #1
  403b40:	2c1f      	cmp	r4, #31
  403b42:	468b      	mov	fp, r1
  403b44:	d90b      	bls.n	403b5e <strstr+0x8e>
  403b46:	4623      	mov	r3, r4
  403b48:	4632      	mov	r2, r6
  403b4a:	4638      	mov	r0, r7
  403b4c:	f7ff fec2 	bl	4038d4 <two_way_long_needle>
  403b50:	b005      	add	sp, #20
  403b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b56:	2000      	movs	r0, #0
  403b58:	b005      	add	sp, #20
  403b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b5e:	aa03      	add	r2, sp, #12
  403b60:	4621      	mov	r1, r4
  403b62:	4630      	mov	r0, r6
  403b64:	f7ff fe5c 	bl	403820 <critical_factorization>
  403b68:	9903      	ldr	r1, [sp, #12]
  403b6a:	4680      	mov	r8, r0
  403b6c:	4602      	mov	r2, r0
  403b6e:	4431      	add	r1, r6
  403b70:	4630      	mov	r0, r6
  403b72:	f002 fde5 	bl	406740 <memcmp>
  403b76:	2800      	cmp	r0, #0
  403b78:	d157      	bne.n	403c2a <strstr+0x15a>
  403b7a:	f108 33ff 	add.w	r3, r8, #4294967295
  403b7e:	9300      	str	r3, [sp, #0]
  403b80:	18f3      	adds	r3, r6, r3
  403b82:	4681      	mov	r9, r0
  403b84:	4605      	mov	r5, r0
  403b86:	9301      	str	r3, [sp, #4]
  403b88:	4658      	mov	r0, fp
  403b8a:	46b2      	mov	sl, r6
  403b8c:	1966      	adds	r6, r4, r5
  403b8e:	1a32      	subs	r2, r6, r0
  403b90:	2100      	movs	r1, #0
  403b92:	4438      	add	r0, r7
  403b94:	f002 fd84 	bl	4066a0 <memchr>
  403b98:	2800      	cmp	r0, #0
  403b9a:	d1dc      	bne.n	403b56 <strstr+0x86>
  403b9c:	2e00      	cmp	r6, #0
  403b9e:	d0da      	beq.n	403b56 <strstr+0x86>
  403ba0:	45c8      	cmp	r8, r9
  403ba2:	4643      	mov	r3, r8
  403ba4:	bf38      	it	cc
  403ba6:	464b      	movcc	r3, r9
  403ba8:	429c      	cmp	r4, r3
  403baa:	d912      	bls.n	403bd2 <strstr+0x102>
  403bac:	195a      	adds	r2, r3, r5
  403bae:	f81a 1003 	ldrb.w	r1, [sl, r3]
  403bb2:	5cb8      	ldrb	r0, [r7, r2]
  403bb4:	4281      	cmp	r1, r0
  403bb6:	443a      	add	r2, r7
  403bb8:	eb0a 0e03 	add.w	lr, sl, r3
  403bbc:	d006      	beq.n	403bcc <strstr+0xfc>
  403bbe:	e02c      	b.n	403c1a <strstr+0x14a>
  403bc0:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  403bc4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403bc8:	4288      	cmp	r0, r1
  403bca:	d126      	bne.n	403c1a <strstr+0x14a>
  403bcc:	3301      	adds	r3, #1
  403bce:	429c      	cmp	r4, r3
  403bd0:	d1f6      	bne.n	403bc0 <strstr+0xf0>
  403bd2:	45c8      	cmp	r8, r9
  403bd4:	9900      	ldr	r1, [sp, #0]
  403bd6:	f240 8083 	bls.w	403ce0 <strstr+0x210>
  403bda:	9b00      	ldr	r3, [sp, #0]
  403bdc:	18ea      	adds	r2, r5, r3
  403bde:	9b01      	ldr	r3, [sp, #4]
  403be0:	5cb8      	ldrb	r0, [r7, r2]
  403be2:	781b      	ldrb	r3, [r3, #0]
  403be4:	4298      	cmp	r0, r3
  403be6:	443a      	add	r2, r7
  403be8:	d17a      	bne.n	403ce0 <strstr+0x210>
  403bea:	9801      	ldr	r0, [sp, #4]
  403bec:	f109 3bff 	add.w	fp, r9, #4294967295
  403bf0:	e006      	b.n	403c00 <strstr+0x130>
  403bf2:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  403bf6:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  403bfa:	45f4      	cmp	ip, lr
  403bfc:	d103      	bne.n	403c06 <strstr+0x136>
  403bfe:	4619      	mov	r1, r3
  403c00:	1e4b      	subs	r3, r1, #1
  403c02:	455b      	cmp	r3, fp
  403c04:	d1f5      	bne.n	403bf2 <strstr+0x122>
  403c06:	f109 0901 	add.w	r9, r9, #1
  403c0a:	4589      	cmp	r9, r1
  403c0c:	d857      	bhi.n	403cbe <strstr+0x1ee>
  403c0e:	9b03      	ldr	r3, [sp, #12]
  403c10:	4630      	mov	r0, r6
  403c12:	441d      	add	r5, r3
  403c14:	eba4 0903 	sub.w	r9, r4, r3
  403c18:	e7b8      	b.n	403b8c <strstr+0xbc>
  403c1a:	f1c8 0201 	rsb	r2, r8, #1
  403c1e:	4415      	add	r5, r2
  403c20:	441d      	add	r5, r3
  403c22:	f04f 0900 	mov.w	r9, #0
  403c26:	4630      	mov	r0, r6
  403c28:	e7b0      	b.n	403b8c <strstr+0xbc>
  403c2a:	eba4 0308 	sub.w	r3, r4, r8
  403c2e:	4543      	cmp	r3, r8
  403c30:	bf38      	it	cc
  403c32:	4643      	movcc	r3, r8
  403c34:	3301      	adds	r3, #1
  403c36:	f108 39ff 	add.w	r9, r8, #4294967295
  403c3a:	9303      	str	r3, [sp, #12]
  403c3c:	eb06 0309 	add.w	r3, r6, r9
  403c40:	4658      	mov	r0, fp
  403c42:	2500      	movs	r5, #0
  403c44:	46bb      	mov	fp, r7
  403c46:	469a      	mov	sl, r3
  403c48:	1967      	adds	r7, r4, r5
  403c4a:	1a3a      	subs	r2, r7, r0
  403c4c:	2100      	movs	r1, #0
  403c4e:	4458      	add	r0, fp
  403c50:	f002 fd26 	bl	4066a0 <memchr>
  403c54:	2800      	cmp	r0, #0
  403c56:	f47f af7e 	bne.w	403b56 <strstr+0x86>
  403c5a:	2f00      	cmp	r7, #0
  403c5c:	f43f af7b 	beq.w	403b56 <strstr+0x86>
  403c60:	4544      	cmp	r4, r8
  403c62:	d915      	bls.n	403c90 <strstr+0x1c0>
  403c64:	eb08 0205 	add.w	r2, r8, r5
  403c68:	f816 3008 	ldrb.w	r3, [r6, r8]
  403c6c:	f81b 0002 	ldrb.w	r0, [fp, r2]
  403c70:	4298      	cmp	r0, r3
  403c72:	445a      	add	r2, fp
  403c74:	eb06 0108 	add.w	r1, r6, r8
  403c78:	4643      	mov	r3, r8
  403c7a:	d006      	beq.n	403c8a <strstr+0x1ba>
  403c7c:	e023      	b.n	403cc6 <strstr+0x1f6>
  403c7e:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  403c82:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403c86:	4586      	cmp	lr, r0
  403c88:	d11d      	bne.n	403cc6 <strstr+0x1f6>
  403c8a:	3301      	adds	r3, #1
  403c8c:	429c      	cmp	r4, r3
  403c8e:	d1f6      	bne.n	403c7e <strstr+0x1ae>
  403c90:	f1b9 3fff 	cmp.w	r9, #4294967295
  403c94:	d012      	beq.n	403cbc <strstr+0x1ec>
  403c96:	eb05 0209 	add.w	r2, r5, r9
  403c9a:	f89a 3000 	ldrb.w	r3, [sl]
  403c9e:	f81b 1002 	ldrb.w	r1, [fp, r2]
  403ca2:	4299      	cmp	r1, r3
  403ca4:	445a      	add	r2, fp
  403ca6:	d114      	bne.n	403cd2 <strstr+0x202>
  403ca8:	4653      	mov	r3, sl
  403caa:	e005      	b.n	403cb8 <strstr+0x1e8>
  403cac:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403cb0:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403cb4:	4288      	cmp	r0, r1
  403cb6:	d10c      	bne.n	403cd2 <strstr+0x202>
  403cb8:	42b3      	cmp	r3, r6
  403cba:	d1f7      	bne.n	403cac <strstr+0x1dc>
  403cbc:	465f      	mov	r7, fp
  403cbe:	1978      	adds	r0, r7, r5
  403cc0:	b005      	add	sp, #20
  403cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403cc6:	f1c8 0201 	rsb	r2, r8, #1
  403cca:	4415      	add	r5, r2
  403ccc:	441d      	add	r5, r3
  403cce:	4638      	mov	r0, r7
  403cd0:	e7ba      	b.n	403c48 <strstr+0x178>
  403cd2:	9b03      	ldr	r3, [sp, #12]
  403cd4:	4638      	mov	r0, r7
  403cd6:	441d      	add	r5, r3
  403cd8:	e7b6      	b.n	403c48 <strstr+0x178>
  403cda:	780b      	ldrb	r3, [r1, #0]
  403cdc:	b913      	cbnz	r3, 403ce4 <strstr+0x214>
  403cde:	4770      	bx	lr
  403ce0:	4641      	mov	r1, r8
  403ce2:	e790      	b.n	403c06 <strstr+0x136>
  403ce4:	2000      	movs	r0, #0
  403ce6:	4770      	bx	lr

00403ce8 <_svfprintf_r>:
  403ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403cec:	b0c3      	sub	sp, #268	; 0x10c
  403cee:	460c      	mov	r4, r1
  403cf0:	910b      	str	r1, [sp, #44]	; 0x2c
  403cf2:	4692      	mov	sl, r2
  403cf4:	930f      	str	r3, [sp, #60]	; 0x3c
  403cf6:	900c      	str	r0, [sp, #48]	; 0x30
  403cf8:	f002 fa0e 	bl	406118 <_localeconv_r>
  403cfc:	6803      	ldr	r3, [r0, #0]
  403cfe:	931a      	str	r3, [sp, #104]	; 0x68
  403d00:	4618      	mov	r0, r3
  403d02:	f003 f97d 	bl	407000 <strlen>
  403d06:	89a3      	ldrh	r3, [r4, #12]
  403d08:	9019      	str	r0, [sp, #100]	; 0x64
  403d0a:	0619      	lsls	r1, r3, #24
  403d0c:	d503      	bpl.n	403d16 <_svfprintf_r+0x2e>
  403d0e:	6923      	ldr	r3, [r4, #16]
  403d10:	2b00      	cmp	r3, #0
  403d12:	f001 8003 	beq.w	404d1c <_svfprintf_r+0x1034>
  403d16:	2300      	movs	r3, #0
  403d18:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403d1c:	9313      	str	r3, [sp, #76]	; 0x4c
  403d1e:	9315      	str	r3, [sp, #84]	; 0x54
  403d20:	9314      	str	r3, [sp, #80]	; 0x50
  403d22:	9327      	str	r3, [sp, #156]	; 0x9c
  403d24:	9326      	str	r3, [sp, #152]	; 0x98
  403d26:	9318      	str	r3, [sp, #96]	; 0x60
  403d28:	931b      	str	r3, [sp, #108]	; 0x6c
  403d2a:	9309      	str	r3, [sp, #36]	; 0x24
  403d2c:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403d30:	46c8      	mov	r8, r9
  403d32:	9316      	str	r3, [sp, #88]	; 0x58
  403d34:	9317      	str	r3, [sp, #92]	; 0x5c
  403d36:	f89a 3000 	ldrb.w	r3, [sl]
  403d3a:	4654      	mov	r4, sl
  403d3c:	b1e3      	cbz	r3, 403d78 <_svfprintf_r+0x90>
  403d3e:	2b25      	cmp	r3, #37	; 0x25
  403d40:	d102      	bne.n	403d48 <_svfprintf_r+0x60>
  403d42:	e019      	b.n	403d78 <_svfprintf_r+0x90>
  403d44:	2b25      	cmp	r3, #37	; 0x25
  403d46:	d003      	beq.n	403d50 <_svfprintf_r+0x68>
  403d48:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403d4c:	2b00      	cmp	r3, #0
  403d4e:	d1f9      	bne.n	403d44 <_svfprintf_r+0x5c>
  403d50:	eba4 050a 	sub.w	r5, r4, sl
  403d54:	b185      	cbz	r5, 403d78 <_svfprintf_r+0x90>
  403d56:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d58:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403d5a:	f8c8 a000 	str.w	sl, [r8]
  403d5e:	3301      	adds	r3, #1
  403d60:	442a      	add	r2, r5
  403d62:	2b07      	cmp	r3, #7
  403d64:	f8c8 5004 	str.w	r5, [r8, #4]
  403d68:	9227      	str	r2, [sp, #156]	; 0x9c
  403d6a:	9326      	str	r3, [sp, #152]	; 0x98
  403d6c:	dc7f      	bgt.n	403e6e <_svfprintf_r+0x186>
  403d6e:	f108 0808 	add.w	r8, r8, #8
  403d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403d74:	442b      	add	r3, r5
  403d76:	9309      	str	r3, [sp, #36]	; 0x24
  403d78:	7823      	ldrb	r3, [r4, #0]
  403d7a:	2b00      	cmp	r3, #0
  403d7c:	d07f      	beq.n	403e7e <_svfprintf_r+0x196>
  403d7e:	2300      	movs	r3, #0
  403d80:	461a      	mov	r2, r3
  403d82:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403d86:	4619      	mov	r1, r3
  403d88:	930d      	str	r3, [sp, #52]	; 0x34
  403d8a:	469b      	mov	fp, r3
  403d8c:	f04f 30ff 	mov.w	r0, #4294967295
  403d90:	7863      	ldrb	r3, [r4, #1]
  403d92:	900a      	str	r0, [sp, #40]	; 0x28
  403d94:	f104 0a01 	add.w	sl, r4, #1
  403d98:	f10a 0a01 	add.w	sl, sl, #1
  403d9c:	f1a3 0020 	sub.w	r0, r3, #32
  403da0:	2858      	cmp	r0, #88	; 0x58
  403da2:	f200 83c1 	bhi.w	404528 <_svfprintf_r+0x840>
  403da6:	e8df f010 	tbh	[pc, r0, lsl #1]
  403daa:	0238      	.short	0x0238
  403dac:	03bf03bf 	.word	0x03bf03bf
  403db0:	03bf0240 	.word	0x03bf0240
  403db4:	03bf03bf 	.word	0x03bf03bf
  403db8:	03bf03bf 	.word	0x03bf03bf
  403dbc:	024503bf 	.word	0x024503bf
  403dc0:	03bf0203 	.word	0x03bf0203
  403dc4:	026b005d 	.word	0x026b005d
  403dc8:	028603bf 	.word	0x028603bf
  403dcc:	039d039d 	.word	0x039d039d
  403dd0:	039d039d 	.word	0x039d039d
  403dd4:	039d039d 	.word	0x039d039d
  403dd8:	039d039d 	.word	0x039d039d
  403ddc:	03bf039d 	.word	0x03bf039d
  403de0:	03bf03bf 	.word	0x03bf03bf
  403de4:	03bf03bf 	.word	0x03bf03bf
  403de8:	03bf03bf 	.word	0x03bf03bf
  403dec:	03bf03bf 	.word	0x03bf03bf
  403df0:	033703bf 	.word	0x033703bf
  403df4:	03bf0357 	.word	0x03bf0357
  403df8:	03bf0357 	.word	0x03bf0357
  403dfc:	03bf03bf 	.word	0x03bf03bf
  403e00:	039803bf 	.word	0x039803bf
  403e04:	03bf03bf 	.word	0x03bf03bf
  403e08:	03bf03ad 	.word	0x03bf03ad
  403e0c:	03bf03bf 	.word	0x03bf03bf
  403e10:	03bf03bf 	.word	0x03bf03bf
  403e14:	03bf0259 	.word	0x03bf0259
  403e18:	031e03bf 	.word	0x031e03bf
  403e1c:	03bf03bf 	.word	0x03bf03bf
  403e20:	03bf03bf 	.word	0x03bf03bf
  403e24:	03bf03bf 	.word	0x03bf03bf
  403e28:	03bf03bf 	.word	0x03bf03bf
  403e2c:	03bf03bf 	.word	0x03bf03bf
  403e30:	02db02c6 	.word	0x02db02c6
  403e34:	03570357 	.word	0x03570357
  403e38:	028b0357 	.word	0x028b0357
  403e3c:	03bf02db 	.word	0x03bf02db
  403e40:	029003bf 	.word	0x029003bf
  403e44:	029d03bf 	.word	0x029d03bf
  403e48:	02b401cc 	.word	0x02b401cc
  403e4c:	03bf0208 	.word	0x03bf0208
  403e50:	03bf01e1 	.word	0x03bf01e1
  403e54:	03bf007e 	.word	0x03bf007e
  403e58:	020d03bf 	.word	0x020d03bf
  403e5c:	980d      	ldr	r0, [sp, #52]	; 0x34
  403e5e:	930f      	str	r3, [sp, #60]	; 0x3c
  403e60:	4240      	negs	r0, r0
  403e62:	900d      	str	r0, [sp, #52]	; 0x34
  403e64:	f04b 0b04 	orr.w	fp, fp, #4
  403e68:	f89a 3000 	ldrb.w	r3, [sl]
  403e6c:	e794      	b.n	403d98 <_svfprintf_r+0xb0>
  403e6e:	aa25      	add	r2, sp, #148	; 0x94
  403e70:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403e72:	980c      	ldr	r0, [sp, #48]	; 0x30
  403e74:	f003 f932 	bl	4070dc <__ssprint_r>
  403e78:	b940      	cbnz	r0, 403e8c <_svfprintf_r+0x1a4>
  403e7a:	46c8      	mov	r8, r9
  403e7c:	e779      	b.n	403d72 <_svfprintf_r+0x8a>
  403e7e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403e80:	b123      	cbz	r3, 403e8c <_svfprintf_r+0x1a4>
  403e82:	980c      	ldr	r0, [sp, #48]	; 0x30
  403e84:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403e86:	aa25      	add	r2, sp, #148	; 0x94
  403e88:	f003 f928 	bl	4070dc <__ssprint_r>
  403e8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403e8e:	899b      	ldrh	r3, [r3, #12]
  403e90:	f013 0f40 	tst.w	r3, #64	; 0x40
  403e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403e96:	bf18      	it	ne
  403e98:	f04f 33ff 	movne.w	r3, #4294967295
  403e9c:	9309      	str	r3, [sp, #36]	; 0x24
  403e9e:	9809      	ldr	r0, [sp, #36]	; 0x24
  403ea0:	b043      	add	sp, #268	; 0x10c
  403ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ea6:	f01b 0f20 	tst.w	fp, #32
  403eaa:	9311      	str	r3, [sp, #68]	; 0x44
  403eac:	f040 81dd 	bne.w	40426a <_svfprintf_r+0x582>
  403eb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403eb2:	f01b 0f10 	tst.w	fp, #16
  403eb6:	4613      	mov	r3, r2
  403eb8:	f040 856e 	bne.w	404998 <_svfprintf_r+0xcb0>
  403ebc:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403ec0:	f000 856a 	beq.w	404998 <_svfprintf_r+0xcb0>
  403ec4:	8814      	ldrh	r4, [r2, #0]
  403ec6:	3204      	adds	r2, #4
  403ec8:	2500      	movs	r5, #0
  403eca:	2301      	movs	r3, #1
  403ecc:	920f      	str	r2, [sp, #60]	; 0x3c
  403ece:	2700      	movs	r7, #0
  403ed0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403ed4:	990a      	ldr	r1, [sp, #40]	; 0x28
  403ed6:	1c4a      	adds	r2, r1, #1
  403ed8:	f000 8265 	beq.w	4043a6 <_svfprintf_r+0x6be>
  403edc:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403ee0:	9207      	str	r2, [sp, #28]
  403ee2:	ea54 0205 	orrs.w	r2, r4, r5
  403ee6:	f040 8264 	bne.w	4043b2 <_svfprintf_r+0x6ca>
  403eea:	2900      	cmp	r1, #0
  403eec:	f040 843c 	bne.w	404768 <_svfprintf_r+0xa80>
  403ef0:	2b00      	cmp	r3, #0
  403ef2:	f040 84d7 	bne.w	4048a4 <_svfprintf_r+0xbbc>
  403ef6:	f01b 0301 	ands.w	r3, fp, #1
  403efa:	930e      	str	r3, [sp, #56]	; 0x38
  403efc:	f000 8604 	beq.w	404b08 <_svfprintf_r+0xe20>
  403f00:	ae42      	add	r6, sp, #264	; 0x108
  403f02:	2330      	movs	r3, #48	; 0x30
  403f04:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403f0c:	4293      	cmp	r3, r2
  403f0e:	bfb8      	it	lt
  403f10:	4613      	movlt	r3, r2
  403f12:	9308      	str	r3, [sp, #32]
  403f14:	2300      	movs	r3, #0
  403f16:	9312      	str	r3, [sp, #72]	; 0x48
  403f18:	b117      	cbz	r7, 403f20 <_svfprintf_r+0x238>
  403f1a:	9b08      	ldr	r3, [sp, #32]
  403f1c:	3301      	adds	r3, #1
  403f1e:	9308      	str	r3, [sp, #32]
  403f20:	9b07      	ldr	r3, [sp, #28]
  403f22:	f013 0302 	ands.w	r3, r3, #2
  403f26:	9310      	str	r3, [sp, #64]	; 0x40
  403f28:	d002      	beq.n	403f30 <_svfprintf_r+0x248>
  403f2a:	9b08      	ldr	r3, [sp, #32]
  403f2c:	3302      	adds	r3, #2
  403f2e:	9308      	str	r3, [sp, #32]
  403f30:	9b07      	ldr	r3, [sp, #28]
  403f32:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  403f36:	f040 830e 	bne.w	404556 <_svfprintf_r+0x86e>
  403f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403f3c:	9a08      	ldr	r2, [sp, #32]
  403f3e:	eba3 0b02 	sub.w	fp, r3, r2
  403f42:	f1bb 0f00 	cmp.w	fp, #0
  403f46:	f340 8306 	ble.w	404556 <_svfprintf_r+0x86e>
  403f4a:	f1bb 0f10 	cmp.w	fp, #16
  403f4e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403f50:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403f52:	dd29      	ble.n	403fa8 <_svfprintf_r+0x2c0>
  403f54:	4643      	mov	r3, r8
  403f56:	4621      	mov	r1, r4
  403f58:	46a8      	mov	r8, r5
  403f5a:	2710      	movs	r7, #16
  403f5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403f5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403f60:	e006      	b.n	403f70 <_svfprintf_r+0x288>
  403f62:	f1ab 0b10 	sub.w	fp, fp, #16
  403f66:	f1bb 0f10 	cmp.w	fp, #16
  403f6a:	f103 0308 	add.w	r3, r3, #8
  403f6e:	dd18      	ble.n	403fa2 <_svfprintf_r+0x2ba>
  403f70:	3201      	adds	r2, #1
  403f72:	48b7      	ldr	r0, [pc, #732]	; (404250 <_svfprintf_r+0x568>)
  403f74:	9226      	str	r2, [sp, #152]	; 0x98
  403f76:	3110      	adds	r1, #16
  403f78:	2a07      	cmp	r2, #7
  403f7a:	9127      	str	r1, [sp, #156]	; 0x9c
  403f7c:	e883 0081 	stmia.w	r3, {r0, r7}
  403f80:	ddef      	ble.n	403f62 <_svfprintf_r+0x27a>
  403f82:	aa25      	add	r2, sp, #148	; 0x94
  403f84:	4629      	mov	r1, r5
  403f86:	4620      	mov	r0, r4
  403f88:	f003 f8a8 	bl	4070dc <__ssprint_r>
  403f8c:	2800      	cmp	r0, #0
  403f8e:	f47f af7d 	bne.w	403e8c <_svfprintf_r+0x1a4>
  403f92:	f1ab 0b10 	sub.w	fp, fp, #16
  403f96:	f1bb 0f10 	cmp.w	fp, #16
  403f9a:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403f9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403f9e:	464b      	mov	r3, r9
  403fa0:	dce6      	bgt.n	403f70 <_svfprintf_r+0x288>
  403fa2:	4645      	mov	r5, r8
  403fa4:	460c      	mov	r4, r1
  403fa6:	4698      	mov	r8, r3
  403fa8:	3201      	adds	r2, #1
  403faa:	4ba9      	ldr	r3, [pc, #676]	; (404250 <_svfprintf_r+0x568>)
  403fac:	9226      	str	r2, [sp, #152]	; 0x98
  403fae:	445c      	add	r4, fp
  403fb0:	2a07      	cmp	r2, #7
  403fb2:	9427      	str	r4, [sp, #156]	; 0x9c
  403fb4:	e888 0808 	stmia.w	r8, {r3, fp}
  403fb8:	f300 8498 	bgt.w	4048ec <_svfprintf_r+0xc04>
  403fbc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403fc0:	f108 0808 	add.w	r8, r8, #8
  403fc4:	b177      	cbz	r7, 403fe4 <_svfprintf_r+0x2fc>
  403fc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fc8:	3301      	adds	r3, #1
  403fca:	3401      	adds	r4, #1
  403fcc:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  403fd0:	2201      	movs	r2, #1
  403fd2:	2b07      	cmp	r3, #7
  403fd4:	9427      	str	r4, [sp, #156]	; 0x9c
  403fd6:	9326      	str	r3, [sp, #152]	; 0x98
  403fd8:	e888 0006 	stmia.w	r8, {r1, r2}
  403fdc:	f300 83db 	bgt.w	404796 <_svfprintf_r+0xaae>
  403fe0:	f108 0808 	add.w	r8, r8, #8
  403fe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403fe6:	b16b      	cbz	r3, 404004 <_svfprintf_r+0x31c>
  403fe8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fea:	3301      	adds	r3, #1
  403fec:	3402      	adds	r4, #2
  403fee:	a91e      	add	r1, sp, #120	; 0x78
  403ff0:	2202      	movs	r2, #2
  403ff2:	2b07      	cmp	r3, #7
  403ff4:	9427      	str	r4, [sp, #156]	; 0x9c
  403ff6:	9326      	str	r3, [sp, #152]	; 0x98
  403ff8:	e888 0006 	stmia.w	r8, {r1, r2}
  403ffc:	f300 83d6 	bgt.w	4047ac <_svfprintf_r+0xac4>
  404000:	f108 0808 	add.w	r8, r8, #8
  404004:	2d80      	cmp	r5, #128	; 0x80
  404006:	f000 8315 	beq.w	404634 <_svfprintf_r+0x94c>
  40400a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40400c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40400e:	1a9f      	subs	r7, r3, r2
  404010:	2f00      	cmp	r7, #0
  404012:	dd36      	ble.n	404082 <_svfprintf_r+0x39a>
  404014:	2f10      	cmp	r7, #16
  404016:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404018:	4d8e      	ldr	r5, [pc, #568]	; (404254 <_svfprintf_r+0x56c>)
  40401a:	dd27      	ble.n	40406c <_svfprintf_r+0x384>
  40401c:	4642      	mov	r2, r8
  40401e:	4621      	mov	r1, r4
  404020:	46b0      	mov	r8, r6
  404022:	f04f 0b10 	mov.w	fp, #16
  404026:	462e      	mov	r6, r5
  404028:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40402a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40402c:	e004      	b.n	404038 <_svfprintf_r+0x350>
  40402e:	3f10      	subs	r7, #16
  404030:	2f10      	cmp	r7, #16
  404032:	f102 0208 	add.w	r2, r2, #8
  404036:	dd15      	ble.n	404064 <_svfprintf_r+0x37c>
  404038:	3301      	adds	r3, #1
  40403a:	3110      	adds	r1, #16
  40403c:	2b07      	cmp	r3, #7
  40403e:	9127      	str	r1, [sp, #156]	; 0x9c
  404040:	9326      	str	r3, [sp, #152]	; 0x98
  404042:	e882 0840 	stmia.w	r2, {r6, fp}
  404046:	ddf2      	ble.n	40402e <_svfprintf_r+0x346>
  404048:	aa25      	add	r2, sp, #148	; 0x94
  40404a:	4629      	mov	r1, r5
  40404c:	4620      	mov	r0, r4
  40404e:	f003 f845 	bl	4070dc <__ssprint_r>
  404052:	2800      	cmp	r0, #0
  404054:	f47f af1a 	bne.w	403e8c <_svfprintf_r+0x1a4>
  404058:	3f10      	subs	r7, #16
  40405a:	2f10      	cmp	r7, #16
  40405c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40405e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404060:	464a      	mov	r2, r9
  404062:	dce9      	bgt.n	404038 <_svfprintf_r+0x350>
  404064:	4635      	mov	r5, r6
  404066:	460c      	mov	r4, r1
  404068:	4646      	mov	r6, r8
  40406a:	4690      	mov	r8, r2
  40406c:	3301      	adds	r3, #1
  40406e:	443c      	add	r4, r7
  404070:	2b07      	cmp	r3, #7
  404072:	9427      	str	r4, [sp, #156]	; 0x9c
  404074:	9326      	str	r3, [sp, #152]	; 0x98
  404076:	e888 00a0 	stmia.w	r8, {r5, r7}
  40407a:	f300 8381 	bgt.w	404780 <_svfprintf_r+0xa98>
  40407e:	f108 0808 	add.w	r8, r8, #8
  404082:	9b07      	ldr	r3, [sp, #28]
  404084:	05df      	lsls	r7, r3, #23
  404086:	f100 8268 	bmi.w	40455a <_svfprintf_r+0x872>
  40408a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40408c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40408e:	f8c8 6000 	str.w	r6, [r8]
  404092:	3301      	adds	r3, #1
  404094:	440c      	add	r4, r1
  404096:	2b07      	cmp	r3, #7
  404098:	9427      	str	r4, [sp, #156]	; 0x9c
  40409a:	f8c8 1004 	str.w	r1, [r8, #4]
  40409e:	9326      	str	r3, [sp, #152]	; 0x98
  4040a0:	f300 834d 	bgt.w	40473e <_svfprintf_r+0xa56>
  4040a4:	f108 0808 	add.w	r8, r8, #8
  4040a8:	9b07      	ldr	r3, [sp, #28]
  4040aa:	075b      	lsls	r3, r3, #29
  4040ac:	d53a      	bpl.n	404124 <_svfprintf_r+0x43c>
  4040ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4040b0:	9a08      	ldr	r2, [sp, #32]
  4040b2:	1a9d      	subs	r5, r3, r2
  4040b4:	2d00      	cmp	r5, #0
  4040b6:	dd35      	ble.n	404124 <_svfprintf_r+0x43c>
  4040b8:	2d10      	cmp	r5, #16
  4040ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040bc:	dd20      	ble.n	404100 <_svfprintf_r+0x418>
  4040be:	2610      	movs	r6, #16
  4040c0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4040c2:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4040c6:	e004      	b.n	4040d2 <_svfprintf_r+0x3ea>
  4040c8:	3d10      	subs	r5, #16
  4040ca:	2d10      	cmp	r5, #16
  4040cc:	f108 0808 	add.w	r8, r8, #8
  4040d0:	dd16      	ble.n	404100 <_svfprintf_r+0x418>
  4040d2:	3301      	adds	r3, #1
  4040d4:	4a5e      	ldr	r2, [pc, #376]	; (404250 <_svfprintf_r+0x568>)
  4040d6:	9326      	str	r3, [sp, #152]	; 0x98
  4040d8:	3410      	adds	r4, #16
  4040da:	2b07      	cmp	r3, #7
  4040dc:	9427      	str	r4, [sp, #156]	; 0x9c
  4040de:	e888 0044 	stmia.w	r8, {r2, r6}
  4040e2:	ddf1      	ble.n	4040c8 <_svfprintf_r+0x3e0>
  4040e4:	aa25      	add	r2, sp, #148	; 0x94
  4040e6:	4659      	mov	r1, fp
  4040e8:	4638      	mov	r0, r7
  4040ea:	f002 fff7 	bl	4070dc <__ssprint_r>
  4040ee:	2800      	cmp	r0, #0
  4040f0:	f47f aecc 	bne.w	403e8c <_svfprintf_r+0x1a4>
  4040f4:	3d10      	subs	r5, #16
  4040f6:	2d10      	cmp	r5, #16
  4040f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4040fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040fc:	46c8      	mov	r8, r9
  4040fe:	dce8      	bgt.n	4040d2 <_svfprintf_r+0x3ea>
  404100:	3301      	adds	r3, #1
  404102:	4a53      	ldr	r2, [pc, #332]	; (404250 <_svfprintf_r+0x568>)
  404104:	9326      	str	r3, [sp, #152]	; 0x98
  404106:	442c      	add	r4, r5
  404108:	2b07      	cmp	r3, #7
  40410a:	9427      	str	r4, [sp, #156]	; 0x9c
  40410c:	e888 0024 	stmia.w	r8, {r2, r5}
  404110:	dd08      	ble.n	404124 <_svfprintf_r+0x43c>
  404112:	aa25      	add	r2, sp, #148	; 0x94
  404114:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404116:	980c      	ldr	r0, [sp, #48]	; 0x30
  404118:	f002 ffe0 	bl	4070dc <__ssprint_r>
  40411c:	2800      	cmp	r0, #0
  40411e:	f47f aeb5 	bne.w	403e8c <_svfprintf_r+0x1a4>
  404122:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404124:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404126:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404128:	9908      	ldr	r1, [sp, #32]
  40412a:	428a      	cmp	r2, r1
  40412c:	bfac      	ite	ge
  40412e:	189b      	addge	r3, r3, r2
  404130:	185b      	addlt	r3, r3, r1
  404132:	9309      	str	r3, [sp, #36]	; 0x24
  404134:	2c00      	cmp	r4, #0
  404136:	f040 830d 	bne.w	404754 <_svfprintf_r+0xa6c>
  40413a:	2300      	movs	r3, #0
  40413c:	9326      	str	r3, [sp, #152]	; 0x98
  40413e:	46c8      	mov	r8, r9
  404140:	e5f9      	b.n	403d36 <_svfprintf_r+0x4e>
  404142:	9311      	str	r3, [sp, #68]	; 0x44
  404144:	f01b 0320 	ands.w	r3, fp, #32
  404148:	f040 81e3 	bne.w	404512 <_svfprintf_r+0x82a>
  40414c:	f01b 0210 	ands.w	r2, fp, #16
  404150:	f040 842e 	bne.w	4049b0 <_svfprintf_r+0xcc8>
  404154:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404158:	f000 842a 	beq.w	4049b0 <_svfprintf_r+0xcc8>
  40415c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40415e:	4613      	mov	r3, r2
  404160:	460a      	mov	r2, r1
  404162:	3204      	adds	r2, #4
  404164:	880c      	ldrh	r4, [r1, #0]
  404166:	920f      	str	r2, [sp, #60]	; 0x3c
  404168:	2500      	movs	r5, #0
  40416a:	e6b0      	b.n	403ece <_svfprintf_r+0x1e6>
  40416c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40416e:	9311      	str	r3, [sp, #68]	; 0x44
  404170:	6816      	ldr	r6, [r2, #0]
  404172:	2400      	movs	r4, #0
  404174:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  404178:	1d15      	adds	r5, r2, #4
  40417a:	2e00      	cmp	r6, #0
  40417c:	f000 86a7 	beq.w	404ece <_svfprintf_r+0x11e6>
  404180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404182:	1c53      	adds	r3, r2, #1
  404184:	f000 8609 	beq.w	404d9a <_svfprintf_r+0x10b2>
  404188:	4621      	mov	r1, r4
  40418a:	4630      	mov	r0, r6
  40418c:	f002 fa88 	bl	4066a0 <memchr>
  404190:	2800      	cmp	r0, #0
  404192:	f000 86e1 	beq.w	404f58 <_svfprintf_r+0x1270>
  404196:	1b83      	subs	r3, r0, r6
  404198:	930e      	str	r3, [sp, #56]	; 0x38
  40419a:	940a      	str	r4, [sp, #40]	; 0x28
  40419c:	950f      	str	r5, [sp, #60]	; 0x3c
  40419e:	f8cd b01c 	str.w	fp, [sp, #28]
  4041a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4041a6:	9308      	str	r3, [sp, #32]
  4041a8:	9412      	str	r4, [sp, #72]	; 0x48
  4041aa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4041ae:	e6b3      	b.n	403f18 <_svfprintf_r+0x230>
  4041b0:	f89a 3000 	ldrb.w	r3, [sl]
  4041b4:	2201      	movs	r2, #1
  4041b6:	212b      	movs	r1, #43	; 0x2b
  4041b8:	e5ee      	b.n	403d98 <_svfprintf_r+0xb0>
  4041ba:	f04b 0b20 	orr.w	fp, fp, #32
  4041be:	f89a 3000 	ldrb.w	r3, [sl]
  4041c2:	e5e9      	b.n	403d98 <_svfprintf_r+0xb0>
  4041c4:	9311      	str	r3, [sp, #68]	; 0x44
  4041c6:	2a00      	cmp	r2, #0
  4041c8:	f040 8795 	bne.w	4050f6 <_svfprintf_r+0x140e>
  4041cc:	4b22      	ldr	r3, [pc, #136]	; (404258 <_svfprintf_r+0x570>)
  4041ce:	9318      	str	r3, [sp, #96]	; 0x60
  4041d0:	f01b 0f20 	tst.w	fp, #32
  4041d4:	f040 8111 	bne.w	4043fa <_svfprintf_r+0x712>
  4041d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4041da:	f01b 0f10 	tst.w	fp, #16
  4041de:	4613      	mov	r3, r2
  4041e0:	f040 83e1 	bne.w	4049a6 <_svfprintf_r+0xcbe>
  4041e4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4041e8:	f000 83dd 	beq.w	4049a6 <_svfprintf_r+0xcbe>
  4041ec:	3304      	adds	r3, #4
  4041ee:	8814      	ldrh	r4, [r2, #0]
  4041f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4041f2:	2500      	movs	r5, #0
  4041f4:	f01b 0f01 	tst.w	fp, #1
  4041f8:	f000 810c 	beq.w	404414 <_svfprintf_r+0x72c>
  4041fc:	ea54 0305 	orrs.w	r3, r4, r5
  404200:	f000 8108 	beq.w	404414 <_svfprintf_r+0x72c>
  404204:	2330      	movs	r3, #48	; 0x30
  404206:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40420a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  40420e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  404212:	f04b 0b02 	orr.w	fp, fp, #2
  404216:	2302      	movs	r3, #2
  404218:	e659      	b.n	403ece <_svfprintf_r+0x1e6>
  40421a:	f89a 3000 	ldrb.w	r3, [sl]
  40421e:	2900      	cmp	r1, #0
  404220:	f47f adba 	bne.w	403d98 <_svfprintf_r+0xb0>
  404224:	2201      	movs	r2, #1
  404226:	2120      	movs	r1, #32
  404228:	e5b6      	b.n	403d98 <_svfprintf_r+0xb0>
  40422a:	f04b 0b01 	orr.w	fp, fp, #1
  40422e:	f89a 3000 	ldrb.w	r3, [sl]
  404232:	e5b1      	b.n	403d98 <_svfprintf_r+0xb0>
  404234:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404236:	6823      	ldr	r3, [r4, #0]
  404238:	930d      	str	r3, [sp, #52]	; 0x34
  40423a:	4618      	mov	r0, r3
  40423c:	2800      	cmp	r0, #0
  40423e:	4623      	mov	r3, r4
  404240:	f103 0304 	add.w	r3, r3, #4
  404244:	f6ff ae0a 	blt.w	403e5c <_svfprintf_r+0x174>
  404248:	930f      	str	r3, [sp, #60]	; 0x3c
  40424a:	f89a 3000 	ldrb.w	r3, [sl]
  40424e:	e5a3      	b.n	403d98 <_svfprintf_r+0xb0>
  404250:	0040907c 	.word	0x0040907c
  404254:	0040908c 	.word	0x0040908c
  404258:	0040905c 	.word	0x0040905c
  40425c:	f04b 0b10 	orr.w	fp, fp, #16
  404260:	f01b 0f20 	tst.w	fp, #32
  404264:	9311      	str	r3, [sp, #68]	; 0x44
  404266:	f43f ae23 	beq.w	403eb0 <_svfprintf_r+0x1c8>
  40426a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40426c:	3507      	adds	r5, #7
  40426e:	f025 0307 	bic.w	r3, r5, #7
  404272:	f103 0208 	add.w	r2, r3, #8
  404276:	e9d3 4500 	ldrd	r4, r5, [r3]
  40427a:	920f      	str	r2, [sp, #60]	; 0x3c
  40427c:	2301      	movs	r3, #1
  40427e:	e626      	b.n	403ece <_svfprintf_r+0x1e6>
  404280:	f89a 3000 	ldrb.w	r3, [sl]
  404284:	2b2a      	cmp	r3, #42	; 0x2a
  404286:	f10a 0401 	add.w	r4, sl, #1
  40428a:	f000 8727 	beq.w	4050dc <_svfprintf_r+0x13f4>
  40428e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404292:	2809      	cmp	r0, #9
  404294:	46a2      	mov	sl, r4
  404296:	f200 86ad 	bhi.w	404ff4 <_svfprintf_r+0x130c>
  40429a:	2300      	movs	r3, #0
  40429c:	461c      	mov	r4, r3
  40429e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4042a2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4042a6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4042aa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4042ae:	2809      	cmp	r0, #9
  4042b0:	d9f5      	bls.n	40429e <_svfprintf_r+0x5b6>
  4042b2:	940a      	str	r4, [sp, #40]	; 0x28
  4042b4:	e572      	b.n	403d9c <_svfprintf_r+0xb4>
  4042b6:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4042ba:	f89a 3000 	ldrb.w	r3, [sl]
  4042be:	e56b      	b.n	403d98 <_svfprintf_r+0xb0>
  4042c0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4042c4:	f89a 3000 	ldrb.w	r3, [sl]
  4042c8:	e566      	b.n	403d98 <_svfprintf_r+0xb0>
  4042ca:	f89a 3000 	ldrb.w	r3, [sl]
  4042ce:	2b6c      	cmp	r3, #108	; 0x6c
  4042d0:	bf03      	ittte	eq
  4042d2:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  4042d6:	f04b 0b20 	orreq.w	fp, fp, #32
  4042da:	f10a 0a01 	addeq.w	sl, sl, #1
  4042de:	f04b 0b10 	orrne.w	fp, fp, #16
  4042e2:	e559      	b.n	403d98 <_svfprintf_r+0xb0>
  4042e4:	2a00      	cmp	r2, #0
  4042e6:	f040 8711 	bne.w	40510c <_svfprintf_r+0x1424>
  4042ea:	f01b 0f20 	tst.w	fp, #32
  4042ee:	f040 84f9 	bne.w	404ce4 <_svfprintf_r+0xffc>
  4042f2:	f01b 0f10 	tst.w	fp, #16
  4042f6:	f040 84ac 	bne.w	404c52 <_svfprintf_r+0xf6a>
  4042fa:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4042fe:	f000 84a8 	beq.w	404c52 <_svfprintf_r+0xf6a>
  404302:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404304:	6813      	ldr	r3, [r2, #0]
  404306:	3204      	adds	r2, #4
  404308:	920f      	str	r2, [sp, #60]	; 0x3c
  40430a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40430e:	801a      	strh	r2, [r3, #0]
  404310:	e511      	b.n	403d36 <_svfprintf_r+0x4e>
  404312:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404314:	4bb3      	ldr	r3, [pc, #716]	; (4045e4 <_svfprintf_r+0x8fc>)
  404316:	680c      	ldr	r4, [r1, #0]
  404318:	9318      	str	r3, [sp, #96]	; 0x60
  40431a:	2230      	movs	r2, #48	; 0x30
  40431c:	2378      	movs	r3, #120	; 0x78
  40431e:	3104      	adds	r1, #4
  404320:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404324:	9311      	str	r3, [sp, #68]	; 0x44
  404326:	f04b 0b02 	orr.w	fp, fp, #2
  40432a:	910f      	str	r1, [sp, #60]	; 0x3c
  40432c:	2500      	movs	r5, #0
  40432e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  404332:	2302      	movs	r3, #2
  404334:	e5cb      	b.n	403ece <_svfprintf_r+0x1e6>
  404336:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404338:	9311      	str	r3, [sp, #68]	; 0x44
  40433a:	680a      	ldr	r2, [r1, #0]
  40433c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404340:	2300      	movs	r3, #0
  404342:	460a      	mov	r2, r1
  404344:	461f      	mov	r7, r3
  404346:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40434a:	3204      	adds	r2, #4
  40434c:	2301      	movs	r3, #1
  40434e:	9308      	str	r3, [sp, #32]
  404350:	f8cd b01c 	str.w	fp, [sp, #28]
  404354:	970a      	str	r7, [sp, #40]	; 0x28
  404356:	9712      	str	r7, [sp, #72]	; 0x48
  404358:	920f      	str	r2, [sp, #60]	; 0x3c
  40435a:	930e      	str	r3, [sp, #56]	; 0x38
  40435c:	ae28      	add	r6, sp, #160	; 0xa0
  40435e:	e5df      	b.n	403f20 <_svfprintf_r+0x238>
  404360:	9311      	str	r3, [sp, #68]	; 0x44
  404362:	2a00      	cmp	r2, #0
  404364:	f040 86ea 	bne.w	40513c <_svfprintf_r+0x1454>
  404368:	f01b 0f20 	tst.w	fp, #32
  40436c:	d15d      	bne.n	40442a <_svfprintf_r+0x742>
  40436e:	f01b 0f10 	tst.w	fp, #16
  404372:	f040 8308 	bne.w	404986 <_svfprintf_r+0xc9e>
  404376:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40437a:	f000 8304 	beq.w	404986 <_svfprintf_r+0xc9e>
  40437e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404380:	f9b1 4000 	ldrsh.w	r4, [r1]
  404384:	3104      	adds	r1, #4
  404386:	17e5      	asrs	r5, r4, #31
  404388:	4622      	mov	r2, r4
  40438a:	462b      	mov	r3, r5
  40438c:	910f      	str	r1, [sp, #60]	; 0x3c
  40438e:	2a00      	cmp	r2, #0
  404390:	f173 0300 	sbcs.w	r3, r3, #0
  404394:	db58      	blt.n	404448 <_svfprintf_r+0x760>
  404396:	990a      	ldr	r1, [sp, #40]	; 0x28
  404398:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40439c:	1c4a      	adds	r2, r1, #1
  40439e:	f04f 0301 	mov.w	r3, #1
  4043a2:	f47f ad9b 	bne.w	403edc <_svfprintf_r+0x1f4>
  4043a6:	ea54 0205 	orrs.w	r2, r4, r5
  4043aa:	f000 81df 	beq.w	40476c <_svfprintf_r+0xa84>
  4043ae:	f8cd b01c 	str.w	fp, [sp, #28]
  4043b2:	2b01      	cmp	r3, #1
  4043b4:	f000 827b 	beq.w	4048ae <_svfprintf_r+0xbc6>
  4043b8:	2b02      	cmp	r3, #2
  4043ba:	f040 8206 	bne.w	4047ca <_svfprintf_r+0xae2>
  4043be:	9818      	ldr	r0, [sp, #96]	; 0x60
  4043c0:	464e      	mov	r6, r9
  4043c2:	0923      	lsrs	r3, r4, #4
  4043c4:	f004 010f 	and.w	r1, r4, #15
  4043c8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4043cc:	092a      	lsrs	r2, r5, #4
  4043ce:	461c      	mov	r4, r3
  4043d0:	4615      	mov	r5, r2
  4043d2:	5c43      	ldrb	r3, [r0, r1]
  4043d4:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4043d8:	ea54 0305 	orrs.w	r3, r4, r5
  4043dc:	d1f1      	bne.n	4043c2 <_svfprintf_r+0x6da>
  4043de:	eba9 0306 	sub.w	r3, r9, r6
  4043e2:	930e      	str	r3, [sp, #56]	; 0x38
  4043e4:	e590      	b.n	403f08 <_svfprintf_r+0x220>
  4043e6:	9311      	str	r3, [sp, #68]	; 0x44
  4043e8:	2a00      	cmp	r2, #0
  4043ea:	f040 86a3 	bne.w	405134 <_svfprintf_r+0x144c>
  4043ee:	4b7e      	ldr	r3, [pc, #504]	; (4045e8 <_svfprintf_r+0x900>)
  4043f0:	9318      	str	r3, [sp, #96]	; 0x60
  4043f2:	f01b 0f20 	tst.w	fp, #32
  4043f6:	f43f aeef 	beq.w	4041d8 <_svfprintf_r+0x4f0>
  4043fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4043fc:	3507      	adds	r5, #7
  4043fe:	f025 0307 	bic.w	r3, r5, #7
  404402:	f103 0208 	add.w	r2, r3, #8
  404406:	f01b 0f01 	tst.w	fp, #1
  40440a:	920f      	str	r2, [sp, #60]	; 0x3c
  40440c:	e9d3 4500 	ldrd	r4, r5, [r3]
  404410:	f47f aef4 	bne.w	4041fc <_svfprintf_r+0x514>
  404414:	2302      	movs	r3, #2
  404416:	e55a      	b.n	403ece <_svfprintf_r+0x1e6>
  404418:	9311      	str	r3, [sp, #68]	; 0x44
  40441a:	2a00      	cmp	r2, #0
  40441c:	f040 8686 	bne.w	40512c <_svfprintf_r+0x1444>
  404420:	f04b 0b10 	orr.w	fp, fp, #16
  404424:	f01b 0f20 	tst.w	fp, #32
  404428:	d0a1      	beq.n	40436e <_svfprintf_r+0x686>
  40442a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40442c:	3507      	adds	r5, #7
  40442e:	f025 0507 	bic.w	r5, r5, #7
  404432:	e9d5 2300 	ldrd	r2, r3, [r5]
  404436:	2a00      	cmp	r2, #0
  404438:	f105 0108 	add.w	r1, r5, #8
  40443c:	461d      	mov	r5, r3
  40443e:	f173 0300 	sbcs.w	r3, r3, #0
  404442:	910f      	str	r1, [sp, #60]	; 0x3c
  404444:	4614      	mov	r4, r2
  404446:	daa6      	bge.n	404396 <_svfprintf_r+0x6ae>
  404448:	272d      	movs	r7, #45	; 0x2d
  40444a:	4264      	negs	r4, r4
  40444c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404450:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404454:	2301      	movs	r3, #1
  404456:	e53d      	b.n	403ed4 <_svfprintf_r+0x1ec>
  404458:	9311      	str	r3, [sp, #68]	; 0x44
  40445a:	2a00      	cmp	r2, #0
  40445c:	f040 8662 	bne.w	405124 <_svfprintf_r+0x143c>
  404460:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404462:	3507      	adds	r5, #7
  404464:	f025 0307 	bic.w	r3, r5, #7
  404468:	f103 0208 	add.w	r2, r3, #8
  40446c:	920f      	str	r2, [sp, #60]	; 0x3c
  40446e:	681a      	ldr	r2, [r3, #0]
  404470:	9215      	str	r2, [sp, #84]	; 0x54
  404472:	685b      	ldr	r3, [r3, #4]
  404474:	9314      	str	r3, [sp, #80]	; 0x50
  404476:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404478:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40447a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40447e:	4628      	mov	r0, r5
  404480:	4621      	mov	r1, r4
  404482:	f04f 32ff 	mov.w	r2, #4294967295
  404486:	4b59      	ldr	r3, [pc, #356]	; (4045ec <_svfprintf_r+0x904>)
  404488:	f003 feee 	bl	408268 <__aeabi_dcmpun>
  40448c:	2800      	cmp	r0, #0
  40448e:	f040 834a 	bne.w	404b26 <_svfprintf_r+0xe3e>
  404492:	4628      	mov	r0, r5
  404494:	4621      	mov	r1, r4
  404496:	f04f 32ff 	mov.w	r2, #4294967295
  40449a:	4b54      	ldr	r3, [pc, #336]	; (4045ec <_svfprintf_r+0x904>)
  40449c:	f003 fec6 	bl	40822c <__aeabi_dcmple>
  4044a0:	2800      	cmp	r0, #0
  4044a2:	f040 8340 	bne.w	404b26 <_svfprintf_r+0xe3e>
  4044a6:	a815      	add	r0, sp, #84	; 0x54
  4044a8:	c80d      	ldmia	r0, {r0, r2, r3}
  4044aa:	9914      	ldr	r1, [sp, #80]	; 0x50
  4044ac:	f003 feb4 	bl	408218 <__aeabi_dcmplt>
  4044b0:	2800      	cmp	r0, #0
  4044b2:	f040 8530 	bne.w	404f16 <_svfprintf_r+0x122e>
  4044b6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4044ba:	4e4d      	ldr	r6, [pc, #308]	; (4045f0 <_svfprintf_r+0x908>)
  4044bc:	4b4d      	ldr	r3, [pc, #308]	; (4045f4 <_svfprintf_r+0x90c>)
  4044be:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4044c2:	9007      	str	r0, [sp, #28]
  4044c4:	9811      	ldr	r0, [sp, #68]	; 0x44
  4044c6:	2203      	movs	r2, #3
  4044c8:	2100      	movs	r1, #0
  4044ca:	9208      	str	r2, [sp, #32]
  4044cc:	910a      	str	r1, [sp, #40]	; 0x28
  4044ce:	2847      	cmp	r0, #71	; 0x47
  4044d0:	bfd8      	it	le
  4044d2:	461e      	movle	r6, r3
  4044d4:	920e      	str	r2, [sp, #56]	; 0x38
  4044d6:	9112      	str	r1, [sp, #72]	; 0x48
  4044d8:	e51e      	b.n	403f18 <_svfprintf_r+0x230>
  4044da:	f04b 0b08 	orr.w	fp, fp, #8
  4044de:	f89a 3000 	ldrb.w	r3, [sl]
  4044e2:	e459      	b.n	403d98 <_svfprintf_r+0xb0>
  4044e4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4044e8:	2300      	movs	r3, #0
  4044ea:	461c      	mov	r4, r3
  4044ec:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4044f0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4044f4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4044f8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4044fc:	2809      	cmp	r0, #9
  4044fe:	d9f5      	bls.n	4044ec <_svfprintf_r+0x804>
  404500:	940d      	str	r4, [sp, #52]	; 0x34
  404502:	e44b      	b.n	403d9c <_svfprintf_r+0xb4>
  404504:	f04b 0b10 	orr.w	fp, fp, #16
  404508:	9311      	str	r3, [sp, #68]	; 0x44
  40450a:	f01b 0320 	ands.w	r3, fp, #32
  40450e:	f43f ae1d 	beq.w	40414c <_svfprintf_r+0x464>
  404512:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404514:	3507      	adds	r5, #7
  404516:	f025 0307 	bic.w	r3, r5, #7
  40451a:	f103 0208 	add.w	r2, r3, #8
  40451e:	e9d3 4500 	ldrd	r4, r5, [r3]
  404522:	920f      	str	r2, [sp, #60]	; 0x3c
  404524:	2300      	movs	r3, #0
  404526:	e4d2      	b.n	403ece <_svfprintf_r+0x1e6>
  404528:	9311      	str	r3, [sp, #68]	; 0x44
  40452a:	2a00      	cmp	r2, #0
  40452c:	f040 85e7 	bne.w	4050fe <_svfprintf_r+0x1416>
  404530:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404532:	2a00      	cmp	r2, #0
  404534:	f43f aca3 	beq.w	403e7e <_svfprintf_r+0x196>
  404538:	2300      	movs	r3, #0
  40453a:	2101      	movs	r1, #1
  40453c:	461f      	mov	r7, r3
  40453e:	9108      	str	r1, [sp, #32]
  404540:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404544:	f8cd b01c 	str.w	fp, [sp, #28]
  404548:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40454c:	930a      	str	r3, [sp, #40]	; 0x28
  40454e:	9312      	str	r3, [sp, #72]	; 0x48
  404550:	910e      	str	r1, [sp, #56]	; 0x38
  404552:	ae28      	add	r6, sp, #160	; 0xa0
  404554:	e4e4      	b.n	403f20 <_svfprintf_r+0x238>
  404556:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404558:	e534      	b.n	403fc4 <_svfprintf_r+0x2dc>
  40455a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40455c:	2b65      	cmp	r3, #101	; 0x65
  40455e:	f340 80a7 	ble.w	4046b0 <_svfprintf_r+0x9c8>
  404562:	a815      	add	r0, sp, #84	; 0x54
  404564:	c80d      	ldmia	r0, {r0, r2, r3}
  404566:	9914      	ldr	r1, [sp, #80]	; 0x50
  404568:	f003 fe4c 	bl	408204 <__aeabi_dcmpeq>
  40456c:	2800      	cmp	r0, #0
  40456e:	f000 8150 	beq.w	404812 <_svfprintf_r+0xb2a>
  404572:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404574:	4a20      	ldr	r2, [pc, #128]	; (4045f8 <_svfprintf_r+0x910>)
  404576:	f8c8 2000 	str.w	r2, [r8]
  40457a:	3301      	adds	r3, #1
  40457c:	3401      	adds	r4, #1
  40457e:	2201      	movs	r2, #1
  404580:	2b07      	cmp	r3, #7
  404582:	9427      	str	r4, [sp, #156]	; 0x9c
  404584:	9326      	str	r3, [sp, #152]	; 0x98
  404586:	f8c8 2004 	str.w	r2, [r8, #4]
  40458a:	f300 836a 	bgt.w	404c62 <_svfprintf_r+0xf7a>
  40458e:	f108 0808 	add.w	r8, r8, #8
  404592:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404594:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404596:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404598:	4293      	cmp	r3, r2
  40459a:	db03      	blt.n	4045a4 <_svfprintf_r+0x8bc>
  40459c:	9b07      	ldr	r3, [sp, #28]
  40459e:	07dd      	lsls	r5, r3, #31
  4045a0:	f57f ad82 	bpl.w	4040a8 <_svfprintf_r+0x3c0>
  4045a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4045a6:	9919      	ldr	r1, [sp, #100]	; 0x64
  4045a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4045aa:	f8c8 2000 	str.w	r2, [r8]
  4045ae:	3301      	adds	r3, #1
  4045b0:	440c      	add	r4, r1
  4045b2:	2b07      	cmp	r3, #7
  4045b4:	f8c8 1004 	str.w	r1, [r8, #4]
  4045b8:	9427      	str	r4, [sp, #156]	; 0x9c
  4045ba:	9326      	str	r3, [sp, #152]	; 0x98
  4045bc:	f300 839e 	bgt.w	404cfc <_svfprintf_r+0x1014>
  4045c0:	f108 0808 	add.w	r8, r8, #8
  4045c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4045c6:	1e5e      	subs	r6, r3, #1
  4045c8:	2e00      	cmp	r6, #0
  4045ca:	f77f ad6d 	ble.w	4040a8 <_svfprintf_r+0x3c0>
  4045ce:	2e10      	cmp	r6, #16
  4045d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4045d2:	4d0a      	ldr	r5, [pc, #40]	; (4045fc <_svfprintf_r+0x914>)
  4045d4:	f340 81f5 	ble.w	4049c2 <_svfprintf_r+0xcda>
  4045d8:	4622      	mov	r2, r4
  4045da:	2710      	movs	r7, #16
  4045dc:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4045e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4045e2:	e013      	b.n	40460c <_svfprintf_r+0x924>
  4045e4:	0040905c 	.word	0x0040905c
  4045e8:	00409048 	.word	0x00409048
  4045ec:	7fefffff 	.word	0x7fefffff
  4045f0:	0040903c 	.word	0x0040903c
  4045f4:	00409038 	.word	0x00409038
  4045f8:	00409078 	.word	0x00409078
  4045fc:	0040908c 	.word	0x0040908c
  404600:	f108 0808 	add.w	r8, r8, #8
  404604:	3e10      	subs	r6, #16
  404606:	2e10      	cmp	r6, #16
  404608:	f340 81da 	ble.w	4049c0 <_svfprintf_r+0xcd8>
  40460c:	3301      	adds	r3, #1
  40460e:	3210      	adds	r2, #16
  404610:	2b07      	cmp	r3, #7
  404612:	9227      	str	r2, [sp, #156]	; 0x9c
  404614:	9326      	str	r3, [sp, #152]	; 0x98
  404616:	e888 00a0 	stmia.w	r8, {r5, r7}
  40461a:	ddf1      	ble.n	404600 <_svfprintf_r+0x918>
  40461c:	aa25      	add	r2, sp, #148	; 0x94
  40461e:	4621      	mov	r1, r4
  404620:	4658      	mov	r0, fp
  404622:	f002 fd5b 	bl	4070dc <__ssprint_r>
  404626:	2800      	cmp	r0, #0
  404628:	f47f ac30 	bne.w	403e8c <_svfprintf_r+0x1a4>
  40462c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40462e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404630:	46c8      	mov	r8, r9
  404632:	e7e7      	b.n	404604 <_svfprintf_r+0x91c>
  404634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404636:	9a08      	ldr	r2, [sp, #32]
  404638:	1a9f      	subs	r7, r3, r2
  40463a:	2f00      	cmp	r7, #0
  40463c:	f77f ace5 	ble.w	40400a <_svfprintf_r+0x322>
  404640:	2f10      	cmp	r7, #16
  404642:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404644:	4db6      	ldr	r5, [pc, #728]	; (404920 <_svfprintf_r+0xc38>)
  404646:	dd27      	ble.n	404698 <_svfprintf_r+0x9b0>
  404648:	4642      	mov	r2, r8
  40464a:	4621      	mov	r1, r4
  40464c:	46b0      	mov	r8, r6
  40464e:	f04f 0b10 	mov.w	fp, #16
  404652:	462e      	mov	r6, r5
  404654:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404656:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404658:	e004      	b.n	404664 <_svfprintf_r+0x97c>
  40465a:	3f10      	subs	r7, #16
  40465c:	2f10      	cmp	r7, #16
  40465e:	f102 0208 	add.w	r2, r2, #8
  404662:	dd15      	ble.n	404690 <_svfprintf_r+0x9a8>
  404664:	3301      	adds	r3, #1
  404666:	3110      	adds	r1, #16
  404668:	2b07      	cmp	r3, #7
  40466a:	9127      	str	r1, [sp, #156]	; 0x9c
  40466c:	9326      	str	r3, [sp, #152]	; 0x98
  40466e:	e882 0840 	stmia.w	r2, {r6, fp}
  404672:	ddf2      	ble.n	40465a <_svfprintf_r+0x972>
  404674:	aa25      	add	r2, sp, #148	; 0x94
  404676:	4629      	mov	r1, r5
  404678:	4620      	mov	r0, r4
  40467a:	f002 fd2f 	bl	4070dc <__ssprint_r>
  40467e:	2800      	cmp	r0, #0
  404680:	f47f ac04 	bne.w	403e8c <_svfprintf_r+0x1a4>
  404684:	3f10      	subs	r7, #16
  404686:	2f10      	cmp	r7, #16
  404688:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40468a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40468c:	464a      	mov	r2, r9
  40468e:	dce9      	bgt.n	404664 <_svfprintf_r+0x97c>
  404690:	4635      	mov	r5, r6
  404692:	460c      	mov	r4, r1
  404694:	4646      	mov	r6, r8
  404696:	4690      	mov	r8, r2
  404698:	3301      	adds	r3, #1
  40469a:	443c      	add	r4, r7
  40469c:	2b07      	cmp	r3, #7
  40469e:	9427      	str	r4, [sp, #156]	; 0x9c
  4046a0:	9326      	str	r3, [sp, #152]	; 0x98
  4046a2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4046a6:	f300 8232 	bgt.w	404b0e <_svfprintf_r+0xe26>
  4046aa:	f108 0808 	add.w	r8, r8, #8
  4046ae:	e4ac      	b.n	40400a <_svfprintf_r+0x322>
  4046b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4046b2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4046b4:	2b01      	cmp	r3, #1
  4046b6:	f340 81fe 	ble.w	404ab6 <_svfprintf_r+0xdce>
  4046ba:	3701      	adds	r7, #1
  4046bc:	3401      	adds	r4, #1
  4046be:	2301      	movs	r3, #1
  4046c0:	2f07      	cmp	r7, #7
  4046c2:	9427      	str	r4, [sp, #156]	; 0x9c
  4046c4:	9726      	str	r7, [sp, #152]	; 0x98
  4046c6:	f8c8 6000 	str.w	r6, [r8]
  4046ca:	f8c8 3004 	str.w	r3, [r8, #4]
  4046ce:	f300 8203 	bgt.w	404ad8 <_svfprintf_r+0xdf0>
  4046d2:	f108 0808 	add.w	r8, r8, #8
  4046d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4046d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4046da:	f8c8 3000 	str.w	r3, [r8]
  4046de:	3701      	adds	r7, #1
  4046e0:	4414      	add	r4, r2
  4046e2:	2f07      	cmp	r7, #7
  4046e4:	9427      	str	r4, [sp, #156]	; 0x9c
  4046e6:	9726      	str	r7, [sp, #152]	; 0x98
  4046e8:	f8c8 2004 	str.w	r2, [r8, #4]
  4046ec:	f300 8200 	bgt.w	404af0 <_svfprintf_r+0xe08>
  4046f0:	f108 0808 	add.w	r8, r8, #8
  4046f4:	a815      	add	r0, sp, #84	; 0x54
  4046f6:	c80d      	ldmia	r0, {r0, r2, r3}
  4046f8:	9914      	ldr	r1, [sp, #80]	; 0x50
  4046fa:	f003 fd83 	bl	408204 <__aeabi_dcmpeq>
  4046fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404700:	2800      	cmp	r0, #0
  404702:	f040 8101 	bne.w	404908 <_svfprintf_r+0xc20>
  404706:	3b01      	subs	r3, #1
  404708:	3701      	adds	r7, #1
  40470a:	3601      	adds	r6, #1
  40470c:	441c      	add	r4, r3
  40470e:	2f07      	cmp	r7, #7
  404710:	9726      	str	r7, [sp, #152]	; 0x98
  404712:	9427      	str	r4, [sp, #156]	; 0x9c
  404714:	f8c8 6000 	str.w	r6, [r8]
  404718:	f8c8 3004 	str.w	r3, [r8, #4]
  40471c:	f300 8127 	bgt.w	40496e <_svfprintf_r+0xc86>
  404720:	f108 0808 	add.w	r8, r8, #8
  404724:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  404726:	f8c8 2004 	str.w	r2, [r8, #4]
  40472a:	3701      	adds	r7, #1
  40472c:	4414      	add	r4, r2
  40472e:	ab21      	add	r3, sp, #132	; 0x84
  404730:	2f07      	cmp	r7, #7
  404732:	9427      	str	r4, [sp, #156]	; 0x9c
  404734:	9726      	str	r7, [sp, #152]	; 0x98
  404736:	f8c8 3000 	str.w	r3, [r8]
  40473a:	f77f acb3 	ble.w	4040a4 <_svfprintf_r+0x3bc>
  40473e:	aa25      	add	r2, sp, #148	; 0x94
  404740:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404742:	980c      	ldr	r0, [sp, #48]	; 0x30
  404744:	f002 fcca 	bl	4070dc <__ssprint_r>
  404748:	2800      	cmp	r0, #0
  40474a:	f47f ab9f 	bne.w	403e8c <_svfprintf_r+0x1a4>
  40474e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404750:	46c8      	mov	r8, r9
  404752:	e4a9      	b.n	4040a8 <_svfprintf_r+0x3c0>
  404754:	aa25      	add	r2, sp, #148	; 0x94
  404756:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404758:	980c      	ldr	r0, [sp, #48]	; 0x30
  40475a:	f002 fcbf 	bl	4070dc <__ssprint_r>
  40475e:	2800      	cmp	r0, #0
  404760:	f43f aceb 	beq.w	40413a <_svfprintf_r+0x452>
  404764:	f7ff bb92 	b.w	403e8c <_svfprintf_r+0x1a4>
  404768:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40476c:	2b01      	cmp	r3, #1
  40476e:	f000 8134 	beq.w	4049da <_svfprintf_r+0xcf2>
  404772:	2b02      	cmp	r3, #2
  404774:	d125      	bne.n	4047c2 <_svfprintf_r+0xada>
  404776:	f8cd b01c 	str.w	fp, [sp, #28]
  40477a:	2400      	movs	r4, #0
  40477c:	2500      	movs	r5, #0
  40477e:	e61e      	b.n	4043be <_svfprintf_r+0x6d6>
  404780:	aa25      	add	r2, sp, #148	; 0x94
  404782:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404784:	980c      	ldr	r0, [sp, #48]	; 0x30
  404786:	f002 fca9 	bl	4070dc <__ssprint_r>
  40478a:	2800      	cmp	r0, #0
  40478c:	f47f ab7e 	bne.w	403e8c <_svfprintf_r+0x1a4>
  404790:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404792:	46c8      	mov	r8, r9
  404794:	e475      	b.n	404082 <_svfprintf_r+0x39a>
  404796:	aa25      	add	r2, sp, #148	; 0x94
  404798:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40479a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40479c:	f002 fc9e 	bl	4070dc <__ssprint_r>
  4047a0:	2800      	cmp	r0, #0
  4047a2:	f47f ab73 	bne.w	403e8c <_svfprintf_r+0x1a4>
  4047a6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047a8:	46c8      	mov	r8, r9
  4047aa:	e41b      	b.n	403fe4 <_svfprintf_r+0x2fc>
  4047ac:	aa25      	add	r2, sp, #148	; 0x94
  4047ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4047b0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047b2:	f002 fc93 	bl	4070dc <__ssprint_r>
  4047b6:	2800      	cmp	r0, #0
  4047b8:	f47f ab68 	bne.w	403e8c <_svfprintf_r+0x1a4>
  4047bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047be:	46c8      	mov	r8, r9
  4047c0:	e420      	b.n	404004 <_svfprintf_r+0x31c>
  4047c2:	f8cd b01c 	str.w	fp, [sp, #28]
  4047c6:	2400      	movs	r4, #0
  4047c8:	2500      	movs	r5, #0
  4047ca:	4649      	mov	r1, r9
  4047cc:	e000      	b.n	4047d0 <_svfprintf_r+0xae8>
  4047ce:	4631      	mov	r1, r6
  4047d0:	08e2      	lsrs	r2, r4, #3
  4047d2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4047d6:	08e8      	lsrs	r0, r5, #3
  4047d8:	f004 0307 	and.w	r3, r4, #7
  4047dc:	4605      	mov	r5, r0
  4047de:	4614      	mov	r4, r2
  4047e0:	3330      	adds	r3, #48	; 0x30
  4047e2:	ea54 0205 	orrs.w	r2, r4, r5
  4047e6:	f801 3c01 	strb.w	r3, [r1, #-1]
  4047ea:	f101 36ff 	add.w	r6, r1, #4294967295
  4047ee:	d1ee      	bne.n	4047ce <_svfprintf_r+0xae6>
  4047f0:	9a07      	ldr	r2, [sp, #28]
  4047f2:	07d2      	lsls	r2, r2, #31
  4047f4:	f57f adf3 	bpl.w	4043de <_svfprintf_r+0x6f6>
  4047f8:	2b30      	cmp	r3, #48	; 0x30
  4047fa:	f43f adf0 	beq.w	4043de <_svfprintf_r+0x6f6>
  4047fe:	3902      	subs	r1, #2
  404800:	2330      	movs	r3, #48	; 0x30
  404802:	f806 3c01 	strb.w	r3, [r6, #-1]
  404806:	eba9 0301 	sub.w	r3, r9, r1
  40480a:	930e      	str	r3, [sp, #56]	; 0x38
  40480c:	460e      	mov	r6, r1
  40480e:	f7ff bb7b 	b.w	403f08 <_svfprintf_r+0x220>
  404812:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404814:	2900      	cmp	r1, #0
  404816:	f340 822e 	ble.w	404c76 <_svfprintf_r+0xf8e>
  40481a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40481c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40481e:	4293      	cmp	r3, r2
  404820:	bfa8      	it	ge
  404822:	4613      	movge	r3, r2
  404824:	2b00      	cmp	r3, #0
  404826:	461f      	mov	r7, r3
  404828:	dd0d      	ble.n	404846 <_svfprintf_r+0xb5e>
  40482a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40482c:	f8c8 6000 	str.w	r6, [r8]
  404830:	3301      	adds	r3, #1
  404832:	443c      	add	r4, r7
  404834:	2b07      	cmp	r3, #7
  404836:	9427      	str	r4, [sp, #156]	; 0x9c
  404838:	f8c8 7004 	str.w	r7, [r8, #4]
  40483c:	9326      	str	r3, [sp, #152]	; 0x98
  40483e:	f300 831f 	bgt.w	404e80 <_svfprintf_r+0x1198>
  404842:	f108 0808 	add.w	r8, r8, #8
  404846:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404848:	2f00      	cmp	r7, #0
  40484a:	bfa8      	it	ge
  40484c:	1bdb      	subge	r3, r3, r7
  40484e:	2b00      	cmp	r3, #0
  404850:	461f      	mov	r7, r3
  404852:	f340 80d6 	ble.w	404a02 <_svfprintf_r+0xd1a>
  404856:	2f10      	cmp	r7, #16
  404858:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40485a:	4d31      	ldr	r5, [pc, #196]	; (404920 <_svfprintf_r+0xc38>)
  40485c:	f340 81ed 	ble.w	404c3a <_svfprintf_r+0xf52>
  404860:	4642      	mov	r2, r8
  404862:	4621      	mov	r1, r4
  404864:	46b0      	mov	r8, r6
  404866:	f04f 0b10 	mov.w	fp, #16
  40486a:	462e      	mov	r6, r5
  40486c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40486e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404870:	e004      	b.n	40487c <_svfprintf_r+0xb94>
  404872:	3208      	adds	r2, #8
  404874:	3f10      	subs	r7, #16
  404876:	2f10      	cmp	r7, #16
  404878:	f340 81db 	ble.w	404c32 <_svfprintf_r+0xf4a>
  40487c:	3301      	adds	r3, #1
  40487e:	3110      	adds	r1, #16
  404880:	2b07      	cmp	r3, #7
  404882:	9127      	str	r1, [sp, #156]	; 0x9c
  404884:	9326      	str	r3, [sp, #152]	; 0x98
  404886:	e882 0840 	stmia.w	r2, {r6, fp}
  40488a:	ddf2      	ble.n	404872 <_svfprintf_r+0xb8a>
  40488c:	aa25      	add	r2, sp, #148	; 0x94
  40488e:	4629      	mov	r1, r5
  404890:	4620      	mov	r0, r4
  404892:	f002 fc23 	bl	4070dc <__ssprint_r>
  404896:	2800      	cmp	r0, #0
  404898:	f47f aaf8 	bne.w	403e8c <_svfprintf_r+0x1a4>
  40489c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40489e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048a0:	464a      	mov	r2, r9
  4048a2:	e7e7      	b.n	404874 <_svfprintf_r+0xb8c>
  4048a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4048a6:	930e      	str	r3, [sp, #56]	; 0x38
  4048a8:	464e      	mov	r6, r9
  4048aa:	f7ff bb2d 	b.w	403f08 <_svfprintf_r+0x220>
  4048ae:	2d00      	cmp	r5, #0
  4048b0:	bf08      	it	eq
  4048b2:	2c0a      	cmpeq	r4, #10
  4048b4:	f0c0 808f 	bcc.w	4049d6 <_svfprintf_r+0xcee>
  4048b8:	464e      	mov	r6, r9
  4048ba:	4620      	mov	r0, r4
  4048bc:	4629      	mov	r1, r5
  4048be:	220a      	movs	r2, #10
  4048c0:	2300      	movs	r3, #0
  4048c2:	f7fe fd89 	bl	4033d8 <__aeabi_uldivmod>
  4048c6:	3230      	adds	r2, #48	; 0x30
  4048c8:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4048cc:	4620      	mov	r0, r4
  4048ce:	4629      	mov	r1, r5
  4048d0:	2300      	movs	r3, #0
  4048d2:	220a      	movs	r2, #10
  4048d4:	f7fe fd80 	bl	4033d8 <__aeabi_uldivmod>
  4048d8:	4604      	mov	r4, r0
  4048da:	460d      	mov	r5, r1
  4048dc:	ea54 0305 	orrs.w	r3, r4, r5
  4048e0:	d1eb      	bne.n	4048ba <_svfprintf_r+0xbd2>
  4048e2:	eba9 0306 	sub.w	r3, r9, r6
  4048e6:	930e      	str	r3, [sp, #56]	; 0x38
  4048e8:	f7ff bb0e 	b.w	403f08 <_svfprintf_r+0x220>
  4048ec:	aa25      	add	r2, sp, #148	; 0x94
  4048ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048f0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048f2:	f002 fbf3 	bl	4070dc <__ssprint_r>
  4048f6:	2800      	cmp	r0, #0
  4048f8:	f47f aac8 	bne.w	403e8c <_svfprintf_r+0x1a4>
  4048fc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404900:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404902:	46c8      	mov	r8, r9
  404904:	f7ff bb5e 	b.w	403fc4 <_svfprintf_r+0x2dc>
  404908:	1e5e      	subs	r6, r3, #1
  40490a:	2e00      	cmp	r6, #0
  40490c:	f77f af0a 	ble.w	404724 <_svfprintf_r+0xa3c>
  404910:	2e10      	cmp	r6, #16
  404912:	4d03      	ldr	r5, [pc, #12]	; (404920 <_svfprintf_r+0xc38>)
  404914:	dd22      	ble.n	40495c <_svfprintf_r+0xc74>
  404916:	4622      	mov	r2, r4
  404918:	f04f 0b10 	mov.w	fp, #16
  40491c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40491e:	e006      	b.n	40492e <_svfprintf_r+0xc46>
  404920:	0040908c 	.word	0x0040908c
  404924:	3e10      	subs	r6, #16
  404926:	2e10      	cmp	r6, #16
  404928:	f108 0808 	add.w	r8, r8, #8
  40492c:	dd15      	ble.n	40495a <_svfprintf_r+0xc72>
  40492e:	3701      	adds	r7, #1
  404930:	3210      	adds	r2, #16
  404932:	2f07      	cmp	r7, #7
  404934:	9227      	str	r2, [sp, #156]	; 0x9c
  404936:	9726      	str	r7, [sp, #152]	; 0x98
  404938:	e888 0820 	stmia.w	r8, {r5, fp}
  40493c:	ddf2      	ble.n	404924 <_svfprintf_r+0xc3c>
  40493e:	aa25      	add	r2, sp, #148	; 0x94
  404940:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404942:	4620      	mov	r0, r4
  404944:	f002 fbca 	bl	4070dc <__ssprint_r>
  404948:	2800      	cmp	r0, #0
  40494a:	f47f aa9f 	bne.w	403e8c <_svfprintf_r+0x1a4>
  40494e:	3e10      	subs	r6, #16
  404950:	2e10      	cmp	r6, #16
  404952:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404954:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404956:	46c8      	mov	r8, r9
  404958:	dce9      	bgt.n	40492e <_svfprintf_r+0xc46>
  40495a:	4614      	mov	r4, r2
  40495c:	3701      	adds	r7, #1
  40495e:	4434      	add	r4, r6
  404960:	2f07      	cmp	r7, #7
  404962:	9427      	str	r4, [sp, #156]	; 0x9c
  404964:	9726      	str	r7, [sp, #152]	; 0x98
  404966:	e888 0060 	stmia.w	r8, {r5, r6}
  40496a:	f77f aed9 	ble.w	404720 <_svfprintf_r+0xa38>
  40496e:	aa25      	add	r2, sp, #148	; 0x94
  404970:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404972:	980c      	ldr	r0, [sp, #48]	; 0x30
  404974:	f002 fbb2 	bl	4070dc <__ssprint_r>
  404978:	2800      	cmp	r0, #0
  40497a:	f47f aa87 	bne.w	403e8c <_svfprintf_r+0x1a4>
  40497e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404980:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404982:	46c8      	mov	r8, r9
  404984:	e6ce      	b.n	404724 <_svfprintf_r+0xa3c>
  404986:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404988:	6814      	ldr	r4, [r2, #0]
  40498a:	4613      	mov	r3, r2
  40498c:	3304      	adds	r3, #4
  40498e:	17e5      	asrs	r5, r4, #31
  404990:	930f      	str	r3, [sp, #60]	; 0x3c
  404992:	4622      	mov	r2, r4
  404994:	462b      	mov	r3, r5
  404996:	e4fa      	b.n	40438e <_svfprintf_r+0x6a6>
  404998:	3204      	adds	r2, #4
  40499a:	681c      	ldr	r4, [r3, #0]
  40499c:	920f      	str	r2, [sp, #60]	; 0x3c
  40499e:	2301      	movs	r3, #1
  4049a0:	2500      	movs	r5, #0
  4049a2:	f7ff ba94 	b.w	403ece <_svfprintf_r+0x1e6>
  4049a6:	681c      	ldr	r4, [r3, #0]
  4049a8:	3304      	adds	r3, #4
  4049aa:	930f      	str	r3, [sp, #60]	; 0x3c
  4049ac:	2500      	movs	r5, #0
  4049ae:	e421      	b.n	4041f4 <_svfprintf_r+0x50c>
  4049b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4049b2:	460a      	mov	r2, r1
  4049b4:	3204      	adds	r2, #4
  4049b6:	680c      	ldr	r4, [r1, #0]
  4049b8:	920f      	str	r2, [sp, #60]	; 0x3c
  4049ba:	2500      	movs	r5, #0
  4049bc:	f7ff ba87 	b.w	403ece <_svfprintf_r+0x1e6>
  4049c0:	4614      	mov	r4, r2
  4049c2:	3301      	adds	r3, #1
  4049c4:	4434      	add	r4, r6
  4049c6:	2b07      	cmp	r3, #7
  4049c8:	9427      	str	r4, [sp, #156]	; 0x9c
  4049ca:	9326      	str	r3, [sp, #152]	; 0x98
  4049cc:	e888 0060 	stmia.w	r8, {r5, r6}
  4049d0:	f77f ab68 	ble.w	4040a4 <_svfprintf_r+0x3bc>
  4049d4:	e6b3      	b.n	40473e <_svfprintf_r+0xa56>
  4049d6:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4049da:	f8cd b01c 	str.w	fp, [sp, #28]
  4049de:	ae42      	add	r6, sp, #264	; 0x108
  4049e0:	3430      	adds	r4, #48	; 0x30
  4049e2:	2301      	movs	r3, #1
  4049e4:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4049e8:	930e      	str	r3, [sp, #56]	; 0x38
  4049ea:	f7ff ba8d 	b.w	403f08 <_svfprintf_r+0x220>
  4049ee:	aa25      	add	r2, sp, #148	; 0x94
  4049f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4049f2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049f4:	f002 fb72 	bl	4070dc <__ssprint_r>
  4049f8:	2800      	cmp	r0, #0
  4049fa:	f47f aa47 	bne.w	403e8c <_svfprintf_r+0x1a4>
  4049fe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404a00:	46c8      	mov	r8, r9
  404a02:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404a04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a06:	429a      	cmp	r2, r3
  404a08:	db44      	blt.n	404a94 <_svfprintf_r+0xdac>
  404a0a:	9b07      	ldr	r3, [sp, #28]
  404a0c:	07d9      	lsls	r1, r3, #31
  404a0e:	d441      	bmi.n	404a94 <_svfprintf_r+0xdac>
  404a10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a12:	9812      	ldr	r0, [sp, #72]	; 0x48
  404a14:	1a9a      	subs	r2, r3, r2
  404a16:	1a1d      	subs	r5, r3, r0
  404a18:	4295      	cmp	r5, r2
  404a1a:	bfa8      	it	ge
  404a1c:	4615      	movge	r5, r2
  404a1e:	2d00      	cmp	r5, #0
  404a20:	dd0e      	ble.n	404a40 <_svfprintf_r+0xd58>
  404a22:	9926      	ldr	r1, [sp, #152]	; 0x98
  404a24:	f8c8 5004 	str.w	r5, [r8, #4]
  404a28:	3101      	adds	r1, #1
  404a2a:	4406      	add	r6, r0
  404a2c:	442c      	add	r4, r5
  404a2e:	2907      	cmp	r1, #7
  404a30:	f8c8 6000 	str.w	r6, [r8]
  404a34:	9427      	str	r4, [sp, #156]	; 0x9c
  404a36:	9126      	str	r1, [sp, #152]	; 0x98
  404a38:	f300 823b 	bgt.w	404eb2 <_svfprintf_r+0x11ca>
  404a3c:	f108 0808 	add.w	r8, r8, #8
  404a40:	2d00      	cmp	r5, #0
  404a42:	bfac      	ite	ge
  404a44:	1b56      	subge	r6, r2, r5
  404a46:	4616      	movlt	r6, r2
  404a48:	2e00      	cmp	r6, #0
  404a4a:	f77f ab2d 	ble.w	4040a8 <_svfprintf_r+0x3c0>
  404a4e:	2e10      	cmp	r6, #16
  404a50:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a52:	4db0      	ldr	r5, [pc, #704]	; (404d14 <_svfprintf_r+0x102c>)
  404a54:	ddb5      	ble.n	4049c2 <_svfprintf_r+0xcda>
  404a56:	4622      	mov	r2, r4
  404a58:	2710      	movs	r7, #16
  404a5a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404a5e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404a60:	e004      	b.n	404a6c <_svfprintf_r+0xd84>
  404a62:	f108 0808 	add.w	r8, r8, #8
  404a66:	3e10      	subs	r6, #16
  404a68:	2e10      	cmp	r6, #16
  404a6a:	dda9      	ble.n	4049c0 <_svfprintf_r+0xcd8>
  404a6c:	3301      	adds	r3, #1
  404a6e:	3210      	adds	r2, #16
  404a70:	2b07      	cmp	r3, #7
  404a72:	9227      	str	r2, [sp, #156]	; 0x9c
  404a74:	9326      	str	r3, [sp, #152]	; 0x98
  404a76:	e888 00a0 	stmia.w	r8, {r5, r7}
  404a7a:	ddf2      	ble.n	404a62 <_svfprintf_r+0xd7a>
  404a7c:	aa25      	add	r2, sp, #148	; 0x94
  404a7e:	4621      	mov	r1, r4
  404a80:	4658      	mov	r0, fp
  404a82:	f002 fb2b 	bl	4070dc <__ssprint_r>
  404a86:	2800      	cmp	r0, #0
  404a88:	f47f aa00 	bne.w	403e8c <_svfprintf_r+0x1a4>
  404a8c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404a8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a90:	46c8      	mov	r8, r9
  404a92:	e7e8      	b.n	404a66 <_svfprintf_r+0xd7e>
  404a94:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a96:	9819      	ldr	r0, [sp, #100]	; 0x64
  404a98:	991a      	ldr	r1, [sp, #104]	; 0x68
  404a9a:	f8c8 1000 	str.w	r1, [r8]
  404a9e:	3301      	adds	r3, #1
  404aa0:	4404      	add	r4, r0
  404aa2:	2b07      	cmp	r3, #7
  404aa4:	9427      	str	r4, [sp, #156]	; 0x9c
  404aa6:	f8c8 0004 	str.w	r0, [r8, #4]
  404aaa:	9326      	str	r3, [sp, #152]	; 0x98
  404aac:	f300 81f5 	bgt.w	404e9a <_svfprintf_r+0x11b2>
  404ab0:	f108 0808 	add.w	r8, r8, #8
  404ab4:	e7ac      	b.n	404a10 <_svfprintf_r+0xd28>
  404ab6:	9b07      	ldr	r3, [sp, #28]
  404ab8:	07da      	lsls	r2, r3, #31
  404aba:	f53f adfe 	bmi.w	4046ba <_svfprintf_r+0x9d2>
  404abe:	3701      	adds	r7, #1
  404ac0:	3401      	adds	r4, #1
  404ac2:	2301      	movs	r3, #1
  404ac4:	2f07      	cmp	r7, #7
  404ac6:	9427      	str	r4, [sp, #156]	; 0x9c
  404ac8:	9726      	str	r7, [sp, #152]	; 0x98
  404aca:	f8c8 6000 	str.w	r6, [r8]
  404ace:	f8c8 3004 	str.w	r3, [r8, #4]
  404ad2:	f77f ae25 	ble.w	404720 <_svfprintf_r+0xa38>
  404ad6:	e74a      	b.n	40496e <_svfprintf_r+0xc86>
  404ad8:	aa25      	add	r2, sp, #148	; 0x94
  404ada:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404adc:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ade:	f002 fafd 	bl	4070dc <__ssprint_r>
  404ae2:	2800      	cmp	r0, #0
  404ae4:	f47f a9d2 	bne.w	403e8c <_svfprintf_r+0x1a4>
  404ae8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404aea:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404aec:	46c8      	mov	r8, r9
  404aee:	e5f2      	b.n	4046d6 <_svfprintf_r+0x9ee>
  404af0:	aa25      	add	r2, sp, #148	; 0x94
  404af2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404af4:	980c      	ldr	r0, [sp, #48]	; 0x30
  404af6:	f002 faf1 	bl	4070dc <__ssprint_r>
  404afa:	2800      	cmp	r0, #0
  404afc:	f47f a9c6 	bne.w	403e8c <_svfprintf_r+0x1a4>
  404b00:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b02:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404b04:	46c8      	mov	r8, r9
  404b06:	e5f5      	b.n	4046f4 <_svfprintf_r+0xa0c>
  404b08:	464e      	mov	r6, r9
  404b0a:	f7ff b9fd 	b.w	403f08 <_svfprintf_r+0x220>
  404b0e:	aa25      	add	r2, sp, #148	; 0x94
  404b10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b12:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b14:	f002 fae2 	bl	4070dc <__ssprint_r>
  404b18:	2800      	cmp	r0, #0
  404b1a:	f47f a9b7 	bne.w	403e8c <_svfprintf_r+0x1a4>
  404b1e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b20:	46c8      	mov	r8, r9
  404b22:	f7ff ba72 	b.w	40400a <_svfprintf_r+0x322>
  404b26:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404b28:	4622      	mov	r2, r4
  404b2a:	4620      	mov	r0, r4
  404b2c:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404b2e:	4623      	mov	r3, r4
  404b30:	4621      	mov	r1, r4
  404b32:	f003 fb99 	bl	408268 <__aeabi_dcmpun>
  404b36:	2800      	cmp	r0, #0
  404b38:	f040 8286 	bne.w	405048 <_svfprintf_r+0x1360>
  404b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b3e:	3301      	adds	r3, #1
  404b40:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b42:	f023 0320 	bic.w	r3, r3, #32
  404b46:	930e      	str	r3, [sp, #56]	; 0x38
  404b48:	f000 81e2 	beq.w	404f10 <_svfprintf_r+0x1228>
  404b4c:	2b47      	cmp	r3, #71	; 0x47
  404b4e:	f000 811e 	beq.w	404d8e <_svfprintf_r+0x10a6>
  404b52:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  404b56:	9307      	str	r3, [sp, #28]
  404b58:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404b5a:	1e1f      	subs	r7, r3, #0
  404b5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404b5e:	9308      	str	r3, [sp, #32]
  404b60:	bfbb      	ittet	lt
  404b62:	463b      	movlt	r3, r7
  404b64:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404b68:	2300      	movge	r3, #0
  404b6a:	232d      	movlt	r3, #45	; 0x2d
  404b6c:	9310      	str	r3, [sp, #64]	; 0x40
  404b6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b70:	2b66      	cmp	r3, #102	; 0x66
  404b72:	f000 81bb 	beq.w	404eec <_svfprintf_r+0x1204>
  404b76:	2b46      	cmp	r3, #70	; 0x46
  404b78:	f000 80df 	beq.w	404d3a <_svfprintf_r+0x1052>
  404b7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404b7e:	9a08      	ldr	r2, [sp, #32]
  404b80:	2b45      	cmp	r3, #69	; 0x45
  404b82:	bf0c      	ite	eq
  404b84:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  404b86:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404b88:	a823      	add	r0, sp, #140	; 0x8c
  404b8a:	a920      	add	r1, sp, #128	; 0x80
  404b8c:	bf08      	it	eq
  404b8e:	1c5d      	addeq	r5, r3, #1
  404b90:	9004      	str	r0, [sp, #16]
  404b92:	9103      	str	r1, [sp, #12]
  404b94:	a81f      	add	r0, sp, #124	; 0x7c
  404b96:	2102      	movs	r1, #2
  404b98:	463b      	mov	r3, r7
  404b9a:	9002      	str	r0, [sp, #8]
  404b9c:	9501      	str	r5, [sp, #4]
  404b9e:	9100      	str	r1, [sp, #0]
  404ba0:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ba2:	f000 fb75 	bl	405290 <_dtoa_r>
  404ba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404ba8:	2b67      	cmp	r3, #103	; 0x67
  404baa:	4606      	mov	r6, r0
  404bac:	f040 81e0 	bne.w	404f70 <_svfprintf_r+0x1288>
  404bb0:	f01b 0f01 	tst.w	fp, #1
  404bb4:	f000 8246 	beq.w	405044 <_svfprintf_r+0x135c>
  404bb8:	1974      	adds	r4, r6, r5
  404bba:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404bbc:	9808      	ldr	r0, [sp, #32]
  404bbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404bc0:	4639      	mov	r1, r7
  404bc2:	f003 fb1f 	bl	408204 <__aeabi_dcmpeq>
  404bc6:	2800      	cmp	r0, #0
  404bc8:	f040 8165 	bne.w	404e96 <_svfprintf_r+0x11ae>
  404bcc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404bce:	42a3      	cmp	r3, r4
  404bd0:	d206      	bcs.n	404be0 <_svfprintf_r+0xef8>
  404bd2:	2130      	movs	r1, #48	; 0x30
  404bd4:	1c5a      	adds	r2, r3, #1
  404bd6:	9223      	str	r2, [sp, #140]	; 0x8c
  404bd8:	7019      	strb	r1, [r3, #0]
  404bda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404bdc:	429c      	cmp	r4, r3
  404bde:	d8f9      	bhi.n	404bd4 <_svfprintf_r+0xeec>
  404be0:	1b9b      	subs	r3, r3, r6
  404be2:	9313      	str	r3, [sp, #76]	; 0x4c
  404be4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404be6:	2b47      	cmp	r3, #71	; 0x47
  404be8:	f000 80e9 	beq.w	404dbe <_svfprintf_r+0x10d6>
  404bec:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404bee:	2b65      	cmp	r3, #101	; 0x65
  404bf0:	f340 81cd 	ble.w	404f8e <_svfprintf_r+0x12a6>
  404bf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404bf6:	2b66      	cmp	r3, #102	; 0x66
  404bf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404bfa:	9312      	str	r3, [sp, #72]	; 0x48
  404bfc:	f000 819e 	beq.w	404f3c <_svfprintf_r+0x1254>
  404c00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404c02:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404c04:	4619      	mov	r1, r3
  404c06:	4291      	cmp	r1, r2
  404c08:	f300 818a 	bgt.w	404f20 <_svfprintf_r+0x1238>
  404c0c:	f01b 0f01 	tst.w	fp, #1
  404c10:	f040 8213 	bne.w	40503a <_svfprintf_r+0x1352>
  404c14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404c18:	9308      	str	r3, [sp, #32]
  404c1a:	2367      	movs	r3, #103	; 0x67
  404c1c:	920e      	str	r2, [sp, #56]	; 0x38
  404c1e:	9311      	str	r3, [sp, #68]	; 0x44
  404c20:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404c22:	2b00      	cmp	r3, #0
  404c24:	f040 80c4 	bne.w	404db0 <_svfprintf_r+0x10c8>
  404c28:	930a      	str	r3, [sp, #40]	; 0x28
  404c2a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404c2e:	f7ff b973 	b.w	403f18 <_svfprintf_r+0x230>
  404c32:	4635      	mov	r5, r6
  404c34:	460c      	mov	r4, r1
  404c36:	4646      	mov	r6, r8
  404c38:	4690      	mov	r8, r2
  404c3a:	3301      	adds	r3, #1
  404c3c:	443c      	add	r4, r7
  404c3e:	2b07      	cmp	r3, #7
  404c40:	9427      	str	r4, [sp, #156]	; 0x9c
  404c42:	9326      	str	r3, [sp, #152]	; 0x98
  404c44:	e888 00a0 	stmia.w	r8, {r5, r7}
  404c48:	f73f aed1 	bgt.w	4049ee <_svfprintf_r+0xd06>
  404c4c:	f108 0808 	add.w	r8, r8, #8
  404c50:	e6d7      	b.n	404a02 <_svfprintf_r+0xd1a>
  404c52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404c54:	6813      	ldr	r3, [r2, #0]
  404c56:	3204      	adds	r2, #4
  404c58:	920f      	str	r2, [sp, #60]	; 0x3c
  404c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404c5c:	601a      	str	r2, [r3, #0]
  404c5e:	f7ff b86a 	b.w	403d36 <_svfprintf_r+0x4e>
  404c62:	aa25      	add	r2, sp, #148	; 0x94
  404c64:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c66:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c68:	f002 fa38 	bl	4070dc <__ssprint_r>
  404c6c:	2800      	cmp	r0, #0
  404c6e:	f47f a90d 	bne.w	403e8c <_svfprintf_r+0x1a4>
  404c72:	46c8      	mov	r8, r9
  404c74:	e48d      	b.n	404592 <_svfprintf_r+0x8aa>
  404c76:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c78:	4a27      	ldr	r2, [pc, #156]	; (404d18 <_svfprintf_r+0x1030>)
  404c7a:	f8c8 2000 	str.w	r2, [r8]
  404c7e:	3301      	adds	r3, #1
  404c80:	3401      	adds	r4, #1
  404c82:	2201      	movs	r2, #1
  404c84:	2b07      	cmp	r3, #7
  404c86:	9427      	str	r4, [sp, #156]	; 0x9c
  404c88:	9326      	str	r3, [sp, #152]	; 0x98
  404c8a:	f8c8 2004 	str.w	r2, [r8, #4]
  404c8e:	dc72      	bgt.n	404d76 <_svfprintf_r+0x108e>
  404c90:	f108 0808 	add.w	r8, r8, #8
  404c94:	b929      	cbnz	r1, 404ca2 <_svfprintf_r+0xfba>
  404c96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404c98:	b91b      	cbnz	r3, 404ca2 <_svfprintf_r+0xfba>
  404c9a:	9b07      	ldr	r3, [sp, #28]
  404c9c:	07d8      	lsls	r0, r3, #31
  404c9e:	f57f aa03 	bpl.w	4040a8 <_svfprintf_r+0x3c0>
  404ca2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ca4:	9819      	ldr	r0, [sp, #100]	; 0x64
  404ca6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404ca8:	f8c8 2000 	str.w	r2, [r8]
  404cac:	3301      	adds	r3, #1
  404cae:	4602      	mov	r2, r0
  404cb0:	4422      	add	r2, r4
  404cb2:	2b07      	cmp	r3, #7
  404cb4:	9227      	str	r2, [sp, #156]	; 0x9c
  404cb6:	f8c8 0004 	str.w	r0, [r8, #4]
  404cba:	9326      	str	r3, [sp, #152]	; 0x98
  404cbc:	f300 818d 	bgt.w	404fda <_svfprintf_r+0x12f2>
  404cc0:	f108 0808 	add.w	r8, r8, #8
  404cc4:	2900      	cmp	r1, #0
  404cc6:	f2c0 8165 	blt.w	404f94 <_svfprintf_r+0x12ac>
  404cca:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404ccc:	f8c8 6000 	str.w	r6, [r8]
  404cd0:	3301      	adds	r3, #1
  404cd2:	188c      	adds	r4, r1, r2
  404cd4:	2b07      	cmp	r3, #7
  404cd6:	9427      	str	r4, [sp, #156]	; 0x9c
  404cd8:	9326      	str	r3, [sp, #152]	; 0x98
  404cda:	f8c8 1004 	str.w	r1, [r8, #4]
  404cde:	f77f a9e1 	ble.w	4040a4 <_svfprintf_r+0x3bc>
  404ce2:	e52c      	b.n	40473e <_svfprintf_r+0xa56>
  404ce4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404ce6:	9909      	ldr	r1, [sp, #36]	; 0x24
  404ce8:	6813      	ldr	r3, [r2, #0]
  404cea:	17cd      	asrs	r5, r1, #31
  404cec:	4608      	mov	r0, r1
  404cee:	3204      	adds	r2, #4
  404cf0:	4629      	mov	r1, r5
  404cf2:	920f      	str	r2, [sp, #60]	; 0x3c
  404cf4:	e9c3 0100 	strd	r0, r1, [r3]
  404cf8:	f7ff b81d 	b.w	403d36 <_svfprintf_r+0x4e>
  404cfc:	aa25      	add	r2, sp, #148	; 0x94
  404cfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d00:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d02:	f002 f9eb 	bl	4070dc <__ssprint_r>
  404d06:	2800      	cmp	r0, #0
  404d08:	f47f a8c0 	bne.w	403e8c <_svfprintf_r+0x1a4>
  404d0c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d0e:	46c8      	mov	r8, r9
  404d10:	e458      	b.n	4045c4 <_svfprintf_r+0x8dc>
  404d12:	bf00      	nop
  404d14:	0040908c 	.word	0x0040908c
  404d18:	00409078 	.word	0x00409078
  404d1c:	2140      	movs	r1, #64	; 0x40
  404d1e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d20:	f001 fa0c 	bl	40613c <_malloc_r>
  404d24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404d26:	6010      	str	r0, [r2, #0]
  404d28:	6110      	str	r0, [r2, #16]
  404d2a:	2800      	cmp	r0, #0
  404d2c:	f000 81f2 	beq.w	405114 <_svfprintf_r+0x142c>
  404d30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404d32:	2340      	movs	r3, #64	; 0x40
  404d34:	6153      	str	r3, [r2, #20]
  404d36:	f7fe bfee 	b.w	403d16 <_svfprintf_r+0x2e>
  404d3a:	a823      	add	r0, sp, #140	; 0x8c
  404d3c:	a920      	add	r1, sp, #128	; 0x80
  404d3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404d40:	9004      	str	r0, [sp, #16]
  404d42:	9103      	str	r1, [sp, #12]
  404d44:	a81f      	add	r0, sp, #124	; 0x7c
  404d46:	2103      	movs	r1, #3
  404d48:	9002      	str	r0, [sp, #8]
  404d4a:	9a08      	ldr	r2, [sp, #32]
  404d4c:	9401      	str	r4, [sp, #4]
  404d4e:	463b      	mov	r3, r7
  404d50:	9100      	str	r1, [sp, #0]
  404d52:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d54:	f000 fa9c 	bl	405290 <_dtoa_r>
  404d58:	4625      	mov	r5, r4
  404d5a:	4606      	mov	r6, r0
  404d5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d5e:	2b46      	cmp	r3, #70	; 0x46
  404d60:	eb06 0405 	add.w	r4, r6, r5
  404d64:	f47f af29 	bne.w	404bba <_svfprintf_r+0xed2>
  404d68:	7833      	ldrb	r3, [r6, #0]
  404d6a:	2b30      	cmp	r3, #48	; 0x30
  404d6c:	f000 8178 	beq.w	405060 <_svfprintf_r+0x1378>
  404d70:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  404d72:	442c      	add	r4, r5
  404d74:	e721      	b.n	404bba <_svfprintf_r+0xed2>
  404d76:	aa25      	add	r2, sp, #148	; 0x94
  404d78:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d7a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d7c:	f002 f9ae 	bl	4070dc <__ssprint_r>
  404d80:	2800      	cmp	r0, #0
  404d82:	f47f a883 	bne.w	403e8c <_svfprintf_r+0x1a4>
  404d86:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404d88:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d8a:	46c8      	mov	r8, r9
  404d8c:	e782      	b.n	404c94 <_svfprintf_r+0xfac>
  404d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d90:	2b00      	cmp	r3, #0
  404d92:	bf08      	it	eq
  404d94:	2301      	moveq	r3, #1
  404d96:	930a      	str	r3, [sp, #40]	; 0x28
  404d98:	e6db      	b.n	404b52 <_svfprintf_r+0xe6a>
  404d9a:	4630      	mov	r0, r6
  404d9c:	940a      	str	r4, [sp, #40]	; 0x28
  404d9e:	f002 f92f 	bl	407000 <strlen>
  404da2:	950f      	str	r5, [sp, #60]	; 0x3c
  404da4:	900e      	str	r0, [sp, #56]	; 0x38
  404da6:	f8cd b01c 	str.w	fp, [sp, #28]
  404daa:	4603      	mov	r3, r0
  404dac:	f7ff b9f9 	b.w	4041a2 <_svfprintf_r+0x4ba>
  404db0:	272d      	movs	r7, #45	; 0x2d
  404db2:	2300      	movs	r3, #0
  404db4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404db8:	930a      	str	r3, [sp, #40]	; 0x28
  404dba:	f7ff b8ae 	b.w	403f1a <_svfprintf_r+0x232>
  404dbe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404dc0:	9312      	str	r3, [sp, #72]	; 0x48
  404dc2:	461a      	mov	r2, r3
  404dc4:	3303      	adds	r3, #3
  404dc6:	db04      	blt.n	404dd2 <_svfprintf_r+0x10ea>
  404dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404dca:	4619      	mov	r1, r3
  404dcc:	4291      	cmp	r1, r2
  404dce:	f6bf af17 	bge.w	404c00 <_svfprintf_r+0xf18>
  404dd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404dd4:	3b02      	subs	r3, #2
  404dd6:	9311      	str	r3, [sp, #68]	; 0x44
  404dd8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404ddc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404de2:	3b01      	subs	r3, #1
  404de4:	2b00      	cmp	r3, #0
  404de6:	931f      	str	r3, [sp, #124]	; 0x7c
  404de8:	bfbd      	ittte	lt
  404dea:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  404dec:	f1c3 0301 	rsblt	r3, r3, #1
  404df0:	222d      	movlt	r2, #45	; 0x2d
  404df2:	222b      	movge	r2, #43	; 0x2b
  404df4:	2b09      	cmp	r3, #9
  404df6:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  404dfa:	f340 8116 	ble.w	40502a <_svfprintf_r+0x1342>
  404dfe:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  404e02:	4620      	mov	r0, r4
  404e04:	4dab      	ldr	r5, [pc, #684]	; (4050b4 <_svfprintf_r+0x13cc>)
  404e06:	e000      	b.n	404e0a <_svfprintf_r+0x1122>
  404e08:	4610      	mov	r0, r2
  404e0a:	fb85 1203 	smull	r1, r2, r5, r3
  404e0e:	17d9      	asrs	r1, r3, #31
  404e10:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404e14:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404e18:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404e1c:	3230      	adds	r2, #48	; 0x30
  404e1e:	2909      	cmp	r1, #9
  404e20:	f800 2c01 	strb.w	r2, [r0, #-1]
  404e24:	460b      	mov	r3, r1
  404e26:	f100 32ff 	add.w	r2, r0, #4294967295
  404e2a:	dced      	bgt.n	404e08 <_svfprintf_r+0x1120>
  404e2c:	3330      	adds	r3, #48	; 0x30
  404e2e:	3802      	subs	r0, #2
  404e30:	b2d9      	uxtb	r1, r3
  404e32:	4284      	cmp	r4, r0
  404e34:	f802 1c01 	strb.w	r1, [r2, #-1]
  404e38:	f240 8165 	bls.w	405106 <_svfprintf_r+0x141e>
  404e3c:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  404e40:	4613      	mov	r3, r2
  404e42:	e001      	b.n	404e48 <_svfprintf_r+0x1160>
  404e44:	f813 1b01 	ldrb.w	r1, [r3], #1
  404e48:	f800 1b01 	strb.w	r1, [r0], #1
  404e4c:	42a3      	cmp	r3, r4
  404e4e:	d1f9      	bne.n	404e44 <_svfprintf_r+0x115c>
  404e50:	3301      	adds	r3, #1
  404e52:	1a9b      	subs	r3, r3, r2
  404e54:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404e58:	4413      	add	r3, r2
  404e5a:	aa21      	add	r2, sp, #132	; 0x84
  404e5c:	1a9b      	subs	r3, r3, r2
  404e5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404e60:	931b      	str	r3, [sp, #108]	; 0x6c
  404e62:	2a01      	cmp	r2, #1
  404e64:	4413      	add	r3, r2
  404e66:	930e      	str	r3, [sp, #56]	; 0x38
  404e68:	f340 8119 	ble.w	40509e <_svfprintf_r+0x13b6>
  404e6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404e6e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404e70:	4413      	add	r3, r2
  404e72:	930e      	str	r3, [sp, #56]	; 0x38
  404e74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404e78:	9308      	str	r3, [sp, #32]
  404e7a:	2300      	movs	r3, #0
  404e7c:	9312      	str	r3, [sp, #72]	; 0x48
  404e7e:	e6cf      	b.n	404c20 <_svfprintf_r+0xf38>
  404e80:	aa25      	add	r2, sp, #148	; 0x94
  404e82:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e84:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e86:	f002 f929 	bl	4070dc <__ssprint_r>
  404e8a:	2800      	cmp	r0, #0
  404e8c:	f47e affe 	bne.w	403e8c <_svfprintf_r+0x1a4>
  404e90:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404e92:	46c8      	mov	r8, r9
  404e94:	e4d7      	b.n	404846 <_svfprintf_r+0xb5e>
  404e96:	4623      	mov	r3, r4
  404e98:	e6a2      	b.n	404be0 <_svfprintf_r+0xef8>
  404e9a:	aa25      	add	r2, sp, #148	; 0x94
  404e9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e9e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ea0:	f002 f91c 	bl	4070dc <__ssprint_r>
  404ea4:	2800      	cmp	r0, #0
  404ea6:	f47e aff1 	bne.w	403e8c <_svfprintf_r+0x1a4>
  404eaa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404eac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404eae:	46c8      	mov	r8, r9
  404eb0:	e5ae      	b.n	404a10 <_svfprintf_r+0xd28>
  404eb2:	aa25      	add	r2, sp, #148	; 0x94
  404eb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404eb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404eb8:	f002 f910 	bl	4070dc <__ssprint_r>
  404ebc:	2800      	cmp	r0, #0
  404ebe:	f47e afe5 	bne.w	403e8c <_svfprintf_r+0x1a4>
  404ec2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404ec4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404ec6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404ec8:	1a9a      	subs	r2, r3, r2
  404eca:	46c8      	mov	r8, r9
  404ecc:	e5b8      	b.n	404a40 <_svfprintf_r+0xd58>
  404ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ed0:	9612      	str	r6, [sp, #72]	; 0x48
  404ed2:	2b06      	cmp	r3, #6
  404ed4:	bf28      	it	cs
  404ed6:	2306      	movcs	r3, #6
  404ed8:	960a      	str	r6, [sp, #40]	; 0x28
  404eda:	4637      	mov	r7, r6
  404edc:	9308      	str	r3, [sp, #32]
  404ede:	950f      	str	r5, [sp, #60]	; 0x3c
  404ee0:	f8cd b01c 	str.w	fp, [sp, #28]
  404ee4:	930e      	str	r3, [sp, #56]	; 0x38
  404ee6:	4e74      	ldr	r6, [pc, #464]	; (4050b8 <_svfprintf_r+0x13d0>)
  404ee8:	f7ff b816 	b.w	403f18 <_svfprintf_r+0x230>
  404eec:	a823      	add	r0, sp, #140	; 0x8c
  404eee:	a920      	add	r1, sp, #128	; 0x80
  404ef0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404ef2:	9004      	str	r0, [sp, #16]
  404ef4:	9103      	str	r1, [sp, #12]
  404ef6:	a81f      	add	r0, sp, #124	; 0x7c
  404ef8:	2103      	movs	r1, #3
  404efa:	9002      	str	r0, [sp, #8]
  404efc:	9a08      	ldr	r2, [sp, #32]
  404efe:	9501      	str	r5, [sp, #4]
  404f00:	463b      	mov	r3, r7
  404f02:	9100      	str	r1, [sp, #0]
  404f04:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f06:	f000 f9c3 	bl	405290 <_dtoa_r>
  404f0a:	4606      	mov	r6, r0
  404f0c:	1944      	adds	r4, r0, r5
  404f0e:	e72b      	b.n	404d68 <_svfprintf_r+0x1080>
  404f10:	2306      	movs	r3, #6
  404f12:	930a      	str	r3, [sp, #40]	; 0x28
  404f14:	e61d      	b.n	404b52 <_svfprintf_r+0xe6a>
  404f16:	272d      	movs	r7, #45	; 0x2d
  404f18:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404f1c:	f7ff bacd 	b.w	4044ba <_svfprintf_r+0x7d2>
  404f20:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404f22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404f24:	4413      	add	r3, r2
  404f26:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404f28:	930e      	str	r3, [sp, #56]	; 0x38
  404f2a:	2a00      	cmp	r2, #0
  404f2c:	f340 80b0 	ble.w	405090 <_svfprintf_r+0x13a8>
  404f30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404f34:	9308      	str	r3, [sp, #32]
  404f36:	2367      	movs	r3, #103	; 0x67
  404f38:	9311      	str	r3, [sp, #68]	; 0x44
  404f3a:	e671      	b.n	404c20 <_svfprintf_r+0xf38>
  404f3c:	2b00      	cmp	r3, #0
  404f3e:	f340 80c3 	ble.w	4050c8 <_svfprintf_r+0x13e0>
  404f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404f44:	2a00      	cmp	r2, #0
  404f46:	f040 8099 	bne.w	40507c <_svfprintf_r+0x1394>
  404f4a:	f01b 0f01 	tst.w	fp, #1
  404f4e:	f040 8095 	bne.w	40507c <_svfprintf_r+0x1394>
  404f52:	9308      	str	r3, [sp, #32]
  404f54:	930e      	str	r3, [sp, #56]	; 0x38
  404f56:	e663      	b.n	404c20 <_svfprintf_r+0xf38>
  404f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f5a:	9308      	str	r3, [sp, #32]
  404f5c:	930e      	str	r3, [sp, #56]	; 0x38
  404f5e:	900a      	str	r0, [sp, #40]	; 0x28
  404f60:	950f      	str	r5, [sp, #60]	; 0x3c
  404f62:	f8cd b01c 	str.w	fp, [sp, #28]
  404f66:	9012      	str	r0, [sp, #72]	; 0x48
  404f68:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404f6c:	f7fe bfd4 	b.w	403f18 <_svfprintf_r+0x230>
  404f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f72:	2b47      	cmp	r3, #71	; 0x47
  404f74:	f47f ae20 	bne.w	404bb8 <_svfprintf_r+0xed0>
  404f78:	f01b 0f01 	tst.w	fp, #1
  404f7c:	f47f aeee 	bne.w	404d5c <_svfprintf_r+0x1074>
  404f80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404f82:	1b9b      	subs	r3, r3, r6
  404f84:	9313      	str	r3, [sp, #76]	; 0x4c
  404f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404f88:	2b47      	cmp	r3, #71	; 0x47
  404f8a:	f43f af18 	beq.w	404dbe <_svfprintf_r+0x10d6>
  404f8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404f90:	9312      	str	r3, [sp, #72]	; 0x48
  404f92:	e721      	b.n	404dd8 <_svfprintf_r+0x10f0>
  404f94:	424f      	negs	r7, r1
  404f96:	3110      	adds	r1, #16
  404f98:	4d48      	ldr	r5, [pc, #288]	; (4050bc <_svfprintf_r+0x13d4>)
  404f9a:	da2f      	bge.n	404ffc <_svfprintf_r+0x1314>
  404f9c:	2410      	movs	r4, #16
  404f9e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404fa2:	e004      	b.n	404fae <_svfprintf_r+0x12c6>
  404fa4:	f108 0808 	add.w	r8, r8, #8
  404fa8:	3f10      	subs	r7, #16
  404faa:	2f10      	cmp	r7, #16
  404fac:	dd26      	ble.n	404ffc <_svfprintf_r+0x1314>
  404fae:	3301      	adds	r3, #1
  404fb0:	3210      	adds	r2, #16
  404fb2:	2b07      	cmp	r3, #7
  404fb4:	9227      	str	r2, [sp, #156]	; 0x9c
  404fb6:	9326      	str	r3, [sp, #152]	; 0x98
  404fb8:	f8c8 5000 	str.w	r5, [r8]
  404fbc:	f8c8 4004 	str.w	r4, [r8, #4]
  404fc0:	ddf0      	ble.n	404fa4 <_svfprintf_r+0x12bc>
  404fc2:	aa25      	add	r2, sp, #148	; 0x94
  404fc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fc6:	4658      	mov	r0, fp
  404fc8:	f002 f888 	bl	4070dc <__ssprint_r>
  404fcc:	2800      	cmp	r0, #0
  404fce:	f47e af5d 	bne.w	403e8c <_svfprintf_r+0x1a4>
  404fd2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404fd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404fd6:	46c8      	mov	r8, r9
  404fd8:	e7e6      	b.n	404fa8 <_svfprintf_r+0x12c0>
  404fda:	aa25      	add	r2, sp, #148	; 0x94
  404fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fde:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fe0:	f002 f87c 	bl	4070dc <__ssprint_r>
  404fe4:	2800      	cmp	r0, #0
  404fe6:	f47e af51 	bne.w	403e8c <_svfprintf_r+0x1a4>
  404fea:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404fec:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404fee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ff0:	46c8      	mov	r8, r9
  404ff2:	e667      	b.n	404cc4 <_svfprintf_r+0xfdc>
  404ff4:	2000      	movs	r0, #0
  404ff6:	900a      	str	r0, [sp, #40]	; 0x28
  404ff8:	f7fe bed0 	b.w	403d9c <_svfprintf_r+0xb4>
  404ffc:	3301      	adds	r3, #1
  404ffe:	443a      	add	r2, r7
  405000:	2b07      	cmp	r3, #7
  405002:	e888 00a0 	stmia.w	r8, {r5, r7}
  405006:	9227      	str	r2, [sp, #156]	; 0x9c
  405008:	9326      	str	r3, [sp, #152]	; 0x98
  40500a:	f108 0808 	add.w	r8, r8, #8
  40500e:	f77f ae5c 	ble.w	404cca <_svfprintf_r+0xfe2>
  405012:	aa25      	add	r2, sp, #148	; 0x94
  405014:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405016:	980c      	ldr	r0, [sp, #48]	; 0x30
  405018:	f002 f860 	bl	4070dc <__ssprint_r>
  40501c:	2800      	cmp	r0, #0
  40501e:	f47e af35 	bne.w	403e8c <_svfprintf_r+0x1a4>
  405022:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405024:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405026:	46c8      	mov	r8, r9
  405028:	e64f      	b.n	404cca <_svfprintf_r+0xfe2>
  40502a:	3330      	adds	r3, #48	; 0x30
  40502c:	2230      	movs	r2, #48	; 0x30
  40502e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  405032:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  405036:	ab22      	add	r3, sp, #136	; 0x88
  405038:	e70f      	b.n	404e5a <_svfprintf_r+0x1172>
  40503a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40503c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40503e:	4413      	add	r3, r2
  405040:	930e      	str	r3, [sp, #56]	; 0x38
  405042:	e775      	b.n	404f30 <_svfprintf_r+0x1248>
  405044:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405046:	e5cb      	b.n	404be0 <_svfprintf_r+0xef8>
  405048:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40504a:	4e1d      	ldr	r6, [pc, #116]	; (4050c0 <_svfprintf_r+0x13d8>)
  40504c:	2b00      	cmp	r3, #0
  40504e:	bfb6      	itet	lt
  405050:	272d      	movlt	r7, #45	; 0x2d
  405052:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  405056:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40505a:	4b1a      	ldr	r3, [pc, #104]	; (4050c4 <_svfprintf_r+0x13dc>)
  40505c:	f7ff ba2f 	b.w	4044be <_svfprintf_r+0x7d6>
  405060:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405062:	9808      	ldr	r0, [sp, #32]
  405064:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405066:	4639      	mov	r1, r7
  405068:	f003 f8cc 	bl	408204 <__aeabi_dcmpeq>
  40506c:	2800      	cmp	r0, #0
  40506e:	f47f ae7f 	bne.w	404d70 <_svfprintf_r+0x1088>
  405072:	f1c5 0501 	rsb	r5, r5, #1
  405076:	951f      	str	r5, [sp, #124]	; 0x7c
  405078:	442c      	add	r4, r5
  40507a:	e59e      	b.n	404bba <_svfprintf_r+0xed2>
  40507c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40507e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405080:	4413      	add	r3, r2
  405082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405084:	441a      	add	r2, r3
  405086:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40508a:	920e      	str	r2, [sp, #56]	; 0x38
  40508c:	9308      	str	r3, [sp, #32]
  40508e:	e5c7      	b.n	404c20 <_svfprintf_r+0xf38>
  405090:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405092:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405094:	f1c3 0301 	rsb	r3, r3, #1
  405098:	441a      	add	r2, r3
  40509a:	4613      	mov	r3, r2
  40509c:	e7d0      	b.n	405040 <_svfprintf_r+0x1358>
  40509e:	f01b 0301 	ands.w	r3, fp, #1
  4050a2:	9312      	str	r3, [sp, #72]	; 0x48
  4050a4:	f47f aee2 	bne.w	404e6c <_svfprintf_r+0x1184>
  4050a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4050aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4050ae:	9308      	str	r3, [sp, #32]
  4050b0:	e5b6      	b.n	404c20 <_svfprintf_r+0xf38>
  4050b2:	bf00      	nop
  4050b4:	66666667 	.word	0x66666667
  4050b8:	00409070 	.word	0x00409070
  4050bc:	0040908c 	.word	0x0040908c
  4050c0:	00409044 	.word	0x00409044
  4050c4:	00409040 	.word	0x00409040
  4050c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050ca:	b913      	cbnz	r3, 4050d2 <_svfprintf_r+0x13ea>
  4050cc:	f01b 0f01 	tst.w	fp, #1
  4050d0:	d002      	beq.n	4050d8 <_svfprintf_r+0x13f0>
  4050d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4050d4:	3301      	adds	r3, #1
  4050d6:	e7d4      	b.n	405082 <_svfprintf_r+0x139a>
  4050d8:	2301      	movs	r3, #1
  4050da:	e73a      	b.n	404f52 <_svfprintf_r+0x126a>
  4050dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4050de:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4050e2:	6828      	ldr	r0, [r5, #0]
  4050e4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  4050e8:	900a      	str	r0, [sp, #40]	; 0x28
  4050ea:	4628      	mov	r0, r5
  4050ec:	3004      	adds	r0, #4
  4050ee:	46a2      	mov	sl, r4
  4050f0:	900f      	str	r0, [sp, #60]	; 0x3c
  4050f2:	f7fe be51 	b.w	403d98 <_svfprintf_r+0xb0>
  4050f6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4050fa:	f7ff b867 	b.w	4041cc <_svfprintf_r+0x4e4>
  4050fe:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405102:	f7ff ba15 	b.w	404530 <_svfprintf_r+0x848>
  405106:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40510a:	e6a6      	b.n	404e5a <_svfprintf_r+0x1172>
  40510c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405110:	f7ff b8eb 	b.w	4042ea <_svfprintf_r+0x602>
  405114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405116:	230c      	movs	r3, #12
  405118:	6013      	str	r3, [r2, #0]
  40511a:	f04f 33ff 	mov.w	r3, #4294967295
  40511e:	9309      	str	r3, [sp, #36]	; 0x24
  405120:	f7fe bebd 	b.w	403e9e <_svfprintf_r+0x1b6>
  405124:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405128:	f7ff b99a 	b.w	404460 <_svfprintf_r+0x778>
  40512c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405130:	f7ff b976 	b.w	404420 <_svfprintf_r+0x738>
  405134:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405138:	f7ff b959 	b.w	4043ee <_svfprintf_r+0x706>
  40513c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405140:	f7ff b912 	b.w	404368 <_svfprintf_r+0x680>

00405144 <register_fini>:
  405144:	4b02      	ldr	r3, [pc, #8]	; (405150 <register_fini+0xc>)
  405146:	b113      	cbz	r3, 40514e <register_fini+0xa>
  405148:	4802      	ldr	r0, [pc, #8]	; (405154 <register_fini+0x10>)
  40514a:	f000 b805 	b.w	405158 <atexit>
  40514e:	4770      	bx	lr
  405150:	00000000 	.word	0x00000000
  405154:	004060e5 	.word	0x004060e5

00405158 <atexit>:
  405158:	2300      	movs	r3, #0
  40515a:	4601      	mov	r1, r0
  40515c:	461a      	mov	r2, r3
  40515e:	4618      	mov	r0, r3
  405160:	f002 b83a 	b.w	4071d8 <__register_exitproc>

00405164 <quorem>:
  405164:	6902      	ldr	r2, [r0, #16]
  405166:	690b      	ldr	r3, [r1, #16]
  405168:	4293      	cmp	r3, r2
  40516a:	f300 808d 	bgt.w	405288 <quorem+0x124>
  40516e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405172:	f103 38ff 	add.w	r8, r3, #4294967295
  405176:	f101 0714 	add.w	r7, r1, #20
  40517a:	f100 0b14 	add.w	fp, r0, #20
  40517e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405182:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405186:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40518a:	b083      	sub	sp, #12
  40518c:	3201      	adds	r2, #1
  40518e:	fbb3 f9f2 	udiv	r9, r3, r2
  405192:	eb0b 0304 	add.w	r3, fp, r4
  405196:	9400      	str	r4, [sp, #0]
  405198:	eb07 0a04 	add.w	sl, r7, r4
  40519c:	9301      	str	r3, [sp, #4]
  40519e:	f1b9 0f00 	cmp.w	r9, #0
  4051a2:	d039      	beq.n	405218 <quorem+0xb4>
  4051a4:	2500      	movs	r5, #0
  4051a6:	462e      	mov	r6, r5
  4051a8:	46bc      	mov	ip, r7
  4051aa:	46de      	mov	lr, fp
  4051ac:	f85c 4b04 	ldr.w	r4, [ip], #4
  4051b0:	f8de 3000 	ldr.w	r3, [lr]
  4051b4:	b2a2      	uxth	r2, r4
  4051b6:	fb09 5502 	mla	r5, r9, r2, r5
  4051ba:	0c22      	lsrs	r2, r4, #16
  4051bc:	0c2c      	lsrs	r4, r5, #16
  4051be:	fb09 4202 	mla	r2, r9, r2, r4
  4051c2:	b2ad      	uxth	r5, r5
  4051c4:	1b75      	subs	r5, r6, r5
  4051c6:	b296      	uxth	r6, r2
  4051c8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4051cc:	fa15 f383 	uxtah	r3, r5, r3
  4051d0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4051d4:	b29b      	uxth	r3, r3
  4051d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4051da:	45e2      	cmp	sl, ip
  4051dc:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4051e0:	f84e 3b04 	str.w	r3, [lr], #4
  4051e4:	ea4f 4626 	mov.w	r6, r6, asr #16
  4051e8:	d2e0      	bcs.n	4051ac <quorem+0x48>
  4051ea:	9b00      	ldr	r3, [sp, #0]
  4051ec:	f85b 3003 	ldr.w	r3, [fp, r3]
  4051f0:	b993      	cbnz	r3, 405218 <quorem+0xb4>
  4051f2:	9c01      	ldr	r4, [sp, #4]
  4051f4:	1f23      	subs	r3, r4, #4
  4051f6:	459b      	cmp	fp, r3
  4051f8:	d20c      	bcs.n	405214 <quorem+0xb0>
  4051fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4051fe:	b94b      	cbnz	r3, 405214 <quorem+0xb0>
  405200:	f1a4 0308 	sub.w	r3, r4, #8
  405204:	e002      	b.n	40520c <quorem+0xa8>
  405206:	681a      	ldr	r2, [r3, #0]
  405208:	3b04      	subs	r3, #4
  40520a:	b91a      	cbnz	r2, 405214 <quorem+0xb0>
  40520c:	459b      	cmp	fp, r3
  40520e:	f108 38ff 	add.w	r8, r8, #4294967295
  405212:	d3f8      	bcc.n	405206 <quorem+0xa2>
  405214:	f8c0 8010 	str.w	r8, [r0, #16]
  405218:	4604      	mov	r4, r0
  40521a:	f001 fd65 	bl	406ce8 <__mcmp>
  40521e:	2800      	cmp	r0, #0
  405220:	db2e      	blt.n	405280 <quorem+0x11c>
  405222:	f109 0901 	add.w	r9, r9, #1
  405226:	465d      	mov	r5, fp
  405228:	2300      	movs	r3, #0
  40522a:	f857 1b04 	ldr.w	r1, [r7], #4
  40522e:	6828      	ldr	r0, [r5, #0]
  405230:	b28a      	uxth	r2, r1
  405232:	1a9a      	subs	r2, r3, r2
  405234:	0c0b      	lsrs	r3, r1, #16
  405236:	fa12 f280 	uxtah	r2, r2, r0
  40523a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40523e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405242:	b292      	uxth	r2, r2
  405244:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405248:	45ba      	cmp	sl, r7
  40524a:	f845 2b04 	str.w	r2, [r5], #4
  40524e:	ea4f 4323 	mov.w	r3, r3, asr #16
  405252:	d2ea      	bcs.n	40522a <quorem+0xc6>
  405254:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405258:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40525c:	b982      	cbnz	r2, 405280 <quorem+0x11c>
  40525e:	1f1a      	subs	r2, r3, #4
  405260:	4593      	cmp	fp, r2
  405262:	d20b      	bcs.n	40527c <quorem+0x118>
  405264:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405268:	b942      	cbnz	r2, 40527c <quorem+0x118>
  40526a:	3b08      	subs	r3, #8
  40526c:	e002      	b.n	405274 <quorem+0x110>
  40526e:	681a      	ldr	r2, [r3, #0]
  405270:	3b04      	subs	r3, #4
  405272:	b91a      	cbnz	r2, 40527c <quorem+0x118>
  405274:	459b      	cmp	fp, r3
  405276:	f108 38ff 	add.w	r8, r8, #4294967295
  40527a:	d3f8      	bcc.n	40526e <quorem+0x10a>
  40527c:	f8c4 8010 	str.w	r8, [r4, #16]
  405280:	4648      	mov	r0, r9
  405282:	b003      	add	sp, #12
  405284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405288:	2000      	movs	r0, #0
  40528a:	4770      	bx	lr
  40528c:	0000      	movs	r0, r0
	...

00405290 <_dtoa_r>:
  405290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405294:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405296:	b09b      	sub	sp, #108	; 0x6c
  405298:	4604      	mov	r4, r0
  40529a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40529c:	4692      	mov	sl, r2
  40529e:	469b      	mov	fp, r3
  4052a0:	b141      	cbz	r1, 4052b4 <_dtoa_r+0x24>
  4052a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4052a4:	604a      	str	r2, [r1, #4]
  4052a6:	2301      	movs	r3, #1
  4052a8:	4093      	lsls	r3, r2
  4052aa:	608b      	str	r3, [r1, #8]
  4052ac:	f001 fb44 	bl	406938 <_Bfree>
  4052b0:	2300      	movs	r3, #0
  4052b2:	6423      	str	r3, [r4, #64]	; 0x40
  4052b4:	f1bb 0f00 	cmp.w	fp, #0
  4052b8:	465d      	mov	r5, fp
  4052ba:	db35      	blt.n	405328 <_dtoa_r+0x98>
  4052bc:	2300      	movs	r3, #0
  4052be:	6033      	str	r3, [r6, #0]
  4052c0:	4b9d      	ldr	r3, [pc, #628]	; (405538 <_dtoa_r+0x2a8>)
  4052c2:	43ab      	bics	r3, r5
  4052c4:	d015      	beq.n	4052f2 <_dtoa_r+0x62>
  4052c6:	4650      	mov	r0, sl
  4052c8:	4659      	mov	r1, fp
  4052ca:	2200      	movs	r2, #0
  4052cc:	2300      	movs	r3, #0
  4052ce:	f002 ff99 	bl	408204 <__aeabi_dcmpeq>
  4052d2:	4680      	mov	r8, r0
  4052d4:	2800      	cmp	r0, #0
  4052d6:	d02d      	beq.n	405334 <_dtoa_r+0xa4>
  4052d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4052da:	2301      	movs	r3, #1
  4052dc:	6013      	str	r3, [r2, #0]
  4052de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4052e0:	2b00      	cmp	r3, #0
  4052e2:	f000 80bd 	beq.w	405460 <_dtoa_r+0x1d0>
  4052e6:	4895      	ldr	r0, [pc, #596]	; (40553c <_dtoa_r+0x2ac>)
  4052e8:	6018      	str	r0, [r3, #0]
  4052ea:	3801      	subs	r0, #1
  4052ec:	b01b      	add	sp, #108	; 0x6c
  4052ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4052f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4052f4:	f242 730f 	movw	r3, #9999	; 0x270f
  4052f8:	6013      	str	r3, [r2, #0]
  4052fa:	f1ba 0f00 	cmp.w	sl, #0
  4052fe:	d10d      	bne.n	40531c <_dtoa_r+0x8c>
  405300:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405304:	b955      	cbnz	r5, 40531c <_dtoa_r+0x8c>
  405306:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405308:	488d      	ldr	r0, [pc, #564]	; (405540 <_dtoa_r+0x2b0>)
  40530a:	2b00      	cmp	r3, #0
  40530c:	d0ee      	beq.n	4052ec <_dtoa_r+0x5c>
  40530e:	f100 0308 	add.w	r3, r0, #8
  405312:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405314:	6013      	str	r3, [r2, #0]
  405316:	b01b      	add	sp, #108	; 0x6c
  405318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40531c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40531e:	4889      	ldr	r0, [pc, #548]	; (405544 <_dtoa_r+0x2b4>)
  405320:	2b00      	cmp	r3, #0
  405322:	d0e3      	beq.n	4052ec <_dtoa_r+0x5c>
  405324:	1cc3      	adds	r3, r0, #3
  405326:	e7f4      	b.n	405312 <_dtoa_r+0x82>
  405328:	2301      	movs	r3, #1
  40532a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40532e:	6033      	str	r3, [r6, #0]
  405330:	46ab      	mov	fp, r5
  405332:	e7c5      	b.n	4052c0 <_dtoa_r+0x30>
  405334:	aa18      	add	r2, sp, #96	; 0x60
  405336:	ab19      	add	r3, sp, #100	; 0x64
  405338:	9201      	str	r2, [sp, #4]
  40533a:	9300      	str	r3, [sp, #0]
  40533c:	4652      	mov	r2, sl
  40533e:	465b      	mov	r3, fp
  405340:	4620      	mov	r0, r4
  405342:	f001 fd71 	bl	406e28 <__d2b>
  405346:	0d2b      	lsrs	r3, r5, #20
  405348:	4681      	mov	r9, r0
  40534a:	d071      	beq.n	405430 <_dtoa_r+0x1a0>
  40534c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405350:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405354:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405356:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40535a:	4650      	mov	r0, sl
  40535c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405360:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405364:	2200      	movs	r2, #0
  405366:	4b78      	ldr	r3, [pc, #480]	; (405548 <_dtoa_r+0x2b8>)
  405368:	f002 fb30 	bl	4079cc <__aeabi_dsub>
  40536c:	a36c      	add	r3, pc, #432	; (adr r3, 405520 <_dtoa_r+0x290>)
  40536e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405372:	f002 fcdf 	bl	407d34 <__aeabi_dmul>
  405376:	a36c      	add	r3, pc, #432	; (adr r3, 405528 <_dtoa_r+0x298>)
  405378:	e9d3 2300 	ldrd	r2, r3, [r3]
  40537c:	f002 fb28 	bl	4079d0 <__adddf3>
  405380:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405384:	4630      	mov	r0, r6
  405386:	f002 fc6f 	bl	407c68 <__aeabi_i2d>
  40538a:	a369      	add	r3, pc, #420	; (adr r3, 405530 <_dtoa_r+0x2a0>)
  40538c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405390:	f002 fcd0 	bl	407d34 <__aeabi_dmul>
  405394:	4602      	mov	r2, r0
  405396:	460b      	mov	r3, r1
  405398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40539c:	f002 fb18 	bl	4079d0 <__adddf3>
  4053a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4053a4:	f002 ff76 	bl	408294 <__aeabi_d2iz>
  4053a8:	2200      	movs	r2, #0
  4053aa:	9002      	str	r0, [sp, #8]
  4053ac:	2300      	movs	r3, #0
  4053ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4053b2:	f002 ff31 	bl	408218 <__aeabi_dcmplt>
  4053b6:	2800      	cmp	r0, #0
  4053b8:	f040 8173 	bne.w	4056a2 <_dtoa_r+0x412>
  4053bc:	9d02      	ldr	r5, [sp, #8]
  4053be:	2d16      	cmp	r5, #22
  4053c0:	f200 815d 	bhi.w	40567e <_dtoa_r+0x3ee>
  4053c4:	4b61      	ldr	r3, [pc, #388]	; (40554c <_dtoa_r+0x2bc>)
  4053c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4053ca:	e9d3 0100 	ldrd	r0, r1, [r3]
  4053ce:	4652      	mov	r2, sl
  4053d0:	465b      	mov	r3, fp
  4053d2:	f002 ff3f 	bl	408254 <__aeabi_dcmpgt>
  4053d6:	2800      	cmp	r0, #0
  4053d8:	f000 81c5 	beq.w	405766 <_dtoa_r+0x4d6>
  4053dc:	1e6b      	subs	r3, r5, #1
  4053de:	9302      	str	r3, [sp, #8]
  4053e0:	2300      	movs	r3, #0
  4053e2:	930e      	str	r3, [sp, #56]	; 0x38
  4053e4:	1bbf      	subs	r7, r7, r6
  4053e6:	1e7b      	subs	r3, r7, #1
  4053e8:	9306      	str	r3, [sp, #24]
  4053ea:	f100 8154 	bmi.w	405696 <_dtoa_r+0x406>
  4053ee:	2300      	movs	r3, #0
  4053f0:	9308      	str	r3, [sp, #32]
  4053f2:	9b02      	ldr	r3, [sp, #8]
  4053f4:	2b00      	cmp	r3, #0
  4053f6:	f2c0 8145 	blt.w	405684 <_dtoa_r+0x3f4>
  4053fa:	9a06      	ldr	r2, [sp, #24]
  4053fc:	930d      	str	r3, [sp, #52]	; 0x34
  4053fe:	4611      	mov	r1, r2
  405400:	4419      	add	r1, r3
  405402:	2300      	movs	r3, #0
  405404:	9106      	str	r1, [sp, #24]
  405406:	930c      	str	r3, [sp, #48]	; 0x30
  405408:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40540a:	2b09      	cmp	r3, #9
  40540c:	d82a      	bhi.n	405464 <_dtoa_r+0x1d4>
  40540e:	2b05      	cmp	r3, #5
  405410:	f340 865b 	ble.w	4060ca <_dtoa_r+0xe3a>
  405414:	3b04      	subs	r3, #4
  405416:	9324      	str	r3, [sp, #144]	; 0x90
  405418:	2500      	movs	r5, #0
  40541a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40541c:	3b02      	subs	r3, #2
  40541e:	2b03      	cmp	r3, #3
  405420:	f200 8642 	bhi.w	4060a8 <_dtoa_r+0xe18>
  405424:	e8df f013 	tbh	[pc, r3, lsl #1]
  405428:	02c903d4 	.word	0x02c903d4
  40542c:	046103df 	.word	0x046103df
  405430:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405432:	9e19      	ldr	r6, [sp, #100]	; 0x64
  405434:	443e      	add	r6, r7
  405436:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40543a:	2b20      	cmp	r3, #32
  40543c:	f340 818e 	ble.w	40575c <_dtoa_r+0x4cc>
  405440:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405444:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405448:	409d      	lsls	r5, r3
  40544a:	fa2a f000 	lsr.w	r0, sl, r0
  40544e:	4328      	orrs	r0, r5
  405450:	f002 fbfa 	bl	407c48 <__aeabi_ui2d>
  405454:	2301      	movs	r3, #1
  405456:	3e01      	subs	r6, #1
  405458:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40545c:	9314      	str	r3, [sp, #80]	; 0x50
  40545e:	e781      	b.n	405364 <_dtoa_r+0xd4>
  405460:	483b      	ldr	r0, [pc, #236]	; (405550 <_dtoa_r+0x2c0>)
  405462:	e743      	b.n	4052ec <_dtoa_r+0x5c>
  405464:	2100      	movs	r1, #0
  405466:	6461      	str	r1, [r4, #68]	; 0x44
  405468:	4620      	mov	r0, r4
  40546a:	9125      	str	r1, [sp, #148]	; 0x94
  40546c:	f001 fa3e 	bl	4068ec <_Balloc>
  405470:	f04f 33ff 	mov.w	r3, #4294967295
  405474:	930a      	str	r3, [sp, #40]	; 0x28
  405476:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405478:	930f      	str	r3, [sp, #60]	; 0x3c
  40547a:	2301      	movs	r3, #1
  40547c:	9004      	str	r0, [sp, #16]
  40547e:	6420      	str	r0, [r4, #64]	; 0x40
  405480:	9224      	str	r2, [sp, #144]	; 0x90
  405482:	930b      	str	r3, [sp, #44]	; 0x2c
  405484:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405486:	2b00      	cmp	r3, #0
  405488:	f2c0 80d9 	blt.w	40563e <_dtoa_r+0x3ae>
  40548c:	9a02      	ldr	r2, [sp, #8]
  40548e:	2a0e      	cmp	r2, #14
  405490:	f300 80d5 	bgt.w	40563e <_dtoa_r+0x3ae>
  405494:	4b2d      	ldr	r3, [pc, #180]	; (40554c <_dtoa_r+0x2bc>)
  405496:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40549a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40549e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4054a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4054a4:	2b00      	cmp	r3, #0
  4054a6:	f2c0 83ba 	blt.w	405c1e <_dtoa_r+0x98e>
  4054aa:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4054ae:	4650      	mov	r0, sl
  4054b0:	462a      	mov	r2, r5
  4054b2:	4633      	mov	r3, r6
  4054b4:	4659      	mov	r1, fp
  4054b6:	f002 fd67 	bl	407f88 <__aeabi_ddiv>
  4054ba:	f002 feeb 	bl	408294 <__aeabi_d2iz>
  4054be:	4680      	mov	r8, r0
  4054c0:	f002 fbd2 	bl	407c68 <__aeabi_i2d>
  4054c4:	462a      	mov	r2, r5
  4054c6:	4633      	mov	r3, r6
  4054c8:	f002 fc34 	bl	407d34 <__aeabi_dmul>
  4054cc:	460b      	mov	r3, r1
  4054ce:	4602      	mov	r2, r0
  4054d0:	4659      	mov	r1, fp
  4054d2:	4650      	mov	r0, sl
  4054d4:	f002 fa7a 	bl	4079cc <__aeabi_dsub>
  4054d8:	9d04      	ldr	r5, [sp, #16]
  4054da:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4054de:	702b      	strb	r3, [r5, #0]
  4054e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4054e2:	2b01      	cmp	r3, #1
  4054e4:	4606      	mov	r6, r0
  4054e6:	460f      	mov	r7, r1
  4054e8:	f105 0501 	add.w	r5, r5, #1
  4054ec:	d068      	beq.n	4055c0 <_dtoa_r+0x330>
  4054ee:	2200      	movs	r2, #0
  4054f0:	4b18      	ldr	r3, [pc, #96]	; (405554 <_dtoa_r+0x2c4>)
  4054f2:	f002 fc1f 	bl	407d34 <__aeabi_dmul>
  4054f6:	2200      	movs	r2, #0
  4054f8:	2300      	movs	r3, #0
  4054fa:	4606      	mov	r6, r0
  4054fc:	460f      	mov	r7, r1
  4054fe:	f002 fe81 	bl	408204 <__aeabi_dcmpeq>
  405502:	2800      	cmp	r0, #0
  405504:	f040 8088 	bne.w	405618 <_dtoa_r+0x388>
  405508:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40550c:	f04f 0a00 	mov.w	sl, #0
  405510:	f8df b040 	ldr.w	fp, [pc, #64]	; 405554 <_dtoa_r+0x2c4>
  405514:	940c      	str	r4, [sp, #48]	; 0x30
  405516:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40551a:	e028      	b.n	40556e <_dtoa_r+0x2de>
  40551c:	f3af 8000 	nop.w
  405520:	636f4361 	.word	0x636f4361
  405524:	3fd287a7 	.word	0x3fd287a7
  405528:	8b60c8b3 	.word	0x8b60c8b3
  40552c:	3fc68a28 	.word	0x3fc68a28
  405530:	509f79fb 	.word	0x509f79fb
  405534:	3fd34413 	.word	0x3fd34413
  405538:	7ff00000 	.word	0x7ff00000
  40553c:	00409079 	.word	0x00409079
  405540:	0040909c 	.word	0x0040909c
  405544:	004090a8 	.word	0x004090a8
  405548:	3ff80000 	.word	0x3ff80000
  40554c:	004090d8 	.word	0x004090d8
  405550:	00409078 	.word	0x00409078
  405554:	40240000 	.word	0x40240000
  405558:	f002 fbec 	bl	407d34 <__aeabi_dmul>
  40555c:	2200      	movs	r2, #0
  40555e:	2300      	movs	r3, #0
  405560:	4606      	mov	r6, r0
  405562:	460f      	mov	r7, r1
  405564:	f002 fe4e 	bl	408204 <__aeabi_dcmpeq>
  405568:	2800      	cmp	r0, #0
  40556a:	f040 83c1 	bne.w	405cf0 <_dtoa_r+0xa60>
  40556e:	4642      	mov	r2, r8
  405570:	464b      	mov	r3, r9
  405572:	4630      	mov	r0, r6
  405574:	4639      	mov	r1, r7
  405576:	f002 fd07 	bl	407f88 <__aeabi_ddiv>
  40557a:	f002 fe8b 	bl	408294 <__aeabi_d2iz>
  40557e:	4604      	mov	r4, r0
  405580:	f002 fb72 	bl	407c68 <__aeabi_i2d>
  405584:	4642      	mov	r2, r8
  405586:	464b      	mov	r3, r9
  405588:	f002 fbd4 	bl	407d34 <__aeabi_dmul>
  40558c:	4602      	mov	r2, r0
  40558e:	460b      	mov	r3, r1
  405590:	4630      	mov	r0, r6
  405592:	4639      	mov	r1, r7
  405594:	f002 fa1a 	bl	4079cc <__aeabi_dsub>
  405598:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40559c:	9e04      	ldr	r6, [sp, #16]
  40559e:	f805 eb01 	strb.w	lr, [r5], #1
  4055a2:	eba5 0e06 	sub.w	lr, r5, r6
  4055a6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4055a8:	45b6      	cmp	lr, r6
  4055aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4055ae:	4652      	mov	r2, sl
  4055b0:	465b      	mov	r3, fp
  4055b2:	d1d1      	bne.n	405558 <_dtoa_r+0x2c8>
  4055b4:	46a0      	mov	r8, r4
  4055b6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4055ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4055bc:	4606      	mov	r6, r0
  4055be:	460f      	mov	r7, r1
  4055c0:	4632      	mov	r2, r6
  4055c2:	463b      	mov	r3, r7
  4055c4:	4630      	mov	r0, r6
  4055c6:	4639      	mov	r1, r7
  4055c8:	f002 fa02 	bl	4079d0 <__adddf3>
  4055cc:	4606      	mov	r6, r0
  4055ce:	460f      	mov	r7, r1
  4055d0:	4602      	mov	r2, r0
  4055d2:	460b      	mov	r3, r1
  4055d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4055d8:	f002 fe1e 	bl	408218 <__aeabi_dcmplt>
  4055dc:	b948      	cbnz	r0, 4055f2 <_dtoa_r+0x362>
  4055de:	4632      	mov	r2, r6
  4055e0:	463b      	mov	r3, r7
  4055e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4055e6:	f002 fe0d 	bl	408204 <__aeabi_dcmpeq>
  4055ea:	b1a8      	cbz	r0, 405618 <_dtoa_r+0x388>
  4055ec:	f018 0f01 	tst.w	r8, #1
  4055f0:	d012      	beq.n	405618 <_dtoa_r+0x388>
  4055f2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4055f6:	9a04      	ldr	r2, [sp, #16]
  4055f8:	1e6b      	subs	r3, r5, #1
  4055fa:	e004      	b.n	405606 <_dtoa_r+0x376>
  4055fc:	429a      	cmp	r2, r3
  4055fe:	f000 8401 	beq.w	405e04 <_dtoa_r+0xb74>
  405602:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  405606:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40560a:	f103 0501 	add.w	r5, r3, #1
  40560e:	d0f5      	beq.n	4055fc <_dtoa_r+0x36c>
  405610:	f108 0801 	add.w	r8, r8, #1
  405614:	f883 8000 	strb.w	r8, [r3]
  405618:	4649      	mov	r1, r9
  40561a:	4620      	mov	r0, r4
  40561c:	f001 f98c 	bl	406938 <_Bfree>
  405620:	2200      	movs	r2, #0
  405622:	9b02      	ldr	r3, [sp, #8]
  405624:	702a      	strb	r2, [r5, #0]
  405626:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405628:	3301      	adds	r3, #1
  40562a:	6013      	str	r3, [r2, #0]
  40562c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40562e:	2b00      	cmp	r3, #0
  405630:	f000 839e 	beq.w	405d70 <_dtoa_r+0xae0>
  405634:	9804      	ldr	r0, [sp, #16]
  405636:	601d      	str	r5, [r3, #0]
  405638:	b01b      	add	sp, #108	; 0x6c
  40563a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40563e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405640:	2a00      	cmp	r2, #0
  405642:	d03e      	beq.n	4056c2 <_dtoa_r+0x432>
  405644:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405646:	2a01      	cmp	r2, #1
  405648:	f340 8311 	ble.w	405c6e <_dtoa_r+0x9de>
  40564c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40564e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405650:	1e5f      	subs	r7, r3, #1
  405652:	42ba      	cmp	r2, r7
  405654:	f2c0 838f 	blt.w	405d76 <_dtoa_r+0xae6>
  405658:	1bd7      	subs	r7, r2, r7
  40565a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40565c:	2b00      	cmp	r3, #0
  40565e:	f2c0 848b 	blt.w	405f78 <_dtoa_r+0xce8>
  405662:	9d08      	ldr	r5, [sp, #32]
  405664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405666:	9a08      	ldr	r2, [sp, #32]
  405668:	441a      	add	r2, r3
  40566a:	9208      	str	r2, [sp, #32]
  40566c:	9a06      	ldr	r2, [sp, #24]
  40566e:	2101      	movs	r1, #1
  405670:	441a      	add	r2, r3
  405672:	4620      	mov	r0, r4
  405674:	9206      	str	r2, [sp, #24]
  405676:	f001 f9f9 	bl	406a6c <__i2b>
  40567a:	4606      	mov	r6, r0
  40567c:	e024      	b.n	4056c8 <_dtoa_r+0x438>
  40567e:	2301      	movs	r3, #1
  405680:	930e      	str	r3, [sp, #56]	; 0x38
  405682:	e6af      	b.n	4053e4 <_dtoa_r+0x154>
  405684:	9a08      	ldr	r2, [sp, #32]
  405686:	9b02      	ldr	r3, [sp, #8]
  405688:	1ad2      	subs	r2, r2, r3
  40568a:	425b      	negs	r3, r3
  40568c:	930c      	str	r3, [sp, #48]	; 0x30
  40568e:	2300      	movs	r3, #0
  405690:	9208      	str	r2, [sp, #32]
  405692:	930d      	str	r3, [sp, #52]	; 0x34
  405694:	e6b8      	b.n	405408 <_dtoa_r+0x178>
  405696:	f1c7 0301 	rsb	r3, r7, #1
  40569a:	9308      	str	r3, [sp, #32]
  40569c:	2300      	movs	r3, #0
  40569e:	9306      	str	r3, [sp, #24]
  4056a0:	e6a7      	b.n	4053f2 <_dtoa_r+0x162>
  4056a2:	9d02      	ldr	r5, [sp, #8]
  4056a4:	4628      	mov	r0, r5
  4056a6:	f002 fadf 	bl	407c68 <__aeabi_i2d>
  4056aa:	4602      	mov	r2, r0
  4056ac:	460b      	mov	r3, r1
  4056ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4056b2:	f002 fda7 	bl	408204 <__aeabi_dcmpeq>
  4056b6:	2800      	cmp	r0, #0
  4056b8:	f47f ae80 	bne.w	4053bc <_dtoa_r+0x12c>
  4056bc:	1e6b      	subs	r3, r5, #1
  4056be:	9302      	str	r3, [sp, #8]
  4056c0:	e67c      	b.n	4053bc <_dtoa_r+0x12c>
  4056c2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4056c4:	9d08      	ldr	r5, [sp, #32]
  4056c6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4056c8:	2d00      	cmp	r5, #0
  4056ca:	dd0c      	ble.n	4056e6 <_dtoa_r+0x456>
  4056cc:	9906      	ldr	r1, [sp, #24]
  4056ce:	2900      	cmp	r1, #0
  4056d0:	460b      	mov	r3, r1
  4056d2:	dd08      	ble.n	4056e6 <_dtoa_r+0x456>
  4056d4:	42a9      	cmp	r1, r5
  4056d6:	9a08      	ldr	r2, [sp, #32]
  4056d8:	bfa8      	it	ge
  4056da:	462b      	movge	r3, r5
  4056dc:	1ad2      	subs	r2, r2, r3
  4056de:	1aed      	subs	r5, r5, r3
  4056e0:	1acb      	subs	r3, r1, r3
  4056e2:	9208      	str	r2, [sp, #32]
  4056e4:	9306      	str	r3, [sp, #24]
  4056e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4056e8:	b1d3      	cbz	r3, 405720 <_dtoa_r+0x490>
  4056ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4056ec:	2b00      	cmp	r3, #0
  4056ee:	f000 82b7 	beq.w	405c60 <_dtoa_r+0x9d0>
  4056f2:	2f00      	cmp	r7, #0
  4056f4:	dd10      	ble.n	405718 <_dtoa_r+0x488>
  4056f6:	4631      	mov	r1, r6
  4056f8:	463a      	mov	r2, r7
  4056fa:	4620      	mov	r0, r4
  4056fc:	f001 fa52 	bl	406ba4 <__pow5mult>
  405700:	464a      	mov	r2, r9
  405702:	4601      	mov	r1, r0
  405704:	4606      	mov	r6, r0
  405706:	4620      	mov	r0, r4
  405708:	f001 f9ba 	bl	406a80 <__multiply>
  40570c:	4649      	mov	r1, r9
  40570e:	4680      	mov	r8, r0
  405710:	4620      	mov	r0, r4
  405712:	f001 f911 	bl	406938 <_Bfree>
  405716:	46c1      	mov	r9, r8
  405718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40571a:	1bda      	subs	r2, r3, r7
  40571c:	f040 82a1 	bne.w	405c62 <_dtoa_r+0x9d2>
  405720:	2101      	movs	r1, #1
  405722:	4620      	mov	r0, r4
  405724:	f001 f9a2 	bl	406a6c <__i2b>
  405728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40572a:	2b00      	cmp	r3, #0
  40572c:	4680      	mov	r8, r0
  40572e:	dd1c      	ble.n	40576a <_dtoa_r+0x4da>
  405730:	4601      	mov	r1, r0
  405732:	461a      	mov	r2, r3
  405734:	4620      	mov	r0, r4
  405736:	f001 fa35 	bl	406ba4 <__pow5mult>
  40573a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40573c:	2b01      	cmp	r3, #1
  40573e:	4680      	mov	r8, r0
  405740:	f340 8254 	ble.w	405bec <_dtoa_r+0x95c>
  405744:	2300      	movs	r3, #0
  405746:	930c      	str	r3, [sp, #48]	; 0x30
  405748:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40574c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405750:	6918      	ldr	r0, [r3, #16]
  405752:	f001 f93b 	bl	4069cc <__hi0bits>
  405756:	f1c0 0020 	rsb	r0, r0, #32
  40575a:	e010      	b.n	40577e <_dtoa_r+0x4ee>
  40575c:	f1c3 0520 	rsb	r5, r3, #32
  405760:	fa0a f005 	lsl.w	r0, sl, r5
  405764:	e674      	b.n	405450 <_dtoa_r+0x1c0>
  405766:	900e      	str	r0, [sp, #56]	; 0x38
  405768:	e63c      	b.n	4053e4 <_dtoa_r+0x154>
  40576a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40576c:	2b01      	cmp	r3, #1
  40576e:	f340 8287 	ble.w	405c80 <_dtoa_r+0x9f0>
  405772:	2300      	movs	r3, #0
  405774:	930c      	str	r3, [sp, #48]	; 0x30
  405776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405778:	2001      	movs	r0, #1
  40577a:	2b00      	cmp	r3, #0
  40577c:	d1e4      	bne.n	405748 <_dtoa_r+0x4b8>
  40577e:	9a06      	ldr	r2, [sp, #24]
  405780:	4410      	add	r0, r2
  405782:	f010 001f 	ands.w	r0, r0, #31
  405786:	f000 80a1 	beq.w	4058cc <_dtoa_r+0x63c>
  40578a:	f1c0 0320 	rsb	r3, r0, #32
  40578e:	2b04      	cmp	r3, #4
  405790:	f340 849e 	ble.w	4060d0 <_dtoa_r+0xe40>
  405794:	9b08      	ldr	r3, [sp, #32]
  405796:	f1c0 001c 	rsb	r0, r0, #28
  40579a:	4403      	add	r3, r0
  40579c:	9308      	str	r3, [sp, #32]
  40579e:	4613      	mov	r3, r2
  4057a0:	4403      	add	r3, r0
  4057a2:	4405      	add	r5, r0
  4057a4:	9306      	str	r3, [sp, #24]
  4057a6:	9b08      	ldr	r3, [sp, #32]
  4057a8:	2b00      	cmp	r3, #0
  4057aa:	dd05      	ble.n	4057b8 <_dtoa_r+0x528>
  4057ac:	4649      	mov	r1, r9
  4057ae:	461a      	mov	r2, r3
  4057b0:	4620      	mov	r0, r4
  4057b2:	f001 fa47 	bl	406c44 <__lshift>
  4057b6:	4681      	mov	r9, r0
  4057b8:	9b06      	ldr	r3, [sp, #24]
  4057ba:	2b00      	cmp	r3, #0
  4057bc:	dd05      	ble.n	4057ca <_dtoa_r+0x53a>
  4057be:	4641      	mov	r1, r8
  4057c0:	461a      	mov	r2, r3
  4057c2:	4620      	mov	r0, r4
  4057c4:	f001 fa3e 	bl	406c44 <__lshift>
  4057c8:	4680      	mov	r8, r0
  4057ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4057cc:	2b00      	cmp	r3, #0
  4057ce:	f040 8086 	bne.w	4058de <_dtoa_r+0x64e>
  4057d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4057d4:	2b00      	cmp	r3, #0
  4057d6:	f340 8266 	ble.w	405ca6 <_dtoa_r+0xa16>
  4057da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4057dc:	2b00      	cmp	r3, #0
  4057de:	f000 8098 	beq.w	405912 <_dtoa_r+0x682>
  4057e2:	2d00      	cmp	r5, #0
  4057e4:	dd05      	ble.n	4057f2 <_dtoa_r+0x562>
  4057e6:	4631      	mov	r1, r6
  4057e8:	462a      	mov	r2, r5
  4057ea:	4620      	mov	r0, r4
  4057ec:	f001 fa2a 	bl	406c44 <__lshift>
  4057f0:	4606      	mov	r6, r0
  4057f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4057f4:	2b00      	cmp	r3, #0
  4057f6:	f040 8337 	bne.w	405e68 <_dtoa_r+0xbd8>
  4057fa:	9606      	str	r6, [sp, #24]
  4057fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4057fe:	9a04      	ldr	r2, [sp, #16]
  405800:	f8dd b018 	ldr.w	fp, [sp, #24]
  405804:	3b01      	subs	r3, #1
  405806:	18d3      	adds	r3, r2, r3
  405808:	930b      	str	r3, [sp, #44]	; 0x2c
  40580a:	f00a 0301 	and.w	r3, sl, #1
  40580e:	930c      	str	r3, [sp, #48]	; 0x30
  405810:	4617      	mov	r7, r2
  405812:	46c2      	mov	sl, r8
  405814:	4651      	mov	r1, sl
  405816:	4648      	mov	r0, r9
  405818:	f7ff fca4 	bl	405164 <quorem>
  40581c:	4631      	mov	r1, r6
  40581e:	4605      	mov	r5, r0
  405820:	4648      	mov	r0, r9
  405822:	f001 fa61 	bl	406ce8 <__mcmp>
  405826:	465a      	mov	r2, fp
  405828:	900a      	str	r0, [sp, #40]	; 0x28
  40582a:	4651      	mov	r1, sl
  40582c:	4620      	mov	r0, r4
  40582e:	f001 fa77 	bl	406d20 <__mdiff>
  405832:	68c2      	ldr	r2, [r0, #12]
  405834:	4680      	mov	r8, r0
  405836:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40583a:	2a00      	cmp	r2, #0
  40583c:	f040 822b 	bne.w	405c96 <_dtoa_r+0xa06>
  405840:	4601      	mov	r1, r0
  405842:	4648      	mov	r0, r9
  405844:	9308      	str	r3, [sp, #32]
  405846:	f001 fa4f 	bl	406ce8 <__mcmp>
  40584a:	4641      	mov	r1, r8
  40584c:	9006      	str	r0, [sp, #24]
  40584e:	4620      	mov	r0, r4
  405850:	f001 f872 	bl	406938 <_Bfree>
  405854:	9a06      	ldr	r2, [sp, #24]
  405856:	9b08      	ldr	r3, [sp, #32]
  405858:	b932      	cbnz	r2, 405868 <_dtoa_r+0x5d8>
  40585a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40585c:	b921      	cbnz	r1, 405868 <_dtoa_r+0x5d8>
  40585e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405860:	2a00      	cmp	r2, #0
  405862:	f000 83ef 	beq.w	406044 <_dtoa_r+0xdb4>
  405866:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405868:	990a      	ldr	r1, [sp, #40]	; 0x28
  40586a:	2900      	cmp	r1, #0
  40586c:	f2c0 829f 	blt.w	405dae <_dtoa_r+0xb1e>
  405870:	d105      	bne.n	40587e <_dtoa_r+0x5ee>
  405872:	9924      	ldr	r1, [sp, #144]	; 0x90
  405874:	b919      	cbnz	r1, 40587e <_dtoa_r+0x5ee>
  405876:	990c      	ldr	r1, [sp, #48]	; 0x30
  405878:	2900      	cmp	r1, #0
  40587a:	f000 8298 	beq.w	405dae <_dtoa_r+0xb1e>
  40587e:	2a00      	cmp	r2, #0
  405880:	f300 8306 	bgt.w	405e90 <_dtoa_r+0xc00>
  405884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405886:	703b      	strb	r3, [r7, #0]
  405888:	f107 0801 	add.w	r8, r7, #1
  40588c:	4297      	cmp	r7, r2
  40588e:	4645      	mov	r5, r8
  405890:	f000 830c 	beq.w	405eac <_dtoa_r+0xc1c>
  405894:	4649      	mov	r1, r9
  405896:	2300      	movs	r3, #0
  405898:	220a      	movs	r2, #10
  40589a:	4620      	mov	r0, r4
  40589c:	f001 f856 	bl	40694c <__multadd>
  4058a0:	455e      	cmp	r6, fp
  4058a2:	4681      	mov	r9, r0
  4058a4:	4631      	mov	r1, r6
  4058a6:	f04f 0300 	mov.w	r3, #0
  4058aa:	f04f 020a 	mov.w	r2, #10
  4058ae:	4620      	mov	r0, r4
  4058b0:	f000 81eb 	beq.w	405c8a <_dtoa_r+0x9fa>
  4058b4:	f001 f84a 	bl	40694c <__multadd>
  4058b8:	4659      	mov	r1, fp
  4058ba:	4606      	mov	r6, r0
  4058bc:	2300      	movs	r3, #0
  4058be:	220a      	movs	r2, #10
  4058c0:	4620      	mov	r0, r4
  4058c2:	f001 f843 	bl	40694c <__multadd>
  4058c6:	4647      	mov	r7, r8
  4058c8:	4683      	mov	fp, r0
  4058ca:	e7a3      	b.n	405814 <_dtoa_r+0x584>
  4058cc:	201c      	movs	r0, #28
  4058ce:	9b08      	ldr	r3, [sp, #32]
  4058d0:	4403      	add	r3, r0
  4058d2:	9308      	str	r3, [sp, #32]
  4058d4:	9b06      	ldr	r3, [sp, #24]
  4058d6:	4403      	add	r3, r0
  4058d8:	4405      	add	r5, r0
  4058da:	9306      	str	r3, [sp, #24]
  4058dc:	e763      	b.n	4057a6 <_dtoa_r+0x516>
  4058de:	4641      	mov	r1, r8
  4058e0:	4648      	mov	r0, r9
  4058e2:	f001 fa01 	bl	406ce8 <__mcmp>
  4058e6:	2800      	cmp	r0, #0
  4058e8:	f6bf af73 	bge.w	4057d2 <_dtoa_r+0x542>
  4058ec:	9f02      	ldr	r7, [sp, #8]
  4058ee:	4649      	mov	r1, r9
  4058f0:	2300      	movs	r3, #0
  4058f2:	220a      	movs	r2, #10
  4058f4:	4620      	mov	r0, r4
  4058f6:	3f01      	subs	r7, #1
  4058f8:	9702      	str	r7, [sp, #8]
  4058fa:	f001 f827 	bl	40694c <__multadd>
  4058fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405900:	4681      	mov	r9, r0
  405902:	2b00      	cmp	r3, #0
  405904:	f040 83b6 	bne.w	406074 <_dtoa_r+0xde4>
  405908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40590a:	2b00      	cmp	r3, #0
  40590c:	f340 83bf 	ble.w	40608e <_dtoa_r+0xdfe>
  405910:	930a      	str	r3, [sp, #40]	; 0x28
  405912:	f8dd b010 	ldr.w	fp, [sp, #16]
  405916:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405918:	465d      	mov	r5, fp
  40591a:	e002      	b.n	405922 <_dtoa_r+0x692>
  40591c:	f001 f816 	bl	40694c <__multadd>
  405920:	4681      	mov	r9, r0
  405922:	4641      	mov	r1, r8
  405924:	4648      	mov	r0, r9
  405926:	f7ff fc1d 	bl	405164 <quorem>
  40592a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40592e:	f805 ab01 	strb.w	sl, [r5], #1
  405932:	eba5 030b 	sub.w	r3, r5, fp
  405936:	42bb      	cmp	r3, r7
  405938:	f04f 020a 	mov.w	r2, #10
  40593c:	f04f 0300 	mov.w	r3, #0
  405940:	4649      	mov	r1, r9
  405942:	4620      	mov	r0, r4
  405944:	dbea      	blt.n	40591c <_dtoa_r+0x68c>
  405946:	9b04      	ldr	r3, [sp, #16]
  405948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40594a:	2a01      	cmp	r2, #1
  40594c:	bfac      	ite	ge
  40594e:	189b      	addge	r3, r3, r2
  405950:	3301      	addlt	r3, #1
  405952:	461d      	mov	r5, r3
  405954:	f04f 0b00 	mov.w	fp, #0
  405958:	4649      	mov	r1, r9
  40595a:	2201      	movs	r2, #1
  40595c:	4620      	mov	r0, r4
  40595e:	f001 f971 	bl	406c44 <__lshift>
  405962:	4641      	mov	r1, r8
  405964:	4681      	mov	r9, r0
  405966:	f001 f9bf 	bl	406ce8 <__mcmp>
  40596a:	2800      	cmp	r0, #0
  40596c:	f340 823d 	ble.w	405dea <_dtoa_r+0xb5a>
  405970:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405974:	9904      	ldr	r1, [sp, #16]
  405976:	1e6b      	subs	r3, r5, #1
  405978:	e004      	b.n	405984 <_dtoa_r+0x6f4>
  40597a:	428b      	cmp	r3, r1
  40597c:	f000 81ae 	beq.w	405cdc <_dtoa_r+0xa4c>
  405980:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405984:	2a39      	cmp	r2, #57	; 0x39
  405986:	f103 0501 	add.w	r5, r3, #1
  40598a:	d0f6      	beq.n	40597a <_dtoa_r+0x6ea>
  40598c:	3201      	adds	r2, #1
  40598e:	701a      	strb	r2, [r3, #0]
  405990:	4641      	mov	r1, r8
  405992:	4620      	mov	r0, r4
  405994:	f000 ffd0 	bl	406938 <_Bfree>
  405998:	2e00      	cmp	r6, #0
  40599a:	f43f ae3d 	beq.w	405618 <_dtoa_r+0x388>
  40599e:	f1bb 0f00 	cmp.w	fp, #0
  4059a2:	d005      	beq.n	4059b0 <_dtoa_r+0x720>
  4059a4:	45b3      	cmp	fp, r6
  4059a6:	d003      	beq.n	4059b0 <_dtoa_r+0x720>
  4059a8:	4659      	mov	r1, fp
  4059aa:	4620      	mov	r0, r4
  4059ac:	f000 ffc4 	bl	406938 <_Bfree>
  4059b0:	4631      	mov	r1, r6
  4059b2:	4620      	mov	r0, r4
  4059b4:	f000 ffc0 	bl	406938 <_Bfree>
  4059b8:	e62e      	b.n	405618 <_dtoa_r+0x388>
  4059ba:	2300      	movs	r3, #0
  4059bc:	930b      	str	r3, [sp, #44]	; 0x2c
  4059be:	9b02      	ldr	r3, [sp, #8]
  4059c0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4059c2:	4413      	add	r3, r2
  4059c4:	930f      	str	r3, [sp, #60]	; 0x3c
  4059c6:	3301      	adds	r3, #1
  4059c8:	2b01      	cmp	r3, #1
  4059ca:	461f      	mov	r7, r3
  4059cc:	461e      	mov	r6, r3
  4059ce:	930a      	str	r3, [sp, #40]	; 0x28
  4059d0:	bfb8      	it	lt
  4059d2:	2701      	movlt	r7, #1
  4059d4:	2100      	movs	r1, #0
  4059d6:	2f17      	cmp	r7, #23
  4059d8:	6461      	str	r1, [r4, #68]	; 0x44
  4059da:	d90a      	bls.n	4059f2 <_dtoa_r+0x762>
  4059dc:	2201      	movs	r2, #1
  4059de:	2304      	movs	r3, #4
  4059e0:	005b      	lsls	r3, r3, #1
  4059e2:	f103 0014 	add.w	r0, r3, #20
  4059e6:	4287      	cmp	r7, r0
  4059e8:	4611      	mov	r1, r2
  4059ea:	f102 0201 	add.w	r2, r2, #1
  4059ee:	d2f7      	bcs.n	4059e0 <_dtoa_r+0x750>
  4059f0:	6461      	str	r1, [r4, #68]	; 0x44
  4059f2:	4620      	mov	r0, r4
  4059f4:	f000 ff7a 	bl	4068ec <_Balloc>
  4059f8:	2e0e      	cmp	r6, #14
  4059fa:	9004      	str	r0, [sp, #16]
  4059fc:	6420      	str	r0, [r4, #64]	; 0x40
  4059fe:	f63f ad41 	bhi.w	405484 <_dtoa_r+0x1f4>
  405a02:	2d00      	cmp	r5, #0
  405a04:	f43f ad3e 	beq.w	405484 <_dtoa_r+0x1f4>
  405a08:	9902      	ldr	r1, [sp, #8]
  405a0a:	2900      	cmp	r1, #0
  405a0c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405a10:	f340 8202 	ble.w	405e18 <_dtoa_r+0xb88>
  405a14:	4bb8      	ldr	r3, [pc, #736]	; (405cf8 <_dtoa_r+0xa68>)
  405a16:	f001 020f 	and.w	r2, r1, #15
  405a1a:	110d      	asrs	r5, r1, #4
  405a1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405a20:	06e9      	lsls	r1, r5, #27
  405a22:	e9d3 6700 	ldrd	r6, r7, [r3]
  405a26:	f140 81ae 	bpl.w	405d86 <_dtoa_r+0xaf6>
  405a2a:	4bb4      	ldr	r3, [pc, #720]	; (405cfc <_dtoa_r+0xa6c>)
  405a2c:	4650      	mov	r0, sl
  405a2e:	4659      	mov	r1, fp
  405a30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405a34:	f002 faa8 	bl	407f88 <__aeabi_ddiv>
  405a38:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  405a3c:	f005 050f 	and.w	r5, r5, #15
  405a40:	f04f 0a03 	mov.w	sl, #3
  405a44:	b18d      	cbz	r5, 405a6a <_dtoa_r+0x7da>
  405a46:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 405cfc <_dtoa_r+0xa6c>
  405a4a:	07ea      	lsls	r2, r5, #31
  405a4c:	d509      	bpl.n	405a62 <_dtoa_r+0x7d2>
  405a4e:	4630      	mov	r0, r6
  405a50:	4639      	mov	r1, r7
  405a52:	e9d8 2300 	ldrd	r2, r3, [r8]
  405a56:	f002 f96d 	bl	407d34 <__aeabi_dmul>
  405a5a:	f10a 0a01 	add.w	sl, sl, #1
  405a5e:	4606      	mov	r6, r0
  405a60:	460f      	mov	r7, r1
  405a62:	106d      	asrs	r5, r5, #1
  405a64:	f108 0808 	add.w	r8, r8, #8
  405a68:	d1ef      	bne.n	405a4a <_dtoa_r+0x7ba>
  405a6a:	463b      	mov	r3, r7
  405a6c:	4632      	mov	r2, r6
  405a6e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  405a72:	f002 fa89 	bl	407f88 <__aeabi_ddiv>
  405a76:	4607      	mov	r7, r0
  405a78:	4688      	mov	r8, r1
  405a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405a7c:	b143      	cbz	r3, 405a90 <_dtoa_r+0x800>
  405a7e:	2200      	movs	r2, #0
  405a80:	4b9f      	ldr	r3, [pc, #636]	; (405d00 <_dtoa_r+0xa70>)
  405a82:	4638      	mov	r0, r7
  405a84:	4641      	mov	r1, r8
  405a86:	f002 fbc7 	bl	408218 <__aeabi_dcmplt>
  405a8a:	2800      	cmp	r0, #0
  405a8c:	f040 8286 	bne.w	405f9c <_dtoa_r+0xd0c>
  405a90:	4650      	mov	r0, sl
  405a92:	f002 f8e9 	bl	407c68 <__aeabi_i2d>
  405a96:	463a      	mov	r2, r7
  405a98:	4643      	mov	r3, r8
  405a9a:	f002 f94b 	bl	407d34 <__aeabi_dmul>
  405a9e:	4b99      	ldr	r3, [pc, #612]	; (405d04 <_dtoa_r+0xa74>)
  405aa0:	2200      	movs	r2, #0
  405aa2:	f001 ff95 	bl	4079d0 <__adddf3>
  405aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405aa8:	4605      	mov	r5, r0
  405aaa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405aae:	2b00      	cmp	r3, #0
  405ab0:	f000 813e 	beq.w	405d30 <_dtoa_r+0xaa0>
  405ab4:	9b02      	ldr	r3, [sp, #8]
  405ab6:	9315      	str	r3, [sp, #84]	; 0x54
  405ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405aba:	9312      	str	r3, [sp, #72]	; 0x48
  405abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405abe:	2b00      	cmp	r3, #0
  405ac0:	f000 81fa 	beq.w	405eb8 <_dtoa_r+0xc28>
  405ac4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405ac6:	4b8c      	ldr	r3, [pc, #560]	; (405cf8 <_dtoa_r+0xa68>)
  405ac8:	498f      	ldr	r1, [pc, #572]	; (405d08 <_dtoa_r+0xa78>)
  405aca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405ace:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405ad2:	2000      	movs	r0, #0
  405ad4:	f002 fa58 	bl	407f88 <__aeabi_ddiv>
  405ad8:	462a      	mov	r2, r5
  405ada:	4633      	mov	r3, r6
  405adc:	f001 ff76 	bl	4079cc <__aeabi_dsub>
  405ae0:	4682      	mov	sl, r0
  405ae2:	468b      	mov	fp, r1
  405ae4:	4638      	mov	r0, r7
  405ae6:	4641      	mov	r1, r8
  405ae8:	f002 fbd4 	bl	408294 <__aeabi_d2iz>
  405aec:	4605      	mov	r5, r0
  405aee:	f002 f8bb 	bl	407c68 <__aeabi_i2d>
  405af2:	4602      	mov	r2, r0
  405af4:	460b      	mov	r3, r1
  405af6:	4638      	mov	r0, r7
  405af8:	4641      	mov	r1, r8
  405afa:	f001 ff67 	bl	4079cc <__aeabi_dsub>
  405afe:	3530      	adds	r5, #48	; 0x30
  405b00:	fa5f f885 	uxtb.w	r8, r5
  405b04:	9d04      	ldr	r5, [sp, #16]
  405b06:	4606      	mov	r6, r0
  405b08:	460f      	mov	r7, r1
  405b0a:	f885 8000 	strb.w	r8, [r5]
  405b0e:	4602      	mov	r2, r0
  405b10:	460b      	mov	r3, r1
  405b12:	4650      	mov	r0, sl
  405b14:	4659      	mov	r1, fp
  405b16:	3501      	adds	r5, #1
  405b18:	f002 fb9c 	bl	408254 <__aeabi_dcmpgt>
  405b1c:	2800      	cmp	r0, #0
  405b1e:	d154      	bne.n	405bca <_dtoa_r+0x93a>
  405b20:	4632      	mov	r2, r6
  405b22:	463b      	mov	r3, r7
  405b24:	2000      	movs	r0, #0
  405b26:	4976      	ldr	r1, [pc, #472]	; (405d00 <_dtoa_r+0xa70>)
  405b28:	f001 ff50 	bl	4079cc <__aeabi_dsub>
  405b2c:	4602      	mov	r2, r0
  405b2e:	460b      	mov	r3, r1
  405b30:	4650      	mov	r0, sl
  405b32:	4659      	mov	r1, fp
  405b34:	f002 fb8e 	bl	408254 <__aeabi_dcmpgt>
  405b38:	2800      	cmp	r0, #0
  405b3a:	f040 8270 	bne.w	40601e <_dtoa_r+0xd8e>
  405b3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405b40:	2a01      	cmp	r2, #1
  405b42:	f000 8111 	beq.w	405d68 <_dtoa_r+0xad8>
  405b46:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405b48:	9a04      	ldr	r2, [sp, #16]
  405b4a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405b4e:	4413      	add	r3, r2
  405b50:	4699      	mov	r9, r3
  405b52:	e00d      	b.n	405b70 <_dtoa_r+0x8e0>
  405b54:	2000      	movs	r0, #0
  405b56:	496a      	ldr	r1, [pc, #424]	; (405d00 <_dtoa_r+0xa70>)
  405b58:	f001 ff38 	bl	4079cc <__aeabi_dsub>
  405b5c:	4652      	mov	r2, sl
  405b5e:	465b      	mov	r3, fp
  405b60:	f002 fb5a 	bl	408218 <__aeabi_dcmplt>
  405b64:	2800      	cmp	r0, #0
  405b66:	f040 8258 	bne.w	40601a <_dtoa_r+0xd8a>
  405b6a:	454d      	cmp	r5, r9
  405b6c:	f000 80fa 	beq.w	405d64 <_dtoa_r+0xad4>
  405b70:	4650      	mov	r0, sl
  405b72:	4659      	mov	r1, fp
  405b74:	2200      	movs	r2, #0
  405b76:	4b65      	ldr	r3, [pc, #404]	; (405d0c <_dtoa_r+0xa7c>)
  405b78:	f002 f8dc 	bl	407d34 <__aeabi_dmul>
  405b7c:	2200      	movs	r2, #0
  405b7e:	4b63      	ldr	r3, [pc, #396]	; (405d0c <_dtoa_r+0xa7c>)
  405b80:	4682      	mov	sl, r0
  405b82:	468b      	mov	fp, r1
  405b84:	4630      	mov	r0, r6
  405b86:	4639      	mov	r1, r7
  405b88:	f002 f8d4 	bl	407d34 <__aeabi_dmul>
  405b8c:	460f      	mov	r7, r1
  405b8e:	4606      	mov	r6, r0
  405b90:	f002 fb80 	bl	408294 <__aeabi_d2iz>
  405b94:	4680      	mov	r8, r0
  405b96:	f002 f867 	bl	407c68 <__aeabi_i2d>
  405b9a:	4602      	mov	r2, r0
  405b9c:	460b      	mov	r3, r1
  405b9e:	4630      	mov	r0, r6
  405ba0:	4639      	mov	r1, r7
  405ba2:	f001 ff13 	bl	4079cc <__aeabi_dsub>
  405ba6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405baa:	fa5f f888 	uxtb.w	r8, r8
  405bae:	4652      	mov	r2, sl
  405bb0:	465b      	mov	r3, fp
  405bb2:	f805 8b01 	strb.w	r8, [r5], #1
  405bb6:	4606      	mov	r6, r0
  405bb8:	460f      	mov	r7, r1
  405bba:	f002 fb2d 	bl	408218 <__aeabi_dcmplt>
  405bbe:	4632      	mov	r2, r6
  405bc0:	463b      	mov	r3, r7
  405bc2:	2800      	cmp	r0, #0
  405bc4:	d0c6      	beq.n	405b54 <_dtoa_r+0x8c4>
  405bc6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405bca:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405bcc:	9302      	str	r3, [sp, #8]
  405bce:	e523      	b.n	405618 <_dtoa_r+0x388>
  405bd0:	2300      	movs	r3, #0
  405bd2:	930b      	str	r3, [sp, #44]	; 0x2c
  405bd4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405bd6:	2b00      	cmp	r3, #0
  405bd8:	f340 80dc 	ble.w	405d94 <_dtoa_r+0xb04>
  405bdc:	461f      	mov	r7, r3
  405bde:	461e      	mov	r6, r3
  405be0:	930f      	str	r3, [sp, #60]	; 0x3c
  405be2:	930a      	str	r3, [sp, #40]	; 0x28
  405be4:	e6f6      	b.n	4059d4 <_dtoa_r+0x744>
  405be6:	2301      	movs	r3, #1
  405be8:	930b      	str	r3, [sp, #44]	; 0x2c
  405bea:	e7f3      	b.n	405bd4 <_dtoa_r+0x944>
  405bec:	f1ba 0f00 	cmp.w	sl, #0
  405bf0:	f47f ada8 	bne.w	405744 <_dtoa_r+0x4b4>
  405bf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405bf8:	2b00      	cmp	r3, #0
  405bfa:	f47f adba 	bne.w	405772 <_dtoa_r+0x4e2>
  405bfe:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405c02:	0d3f      	lsrs	r7, r7, #20
  405c04:	053f      	lsls	r7, r7, #20
  405c06:	2f00      	cmp	r7, #0
  405c08:	f000 820d 	beq.w	406026 <_dtoa_r+0xd96>
  405c0c:	9b08      	ldr	r3, [sp, #32]
  405c0e:	3301      	adds	r3, #1
  405c10:	9308      	str	r3, [sp, #32]
  405c12:	9b06      	ldr	r3, [sp, #24]
  405c14:	3301      	adds	r3, #1
  405c16:	9306      	str	r3, [sp, #24]
  405c18:	2301      	movs	r3, #1
  405c1a:	930c      	str	r3, [sp, #48]	; 0x30
  405c1c:	e5ab      	b.n	405776 <_dtoa_r+0x4e6>
  405c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405c20:	2b00      	cmp	r3, #0
  405c22:	f73f ac42 	bgt.w	4054aa <_dtoa_r+0x21a>
  405c26:	f040 8221 	bne.w	40606c <_dtoa_r+0xddc>
  405c2a:	2200      	movs	r2, #0
  405c2c:	4b38      	ldr	r3, [pc, #224]	; (405d10 <_dtoa_r+0xa80>)
  405c2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405c32:	f002 f87f 	bl	407d34 <__aeabi_dmul>
  405c36:	4652      	mov	r2, sl
  405c38:	465b      	mov	r3, fp
  405c3a:	f002 fb01 	bl	408240 <__aeabi_dcmpge>
  405c3e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  405c42:	4646      	mov	r6, r8
  405c44:	2800      	cmp	r0, #0
  405c46:	d041      	beq.n	405ccc <_dtoa_r+0xa3c>
  405c48:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405c4a:	9d04      	ldr	r5, [sp, #16]
  405c4c:	43db      	mvns	r3, r3
  405c4e:	9302      	str	r3, [sp, #8]
  405c50:	4641      	mov	r1, r8
  405c52:	4620      	mov	r0, r4
  405c54:	f000 fe70 	bl	406938 <_Bfree>
  405c58:	2e00      	cmp	r6, #0
  405c5a:	f43f acdd 	beq.w	405618 <_dtoa_r+0x388>
  405c5e:	e6a7      	b.n	4059b0 <_dtoa_r+0x720>
  405c60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405c62:	4649      	mov	r1, r9
  405c64:	4620      	mov	r0, r4
  405c66:	f000 ff9d 	bl	406ba4 <__pow5mult>
  405c6a:	4681      	mov	r9, r0
  405c6c:	e558      	b.n	405720 <_dtoa_r+0x490>
  405c6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405c70:	2a00      	cmp	r2, #0
  405c72:	f000 8187 	beq.w	405f84 <_dtoa_r+0xcf4>
  405c76:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405c7a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405c7c:	9d08      	ldr	r5, [sp, #32]
  405c7e:	e4f2      	b.n	405666 <_dtoa_r+0x3d6>
  405c80:	f1ba 0f00 	cmp.w	sl, #0
  405c84:	f47f ad75 	bne.w	405772 <_dtoa_r+0x4e2>
  405c88:	e7b4      	b.n	405bf4 <_dtoa_r+0x964>
  405c8a:	f000 fe5f 	bl	40694c <__multadd>
  405c8e:	4647      	mov	r7, r8
  405c90:	4606      	mov	r6, r0
  405c92:	4683      	mov	fp, r0
  405c94:	e5be      	b.n	405814 <_dtoa_r+0x584>
  405c96:	4601      	mov	r1, r0
  405c98:	4620      	mov	r0, r4
  405c9a:	9306      	str	r3, [sp, #24]
  405c9c:	f000 fe4c 	bl	406938 <_Bfree>
  405ca0:	2201      	movs	r2, #1
  405ca2:	9b06      	ldr	r3, [sp, #24]
  405ca4:	e5e0      	b.n	405868 <_dtoa_r+0x5d8>
  405ca6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405ca8:	2b02      	cmp	r3, #2
  405caa:	f77f ad96 	ble.w	4057da <_dtoa_r+0x54a>
  405cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405cb0:	2b00      	cmp	r3, #0
  405cb2:	d1c9      	bne.n	405c48 <_dtoa_r+0x9b8>
  405cb4:	4641      	mov	r1, r8
  405cb6:	2205      	movs	r2, #5
  405cb8:	4620      	mov	r0, r4
  405cba:	f000 fe47 	bl	40694c <__multadd>
  405cbe:	4601      	mov	r1, r0
  405cc0:	4680      	mov	r8, r0
  405cc2:	4648      	mov	r0, r9
  405cc4:	f001 f810 	bl	406ce8 <__mcmp>
  405cc8:	2800      	cmp	r0, #0
  405cca:	ddbd      	ble.n	405c48 <_dtoa_r+0x9b8>
  405ccc:	9a02      	ldr	r2, [sp, #8]
  405cce:	9904      	ldr	r1, [sp, #16]
  405cd0:	2331      	movs	r3, #49	; 0x31
  405cd2:	3201      	adds	r2, #1
  405cd4:	9202      	str	r2, [sp, #8]
  405cd6:	700b      	strb	r3, [r1, #0]
  405cd8:	1c4d      	adds	r5, r1, #1
  405cda:	e7b9      	b.n	405c50 <_dtoa_r+0x9c0>
  405cdc:	9a02      	ldr	r2, [sp, #8]
  405cde:	3201      	adds	r2, #1
  405ce0:	9202      	str	r2, [sp, #8]
  405ce2:	9a04      	ldr	r2, [sp, #16]
  405ce4:	2331      	movs	r3, #49	; 0x31
  405ce6:	7013      	strb	r3, [r2, #0]
  405ce8:	e652      	b.n	405990 <_dtoa_r+0x700>
  405cea:	2301      	movs	r3, #1
  405cec:	930b      	str	r3, [sp, #44]	; 0x2c
  405cee:	e666      	b.n	4059be <_dtoa_r+0x72e>
  405cf0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405cf4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405cf6:	e48f      	b.n	405618 <_dtoa_r+0x388>
  405cf8:	004090d8 	.word	0x004090d8
  405cfc:	004090b0 	.word	0x004090b0
  405d00:	3ff00000 	.word	0x3ff00000
  405d04:	401c0000 	.word	0x401c0000
  405d08:	3fe00000 	.word	0x3fe00000
  405d0c:	40240000 	.word	0x40240000
  405d10:	40140000 	.word	0x40140000
  405d14:	4650      	mov	r0, sl
  405d16:	f001 ffa7 	bl	407c68 <__aeabi_i2d>
  405d1a:	463a      	mov	r2, r7
  405d1c:	4643      	mov	r3, r8
  405d1e:	f002 f809 	bl	407d34 <__aeabi_dmul>
  405d22:	2200      	movs	r2, #0
  405d24:	4bc1      	ldr	r3, [pc, #772]	; (40602c <_dtoa_r+0xd9c>)
  405d26:	f001 fe53 	bl	4079d0 <__adddf3>
  405d2a:	4605      	mov	r5, r0
  405d2c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405d30:	4641      	mov	r1, r8
  405d32:	2200      	movs	r2, #0
  405d34:	4bbe      	ldr	r3, [pc, #760]	; (406030 <_dtoa_r+0xda0>)
  405d36:	4638      	mov	r0, r7
  405d38:	f001 fe48 	bl	4079cc <__aeabi_dsub>
  405d3c:	462a      	mov	r2, r5
  405d3e:	4633      	mov	r3, r6
  405d40:	4682      	mov	sl, r0
  405d42:	468b      	mov	fp, r1
  405d44:	f002 fa86 	bl	408254 <__aeabi_dcmpgt>
  405d48:	4680      	mov	r8, r0
  405d4a:	2800      	cmp	r0, #0
  405d4c:	f040 8110 	bne.w	405f70 <_dtoa_r+0xce0>
  405d50:	462a      	mov	r2, r5
  405d52:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  405d56:	4650      	mov	r0, sl
  405d58:	4659      	mov	r1, fp
  405d5a:	f002 fa5d 	bl	408218 <__aeabi_dcmplt>
  405d5e:	b118      	cbz	r0, 405d68 <_dtoa_r+0xad8>
  405d60:	4646      	mov	r6, r8
  405d62:	e771      	b.n	405c48 <_dtoa_r+0x9b8>
  405d64:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405d68:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405d6c:	f7ff bb8a 	b.w	405484 <_dtoa_r+0x1f4>
  405d70:	9804      	ldr	r0, [sp, #16]
  405d72:	f7ff babb 	b.w	4052ec <_dtoa_r+0x5c>
  405d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405d78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405d7a:	970c      	str	r7, [sp, #48]	; 0x30
  405d7c:	1afb      	subs	r3, r7, r3
  405d7e:	441a      	add	r2, r3
  405d80:	920d      	str	r2, [sp, #52]	; 0x34
  405d82:	2700      	movs	r7, #0
  405d84:	e469      	b.n	40565a <_dtoa_r+0x3ca>
  405d86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405d8a:	f04f 0a02 	mov.w	sl, #2
  405d8e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  405d92:	e657      	b.n	405a44 <_dtoa_r+0x7b4>
  405d94:	2100      	movs	r1, #0
  405d96:	2301      	movs	r3, #1
  405d98:	6461      	str	r1, [r4, #68]	; 0x44
  405d9a:	4620      	mov	r0, r4
  405d9c:	9325      	str	r3, [sp, #148]	; 0x94
  405d9e:	f000 fda5 	bl	4068ec <_Balloc>
  405da2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405da4:	9004      	str	r0, [sp, #16]
  405da6:	6420      	str	r0, [r4, #64]	; 0x40
  405da8:	930a      	str	r3, [sp, #40]	; 0x28
  405daa:	930f      	str	r3, [sp, #60]	; 0x3c
  405dac:	e629      	b.n	405a02 <_dtoa_r+0x772>
  405dae:	2a00      	cmp	r2, #0
  405db0:	46d0      	mov	r8, sl
  405db2:	f8cd b018 	str.w	fp, [sp, #24]
  405db6:	469a      	mov	sl, r3
  405db8:	dd11      	ble.n	405dde <_dtoa_r+0xb4e>
  405dba:	4649      	mov	r1, r9
  405dbc:	2201      	movs	r2, #1
  405dbe:	4620      	mov	r0, r4
  405dc0:	f000 ff40 	bl	406c44 <__lshift>
  405dc4:	4641      	mov	r1, r8
  405dc6:	4681      	mov	r9, r0
  405dc8:	f000 ff8e 	bl	406ce8 <__mcmp>
  405dcc:	2800      	cmp	r0, #0
  405dce:	f340 8146 	ble.w	40605e <_dtoa_r+0xdce>
  405dd2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405dd6:	f000 8106 	beq.w	405fe6 <_dtoa_r+0xd56>
  405dda:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  405dde:	46b3      	mov	fp, r6
  405de0:	f887 a000 	strb.w	sl, [r7]
  405de4:	1c7d      	adds	r5, r7, #1
  405de6:	9e06      	ldr	r6, [sp, #24]
  405de8:	e5d2      	b.n	405990 <_dtoa_r+0x700>
  405dea:	d104      	bne.n	405df6 <_dtoa_r+0xb66>
  405dec:	f01a 0f01 	tst.w	sl, #1
  405df0:	d001      	beq.n	405df6 <_dtoa_r+0xb66>
  405df2:	e5bd      	b.n	405970 <_dtoa_r+0x6e0>
  405df4:	4615      	mov	r5, r2
  405df6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405dfa:	2b30      	cmp	r3, #48	; 0x30
  405dfc:	f105 32ff 	add.w	r2, r5, #4294967295
  405e00:	d0f8      	beq.n	405df4 <_dtoa_r+0xb64>
  405e02:	e5c5      	b.n	405990 <_dtoa_r+0x700>
  405e04:	9904      	ldr	r1, [sp, #16]
  405e06:	2230      	movs	r2, #48	; 0x30
  405e08:	700a      	strb	r2, [r1, #0]
  405e0a:	9a02      	ldr	r2, [sp, #8]
  405e0c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405e10:	3201      	adds	r2, #1
  405e12:	9202      	str	r2, [sp, #8]
  405e14:	f7ff bbfc 	b.w	405610 <_dtoa_r+0x380>
  405e18:	f000 80bb 	beq.w	405f92 <_dtoa_r+0xd02>
  405e1c:	9b02      	ldr	r3, [sp, #8]
  405e1e:	425d      	negs	r5, r3
  405e20:	4b84      	ldr	r3, [pc, #528]	; (406034 <_dtoa_r+0xda4>)
  405e22:	f005 020f 	and.w	r2, r5, #15
  405e26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405e2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  405e32:	f001 ff7f 	bl	407d34 <__aeabi_dmul>
  405e36:	112d      	asrs	r5, r5, #4
  405e38:	4607      	mov	r7, r0
  405e3a:	4688      	mov	r8, r1
  405e3c:	f000 812c 	beq.w	406098 <_dtoa_r+0xe08>
  405e40:	4e7d      	ldr	r6, [pc, #500]	; (406038 <_dtoa_r+0xda8>)
  405e42:	f04f 0a02 	mov.w	sl, #2
  405e46:	07eb      	lsls	r3, r5, #31
  405e48:	d509      	bpl.n	405e5e <_dtoa_r+0xbce>
  405e4a:	4638      	mov	r0, r7
  405e4c:	4641      	mov	r1, r8
  405e4e:	e9d6 2300 	ldrd	r2, r3, [r6]
  405e52:	f001 ff6f 	bl	407d34 <__aeabi_dmul>
  405e56:	f10a 0a01 	add.w	sl, sl, #1
  405e5a:	4607      	mov	r7, r0
  405e5c:	4688      	mov	r8, r1
  405e5e:	106d      	asrs	r5, r5, #1
  405e60:	f106 0608 	add.w	r6, r6, #8
  405e64:	d1ef      	bne.n	405e46 <_dtoa_r+0xbb6>
  405e66:	e608      	b.n	405a7a <_dtoa_r+0x7ea>
  405e68:	6871      	ldr	r1, [r6, #4]
  405e6a:	4620      	mov	r0, r4
  405e6c:	f000 fd3e 	bl	4068ec <_Balloc>
  405e70:	6933      	ldr	r3, [r6, #16]
  405e72:	3302      	adds	r3, #2
  405e74:	009a      	lsls	r2, r3, #2
  405e76:	4605      	mov	r5, r0
  405e78:	f106 010c 	add.w	r1, r6, #12
  405e7c:	300c      	adds	r0, #12
  405e7e:	f000 fc8f 	bl	4067a0 <memcpy>
  405e82:	4629      	mov	r1, r5
  405e84:	2201      	movs	r2, #1
  405e86:	4620      	mov	r0, r4
  405e88:	f000 fedc 	bl	406c44 <__lshift>
  405e8c:	9006      	str	r0, [sp, #24]
  405e8e:	e4b5      	b.n	4057fc <_dtoa_r+0x56c>
  405e90:	2b39      	cmp	r3, #57	; 0x39
  405e92:	f8cd b018 	str.w	fp, [sp, #24]
  405e96:	46d0      	mov	r8, sl
  405e98:	f000 80a5 	beq.w	405fe6 <_dtoa_r+0xd56>
  405e9c:	f103 0a01 	add.w	sl, r3, #1
  405ea0:	46b3      	mov	fp, r6
  405ea2:	f887 a000 	strb.w	sl, [r7]
  405ea6:	1c7d      	adds	r5, r7, #1
  405ea8:	9e06      	ldr	r6, [sp, #24]
  405eaa:	e571      	b.n	405990 <_dtoa_r+0x700>
  405eac:	465a      	mov	r2, fp
  405eae:	46d0      	mov	r8, sl
  405eb0:	46b3      	mov	fp, r6
  405eb2:	469a      	mov	sl, r3
  405eb4:	4616      	mov	r6, r2
  405eb6:	e54f      	b.n	405958 <_dtoa_r+0x6c8>
  405eb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405eba:	495e      	ldr	r1, [pc, #376]	; (406034 <_dtoa_r+0xda4>)
  405ebc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405ec0:	462a      	mov	r2, r5
  405ec2:	4633      	mov	r3, r6
  405ec4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405ec8:	f001 ff34 	bl	407d34 <__aeabi_dmul>
  405ecc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405ed0:	4638      	mov	r0, r7
  405ed2:	4641      	mov	r1, r8
  405ed4:	f002 f9de 	bl	408294 <__aeabi_d2iz>
  405ed8:	4605      	mov	r5, r0
  405eda:	f001 fec5 	bl	407c68 <__aeabi_i2d>
  405ede:	460b      	mov	r3, r1
  405ee0:	4602      	mov	r2, r0
  405ee2:	4641      	mov	r1, r8
  405ee4:	4638      	mov	r0, r7
  405ee6:	f001 fd71 	bl	4079cc <__aeabi_dsub>
  405eea:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405eec:	460f      	mov	r7, r1
  405eee:	9904      	ldr	r1, [sp, #16]
  405ef0:	3530      	adds	r5, #48	; 0x30
  405ef2:	2b01      	cmp	r3, #1
  405ef4:	700d      	strb	r5, [r1, #0]
  405ef6:	4606      	mov	r6, r0
  405ef8:	f101 0501 	add.w	r5, r1, #1
  405efc:	d026      	beq.n	405f4c <_dtoa_r+0xcbc>
  405efe:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405f00:	9a04      	ldr	r2, [sp, #16]
  405f02:	f8df b13c 	ldr.w	fp, [pc, #316]	; 406040 <_dtoa_r+0xdb0>
  405f06:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405f0a:	4413      	add	r3, r2
  405f0c:	f04f 0a00 	mov.w	sl, #0
  405f10:	4699      	mov	r9, r3
  405f12:	4652      	mov	r2, sl
  405f14:	465b      	mov	r3, fp
  405f16:	4630      	mov	r0, r6
  405f18:	4639      	mov	r1, r7
  405f1a:	f001 ff0b 	bl	407d34 <__aeabi_dmul>
  405f1e:	460f      	mov	r7, r1
  405f20:	4606      	mov	r6, r0
  405f22:	f002 f9b7 	bl	408294 <__aeabi_d2iz>
  405f26:	4680      	mov	r8, r0
  405f28:	f001 fe9e 	bl	407c68 <__aeabi_i2d>
  405f2c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405f30:	4602      	mov	r2, r0
  405f32:	460b      	mov	r3, r1
  405f34:	4630      	mov	r0, r6
  405f36:	4639      	mov	r1, r7
  405f38:	f001 fd48 	bl	4079cc <__aeabi_dsub>
  405f3c:	f805 8b01 	strb.w	r8, [r5], #1
  405f40:	454d      	cmp	r5, r9
  405f42:	4606      	mov	r6, r0
  405f44:	460f      	mov	r7, r1
  405f46:	d1e4      	bne.n	405f12 <_dtoa_r+0xc82>
  405f48:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405f4c:	4b3b      	ldr	r3, [pc, #236]	; (40603c <_dtoa_r+0xdac>)
  405f4e:	2200      	movs	r2, #0
  405f50:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  405f54:	f001 fd3c 	bl	4079d0 <__adddf3>
  405f58:	4632      	mov	r2, r6
  405f5a:	463b      	mov	r3, r7
  405f5c:	f002 f95c 	bl	408218 <__aeabi_dcmplt>
  405f60:	2800      	cmp	r0, #0
  405f62:	d046      	beq.n	405ff2 <_dtoa_r+0xd62>
  405f64:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405f66:	9302      	str	r3, [sp, #8]
  405f68:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405f6c:	f7ff bb43 	b.w	4055f6 <_dtoa_r+0x366>
  405f70:	f04f 0800 	mov.w	r8, #0
  405f74:	4646      	mov	r6, r8
  405f76:	e6a9      	b.n	405ccc <_dtoa_r+0xa3c>
  405f78:	9b08      	ldr	r3, [sp, #32]
  405f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405f7c:	1a9d      	subs	r5, r3, r2
  405f7e:	2300      	movs	r3, #0
  405f80:	f7ff bb71 	b.w	405666 <_dtoa_r+0x3d6>
  405f84:	9b18      	ldr	r3, [sp, #96]	; 0x60
  405f86:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405f88:	9d08      	ldr	r5, [sp, #32]
  405f8a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405f8e:	f7ff bb6a 	b.w	405666 <_dtoa_r+0x3d6>
  405f92:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  405f96:	f04f 0a02 	mov.w	sl, #2
  405f9a:	e56e      	b.n	405a7a <_dtoa_r+0x7ea>
  405f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405f9e:	2b00      	cmp	r3, #0
  405fa0:	f43f aeb8 	beq.w	405d14 <_dtoa_r+0xa84>
  405fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405fa6:	2b00      	cmp	r3, #0
  405fa8:	f77f aede 	ble.w	405d68 <_dtoa_r+0xad8>
  405fac:	2200      	movs	r2, #0
  405fae:	4b24      	ldr	r3, [pc, #144]	; (406040 <_dtoa_r+0xdb0>)
  405fb0:	4638      	mov	r0, r7
  405fb2:	4641      	mov	r1, r8
  405fb4:	f001 febe 	bl	407d34 <__aeabi_dmul>
  405fb8:	4607      	mov	r7, r0
  405fba:	4688      	mov	r8, r1
  405fbc:	f10a 0001 	add.w	r0, sl, #1
  405fc0:	f001 fe52 	bl	407c68 <__aeabi_i2d>
  405fc4:	463a      	mov	r2, r7
  405fc6:	4643      	mov	r3, r8
  405fc8:	f001 feb4 	bl	407d34 <__aeabi_dmul>
  405fcc:	2200      	movs	r2, #0
  405fce:	4b17      	ldr	r3, [pc, #92]	; (40602c <_dtoa_r+0xd9c>)
  405fd0:	f001 fcfe 	bl	4079d0 <__adddf3>
  405fd4:	9a02      	ldr	r2, [sp, #8]
  405fd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405fd8:	9312      	str	r3, [sp, #72]	; 0x48
  405fda:	3a01      	subs	r2, #1
  405fdc:	4605      	mov	r5, r0
  405fde:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405fe2:	9215      	str	r2, [sp, #84]	; 0x54
  405fe4:	e56a      	b.n	405abc <_dtoa_r+0x82c>
  405fe6:	2239      	movs	r2, #57	; 0x39
  405fe8:	46b3      	mov	fp, r6
  405fea:	703a      	strb	r2, [r7, #0]
  405fec:	9e06      	ldr	r6, [sp, #24]
  405fee:	1c7d      	adds	r5, r7, #1
  405ff0:	e4c0      	b.n	405974 <_dtoa_r+0x6e4>
  405ff2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  405ff6:	2000      	movs	r0, #0
  405ff8:	4910      	ldr	r1, [pc, #64]	; (40603c <_dtoa_r+0xdac>)
  405ffa:	f001 fce7 	bl	4079cc <__aeabi_dsub>
  405ffe:	4632      	mov	r2, r6
  406000:	463b      	mov	r3, r7
  406002:	f002 f927 	bl	408254 <__aeabi_dcmpgt>
  406006:	b908      	cbnz	r0, 40600c <_dtoa_r+0xd7c>
  406008:	e6ae      	b.n	405d68 <_dtoa_r+0xad8>
  40600a:	4615      	mov	r5, r2
  40600c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406010:	2b30      	cmp	r3, #48	; 0x30
  406012:	f105 32ff 	add.w	r2, r5, #4294967295
  406016:	d0f8      	beq.n	40600a <_dtoa_r+0xd7a>
  406018:	e5d7      	b.n	405bca <_dtoa_r+0x93a>
  40601a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40601e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406020:	9302      	str	r3, [sp, #8]
  406022:	f7ff bae8 	b.w	4055f6 <_dtoa_r+0x366>
  406026:	970c      	str	r7, [sp, #48]	; 0x30
  406028:	f7ff bba5 	b.w	405776 <_dtoa_r+0x4e6>
  40602c:	401c0000 	.word	0x401c0000
  406030:	40140000 	.word	0x40140000
  406034:	004090d8 	.word	0x004090d8
  406038:	004090b0 	.word	0x004090b0
  40603c:	3fe00000 	.word	0x3fe00000
  406040:	40240000 	.word	0x40240000
  406044:	2b39      	cmp	r3, #57	; 0x39
  406046:	f8cd b018 	str.w	fp, [sp, #24]
  40604a:	46d0      	mov	r8, sl
  40604c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406050:	469a      	mov	sl, r3
  406052:	d0c8      	beq.n	405fe6 <_dtoa_r+0xd56>
  406054:	f1bb 0f00 	cmp.w	fp, #0
  406058:	f73f aebf 	bgt.w	405dda <_dtoa_r+0xb4a>
  40605c:	e6bf      	b.n	405dde <_dtoa_r+0xb4e>
  40605e:	f47f aebe 	bne.w	405dde <_dtoa_r+0xb4e>
  406062:	f01a 0f01 	tst.w	sl, #1
  406066:	f43f aeba 	beq.w	405dde <_dtoa_r+0xb4e>
  40606a:	e6b2      	b.n	405dd2 <_dtoa_r+0xb42>
  40606c:	f04f 0800 	mov.w	r8, #0
  406070:	4646      	mov	r6, r8
  406072:	e5e9      	b.n	405c48 <_dtoa_r+0x9b8>
  406074:	4631      	mov	r1, r6
  406076:	2300      	movs	r3, #0
  406078:	220a      	movs	r2, #10
  40607a:	4620      	mov	r0, r4
  40607c:	f000 fc66 	bl	40694c <__multadd>
  406080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406082:	2b00      	cmp	r3, #0
  406084:	4606      	mov	r6, r0
  406086:	dd0a      	ble.n	40609e <_dtoa_r+0xe0e>
  406088:	930a      	str	r3, [sp, #40]	; 0x28
  40608a:	f7ff bbaa 	b.w	4057e2 <_dtoa_r+0x552>
  40608e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406090:	2b02      	cmp	r3, #2
  406092:	dc23      	bgt.n	4060dc <_dtoa_r+0xe4c>
  406094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406096:	e43b      	b.n	405910 <_dtoa_r+0x680>
  406098:	f04f 0a02 	mov.w	sl, #2
  40609c:	e4ed      	b.n	405a7a <_dtoa_r+0x7ea>
  40609e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4060a0:	2b02      	cmp	r3, #2
  4060a2:	dc1b      	bgt.n	4060dc <_dtoa_r+0xe4c>
  4060a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4060a6:	e7ef      	b.n	406088 <_dtoa_r+0xdf8>
  4060a8:	2500      	movs	r5, #0
  4060aa:	6465      	str	r5, [r4, #68]	; 0x44
  4060ac:	4629      	mov	r1, r5
  4060ae:	4620      	mov	r0, r4
  4060b0:	f000 fc1c 	bl	4068ec <_Balloc>
  4060b4:	f04f 33ff 	mov.w	r3, #4294967295
  4060b8:	930a      	str	r3, [sp, #40]	; 0x28
  4060ba:	930f      	str	r3, [sp, #60]	; 0x3c
  4060bc:	2301      	movs	r3, #1
  4060be:	9004      	str	r0, [sp, #16]
  4060c0:	9525      	str	r5, [sp, #148]	; 0x94
  4060c2:	6420      	str	r0, [r4, #64]	; 0x40
  4060c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4060c6:	f7ff b9dd 	b.w	405484 <_dtoa_r+0x1f4>
  4060ca:	2501      	movs	r5, #1
  4060cc:	f7ff b9a5 	b.w	40541a <_dtoa_r+0x18a>
  4060d0:	f43f ab69 	beq.w	4057a6 <_dtoa_r+0x516>
  4060d4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4060d8:	f7ff bbf9 	b.w	4058ce <_dtoa_r+0x63e>
  4060dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4060de:	930a      	str	r3, [sp, #40]	; 0x28
  4060e0:	e5e5      	b.n	405cae <_dtoa_r+0xa1e>
  4060e2:	bf00      	nop

004060e4 <__libc_fini_array>:
  4060e4:	b538      	push	{r3, r4, r5, lr}
  4060e6:	4c0a      	ldr	r4, [pc, #40]	; (406110 <__libc_fini_array+0x2c>)
  4060e8:	4d0a      	ldr	r5, [pc, #40]	; (406114 <__libc_fini_array+0x30>)
  4060ea:	1b64      	subs	r4, r4, r5
  4060ec:	10a4      	asrs	r4, r4, #2
  4060ee:	d00a      	beq.n	406106 <__libc_fini_array+0x22>
  4060f0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4060f4:	3b01      	subs	r3, #1
  4060f6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4060fa:	3c01      	subs	r4, #1
  4060fc:	f855 3904 	ldr.w	r3, [r5], #-4
  406100:	4798      	blx	r3
  406102:	2c00      	cmp	r4, #0
  406104:	d1f9      	bne.n	4060fa <__libc_fini_array+0x16>
  406106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40610a:	f003 b8e3 	b.w	4092d4 <_fini>
  40610e:	bf00      	nop
  406110:	004092e4 	.word	0x004092e4
  406114:	004092e0 	.word	0x004092e0

00406118 <_localeconv_r>:
  406118:	4a04      	ldr	r2, [pc, #16]	; (40612c <_localeconv_r+0x14>)
  40611a:	4b05      	ldr	r3, [pc, #20]	; (406130 <_localeconv_r+0x18>)
  40611c:	6812      	ldr	r2, [r2, #0]
  40611e:	6b50      	ldr	r0, [r2, #52]	; 0x34
  406120:	2800      	cmp	r0, #0
  406122:	bf08      	it	eq
  406124:	4618      	moveq	r0, r3
  406126:	30f0      	adds	r0, #240	; 0xf0
  406128:	4770      	bx	lr
  40612a:	bf00      	nop
  40612c:	20000010 	.word	0x20000010
  406130:	20000854 	.word	0x20000854

00406134 <__retarget_lock_acquire_recursive>:
  406134:	4770      	bx	lr
  406136:	bf00      	nop

00406138 <__retarget_lock_release_recursive>:
  406138:	4770      	bx	lr
  40613a:	bf00      	nop

0040613c <_malloc_r>:
  40613c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406140:	f101 060b 	add.w	r6, r1, #11
  406144:	2e16      	cmp	r6, #22
  406146:	b083      	sub	sp, #12
  406148:	4605      	mov	r5, r0
  40614a:	f240 809e 	bls.w	40628a <_malloc_r+0x14e>
  40614e:	f036 0607 	bics.w	r6, r6, #7
  406152:	f100 80bd 	bmi.w	4062d0 <_malloc_r+0x194>
  406156:	42b1      	cmp	r1, r6
  406158:	f200 80ba 	bhi.w	4062d0 <_malloc_r+0x194>
  40615c:	f000 fbba 	bl	4068d4 <__malloc_lock>
  406160:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  406164:	f0c0 8293 	bcc.w	40668e <_malloc_r+0x552>
  406168:	0a73      	lsrs	r3, r6, #9
  40616a:	f000 80b8 	beq.w	4062de <_malloc_r+0x1a2>
  40616e:	2b04      	cmp	r3, #4
  406170:	f200 8179 	bhi.w	406466 <_malloc_r+0x32a>
  406174:	09b3      	lsrs	r3, r6, #6
  406176:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40617a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40617e:	00c3      	lsls	r3, r0, #3
  406180:	4fbf      	ldr	r7, [pc, #764]	; (406480 <_malloc_r+0x344>)
  406182:	443b      	add	r3, r7
  406184:	f1a3 0108 	sub.w	r1, r3, #8
  406188:	685c      	ldr	r4, [r3, #4]
  40618a:	42a1      	cmp	r1, r4
  40618c:	d106      	bne.n	40619c <_malloc_r+0x60>
  40618e:	e00c      	b.n	4061aa <_malloc_r+0x6e>
  406190:	2a00      	cmp	r2, #0
  406192:	f280 80aa 	bge.w	4062ea <_malloc_r+0x1ae>
  406196:	68e4      	ldr	r4, [r4, #12]
  406198:	42a1      	cmp	r1, r4
  40619a:	d006      	beq.n	4061aa <_malloc_r+0x6e>
  40619c:	6863      	ldr	r3, [r4, #4]
  40619e:	f023 0303 	bic.w	r3, r3, #3
  4061a2:	1b9a      	subs	r2, r3, r6
  4061a4:	2a0f      	cmp	r2, #15
  4061a6:	ddf3      	ble.n	406190 <_malloc_r+0x54>
  4061a8:	4670      	mov	r0, lr
  4061aa:	693c      	ldr	r4, [r7, #16]
  4061ac:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 406494 <_malloc_r+0x358>
  4061b0:	4574      	cmp	r4, lr
  4061b2:	f000 81ab 	beq.w	40650c <_malloc_r+0x3d0>
  4061b6:	6863      	ldr	r3, [r4, #4]
  4061b8:	f023 0303 	bic.w	r3, r3, #3
  4061bc:	1b9a      	subs	r2, r3, r6
  4061be:	2a0f      	cmp	r2, #15
  4061c0:	f300 8190 	bgt.w	4064e4 <_malloc_r+0x3a8>
  4061c4:	2a00      	cmp	r2, #0
  4061c6:	f8c7 e014 	str.w	lr, [r7, #20]
  4061ca:	f8c7 e010 	str.w	lr, [r7, #16]
  4061ce:	f280 809d 	bge.w	40630c <_malloc_r+0x1d0>
  4061d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4061d6:	f080 8161 	bcs.w	40649c <_malloc_r+0x360>
  4061da:	08db      	lsrs	r3, r3, #3
  4061dc:	f103 0c01 	add.w	ip, r3, #1
  4061e0:	1099      	asrs	r1, r3, #2
  4061e2:	687a      	ldr	r2, [r7, #4]
  4061e4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4061e8:	f8c4 8008 	str.w	r8, [r4, #8]
  4061ec:	2301      	movs	r3, #1
  4061ee:	408b      	lsls	r3, r1
  4061f0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4061f4:	4313      	orrs	r3, r2
  4061f6:	3908      	subs	r1, #8
  4061f8:	60e1      	str	r1, [r4, #12]
  4061fa:	607b      	str	r3, [r7, #4]
  4061fc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  406200:	f8c8 400c 	str.w	r4, [r8, #12]
  406204:	1082      	asrs	r2, r0, #2
  406206:	2401      	movs	r4, #1
  406208:	4094      	lsls	r4, r2
  40620a:	429c      	cmp	r4, r3
  40620c:	f200 808b 	bhi.w	406326 <_malloc_r+0x1ea>
  406210:	421c      	tst	r4, r3
  406212:	d106      	bne.n	406222 <_malloc_r+0xe6>
  406214:	f020 0003 	bic.w	r0, r0, #3
  406218:	0064      	lsls	r4, r4, #1
  40621a:	421c      	tst	r4, r3
  40621c:	f100 0004 	add.w	r0, r0, #4
  406220:	d0fa      	beq.n	406218 <_malloc_r+0xdc>
  406222:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406226:	46cc      	mov	ip, r9
  406228:	4680      	mov	r8, r0
  40622a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40622e:	459c      	cmp	ip, r3
  406230:	d107      	bne.n	406242 <_malloc_r+0x106>
  406232:	e16d      	b.n	406510 <_malloc_r+0x3d4>
  406234:	2a00      	cmp	r2, #0
  406236:	f280 817b 	bge.w	406530 <_malloc_r+0x3f4>
  40623a:	68db      	ldr	r3, [r3, #12]
  40623c:	459c      	cmp	ip, r3
  40623e:	f000 8167 	beq.w	406510 <_malloc_r+0x3d4>
  406242:	6859      	ldr	r1, [r3, #4]
  406244:	f021 0103 	bic.w	r1, r1, #3
  406248:	1b8a      	subs	r2, r1, r6
  40624a:	2a0f      	cmp	r2, #15
  40624c:	ddf2      	ble.n	406234 <_malloc_r+0xf8>
  40624e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  406252:	f8d3 8008 	ldr.w	r8, [r3, #8]
  406256:	9300      	str	r3, [sp, #0]
  406258:	199c      	adds	r4, r3, r6
  40625a:	4628      	mov	r0, r5
  40625c:	f046 0601 	orr.w	r6, r6, #1
  406260:	f042 0501 	orr.w	r5, r2, #1
  406264:	605e      	str	r6, [r3, #4]
  406266:	f8c8 c00c 	str.w	ip, [r8, #12]
  40626a:	f8cc 8008 	str.w	r8, [ip, #8]
  40626e:	617c      	str	r4, [r7, #20]
  406270:	613c      	str	r4, [r7, #16]
  406272:	f8c4 e00c 	str.w	lr, [r4, #12]
  406276:	f8c4 e008 	str.w	lr, [r4, #8]
  40627a:	6065      	str	r5, [r4, #4]
  40627c:	505a      	str	r2, [r3, r1]
  40627e:	f000 fb2f 	bl	4068e0 <__malloc_unlock>
  406282:	9b00      	ldr	r3, [sp, #0]
  406284:	f103 0408 	add.w	r4, r3, #8
  406288:	e01e      	b.n	4062c8 <_malloc_r+0x18c>
  40628a:	2910      	cmp	r1, #16
  40628c:	d820      	bhi.n	4062d0 <_malloc_r+0x194>
  40628e:	f000 fb21 	bl	4068d4 <__malloc_lock>
  406292:	2610      	movs	r6, #16
  406294:	2318      	movs	r3, #24
  406296:	2002      	movs	r0, #2
  406298:	4f79      	ldr	r7, [pc, #484]	; (406480 <_malloc_r+0x344>)
  40629a:	443b      	add	r3, r7
  40629c:	f1a3 0208 	sub.w	r2, r3, #8
  4062a0:	685c      	ldr	r4, [r3, #4]
  4062a2:	4294      	cmp	r4, r2
  4062a4:	f000 813d 	beq.w	406522 <_malloc_r+0x3e6>
  4062a8:	6863      	ldr	r3, [r4, #4]
  4062aa:	68e1      	ldr	r1, [r4, #12]
  4062ac:	68a6      	ldr	r6, [r4, #8]
  4062ae:	f023 0303 	bic.w	r3, r3, #3
  4062b2:	4423      	add	r3, r4
  4062b4:	4628      	mov	r0, r5
  4062b6:	685a      	ldr	r2, [r3, #4]
  4062b8:	60f1      	str	r1, [r6, #12]
  4062ba:	f042 0201 	orr.w	r2, r2, #1
  4062be:	608e      	str	r6, [r1, #8]
  4062c0:	605a      	str	r2, [r3, #4]
  4062c2:	f000 fb0d 	bl	4068e0 <__malloc_unlock>
  4062c6:	3408      	adds	r4, #8
  4062c8:	4620      	mov	r0, r4
  4062ca:	b003      	add	sp, #12
  4062cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4062d0:	2400      	movs	r4, #0
  4062d2:	230c      	movs	r3, #12
  4062d4:	4620      	mov	r0, r4
  4062d6:	602b      	str	r3, [r5, #0]
  4062d8:	b003      	add	sp, #12
  4062da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4062de:	2040      	movs	r0, #64	; 0x40
  4062e0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4062e4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4062e8:	e74a      	b.n	406180 <_malloc_r+0x44>
  4062ea:	4423      	add	r3, r4
  4062ec:	68e1      	ldr	r1, [r4, #12]
  4062ee:	685a      	ldr	r2, [r3, #4]
  4062f0:	68a6      	ldr	r6, [r4, #8]
  4062f2:	f042 0201 	orr.w	r2, r2, #1
  4062f6:	60f1      	str	r1, [r6, #12]
  4062f8:	4628      	mov	r0, r5
  4062fa:	608e      	str	r6, [r1, #8]
  4062fc:	605a      	str	r2, [r3, #4]
  4062fe:	f000 faef 	bl	4068e0 <__malloc_unlock>
  406302:	3408      	adds	r4, #8
  406304:	4620      	mov	r0, r4
  406306:	b003      	add	sp, #12
  406308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40630c:	4423      	add	r3, r4
  40630e:	4628      	mov	r0, r5
  406310:	685a      	ldr	r2, [r3, #4]
  406312:	f042 0201 	orr.w	r2, r2, #1
  406316:	605a      	str	r2, [r3, #4]
  406318:	f000 fae2 	bl	4068e0 <__malloc_unlock>
  40631c:	3408      	adds	r4, #8
  40631e:	4620      	mov	r0, r4
  406320:	b003      	add	sp, #12
  406322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406326:	68bc      	ldr	r4, [r7, #8]
  406328:	6863      	ldr	r3, [r4, #4]
  40632a:	f023 0803 	bic.w	r8, r3, #3
  40632e:	45b0      	cmp	r8, r6
  406330:	d304      	bcc.n	40633c <_malloc_r+0x200>
  406332:	eba8 0306 	sub.w	r3, r8, r6
  406336:	2b0f      	cmp	r3, #15
  406338:	f300 8085 	bgt.w	406446 <_malloc_r+0x30a>
  40633c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406498 <_malloc_r+0x35c>
  406340:	4b50      	ldr	r3, [pc, #320]	; (406484 <_malloc_r+0x348>)
  406342:	f8d9 2000 	ldr.w	r2, [r9]
  406346:	681b      	ldr	r3, [r3, #0]
  406348:	3201      	adds	r2, #1
  40634a:	4433      	add	r3, r6
  40634c:	eb04 0a08 	add.w	sl, r4, r8
  406350:	f000 8155 	beq.w	4065fe <_malloc_r+0x4c2>
  406354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406358:	330f      	adds	r3, #15
  40635a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40635e:	f02b 0b0f 	bic.w	fp, fp, #15
  406362:	4659      	mov	r1, fp
  406364:	4628      	mov	r0, r5
  406366:	f000 fdbb 	bl	406ee0 <_sbrk_r>
  40636a:	1c41      	adds	r1, r0, #1
  40636c:	4602      	mov	r2, r0
  40636e:	f000 80fc 	beq.w	40656a <_malloc_r+0x42e>
  406372:	4582      	cmp	sl, r0
  406374:	f200 80f7 	bhi.w	406566 <_malloc_r+0x42a>
  406378:	4b43      	ldr	r3, [pc, #268]	; (406488 <_malloc_r+0x34c>)
  40637a:	6819      	ldr	r1, [r3, #0]
  40637c:	4459      	add	r1, fp
  40637e:	6019      	str	r1, [r3, #0]
  406380:	f000 814d 	beq.w	40661e <_malloc_r+0x4e2>
  406384:	f8d9 0000 	ldr.w	r0, [r9]
  406388:	3001      	adds	r0, #1
  40638a:	bf1b      	ittet	ne
  40638c:	eba2 0a0a 	subne.w	sl, r2, sl
  406390:	4451      	addne	r1, sl
  406392:	f8c9 2000 	streq.w	r2, [r9]
  406396:	6019      	strne	r1, [r3, #0]
  406398:	f012 0107 	ands.w	r1, r2, #7
  40639c:	f000 8115 	beq.w	4065ca <_malloc_r+0x48e>
  4063a0:	f1c1 0008 	rsb	r0, r1, #8
  4063a4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4063a8:	4402      	add	r2, r0
  4063aa:	3108      	adds	r1, #8
  4063ac:	eb02 090b 	add.w	r9, r2, fp
  4063b0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4063b4:	eba1 0909 	sub.w	r9, r1, r9
  4063b8:	4649      	mov	r1, r9
  4063ba:	4628      	mov	r0, r5
  4063bc:	9301      	str	r3, [sp, #4]
  4063be:	9200      	str	r2, [sp, #0]
  4063c0:	f000 fd8e 	bl	406ee0 <_sbrk_r>
  4063c4:	1c43      	adds	r3, r0, #1
  4063c6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4063ca:	f000 8143 	beq.w	406654 <_malloc_r+0x518>
  4063ce:	1a80      	subs	r0, r0, r2
  4063d0:	4448      	add	r0, r9
  4063d2:	f040 0001 	orr.w	r0, r0, #1
  4063d6:	6819      	ldr	r1, [r3, #0]
  4063d8:	60ba      	str	r2, [r7, #8]
  4063da:	4449      	add	r1, r9
  4063dc:	42bc      	cmp	r4, r7
  4063de:	6050      	str	r0, [r2, #4]
  4063e0:	6019      	str	r1, [r3, #0]
  4063e2:	d017      	beq.n	406414 <_malloc_r+0x2d8>
  4063e4:	f1b8 0f0f 	cmp.w	r8, #15
  4063e8:	f240 80fb 	bls.w	4065e2 <_malloc_r+0x4a6>
  4063ec:	6860      	ldr	r0, [r4, #4]
  4063ee:	f1a8 020c 	sub.w	r2, r8, #12
  4063f2:	f022 0207 	bic.w	r2, r2, #7
  4063f6:	eb04 0e02 	add.w	lr, r4, r2
  4063fa:	f000 0001 	and.w	r0, r0, #1
  4063fe:	f04f 0c05 	mov.w	ip, #5
  406402:	4310      	orrs	r0, r2
  406404:	2a0f      	cmp	r2, #15
  406406:	6060      	str	r0, [r4, #4]
  406408:	f8ce c004 	str.w	ip, [lr, #4]
  40640c:	f8ce c008 	str.w	ip, [lr, #8]
  406410:	f200 8117 	bhi.w	406642 <_malloc_r+0x506>
  406414:	4b1d      	ldr	r3, [pc, #116]	; (40648c <_malloc_r+0x350>)
  406416:	68bc      	ldr	r4, [r7, #8]
  406418:	681a      	ldr	r2, [r3, #0]
  40641a:	4291      	cmp	r1, r2
  40641c:	bf88      	it	hi
  40641e:	6019      	strhi	r1, [r3, #0]
  406420:	4b1b      	ldr	r3, [pc, #108]	; (406490 <_malloc_r+0x354>)
  406422:	681a      	ldr	r2, [r3, #0]
  406424:	4291      	cmp	r1, r2
  406426:	6862      	ldr	r2, [r4, #4]
  406428:	bf88      	it	hi
  40642a:	6019      	strhi	r1, [r3, #0]
  40642c:	f022 0203 	bic.w	r2, r2, #3
  406430:	4296      	cmp	r6, r2
  406432:	eba2 0306 	sub.w	r3, r2, r6
  406436:	d801      	bhi.n	40643c <_malloc_r+0x300>
  406438:	2b0f      	cmp	r3, #15
  40643a:	dc04      	bgt.n	406446 <_malloc_r+0x30a>
  40643c:	4628      	mov	r0, r5
  40643e:	f000 fa4f 	bl	4068e0 <__malloc_unlock>
  406442:	2400      	movs	r4, #0
  406444:	e740      	b.n	4062c8 <_malloc_r+0x18c>
  406446:	19a2      	adds	r2, r4, r6
  406448:	f043 0301 	orr.w	r3, r3, #1
  40644c:	f046 0601 	orr.w	r6, r6, #1
  406450:	6066      	str	r6, [r4, #4]
  406452:	4628      	mov	r0, r5
  406454:	60ba      	str	r2, [r7, #8]
  406456:	6053      	str	r3, [r2, #4]
  406458:	f000 fa42 	bl	4068e0 <__malloc_unlock>
  40645c:	3408      	adds	r4, #8
  40645e:	4620      	mov	r0, r4
  406460:	b003      	add	sp, #12
  406462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406466:	2b14      	cmp	r3, #20
  406468:	d971      	bls.n	40654e <_malloc_r+0x412>
  40646a:	2b54      	cmp	r3, #84	; 0x54
  40646c:	f200 80a3 	bhi.w	4065b6 <_malloc_r+0x47a>
  406470:	0b33      	lsrs	r3, r6, #12
  406472:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406476:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40647a:	00c3      	lsls	r3, r0, #3
  40647c:	e680      	b.n	406180 <_malloc_r+0x44>
  40647e:	bf00      	nop
  406480:	20000444 	.word	0x20000444
  406484:	20000ab0 	.word	0x20000ab0
  406488:	20000a80 	.word	0x20000a80
  40648c:	20000aa8 	.word	0x20000aa8
  406490:	20000aac 	.word	0x20000aac
  406494:	2000044c 	.word	0x2000044c
  406498:	2000084c 	.word	0x2000084c
  40649c:	0a5a      	lsrs	r2, r3, #9
  40649e:	2a04      	cmp	r2, #4
  4064a0:	d95b      	bls.n	40655a <_malloc_r+0x41e>
  4064a2:	2a14      	cmp	r2, #20
  4064a4:	f200 80ae 	bhi.w	406604 <_malloc_r+0x4c8>
  4064a8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4064ac:	00c9      	lsls	r1, r1, #3
  4064ae:	325b      	adds	r2, #91	; 0x5b
  4064b0:	eb07 0c01 	add.w	ip, r7, r1
  4064b4:	5879      	ldr	r1, [r7, r1]
  4064b6:	f1ac 0c08 	sub.w	ip, ip, #8
  4064ba:	458c      	cmp	ip, r1
  4064bc:	f000 8088 	beq.w	4065d0 <_malloc_r+0x494>
  4064c0:	684a      	ldr	r2, [r1, #4]
  4064c2:	f022 0203 	bic.w	r2, r2, #3
  4064c6:	4293      	cmp	r3, r2
  4064c8:	d273      	bcs.n	4065b2 <_malloc_r+0x476>
  4064ca:	6889      	ldr	r1, [r1, #8]
  4064cc:	458c      	cmp	ip, r1
  4064ce:	d1f7      	bne.n	4064c0 <_malloc_r+0x384>
  4064d0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4064d4:	687b      	ldr	r3, [r7, #4]
  4064d6:	60e2      	str	r2, [r4, #12]
  4064d8:	f8c4 c008 	str.w	ip, [r4, #8]
  4064dc:	6094      	str	r4, [r2, #8]
  4064de:	f8cc 400c 	str.w	r4, [ip, #12]
  4064e2:	e68f      	b.n	406204 <_malloc_r+0xc8>
  4064e4:	19a1      	adds	r1, r4, r6
  4064e6:	f046 0c01 	orr.w	ip, r6, #1
  4064ea:	f042 0601 	orr.w	r6, r2, #1
  4064ee:	f8c4 c004 	str.w	ip, [r4, #4]
  4064f2:	4628      	mov	r0, r5
  4064f4:	6179      	str	r1, [r7, #20]
  4064f6:	6139      	str	r1, [r7, #16]
  4064f8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4064fc:	f8c1 e008 	str.w	lr, [r1, #8]
  406500:	604e      	str	r6, [r1, #4]
  406502:	50e2      	str	r2, [r4, r3]
  406504:	f000 f9ec 	bl	4068e0 <__malloc_unlock>
  406508:	3408      	adds	r4, #8
  40650a:	e6dd      	b.n	4062c8 <_malloc_r+0x18c>
  40650c:	687b      	ldr	r3, [r7, #4]
  40650e:	e679      	b.n	406204 <_malloc_r+0xc8>
  406510:	f108 0801 	add.w	r8, r8, #1
  406514:	f018 0f03 	tst.w	r8, #3
  406518:	f10c 0c08 	add.w	ip, ip, #8
  40651c:	f47f ae85 	bne.w	40622a <_malloc_r+0xee>
  406520:	e02d      	b.n	40657e <_malloc_r+0x442>
  406522:	68dc      	ldr	r4, [r3, #12]
  406524:	42a3      	cmp	r3, r4
  406526:	bf08      	it	eq
  406528:	3002      	addeq	r0, #2
  40652a:	f43f ae3e 	beq.w	4061aa <_malloc_r+0x6e>
  40652e:	e6bb      	b.n	4062a8 <_malloc_r+0x16c>
  406530:	4419      	add	r1, r3
  406532:	461c      	mov	r4, r3
  406534:	684a      	ldr	r2, [r1, #4]
  406536:	68db      	ldr	r3, [r3, #12]
  406538:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40653c:	f042 0201 	orr.w	r2, r2, #1
  406540:	604a      	str	r2, [r1, #4]
  406542:	4628      	mov	r0, r5
  406544:	60f3      	str	r3, [r6, #12]
  406546:	609e      	str	r6, [r3, #8]
  406548:	f000 f9ca 	bl	4068e0 <__malloc_unlock>
  40654c:	e6bc      	b.n	4062c8 <_malloc_r+0x18c>
  40654e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  406552:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  406556:	00c3      	lsls	r3, r0, #3
  406558:	e612      	b.n	406180 <_malloc_r+0x44>
  40655a:	099a      	lsrs	r2, r3, #6
  40655c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406560:	00c9      	lsls	r1, r1, #3
  406562:	3238      	adds	r2, #56	; 0x38
  406564:	e7a4      	b.n	4064b0 <_malloc_r+0x374>
  406566:	42bc      	cmp	r4, r7
  406568:	d054      	beq.n	406614 <_malloc_r+0x4d8>
  40656a:	68bc      	ldr	r4, [r7, #8]
  40656c:	6862      	ldr	r2, [r4, #4]
  40656e:	f022 0203 	bic.w	r2, r2, #3
  406572:	e75d      	b.n	406430 <_malloc_r+0x2f4>
  406574:	f859 3908 	ldr.w	r3, [r9], #-8
  406578:	4599      	cmp	r9, r3
  40657a:	f040 8086 	bne.w	40668a <_malloc_r+0x54e>
  40657e:	f010 0f03 	tst.w	r0, #3
  406582:	f100 30ff 	add.w	r0, r0, #4294967295
  406586:	d1f5      	bne.n	406574 <_malloc_r+0x438>
  406588:	687b      	ldr	r3, [r7, #4]
  40658a:	ea23 0304 	bic.w	r3, r3, r4
  40658e:	607b      	str	r3, [r7, #4]
  406590:	0064      	lsls	r4, r4, #1
  406592:	429c      	cmp	r4, r3
  406594:	f63f aec7 	bhi.w	406326 <_malloc_r+0x1ea>
  406598:	2c00      	cmp	r4, #0
  40659a:	f43f aec4 	beq.w	406326 <_malloc_r+0x1ea>
  40659e:	421c      	tst	r4, r3
  4065a0:	4640      	mov	r0, r8
  4065a2:	f47f ae3e 	bne.w	406222 <_malloc_r+0xe6>
  4065a6:	0064      	lsls	r4, r4, #1
  4065a8:	421c      	tst	r4, r3
  4065aa:	f100 0004 	add.w	r0, r0, #4
  4065ae:	d0fa      	beq.n	4065a6 <_malloc_r+0x46a>
  4065b0:	e637      	b.n	406222 <_malloc_r+0xe6>
  4065b2:	468c      	mov	ip, r1
  4065b4:	e78c      	b.n	4064d0 <_malloc_r+0x394>
  4065b6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4065ba:	d815      	bhi.n	4065e8 <_malloc_r+0x4ac>
  4065bc:	0bf3      	lsrs	r3, r6, #15
  4065be:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4065c2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4065c6:	00c3      	lsls	r3, r0, #3
  4065c8:	e5da      	b.n	406180 <_malloc_r+0x44>
  4065ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4065ce:	e6ed      	b.n	4063ac <_malloc_r+0x270>
  4065d0:	687b      	ldr	r3, [r7, #4]
  4065d2:	1092      	asrs	r2, r2, #2
  4065d4:	2101      	movs	r1, #1
  4065d6:	fa01 f202 	lsl.w	r2, r1, r2
  4065da:	4313      	orrs	r3, r2
  4065dc:	607b      	str	r3, [r7, #4]
  4065de:	4662      	mov	r2, ip
  4065e0:	e779      	b.n	4064d6 <_malloc_r+0x39a>
  4065e2:	2301      	movs	r3, #1
  4065e4:	6053      	str	r3, [r2, #4]
  4065e6:	e729      	b.n	40643c <_malloc_r+0x300>
  4065e8:	f240 5254 	movw	r2, #1364	; 0x554
  4065ec:	4293      	cmp	r3, r2
  4065ee:	d822      	bhi.n	406636 <_malloc_r+0x4fa>
  4065f0:	0cb3      	lsrs	r3, r6, #18
  4065f2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4065f6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4065fa:	00c3      	lsls	r3, r0, #3
  4065fc:	e5c0      	b.n	406180 <_malloc_r+0x44>
  4065fe:	f103 0b10 	add.w	fp, r3, #16
  406602:	e6ae      	b.n	406362 <_malloc_r+0x226>
  406604:	2a54      	cmp	r2, #84	; 0x54
  406606:	d829      	bhi.n	40665c <_malloc_r+0x520>
  406608:	0b1a      	lsrs	r2, r3, #12
  40660a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40660e:	00c9      	lsls	r1, r1, #3
  406610:	326e      	adds	r2, #110	; 0x6e
  406612:	e74d      	b.n	4064b0 <_malloc_r+0x374>
  406614:	4b20      	ldr	r3, [pc, #128]	; (406698 <_malloc_r+0x55c>)
  406616:	6819      	ldr	r1, [r3, #0]
  406618:	4459      	add	r1, fp
  40661a:	6019      	str	r1, [r3, #0]
  40661c:	e6b2      	b.n	406384 <_malloc_r+0x248>
  40661e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406622:	2800      	cmp	r0, #0
  406624:	f47f aeae 	bne.w	406384 <_malloc_r+0x248>
  406628:	eb08 030b 	add.w	r3, r8, fp
  40662c:	68ba      	ldr	r2, [r7, #8]
  40662e:	f043 0301 	orr.w	r3, r3, #1
  406632:	6053      	str	r3, [r2, #4]
  406634:	e6ee      	b.n	406414 <_malloc_r+0x2d8>
  406636:	207f      	movs	r0, #127	; 0x7f
  406638:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40663c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406640:	e59e      	b.n	406180 <_malloc_r+0x44>
  406642:	f104 0108 	add.w	r1, r4, #8
  406646:	4628      	mov	r0, r5
  406648:	9300      	str	r3, [sp, #0]
  40664a:	f000 fea7 	bl	40739c <_free_r>
  40664e:	9b00      	ldr	r3, [sp, #0]
  406650:	6819      	ldr	r1, [r3, #0]
  406652:	e6df      	b.n	406414 <_malloc_r+0x2d8>
  406654:	2001      	movs	r0, #1
  406656:	f04f 0900 	mov.w	r9, #0
  40665a:	e6bc      	b.n	4063d6 <_malloc_r+0x29a>
  40665c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406660:	d805      	bhi.n	40666e <_malloc_r+0x532>
  406662:	0bda      	lsrs	r2, r3, #15
  406664:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406668:	00c9      	lsls	r1, r1, #3
  40666a:	3277      	adds	r2, #119	; 0x77
  40666c:	e720      	b.n	4064b0 <_malloc_r+0x374>
  40666e:	f240 5154 	movw	r1, #1364	; 0x554
  406672:	428a      	cmp	r2, r1
  406674:	d805      	bhi.n	406682 <_malloc_r+0x546>
  406676:	0c9a      	lsrs	r2, r3, #18
  406678:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40667c:	00c9      	lsls	r1, r1, #3
  40667e:	327c      	adds	r2, #124	; 0x7c
  406680:	e716      	b.n	4064b0 <_malloc_r+0x374>
  406682:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  406686:	227e      	movs	r2, #126	; 0x7e
  406688:	e712      	b.n	4064b0 <_malloc_r+0x374>
  40668a:	687b      	ldr	r3, [r7, #4]
  40668c:	e780      	b.n	406590 <_malloc_r+0x454>
  40668e:	08f0      	lsrs	r0, r6, #3
  406690:	f106 0308 	add.w	r3, r6, #8
  406694:	e600      	b.n	406298 <_malloc_r+0x15c>
  406696:	bf00      	nop
  406698:	20000a80 	.word	0x20000a80
  40669c:	00000000 	.word	0x00000000

004066a0 <memchr>:
  4066a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4066a4:	2a10      	cmp	r2, #16
  4066a6:	db2b      	blt.n	406700 <memchr+0x60>
  4066a8:	f010 0f07 	tst.w	r0, #7
  4066ac:	d008      	beq.n	4066c0 <memchr+0x20>
  4066ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  4066b2:	3a01      	subs	r2, #1
  4066b4:	428b      	cmp	r3, r1
  4066b6:	d02d      	beq.n	406714 <memchr+0x74>
  4066b8:	f010 0f07 	tst.w	r0, #7
  4066bc:	b342      	cbz	r2, 406710 <memchr+0x70>
  4066be:	d1f6      	bne.n	4066ae <memchr+0xe>
  4066c0:	b4f0      	push	{r4, r5, r6, r7}
  4066c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4066c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4066ca:	f022 0407 	bic.w	r4, r2, #7
  4066ce:	f07f 0700 	mvns.w	r7, #0
  4066d2:	2300      	movs	r3, #0
  4066d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4066d8:	3c08      	subs	r4, #8
  4066da:	ea85 0501 	eor.w	r5, r5, r1
  4066de:	ea86 0601 	eor.w	r6, r6, r1
  4066e2:	fa85 f547 	uadd8	r5, r5, r7
  4066e6:	faa3 f587 	sel	r5, r3, r7
  4066ea:	fa86 f647 	uadd8	r6, r6, r7
  4066ee:	faa5 f687 	sel	r6, r5, r7
  4066f2:	b98e      	cbnz	r6, 406718 <memchr+0x78>
  4066f4:	d1ee      	bne.n	4066d4 <memchr+0x34>
  4066f6:	bcf0      	pop	{r4, r5, r6, r7}
  4066f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4066fc:	f002 0207 	and.w	r2, r2, #7
  406700:	b132      	cbz	r2, 406710 <memchr+0x70>
  406702:	f810 3b01 	ldrb.w	r3, [r0], #1
  406706:	3a01      	subs	r2, #1
  406708:	ea83 0301 	eor.w	r3, r3, r1
  40670c:	b113      	cbz	r3, 406714 <memchr+0x74>
  40670e:	d1f8      	bne.n	406702 <memchr+0x62>
  406710:	2000      	movs	r0, #0
  406712:	4770      	bx	lr
  406714:	3801      	subs	r0, #1
  406716:	4770      	bx	lr
  406718:	2d00      	cmp	r5, #0
  40671a:	bf06      	itte	eq
  40671c:	4635      	moveq	r5, r6
  40671e:	3803      	subeq	r0, #3
  406720:	3807      	subne	r0, #7
  406722:	f015 0f01 	tst.w	r5, #1
  406726:	d107      	bne.n	406738 <memchr+0x98>
  406728:	3001      	adds	r0, #1
  40672a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40672e:	bf02      	ittt	eq
  406730:	3001      	addeq	r0, #1
  406732:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406736:	3001      	addeq	r0, #1
  406738:	bcf0      	pop	{r4, r5, r6, r7}
  40673a:	3801      	subs	r0, #1
  40673c:	4770      	bx	lr
  40673e:	bf00      	nop

00406740 <memcmp>:
  406740:	2a03      	cmp	r2, #3
  406742:	b470      	push	{r4, r5, r6}
  406744:	d922      	bls.n	40678c <memcmp+0x4c>
  406746:	ea40 0301 	orr.w	r3, r0, r1
  40674a:	079b      	lsls	r3, r3, #30
  40674c:	d011      	beq.n	406772 <memcmp+0x32>
  40674e:	7803      	ldrb	r3, [r0, #0]
  406750:	780c      	ldrb	r4, [r1, #0]
  406752:	42a3      	cmp	r3, r4
  406754:	d11d      	bne.n	406792 <memcmp+0x52>
  406756:	440a      	add	r2, r1
  406758:	3101      	adds	r1, #1
  40675a:	e005      	b.n	406768 <memcmp+0x28>
  40675c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406760:	f811 4b01 	ldrb.w	r4, [r1], #1
  406764:	42a3      	cmp	r3, r4
  406766:	d114      	bne.n	406792 <memcmp+0x52>
  406768:	4291      	cmp	r1, r2
  40676a:	d1f7      	bne.n	40675c <memcmp+0x1c>
  40676c:	2000      	movs	r0, #0
  40676e:	bc70      	pop	{r4, r5, r6}
  406770:	4770      	bx	lr
  406772:	680d      	ldr	r5, [r1, #0]
  406774:	6806      	ldr	r6, [r0, #0]
  406776:	42ae      	cmp	r6, r5
  406778:	460c      	mov	r4, r1
  40677a:	4603      	mov	r3, r0
  40677c:	f101 0104 	add.w	r1, r1, #4
  406780:	f100 0004 	add.w	r0, r0, #4
  406784:	d108      	bne.n	406798 <memcmp+0x58>
  406786:	3a04      	subs	r2, #4
  406788:	2a03      	cmp	r2, #3
  40678a:	d8f2      	bhi.n	406772 <memcmp+0x32>
  40678c:	2a00      	cmp	r2, #0
  40678e:	d1de      	bne.n	40674e <memcmp+0xe>
  406790:	e7ec      	b.n	40676c <memcmp+0x2c>
  406792:	1b18      	subs	r0, r3, r4
  406794:	bc70      	pop	{r4, r5, r6}
  406796:	4770      	bx	lr
  406798:	4621      	mov	r1, r4
  40679a:	4618      	mov	r0, r3
  40679c:	e7d7      	b.n	40674e <memcmp+0xe>
  40679e:	bf00      	nop

004067a0 <memcpy>:
  4067a0:	4684      	mov	ip, r0
  4067a2:	ea41 0300 	orr.w	r3, r1, r0
  4067a6:	f013 0303 	ands.w	r3, r3, #3
  4067aa:	d16d      	bne.n	406888 <memcpy+0xe8>
  4067ac:	3a40      	subs	r2, #64	; 0x40
  4067ae:	d341      	bcc.n	406834 <memcpy+0x94>
  4067b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067b4:	f840 3b04 	str.w	r3, [r0], #4
  4067b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067bc:	f840 3b04 	str.w	r3, [r0], #4
  4067c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067c4:	f840 3b04 	str.w	r3, [r0], #4
  4067c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067cc:	f840 3b04 	str.w	r3, [r0], #4
  4067d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067d4:	f840 3b04 	str.w	r3, [r0], #4
  4067d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067dc:	f840 3b04 	str.w	r3, [r0], #4
  4067e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067e4:	f840 3b04 	str.w	r3, [r0], #4
  4067e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067ec:	f840 3b04 	str.w	r3, [r0], #4
  4067f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067f4:	f840 3b04 	str.w	r3, [r0], #4
  4067f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4067fc:	f840 3b04 	str.w	r3, [r0], #4
  406800:	f851 3b04 	ldr.w	r3, [r1], #4
  406804:	f840 3b04 	str.w	r3, [r0], #4
  406808:	f851 3b04 	ldr.w	r3, [r1], #4
  40680c:	f840 3b04 	str.w	r3, [r0], #4
  406810:	f851 3b04 	ldr.w	r3, [r1], #4
  406814:	f840 3b04 	str.w	r3, [r0], #4
  406818:	f851 3b04 	ldr.w	r3, [r1], #4
  40681c:	f840 3b04 	str.w	r3, [r0], #4
  406820:	f851 3b04 	ldr.w	r3, [r1], #4
  406824:	f840 3b04 	str.w	r3, [r0], #4
  406828:	f851 3b04 	ldr.w	r3, [r1], #4
  40682c:	f840 3b04 	str.w	r3, [r0], #4
  406830:	3a40      	subs	r2, #64	; 0x40
  406832:	d2bd      	bcs.n	4067b0 <memcpy+0x10>
  406834:	3230      	adds	r2, #48	; 0x30
  406836:	d311      	bcc.n	40685c <memcpy+0xbc>
  406838:	f851 3b04 	ldr.w	r3, [r1], #4
  40683c:	f840 3b04 	str.w	r3, [r0], #4
  406840:	f851 3b04 	ldr.w	r3, [r1], #4
  406844:	f840 3b04 	str.w	r3, [r0], #4
  406848:	f851 3b04 	ldr.w	r3, [r1], #4
  40684c:	f840 3b04 	str.w	r3, [r0], #4
  406850:	f851 3b04 	ldr.w	r3, [r1], #4
  406854:	f840 3b04 	str.w	r3, [r0], #4
  406858:	3a10      	subs	r2, #16
  40685a:	d2ed      	bcs.n	406838 <memcpy+0x98>
  40685c:	320c      	adds	r2, #12
  40685e:	d305      	bcc.n	40686c <memcpy+0xcc>
  406860:	f851 3b04 	ldr.w	r3, [r1], #4
  406864:	f840 3b04 	str.w	r3, [r0], #4
  406868:	3a04      	subs	r2, #4
  40686a:	d2f9      	bcs.n	406860 <memcpy+0xc0>
  40686c:	3204      	adds	r2, #4
  40686e:	d008      	beq.n	406882 <memcpy+0xe2>
  406870:	07d2      	lsls	r2, r2, #31
  406872:	bf1c      	itt	ne
  406874:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406878:	f800 3b01 	strbne.w	r3, [r0], #1
  40687c:	d301      	bcc.n	406882 <memcpy+0xe2>
  40687e:	880b      	ldrh	r3, [r1, #0]
  406880:	8003      	strh	r3, [r0, #0]
  406882:	4660      	mov	r0, ip
  406884:	4770      	bx	lr
  406886:	bf00      	nop
  406888:	2a08      	cmp	r2, #8
  40688a:	d313      	bcc.n	4068b4 <memcpy+0x114>
  40688c:	078b      	lsls	r3, r1, #30
  40688e:	d08d      	beq.n	4067ac <memcpy+0xc>
  406890:	f010 0303 	ands.w	r3, r0, #3
  406894:	d08a      	beq.n	4067ac <memcpy+0xc>
  406896:	f1c3 0304 	rsb	r3, r3, #4
  40689a:	1ad2      	subs	r2, r2, r3
  40689c:	07db      	lsls	r3, r3, #31
  40689e:	bf1c      	itt	ne
  4068a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4068a4:	f800 3b01 	strbne.w	r3, [r0], #1
  4068a8:	d380      	bcc.n	4067ac <memcpy+0xc>
  4068aa:	f831 3b02 	ldrh.w	r3, [r1], #2
  4068ae:	f820 3b02 	strh.w	r3, [r0], #2
  4068b2:	e77b      	b.n	4067ac <memcpy+0xc>
  4068b4:	3a04      	subs	r2, #4
  4068b6:	d3d9      	bcc.n	40686c <memcpy+0xcc>
  4068b8:	3a01      	subs	r2, #1
  4068ba:	f811 3b01 	ldrb.w	r3, [r1], #1
  4068be:	f800 3b01 	strb.w	r3, [r0], #1
  4068c2:	d2f9      	bcs.n	4068b8 <memcpy+0x118>
  4068c4:	780b      	ldrb	r3, [r1, #0]
  4068c6:	7003      	strb	r3, [r0, #0]
  4068c8:	784b      	ldrb	r3, [r1, #1]
  4068ca:	7043      	strb	r3, [r0, #1]
  4068cc:	788b      	ldrb	r3, [r1, #2]
  4068ce:	7083      	strb	r3, [r0, #2]
  4068d0:	4660      	mov	r0, ip
  4068d2:	4770      	bx	lr

004068d4 <__malloc_lock>:
  4068d4:	4801      	ldr	r0, [pc, #4]	; (4068dc <__malloc_lock+0x8>)
  4068d6:	f7ff bc2d 	b.w	406134 <__retarget_lock_acquire_recursive>
  4068da:	bf00      	nop
  4068dc:	2000d20c 	.word	0x2000d20c

004068e0 <__malloc_unlock>:
  4068e0:	4801      	ldr	r0, [pc, #4]	; (4068e8 <__malloc_unlock+0x8>)
  4068e2:	f7ff bc29 	b.w	406138 <__retarget_lock_release_recursive>
  4068e6:	bf00      	nop
  4068e8:	2000d20c 	.word	0x2000d20c

004068ec <_Balloc>:
  4068ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4068ee:	b570      	push	{r4, r5, r6, lr}
  4068f0:	4605      	mov	r5, r0
  4068f2:	460c      	mov	r4, r1
  4068f4:	b14b      	cbz	r3, 40690a <_Balloc+0x1e>
  4068f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4068fa:	b180      	cbz	r0, 40691e <_Balloc+0x32>
  4068fc:	6802      	ldr	r2, [r0, #0]
  4068fe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406902:	2300      	movs	r3, #0
  406904:	6103      	str	r3, [r0, #16]
  406906:	60c3      	str	r3, [r0, #12]
  406908:	bd70      	pop	{r4, r5, r6, pc}
  40690a:	2221      	movs	r2, #33	; 0x21
  40690c:	2104      	movs	r1, #4
  40690e:	f000 fcc5 	bl	40729c <_calloc_r>
  406912:	64e8      	str	r0, [r5, #76]	; 0x4c
  406914:	4603      	mov	r3, r0
  406916:	2800      	cmp	r0, #0
  406918:	d1ed      	bne.n	4068f6 <_Balloc+0xa>
  40691a:	2000      	movs	r0, #0
  40691c:	bd70      	pop	{r4, r5, r6, pc}
  40691e:	2101      	movs	r1, #1
  406920:	fa01 f604 	lsl.w	r6, r1, r4
  406924:	1d72      	adds	r2, r6, #5
  406926:	4628      	mov	r0, r5
  406928:	0092      	lsls	r2, r2, #2
  40692a:	f000 fcb7 	bl	40729c <_calloc_r>
  40692e:	2800      	cmp	r0, #0
  406930:	d0f3      	beq.n	40691a <_Balloc+0x2e>
  406932:	6044      	str	r4, [r0, #4]
  406934:	6086      	str	r6, [r0, #8]
  406936:	e7e4      	b.n	406902 <_Balloc+0x16>

00406938 <_Bfree>:
  406938:	b131      	cbz	r1, 406948 <_Bfree+0x10>
  40693a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40693c:	684a      	ldr	r2, [r1, #4]
  40693e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406942:	6008      	str	r0, [r1, #0]
  406944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406948:	4770      	bx	lr
  40694a:	bf00      	nop

0040694c <__multadd>:
  40694c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40694e:	690c      	ldr	r4, [r1, #16]
  406950:	b083      	sub	sp, #12
  406952:	460d      	mov	r5, r1
  406954:	4606      	mov	r6, r0
  406956:	f101 0e14 	add.w	lr, r1, #20
  40695a:	2700      	movs	r7, #0
  40695c:	f8de 0000 	ldr.w	r0, [lr]
  406960:	b281      	uxth	r1, r0
  406962:	fb02 3301 	mla	r3, r2, r1, r3
  406966:	0c01      	lsrs	r1, r0, #16
  406968:	0c18      	lsrs	r0, r3, #16
  40696a:	fb02 0101 	mla	r1, r2, r1, r0
  40696e:	b29b      	uxth	r3, r3
  406970:	3701      	adds	r7, #1
  406972:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406976:	42bc      	cmp	r4, r7
  406978:	f84e 3b04 	str.w	r3, [lr], #4
  40697c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406980:	dcec      	bgt.n	40695c <__multadd+0x10>
  406982:	b13b      	cbz	r3, 406994 <__multadd+0x48>
  406984:	68aa      	ldr	r2, [r5, #8]
  406986:	4294      	cmp	r4, r2
  406988:	da07      	bge.n	40699a <__multadd+0x4e>
  40698a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40698e:	3401      	adds	r4, #1
  406990:	6153      	str	r3, [r2, #20]
  406992:	612c      	str	r4, [r5, #16]
  406994:	4628      	mov	r0, r5
  406996:	b003      	add	sp, #12
  406998:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40699a:	6869      	ldr	r1, [r5, #4]
  40699c:	9301      	str	r3, [sp, #4]
  40699e:	3101      	adds	r1, #1
  4069a0:	4630      	mov	r0, r6
  4069a2:	f7ff ffa3 	bl	4068ec <_Balloc>
  4069a6:	692a      	ldr	r2, [r5, #16]
  4069a8:	3202      	adds	r2, #2
  4069aa:	f105 010c 	add.w	r1, r5, #12
  4069ae:	4607      	mov	r7, r0
  4069b0:	0092      	lsls	r2, r2, #2
  4069b2:	300c      	adds	r0, #12
  4069b4:	f7ff fef4 	bl	4067a0 <memcpy>
  4069b8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4069ba:	6869      	ldr	r1, [r5, #4]
  4069bc:	9b01      	ldr	r3, [sp, #4]
  4069be:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4069c2:	6028      	str	r0, [r5, #0]
  4069c4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4069c8:	463d      	mov	r5, r7
  4069ca:	e7de      	b.n	40698a <__multadd+0x3e>

004069cc <__hi0bits>:
  4069cc:	0c02      	lsrs	r2, r0, #16
  4069ce:	0412      	lsls	r2, r2, #16
  4069d0:	4603      	mov	r3, r0
  4069d2:	b9b2      	cbnz	r2, 406a02 <__hi0bits+0x36>
  4069d4:	0403      	lsls	r3, r0, #16
  4069d6:	2010      	movs	r0, #16
  4069d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4069dc:	bf04      	itt	eq
  4069de:	021b      	lsleq	r3, r3, #8
  4069e0:	3008      	addeq	r0, #8
  4069e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4069e6:	bf04      	itt	eq
  4069e8:	011b      	lsleq	r3, r3, #4
  4069ea:	3004      	addeq	r0, #4
  4069ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4069f0:	bf04      	itt	eq
  4069f2:	009b      	lsleq	r3, r3, #2
  4069f4:	3002      	addeq	r0, #2
  4069f6:	2b00      	cmp	r3, #0
  4069f8:	db02      	blt.n	406a00 <__hi0bits+0x34>
  4069fa:	005b      	lsls	r3, r3, #1
  4069fc:	d403      	bmi.n	406a06 <__hi0bits+0x3a>
  4069fe:	2020      	movs	r0, #32
  406a00:	4770      	bx	lr
  406a02:	2000      	movs	r0, #0
  406a04:	e7e8      	b.n	4069d8 <__hi0bits+0xc>
  406a06:	3001      	adds	r0, #1
  406a08:	4770      	bx	lr
  406a0a:	bf00      	nop

00406a0c <__lo0bits>:
  406a0c:	6803      	ldr	r3, [r0, #0]
  406a0e:	f013 0207 	ands.w	r2, r3, #7
  406a12:	4601      	mov	r1, r0
  406a14:	d007      	beq.n	406a26 <__lo0bits+0x1a>
  406a16:	07da      	lsls	r2, r3, #31
  406a18:	d421      	bmi.n	406a5e <__lo0bits+0x52>
  406a1a:	0798      	lsls	r0, r3, #30
  406a1c:	d421      	bmi.n	406a62 <__lo0bits+0x56>
  406a1e:	089b      	lsrs	r3, r3, #2
  406a20:	600b      	str	r3, [r1, #0]
  406a22:	2002      	movs	r0, #2
  406a24:	4770      	bx	lr
  406a26:	b298      	uxth	r0, r3
  406a28:	b198      	cbz	r0, 406a52 <__lo0bits+0x46>
  406a2a:	4610      	mov	r0, r2
  406a2c:	f013 0fff 	tst.w	r3, #255	; 0xff
  406a30:	bf04      	itt	eq
  406a32:	0a1b      	lsreq	r3, r3, #8
  406a34:	3008      	addeq	r0, #8
  406a36:	071a      	lsls	r2, r3, #28
  406a38:	bf04      	itt	eq
  406a3a:	091b      	lsreq	r3, r3, #4
  406a3c:	3004      	addeq	r0, #4
  406a3e:	079a      	lsls	r2, r3, #30
  406a40:	bf04      	itt	eq
  406a42:	089b      	lsreq	r3, r3, #2
  406a44:	3002      	addeq	r0, #2
  406a46:	07da      	lsls	r2, r3, #31
  406a48:	d407      	bmi.n	406a5a <__lo0bits+0x4e>
  406a4a:	085b      	lsrs	r3, r3, #1
  406a4c:	d104      	bne.n	406a58 <__lo0bits+0x4c>
  406a4e:	2020      	movs	r0, #32
  406a50:	4770      	bx	lr
  406a52:	0c1b      	lsrs	r3, r3, #16
  406a54:	2010      	movs	r0, #16
  406a56:	e7e9      	b.n	406a2c <__lo0bits+0x20>
  406a58:	3001      	adds	r0, #1
  406a5a:	600b      	str	r3, [r1, #0]
  406a5c:	4770      	bx	lr
  406a5e:	2000      	movs	r0, #0
  406a60:	4770      	bx	lr
  406a62:	085b      	lsrs	r3, r3, #1
  406a64:	600b      	str	r3, [r1, #0]
  406a66:	2001      	movs	r0, #1
  406a68:	4770      	bx	lr
  406a6a:	bf00      	nop

00406a6c <__i2b>:
  406a6c:	b510      	push	{r4, lr}
  406a6e:	460c      	mov	r4, r1
  406a70:	2101      	movs	r1, #1
  406a72:	f7ff ff3b 	bl	4068ec <_Balloc>
  406a76:	2201      	movs	r2, #1
  406a78:	6144      	str	r4, [r0, #20]
  406a7a:	6102      	str	r2, [r0, #16]
  406a7c:	bd10      	pop	{r4, pc}
  406a7e:	bf00      	nop

00406a80 <__multiply>:
  406a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406a84:	690c      	ldr	r4, [r1, #16]
  406a86:	6915      	ldr	r5, [r2, #16]
  406a88:	42ac      	cmp	r4, r5
  406a8a:	b083      	sub	sp, #12
  406a8c:	468b      	mov	fp, r1
  406a8e:	4616      	mov	r6, r2
  406a90:	da04      	bge.n	406a9c <__multiply+0x1c>
  406a92:	4622      	mov	r2, r4
  406a94:	46b3      	mov	fp, r6
  406a96:	462c      	mov	r4, r5
  406a98:	460e      	mov	r6, r1
  406a9a:	4615      	mov	r5, r2
  406a9c:	f8db 3008 	ldr.w	r3, [fp, #8]
  406aa0:	f8db 1004 	ldr.w	r1, [fp, #4]
  406aa4:	eb04 0805 	add.w	r8, r4, r5
  406aa8:	4598      	cmp	r8, r3
  406aaa:	bfc8      	it	gt
  406aac:	3101      	addgt	r1, #1
  406aae:	f7ff ff1d 	bl	4068ec <_Balloc>
  406ab2:	f100 0914 	add.w	r9, r0, #20
  406ab6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  406aba:	45d1      	cmp	r9, sl
  406abc:	9000      	str	r0, [sp, #0]
  406abe:	d205      	bcs.n	406acc <__multiply+0x4c>
  406ac0:	464b      	mov	r3, r9
  406ac2:	2100      	movs	r1, #0
  406ac4:	f843 1b04 	str.w	r1, [r3], #4
  406ac8:	459a      	cmp	sl, r3
  406aca:	d8fb      	bhi.n	406ac4 <__multiply+0x44>
  406acc:	f106 0c14 	add.w	ip, r6, #20
  406ad0:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406ad4:	f10b 0b14 	add.w	fp, fp, #20
  406ad8:	459c      	cmp	ip, r3
  406ada:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  406ade:	d24c      	bcs.n	406b7a <__multiply+0xfa>
  406ae0:	f8cd a004 	str.w	sl, [sp, #4]
  406ae4:	469a      	mov	sl, r3
  406ae6:	f8dc 5000 	ldr.w	r5, [ip]
  406aea:	b2af      	uxth	r7, r5
  406aec:	b1ef      	cbz	r7, 406b2a <__multiply+0xaa>
  406aee:	2100      	movs	r1, #0
  406af0:	464d      	mov	r5, r9
  406af2:	465e      	mov	r6, fp
  406af4:	460c      	mov	r4, r1
  406af6:	f856 2b04 	ldr.w	r2, [r6], #4
  406afa:	6828      	ldr	r0, [r5, #0]
  406afc:	b293      	uxth	r3, r2
  406afe:	b281      	uxth	r1, r0
  406b00:	fb07 1303 	mla	r3, r7, r3, r1
  406b04:	0c12      	lsrs	r2, r2, #16
  406b06:	0c01      	lsrs	r1, r0, #16
  406b08:	4423      	add	r3, r4
  406b0a:	fb07 1102 	mla	r1, r7, r2, r1
  406b0e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  406b12:	b29b      	uxth	r3, r3
  406b14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406b18:	45b6      	cmp	lr, r6
  406b1a:	f845 3b04 	str.w	r3, [r5], #4
  406b1e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  406b22:	d8e8      	bhi.n	406af6 <__multiply+0x76>
  406b24:	602c      	str	r4, [r5, #0]
  406b26:	f8dc 5000 	ldr.w	r5, [ip]
  406b2a:	0c2d      	lsrs	r5, r5, #16
  406b2c:	d01d      	beq.n	406b6a <__multiply+0xea>
  406b2e:	f8d9 3000 	ldr.w	r3, [r9]
  406b32:	4648      	mov	r0, r9
  406b34:	461c      	mov	r4, r3
  406b36:	4659      	mov	r1, fp
  406b38:	2200      	movs	r2, #0
  406b3a:	880e      	ldrh	r6, [r1, #0]
  406b3c:	0c24      	lsrs	r4, r4, #16
  406b3e:	fb05 4406 	mla	r4, r5, r6, r4
  406b42:	4422      	add	r2, r4
  406b44:	b29b      	uxth	r3, r3
  406b46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406b4a:	f840 3b04 	str.w	r3, [r0], #4
  406b4e:	f851 3b04 	ldr.w	r3, [r1], #4
  406b52:	6804      	ldr	r4, [r0, #0]
  406b54:	0c1b      	lsrs	r3, r3, #16
  406b56:	b2a6      	uxth	r6, r4
  406b58:	fb05 6303 	mla	r3, r5, r3, r6
  406b5c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406b60:	458e      	cmp	lr, r1
  406b62:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406b66:	d8e8      	bhi.n	406b3a <__multiply+0xba>
  406b68:	6003      	str	r3, [r0, #0]
  406b6a:	f10c 0c04 	add.w	ip, ip, #4
  406b6e:	45e2      	cmp	sl, ip
  406b70:	f109 0904 	add.w	r9, r9, #4
  406b74:	d8b7      	bhi.n	406ae6 <__multiply+0x66>
  406b76:	f8dd a004 	ldr.w	sl, [sp, #4]
  406b7a:	f1b8 0f00 	cmp.w	r8, #0
  406b7e:	dd0b      	ble.n	406b98 <__multiply+0x118>
  406b80:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406b84:	f1aa 0a04 	sub.w	sl, sl, #4
  406b88:	b11b      	cbz	r3, 406b92 <__multiply+0x112>
  406b8a:	e005      	b.n	406b98 <__multiply+0x118>
  406b8c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406b90:	b913      	cbnz	r3, 406b98 <__multiply+0x118>
  406b92:	f1b8 0801 	subs.w	r8, r8, #1
  406b96:	d1f9      	bne.n	406b8c <__multiply+0x10c>
  406b98:	9800      	ldr	r0, [sp, #0]
  406b9a:	f8c0 8010 	str.w	r8, [r0, #16]
  406b9e:	b003      	add	sp, #12
  406ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406ba4 <__pow5mult>:
  406ba4:	f012 0303 	ands.w	r3, r2, #3
  406ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406bac:	4614      	mov	r4, r2
  406bae:	4607      	mov	r7, r0
  406bb0:	d12e      	bne.n	406c10 <__pow5mult+0x6c>
  406bb2:	460d      	mov	r5, r1
  406bb4:	10a4      	asrs	r4, r4, #2
  406bb6:	d01c      	beq.n	406bf2 <__pow5mult+0x4e>
  406bb8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  406bba:	b396      	cbz	r6, 406c22 <__pow5mult+0x7e>
  406bbc:	07e3      	lsls	r3, r4, #31
  406bbe:	f04f 0800 	mov.w	r8, #0
  406bc2:	d406      	bmi.n	406bd2 <__pow5mult+0x2e>
  406bc4:	1064      	asrs	r4, r4, #1
  406bc6:	d014      	beq.n	406bf2 <__pow5mult+0x4e>
  406bc8:	6830      	ldr	r0, [r6, #0]
  406bca:	b1a8      	cbz	r0, 406bf8 <__pow5mult+0x54>
  406bcc:	4606      	mov	r6, r0
  406bce:	07e3      	lsls	r3, r4, #31
  406bd0:	d5f8      	bpl.n	406bc4 <__pow5mult+0x20>
  406bd2:	4632      	mov	r2, r6
  406bd4:	4629      	mov	r1, r5
  406bd6:	4638      	mov	r0, r7
  406bd8:	f7ff ff52 	bl	406a80 <__multiply>
  406bdc:	b1b5      	cbz	r5, 406c0c <__pow5mult+0x68>
  406bde:	686a      	ldr	r2, [r5, #4]
  406be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406be2:	1064      	asrs	r4, r4, #1
  406be4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406be8:	6029      	str	r1, [r5, #0]
  406bea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406bee:	4605      	mov	r5, r0
  406bf0:	d1ea      	bne.n	406bc8 <__pow5mult+0x24>
  406bf2:	4628      	mov	r0, r5
  406bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406bf8:	4632      	mov	r2, r6
  406bfa:	4631      	mov	r1, r6
  406bfc:	4638      	mov	r0, r7
  406bfe:	f7ff ff3f 	bl	406a80 <__multiply>
  406c02:	6030      	str	r0, [r6, #0]
  406c04:	f8c0 8000 	str.w	r8, [r0]
  406c08:	4606      	mov	r6, r0
  406c0a:	e7e0      	b.n	406bce <__pow5mult+0x2a>
  406c0c:	4605      	mov	r5, r0
  406c0e:	e7d9      	b.n	406bc4 <__pow5mult+0x20>
  406c10:	1e5a      	subs	r2, r3, #1
  406c12:	4d0b      	ldr	r5, [pc, #44]	; (406c40 <__pow5mult+0x9c>)
  406c14:	2300      	movs	r3, #0
  406c16:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406c1a:	f7ff fe97 	bl	40694c <__multadd>
  406c1e:	4605      	mov	r5, r0
  406c20:	e7c8      	b.n	406bb4 <__pow5mult+0x10>
  406c22:	2101      	movs	r1, #1
  406c24:	4638      	mov	r0, r7
  406c26:	f7ff fe61 	bl	4068ec <_Balloc>
  406c2a:	f240 2171 	movw	r1, #625	; 0x271
  406c2e:	2201      	movs	r2, #1
  406c30:	2300      	movs	r3, #0
  406c32:	6141      	str	r1, [r0, #20]
  406c34:	6102      	str	r2, [r0, #16]
  406c36:	4606      	mov	r6, r0
  406c38:	64b8      	str	r0, [r7, #72]	; 0x48
  406c3a:	6003      	str	r3, [r0, #0]
  406c3c:	e7be      	b.n	406bbc <__pow5mult+0x18>
  406c3e:	bf00      	nop
  406c40:	004091a0 	.word	0x004091a0

00406c44 <__lshift>:
  406c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406c48:	4691      	mov	r9, r2
  406c4a:	690a      	ldr	r2, [r1, #16]
  406c4c:	688b      	ldr	r3, [r1, #8]
  406c4e:	ea4f 1469 	mov.w	r4, r9, asr #5
  406c52:	eb04 0802 	add.w	r8, r4, r2
  406c56:	f108 0501 	add.w	r5, r8, #1
  406c5a:	429d      	cmp	r5, r3
  406c5c:	460e      	mov	r6, r1
  406c5e:	4607      	mov	r7, r0
  406c60:	6849      	ldr	r1, [r1, #4]
  406c62:	dd04      	ble.n	406c6e <__lshift+0x2a>
  406c64:	005b      	lsls	r3, r3, #1
  406c66:	429d      	cmp	r5, r3
  406c68:	f101 0101 	add.w	r1, r1, #1
  406c6c:	dcfa      	bgt.n	406c64 <__lshift+0x20>
  406c6e:	4638      	mov	r0, r7
  406c70:	f7ff fe3c 	bl	4068ec <_Balloc>
  406c74:	2c00      	cmp	r4, #0
  406c76:	f100 0314 	add.w	r3, r0, #20
  406c7a:	dd06      	ble.n	406c8a <__lshift+0x46>
  406c7c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406c80:	2100      	movs	r1, #0
  406c82:	f843 1b04 	str.w	r1, [r3], #4
  406c86:	429a      	cmp	r2, r3
  406c88:	d1fb      	bne.n	406c82 <__lshift+0x3e>
  406c8a:	6934      	ldr	r4, [r6, #16]
  406c8c:	f106 0114 	add.w	r1, r6, #20
  406c90:	f019 091f 	ands.w	r9, r9, #31
  406c94:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406c98:	d01d      	beq.n	406cd6 <__lshift+0x92>
  406c9a:	f1c9 0c20 	rsb	ip, r9, #32
  406c9e:	2200      	movs	r2, #0
  406ca0:	680c      	ldr	r4, [r1, #0]
  406ca2:	fa04 f409 	lsl.w	r4, r4, r9
  406ca6:	4314      	orrs	r4, r2
  406ca8:	f843 4b04 	str.w	r4, [r3], #4
  406cac:	f851 2b04 	ldr.w	r2, [r1], #4
  406cb0:	458e      	cmp	lr, r1
  406cb2:	fa22 f20c 	lsr.w	r2, r2, ip
  406cb6:	d8f3      	bhi.n	406ca0 <__lshift+0x5c>
  406cb8:	601a      	str	r2, [r3, #0]
  406cba:	b10a      	cbz	r2, 406cc0 <__lshift+0x7c>
  406cbc:	f108 0502 	add.w	r5, r8, #2
  406cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406cc2:	6872      	ldr	r2, [r6, #4]
  406cc4:	3d01      	subs	r5, #1
  406cc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406cca:	6105      	str	r5, [r0, #16]
  406ccc:	6031      	str	r1, [r6, #0]
  406cce:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406cd6:	3b04      	subs	r3, #4
  406cd8:	f851 2b04 	ldr.w	r2, [r1], #4
  406cdc:	f843 2f04 	str.w	r2, [r3, #4]!
  406ce0:	458e      	cmp	lr, r1
  406ce2:	d8f9      	bhi.n	406cd8 <__lshift+0x94>
  406ce4:	e7ec      	b.n	406cc0 <__lshift+0x7c>
  406ce6:	bf00      	nop

00406ce8 <__mcmp>:
  406ce8:	b430      	push	{r4, r5}
  406cea:	690b      	ldr	r3, [r1, #16]
  406cec:	4605      	mov	r5, r0
  406cee:	6900      	ldr	r0, [r0, #16]
  406cf0:	1ac0      	subs	r0, r0, r3
  406cf2:	d10f      	bne.n	406d14 <__mcmp+0x2c>
  406cf4:	009b      	lsls	r3, r3, #2
  406cf6:	3514      	adds	r5, #20
  406cf8:	3114      	adds	r1, #20
  406cfa:	4419      	add	r1, r3
  406cfc:	442b      	add	r3, r5
  406cfe:	e001      	b.n	406d04 <__mcmp+0x1c>
  406d00:	429d      	cmp	r5, r3
  406d02:	d207      	bcs.n	406d14 <__mcmp+0x2c>
  406d04:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406d08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406d0c:	4294      	cmp	r4, r2
  406d0e:	d0f7      	beq.n	406d00 <__mcmp+0x18>
  406d10:	d302      	bcc.n	406d18 <__mcmp+0x30>
  406d12:	2001      	movs	r0, #1
  406d14:	bc30      	pop	{r4, r5}
  406d16:	4770      	bx	lr
  406d18:	f04f 30ff 	mov.w	r0, #4294967295
  406d1c:	e7fa      	b.n	406d14 <__mcmp+0x2c>
  406d1e:	bf00      	nop

00406d20 <__mdiff>:
  406d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406d24:	690f      	ldr	r7, [r1, #16]
  406d26:	460e      	mov	r6, r1
  406d28:	6911      	ldr	r1, [r2, #16]
  406d2a:	1a7f      	subs	r7, r7, r1
  406d2c:	2f00      	cmp	r7, #0
  406d2e:	4690      	mov	r8, r2
  406d30:	d117      	bne.n	406d62 <__mdiff+0x42>
  406d32:	0089      	lsls	r1, r1, #2
  406d34:	f106 0514 	add.w	r5, r6, #20
  406d38:	f102 0e14 	add.w	lr, r2, #20
  406d3c:	186b      	adds	r3, r5, r1
  406d3e:	4471      	add	r1, lr
  406d40:	e001      	b.n	406d46 <__mdiff+0x26>
  406d42:	429d      	cmp	r5, r3
  406d44:	d25c      	bcs.n	406e00 <__mdiff+0xe0>
  406d46:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  406d4a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  406d4e:	42a2      	cmp	r2, r4
  406d50:	d0f7      	beq.n	406d42 <__mdiff+0x22>
  406d52:	d25e      	bcs.n	406e12 <__mdiff+0xf2>
  406d54:	4633      	mov	r3, r6
  406d56:	462c      	mov	r4, r5
  406d58:	4646      	mov	r6, r8
  406d5a:	4675      	mov	r5, lr
  406d5c:	4698      	mov	r8, r3
  406d5e:	2701      	movs	r7, #1
  406d60:	e005      	b.n	406d6e <__mdiff+0x4e>
  406d62:	db58      	blt.n	406e16 <__mdiff+0xf6>
  406d64:	f106 0514 	add.w	r5, r6, #20
  406d68:	f108 0414 	add.w	r4, r8, #20
  406d6c:	2700      	movs	r7, #0
  406d6e:	6871      	ldr	r1, [r6, #4]
  406d70:	f7ff fdbc 	bl	4068ec <_Balloc>
  406d74:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406d78:	6936      	ldr	r6, [r6, #16]
  406d7a:	60c7      	str	r7, [r0, #12]
  406d7c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406d80:	46a6      	mov	lr, r4
  406d82:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406d86:	f100 0414 	add.w	r4, r0, #20
  406d8a:	2300      	movs	r3, #0
  406d8c:	f85e 1b04 	ldr.w	r1, [lr], #4
  406d90:	f855 8b04 	ldr.w	r8, [r5], #4
  406d94:	b28a      	uxth	r2, r1
  406d96:	fa13 f388 	uxtah	r3, r3, r8
  406d9a:	0c09      	lsrs	r1, r1, #16
  406d9c:	1a9a      	subs	r2, r3, r2
  406d9e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  406da2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406da6:	b292      	uxth	r2, r2
  406da8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406dac:	45f4      	cmp	ip, lr
  406dae:	f844 2b04 	str.w	r2, [r4], #4
  406db2:	ea4f 4323 	mov.w	r3, r3, asr #16
  406db6:	d8e9      	bhi.n	406d8c <__mdiff+0x6c>
  406db8:	42af      	cmp	r7, r5
  406dba:	d917      	bls.n	406dec <__mdiff+0xcc>
  406dbc:	46a4      	mov	ip, r4
  406dbe:	46ae      	mov	lr, r5
  406dc0:	f85e 2b04 	ldr.w	r2, [lr], #4
  406dc4:	fa13 f382 	uxtah	r3, r3, r2
  406dc8:	1419      	asrs	r1, r3, #16
  406dca:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  406dce:	b29b      	uxth	r3, r3
  406dd0:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  406dd4:	4577      	cmp	r7, lr
  406dd6:	f84c 2b04 	str.w	r2, [ip], #4
  406dda:	ea4f 4321 	mov.w	r3, r1, asr #16
  406dde:	d8ef      	bhi.n	406dc0 <__mdiff+0xa0>
  406de0:	43ed      	mvns	r5, r5
  406de2:	442f      	add	r7, r5
  406de4:	f027 0703 	bic.w	r7, r7, #3
  406de8:	3704      	adds	r7, #4
  406dea:	443c      	add	r4, r7
  406dec:	3c04      	subs	r4, #4
  406dee:	b922      	cbnz	r2, 406dfa <__mdiff+0xda>
  406df0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406df4:	3e01      	subs	r6, #1
  406df6:	2b00      	cmp	r3, #0
  406df8:	d0fa      	beq.n	406df0 <__mdiff+0xd0>
  406dfa:	6106      	str	r6, [r0, #16]
  406dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406e00:	2100      	movs	r1, #0
  406e02:	f7ff fd73 	bl	4068ec <_Balloc>
  406e06:	2201      	movs	r2, #1
  406e08:	2300      	movs	r3, #0
  406e0a:	6102      	str	r2, [r0, #16]
  406e0c:	6143      	str	r3, [r0, #20]
  406e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406e12:	4674      	mov	r4, lr
  406e14:	e7ab      	b.n	406d6e <__mdiff+0x4e>
  406e16:	4633      	mov	r3, r6
  406e18:	f106 0414 	add.w	r4, r6, #20
  406e1c:	f102 0514 	add.w	r5, r2, #20
  406e20:	4616      	mov	r6, r2
  406e22:	2701      	movs	r7, #1
  406e24:	4698      	mov	r8, r3
  406e26:	e7a2      	b.n	406d6e <__mdiff+0x4e>

00406e28 <__d2b>:
  406e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406e2c:	b082      	sub	sp, #8
  406e2e:	2101      	movs	r1, #1
  406e30:	461c      	mov	r4, r3
  406e32:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406e36:	4615      	mov	r5, r2
  406e38:	9e08      	ldr	r6, [sp, #32]
  406e3a:	f7ff fd57 	bl	4068ec <_Balloc>
  406e3e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406e42:	4680      	mov	r8, r0
  406e44:	b10f      	cbz	r7, 406e4a <__d2b+0x22>
  406e46:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  406e4a:	9401      	str	r4, [sp, #4]
  406e4c:	b31d      	cbz	r5, 406e96 <__d2b+0x6e>
  406e4e:	a802      	add	r0, sp, #8
  406e50:	f840 5d08 	str.w	r5, [r0, #-8]!
  406e54:	f7ff fdda 	bl	406a0c <__lo0bits>
  406e58:	2800      	cmp	r0, #0
  406e5a:	d134      	bne.n	406ec6 <__d2b+0x9e>
  406e5c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406e60:	f8c8 2014 	str.w	r2, [r8, #20]
  406e64:	2b00      	cmp	r3, #0
  406e66:	bf0c      	ite	eq
  406e68:	2101      	moveq	r1, #1
  406e6a:	2102      	movne	r1, #2
  406e6c:	f8c8 3018 	str.w	r3, [r8, #24]
  406e70:	f8c8 1010 	str.w	r1, [r8, #16]
  406e74:	b9df      	cbnz	r7, 406eae <__d2b+0x86>
  406e76:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  406e7a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406e7e:	6030      	str	r0, [r6, #0]
  406e80:	6918      	ldr	r0, [r3, #16]
  406e82:	f7ff fda3 	bl	4069cc <__hi0bits>
  406e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406e88:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406e8c:	6018      	str	r0, [r3, #0]
  406e8e:	4640      	mov	r0, r8
  406e90:	b002      	add	sp, #8
  406e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406e96:	a801      	add	r0, sp, #4
  406e98:	f7ff fdb8 	bl	406a0c <__lo0bits>
  406e9c:	9b01      	ldr	r3, [sp, #4]
  406e9e:	f8c8 3014 	str.w	r3, [r8, #20]
  406ea2:	2101      	movs	r1, #1
  406ea4:	3020      	adds	r0, #32
  406ea6:	f8c8 1010 	str.w	r1, [r8, #16]
  406eaa:	2f00      	cmp	r7, #0
  406eac:	d0e3      	beq.n	406e76 <__d2b+0x4e>
  406eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406eb0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  406eb4:	4407      	add	r7, r0
  406eb6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  406eba:	6037      	str	r7, [r6, #0]
  406ebc:	6018      	str	r0, [r3, #0]
  406ebe:	4640      	mov	r0, r8
  406ec0:	b002      	add	sp, #8
  406ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406ec6:	e89d 000a 	ldmia.w	sp, {r1, r3}
  406eca:	f1c0 0220 	rsb	r2, r0, #32
  406ece:	fa03 f202 	lsl.w	r2, r3, r2
  406ed2:	430a      	orrs	r2, r1
  406ed4:	40c3      	lsrs	r3, r0
  406ed6:	9301      	str	r3, [sp, #4]
  406ed8:	f8c8 2014 	str.w	r2, [r8, #20]
  406edc:	e7c2      	b.n	406e64 <__d2b+0x3c>
  406ede:	bf00      	nop

00406ee0 <_sbrk_r>:
  406ee0:	b538      	push	{r3, r4, r5, lr}
  406ee2:	4c07      	ldr	r4, [pc, #28]	; (406f00 <_sbrk_r+0x20>)
  406ee4:	2300      	movs	r3, #0
  406ee6:	4605      	mov	r5, r0
  406ee8:	4608      	mov	r0, r1
  406eea:	6023      	str	r3, [r4, #0]
  406eec:	f7fb ff34 	bl	402d58 <_sbrk>
  406ef0:	1c43      	adds	r3, r0, #1
  406ef2:	d000      	beq.n	406ef6 <_sbrk_r+0x16>
  406ef4:	bd38      	pop	{r3, r4, r5, pc}
  406ef6:	6823      	ldr	r3, [r4, #0]
  406ef8:	2b00      	cmp	r3, #0
  406efa:	d0fb      	beq.n	406ef4 <_sbrk_r+0x14>
  406efc:	602b      	str	r3, [r5, #0]
  406efe:	bd38      	pop	{r3, r4, r5, pc}
  406f00:	2000d220 	.word	0x2000d220

00406f04 <strchr>:
  406f04:	b2c9      	uxtb	r1, r1
  406f06:	2900      	cmp	r1, #0
  406f08:	d041      	beq.n	406f8e <strchr+0x8a>
  406f0a:	0782      	lsls	r2, r0, #30
  406f0c:	b4f0      	push	{r4, r5, r6, r7}
  406f0e:	d067      	beq.n	406fe0 <strchr+0xdc>
  406f10:	7803      	ldrb	r3, [r0, #0]
  406f12:	2b00      	cmp	r3, #0
  406f14:	d068      	beq.n	406fe8 <strchr+0xe4>
  406f16:	4299      	cmp	r1, r3
  406f18:	d037      	beq.n	406f8a <strchr+0x86>
  406f1a:	1c43      	adds	r3, r0, #1
  406f1c:	e004      	b.n	406f28 <strchr+0x24>
  406f1e:	f813 0b01 	ldrb.w	r0, [r3], #1
  406f22:	b390      	cbz	r0, 406f8a <strchr+0x86>
  406f24:	4281      	cmp	r1, r0
  406f26:	d02f      	beq.n	406f88 <strchr+0x84>
  406f28:	079a      	lsls	r2, r3, #30
  406f2a:	461c      	mov	r4, r3
  406f2c:	d1f7      	bne.n	406f1e <strchr+0x1a>
  406f2e:	6825      	ldr	r5, [r4, #0]
  406f30:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  406f34:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  406f38:	ea83 0605 	eor.w	r6, r3, r5
  406f3c:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  406f40:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  406f44:	ea20 0006 	bic.w	r0, r0, r6
  406f48:	ea22 0205 	bic.w	r2, r2, r5
  406f4c:	4302      	orrs	r2, r0
  406f4e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406f52:	d111      	bne.n	406f78 <strchr+0x74>
  406f54:	4620      	mov	r0, r4
  406f56:	f850 6f04 	ldr.w	r6, [r0, #4]!
  406f5a:	ea83 0706 	eor.w	r7, r3, r6
  406f5e:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  406f62:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  406f66:	ea25 0507 	bic.w	r5, r5, r7
  406f6a:	ea22 0206 	bic.w	r2, r2, r6
  406f6e:	432a      	orrs	r2, r5
  406f70:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406f74:	d0ef      	beq.n	406f56 <strchr+0x52>
  406f76:	4604      	mov	r4, r0
  406f78:	7820      	ldrb	r0, [r4, #0]
  406f7a:	b918      	cbnz	r0, 406f84 <strchr+0x80>
  406f7c:	e005      	b.n	406f8a <strchr+0x86>
  406f7e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  406f82:	b110      	cbz	r0, 406f8a <strchr+0x86>
  406f84:	4281      	cmp	r1, r0
  406f86:	d1fa      	bne.n	406f7e <strchr+0x7a>
  406f88:	4620      	mov	r0, r4
  406f8a:	bcf0      	pop	{r4, r5, r6, r7}
  406f8c:	4770      	bx	lr
  406f8e:	0783      	lsls	r3, r0, #30
  406f90:	d024      	beq.n	406fdc <strchr+0xd8>
  406f92:	7803      	ldrb	r3, [r0, #0]
  406f94:	2b00      	cmp	r3, #0
  406f96:	d0f9      	beq.n	406f8c <strchr+0x88>
  406f98:	1c43      	adds	r3, r0, #1
  406f9a:	e003      	b.n	406fa4 <strchr+0xa0>
  406f9c:	7802      	ldrb	r2, [r0, #0]
  406f9e:	3301      	adds	r3, #1
  406fa0:	2a00      	cmp	r2, #0
  406fa2:	d0f3      	beq.n	406f8c <strchr+0x88>
  406fa4:	0799      	lsls	r1, r3, #30
  406fa6:	4618      	mov	r0, r3
  406fa8:	d1f8      	bne.n	406f9c <strchr+0x98>
  406faa:	6819      	ldr	r1, [r3, #0]
  406fac:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  406fb0:	ea22 0201 	bic.w	r2, r2, r1
  406fb4:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406fb8:	d108      	bne.n	406fcc <strchr+0xc8>
  406fba:	f853 1f04 	ldr.w	r1, [r3, #4]!
  406fbe:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  406fc2:	ea22 0201 	bic.w	r2, r2, r1
  406fc6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406fca:	d0f6      	beq.n	406fba <strchr+0xb6>
  406fcc:	781a      	ldrb	r2, [r3, #0]
  406fce:	4618      	mov	r0, r3
  406fd0:	b142      	cbz	r2, 406fe4 <strchr+0xe0>
  406fd2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406fd6:	2b00      	cmp	r3, #0
  406fd8:	d1fb      	bne.n	406fd2 <strchr+0xce>
  406fda:	4770      	bx	lr
  406fdc:	4603      	mov	r3, r0
  406fde:	e7e4      	b.n	406faa <strchr+0xa6>
  406fe0:	4604      	mov	r4, r0
  406fe2:	e7a4      	b.n	406f2e <strchr+0x2a>
  406fe4:	4618      	mov	r0, r3
  406fe6:	4770      	bx	lr
  406fe8:	4618      	mov	r0, r3
  406fea:	e7ce      	b.n	406f8a <strchr+0x86>
	...

00407000 <strlen>:
  407000:	f890 f000 	pld	[r0]
  407004:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407008:	f020 0107 	bic.w	r1, r0, #7
  40700c:	f06f 0c00 	mvn.w	ip, #0
  407010:	f010 0407 	ands.w	r4, r0, #7
  407014:	f891 f020 	pld	[r1, #32]
  407018:	f040 8049 	bne.w	4070ae <strlen+0xae>
  40701c:	f04f 0400 	mov.w	r4, #0
  407020:	f06f 0007 	mvn.w	r0, #7
  407024:	e9d1 2300 	ldrd	r2, r3, [r1]
  407028:	f891 f040 	pld	[r1, #64]	; 0x40
  40702c:	f100 0008 	add.w	r0, r0, #8
  407030:	fa82 f24c 	uadd8	r2, r2, ip
  407034:	faa4 f28c 	sel	r2, r4, ip
  407038:	fa83 f34c 	uadd8	r3, r3, ip
  40703c:	faa2 f38c 	sel	r3, r2, ip
  407040:	bb4b      	cbnz	r3, 407096 <strlen+0x96>
  407042:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  407046:	fa82 f24c 	uadd8	r2, r2, ip
  40704a:	f100 0008 	add.w	r0, r0, #8
  40704e:	faa4 f28c 	sel	r2, r4, ip
  407052:	fa83 f34c 	uadd8	r3, r3, ip
  407056:	faa2 f38c 	sel	r3, r2, ip
  40705a:	b9e3      	cbnz	r3, 407096 <strlen+0x96>
  40705c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  407060:	fa82 f24c 	uadd8	r2, r2, ip
  407064:	f100 0008 	add.w	r0, r0, #8
  407068:	faa4 f28c 	sel	r2, r4, ip
  40706c:	fa83 f34c 	uadd8	r3, r3, ip
  407070:	faa2 f38c 	sel	r3, r2, ip
  407074:	b97b      	cbnz	r3, 407096 <strlen+0x96>
  407076:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40707a:	f101 0120 	add.w	r1, r1, #32
  40707e:	fa82 f24c 	uadd8	r2, r2, ip
  407082:	f100 0008 	add.w	r0, r0, #8
  407086:	faa4 f28c 	sel	r2, r4, ip
  40708a:	fa83 f34c 	uadd8	r3, r3, ip
  40708e:	faa2 f38c 	sel	r3, r2, ip
  407092:	2b00      	cmp	r3, #0
  407094:	d0c6      	beq.n	407024 <strlen+0x24>
  407096:	2a00      	cmp	r2, #0
  407098:	bf04      	itt	eq
  40709a:	3004      	addeq	r0, #4
  40709c:	461a      	moveq	r2, r3
  40709e:	ba12      	rev	r2, r2
  4070a0:	fab2 f282 	clz	r2, r2
  4070a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4070a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4070ac:	4770      	bx	lr
  4070ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4070b2:	f004 0503 	and.w	r5, r4, #3
  4070b6:	f1c4 0000 	rsb	r0, r4, #0
  4070ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4070be:	f014 0f04 	tst.w	r4, #4
  4070c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4070c6:	fa0c f505 	lsl.w	r5, ip, r5
  4070ca:	ea62 0205 	orn	r2, r2, r5
  4070ce:	bf1c      	itt	ne
  4070d0:	ea63 0305 	ornne	r3, r3, r5
  4070d4:	4662      	movne	r2, ip
  4070d6:	f04f 0400 	mov.w	r4, #0
  4070da:	e7a9      	b.n	407030 <strlen+0x30>

004070dc <__ssprint_r>:
  4070dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4070e0:	6893      	ldr	r3, [r2, #8]
  4070e2:	b083      	sub	sp, #12
  4070e4:	4690      	mov	r8, r2
  4070e6:	2b00      	cmp	r3, #0
  4070e8:	d070      	beq.n	4071cc <__ssprint_r+0xf0>
  4070ea:	4682      	mov	sl, r0
  4070ec:	460c      	mov	r4, r1
  4070ee:	6817      	ldr	r7, [r2, #0]
  4070f0:	688d      	ldr	r5, [r1, #8]
  4070f2:	6808      	ldr	r0, [r1, #0]
  4070f4:	e042      	b.n	40717c <__ssprint_r+0xa0>
  4070f6:	89a3      	ldrh	r3, [r4, #12]
  4070f8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4070fc:	d02e      	beq.n	40715c <__ssprint_r+0x80>
  4070fe:	6965      	ldr	r5, [r4, #20]
  407100:	6921      	ldr	r1, [r4, #16]
  407102:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  407106:	eba0 0b01 	sub.w	fp, r0, r1
  40710a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40710e:	f10b 0001 	add.w	r0, fp, #1
  407112:	106d      	asrs	r5, r5, #1
  407114:	4430      	add	r0, r6
  407116:	42a8      	cmp	r0, r5
  407118:	462a      	mov	r2, r5
  40711a:	bf84      	itt	hi
  40711c:	4605      	movhi	r5, r0
  40711e:	462a      	movhi	r2, r5
  407120:	055b      	lsls	r3, r3, #21
  407122:	d538      	bpl.n	407196 <__ssprint_r+0xba>
  407124:	4611      	mov	r1, r2
  407126:	4650      	mov	r0, sl
  407128:	f7ff f808 	bl	40613c <_malloc_r>
  40712c:	2800      	cmp	r0, #0
  40712e:	d03c      	beq.n	4071aa <__ssprint_r+0xce>
  407130:	465a      	mov	r2, fp
  407132:	6921      	ldr	r1, [r4, #16]
  407134:	9001      	str	r0, [sp, #4]
  407136:	f7ff fb33 	bl	4067a0 <memcpy>
  40713a:	89a2      	ldrh	r2, [r4, #12]
  40713c:	9b01      	ldr	r3, [sp, #4]
  40713e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  407142:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  407146:	81a2      	strh	r2, [r4, #12]
  407148:	eba5 020b 	sub.w	r2, r5, fp
  40714c:	eb03 000b 	add.w	r0, r3, fp
  407150:	6165      	str	r5, [r4, #20]
  407152:	6123      	str	r3, [r4, #16]
  407154:	6020      	str	r0, [r4, #0]
  407156:	60a2      	str	r2, [r4, #8]
  407158:	4635      	mov	r5, r6
  40715a:	46b3      	mov	fp, r6
  40715c:	465a      	mov	r2, fp
  40715e:	4649      	mov	r1, r9
  407160:	f000 fa18 	bl	407594 <memmove>
  407164:	f8d8 3008 	ldr.w	r3, [r8, #8]
  407168:	68a2      	ldr	r2, [r4, #8]
  40716a:	6820      	ldr	r0, [r4, #0]
  40716c:	1b55      	subs	r5, r2, r5
  40716e:	4458      	add	r0, fp
  407170:	1b9e      	subs	r6, r3, r6
  407172:	60a5      	str	r5, [r4, #8]
  407174:	6020      	str	r0, [r4, #0]
  407176:	f8c8 6008 	str.w	r6, [r8, #8]
  40717a:	b33e      	cbz	r6, 4071cc <__ssprint_r+0xf0>
  40717c:	687e      	ldr	r6, [r7, #4]
  40717e:	463b      	mov	r3, r7
  407180:	3708      	adds	r7, #8
  407182:	2e00      	cmp	r6, #0
  407184:	d0fa      	beq.n	40717c <__ssprint_r+0xa0>
  407186:	42ae      	cmp	r6, r5
  407188:	f8d3 9000 	ldr.w	r9, [r3]
  40718c:	46ab      	mov	fp, r5
  40718e:	d2b2      	bcs.n	4070f6 <__ssprint_r+0x1a>
  407190:	4635      	mov	r5, r6
  407192:	46b3      	mov	fp, r6
  407194:	e7e2      	b.n	40715c <__ssprint_r+0x80>
  407196:	4650      	mov	r0, sl
  407198:	f000 fa60 	bl	40765c <_realloc_r>
  40719c:	4603      	mov	r3, r0
  40719e:	2800      	cmp	r0, #0
  4071a0:	d1d2      	bne.n	407148 <__ssprint_r+0x6c>
  4071a2:	6921      	ldr	r1, [r4, #16]
  4071a4:	4650      	mov	r0, sl
  4071a6:	f000 f8f9 	bl	40739c <_free_r>
  4071aa:	230c      	movs	r3, #12
  4071ac:	f8ca 3000 	str.w	r3, [sl]
  4071b0:	89a3      	ldrh	r3, [r4, #12]
  4071b2:	2200      	movs	r2, #0
  4071b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4071b8:	f04f 30ff 	mov.w	r0, #4294967295
  4071bc:	81a3      	strh	r3, [r4, #12]
  4071be:	f8c8 2008 	str.w	r2, [r8, #8]
  4071c2:	f8c8 2004 	str.w	r2, [r8, #4]
  4071c6:	b003      	add	sp, #12
  4071c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4071cc:	2000      	movs	r0, #0
  4071ce:	f8c8 0004 	str.w	r0, [r8, #4]
  4071d2:	b003      	add	sp, #12
  4071d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004071d8 <__register_exitproc>:
  4071d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4071dc:	4d2c      	ldr	r5, [pc, #176]	; (407290 <__register_exitproc+0xb8>)
  4071de:	4606      	mov	r6, r0
  4071e0:	6828      	ldr	r0, [r5, #0]
  4071e2:	4698      	mov	r8, r3
  4071e4:	460f      	mov	r7, r1
  4071e6:	4691      	mov	r9, r2
  4071e8:	f7fe ffa4 	bl	406134 <__retarget_lock_acquire_recursive>
  4071ec:	4b29      	ldr	r3, [pc, #164]	; (407294 <__register_exitproc+0xbc>)
  4071ee:	681c      	ldr	r4, [r3, #0]
  4071f0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4071f4:	2b00      	cmp	r3, #0
  4071f6:	d03e      	beq.n	407276 <__register_exitproc+0x9e>
  4071f8:	685a      	ldr	r2, [r3, #4]
  4071fa:	2a1f      	cmp	r2, #31
  4071fc:	dc1c      	bgt.n	407238 <__register_exitproc+0x60>
  4071fe:	f102 0e01 	add.w	lr, r2, #1
  407202:	b176      	cbz	r6, 407222 <__register_exitproc+0x4a>
  407204:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407208:	2401      	movs	r4, #1
  40720a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40720e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407212:	4094      	lsls	r4, r2
  407214:	4320      	orrs	r0, r4
  407216:	2e02      	cmp	r6, #2
  407218:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40721c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  407220:	d023      	beq.n	40726a <__register_exitproc+0x92>
  407222:	3202      	adds	r2, #2
  407224:	f8c3 e004 	str.w	lr, [r3, #4]
  407228:	6828      	ldr	r0, [r5, #0]
  40722a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40722e:	f7fe ff83 	bl	406138 <__retarget_lock_release_recursive>
  407232:	2000      	movs	r0, #0
  407234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407238:	4b17      	ldr	r3, [pc, #92]	; (407298 <__register_exitproc+0xc0>)
  40723a:	b30b      	cbz	r3, 407280 <__register_exitproc+0xa8>
  40723c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407240:	f3af 8000 	nop.w
  407244:	4603      	mov	r3, r0
  407246:	b1d8      	cbz	r0, 407280 <__register_exitproc+0xa8>
  407248:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40724c:	6002      	str	r2, [r0, #0]
  40724e:	2100      	movs	r1, #0
  407250:	6041      	str	r1, [r0, #4]
  407252:	460a      	mov	r2, r1
  407254:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  407258:	f04f 0e01 	mov.w	lr, #1
  40725c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407260:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407264:	2e00      	cmp	r6, #0
  407266:	d0dc      	beq.n	407222 <__register_exitproc+0x4a>
  407268:	e7cc      	b.n	407204 <__register_exitproc+0x2c>
  40726a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40726e:	430c      	orrs	r4, r1
  407270:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407274:	e7d5      	b.n	407222 <__register_exitproc+0x4a>
  407276:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40727a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40727e:	e7bb      	b.n	4071f8 <__register_exitproc+0x20>
  407280:	6828      	ldr	r0, [r5, #0]
  407282:	f7fe ff59 	bl	406138 <__retarget_lock_release_recursive>
  407286:	f04f 30ff 	mov.w	r0, #4294967295
  40728a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40728e:	bf00      	nop
  407290:	20000440 	.word	0x20000440
  407294:	00409034 	.word	0x00409034
  407298:	00000000 	.word	0x00000000

0040729c <_calloc_r>:
  40729c:	b510      	push	{r4, lr}
  40729e:	fb02 f101 	mul.w	r1, r2, r1
  4072a2:	f7fe ff4b 	bl	40613c <_malloc_r>
  4072a6:	4604      	mov	r4, r0
  4072a8:	b1d8      	cbz	r0, 4072e2 <_calloc_r+0x46>
  4072aa:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4072ae:	f022 0203 	bic.w	r2, r2, #3
  4072b2:	3a04      	subs	r2, #4
  4072b4:	2a24      	cmp	r2, #36	; 0x24
  4072b6:	d818      	bhi.n	4072ea <_calloc_r+0x4e>
  4072b8:	2a13      	cmp	r2, #19
  4072ba:	d914      	bls.n	4072e6 <_calloc_r+0x4a>
  4072bc:	2300      	movs	r3, #0
  4072be:	2a1b      	cmp	r2, #27
  4072c0:	6003      	str	r3, [r0, #0]
  4072c2:	6043      	str	r3, [r0, #4]
  4072c4:	d916      	bls.n	4072f4 <_calloc_r+0x58>
  4072c6:	2a24      	cmp	r2, #36	; 0x24
  4072c8:	6083      	str	r3, [r0, #8]
  4072ca:	60c3      	str	r3, [r0, #12]
  4072cc:	bf11      	iteee	ne
  4072ce:	f100 0210 	addne.w	r2, r0, #16
  4072d2:	6103      	streq	r3, [r0, #16]
  4072d4:	6143      	streq	r3, [r0, #20]
  4072d6:	f100 0218 	addeq.w	r2, r0, #24
  4072da:	2300      	movs	r3, #0
  4072dc:	6013      	str	r3, [r2, #0]
  4072de:	6053      	str	r3, [r2, #4]
  4072e0:	6093      	str	r3, [r2, #8]
  4072e2:	4620      	mov	r0, r4
  4072e4:	bd10      	pop	{r4, pc}
  4072e6:	4602      	mov	r2, r0
  4072e8:	e7f7      	b.n	4072da <_calloc_r+0x3e>
  4072ea:	2100      	movs	r1, #0
  4072ec:	f7fc fa24 	bl	403738 <memset>
  4072f0:	4620      	mov	r0, r4
  4072f2:	bd10      	pop	{r4, pc}
  4072f4:	f100 0208 	add.w	r2, r0, #8
  4072f8:	e7ef      	b.n	4072da <_calloc_r+0x3e>
  4072fa:	bf00      	nop

004072fc <_malloc_trim_r>:
  4072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4072fe:	4f24      	ldr	r7, [pc, #144]	; (407390 <_malloc_trim_r+0x94>)
  407300:	460c      	mov	r4, r1
  407302:	4606      	mov	r6, r0
  407304:	f7ff fae6 	bl	4068d4 <__malloc_lock>
  407308:	68bb      	ldr	r3, [r7, #8]
  40730a:	685d      	ldr	r5, [r3, #4]
  40730c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407310:	310f      	adds	r1, #15
  407312:	f025 0503 	bic.w	r5, r5, #3
  407316:	4429      	add	r1, r5
  407318:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40731c:	f021 010f 	bic.w	r1, r1, #15
  407320:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407324:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407328:	db07      	blt.n	40733a <_malloc_trim_r+0x3e>
  40732a:	2100      	movs	r1, #0
  40732c:	4630      	mov	r0, r6
  40732e:	f7ff fdd7 	bl	406ee0 <_sbrk_r>
  407332:	68bb      	ldr	r3, [r7, #8]
  407334:	442b      	add	r3, r5
  407336:	4298      	cmp	r0, r3
  407338:	d004      	beq.n	407344 <_malloc_trim_r+0x48>
  40733a:	4630      	mov	r0, r6
  40733c:	f7ff fad0 	bl	4068e0 <__malloc_unlock>
  407340:	2000      	movs	r0, #0
  407342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407344:	4261      	negs	r1, r4
  407346:	4630      	mov	r0, r6
  407348:	f7ff fdca 	bl	406ee0 <_sbrk_r>
  40734c:	3001      	adds	r0, #1
  40734e:	d00d      	beq.n	40736c <_malloc_trim_r+0x70>
  407350:	4b10      	ldr	r3, [pc, #64]	; (407394 <_malloc_trim_r+0x98>)
  407352:	68ba      	ldr	r2, [r7, #8]
  407354:	6819      	ldr	r1, [r3, #0]
  407356:	1b2d      	subs	r5, r5, r4
  407358:	f045 0501 	orr.w	r5, r5, #1
  40735c:	4630      	mov	r0, r6
  40735e:	1b09      	subs	r1, r1, r4
  407360:	6055      	str	r5, [r2, #4]
  407362:	6019      	str	r1, [r3, #0]
  407364:	f7ff fabc 	bl	4068e0 <__malloc_unlock>
  407368:	2001      	movs	r0, #1
  40736a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40736c:	2100      	movs	r1, #0
  40736e:	4630      	mov	r0, r6
  407370:	f7ff fdb6 	bl	406ee0 <_sbrk_r>
  407374:	68ba      	ldr	r2, [r7, #8]
  407376:	1a83      	subs	r3, r0, r2
  407378:	2b0f      	cmp	r3, #15
  40737a:	ddde      	ble.n	40733a <_malloc_trim_r+0x3e>
  40737c:	4c06      	ldr	r4, [pc, #24]	; (407398 <_malloc_trim_r+0x9c>)
  40737e:	4905      	ldr	r1, [pc, #20]	; (407394 <_malloc_trim_r+0x98>)
  407380:	6824      	ldr	r4, [r4, #0]
  407382:	f043 0301 	orr.w	r3, r3, #1
  407386:	1b00      	subs	r0, r0, r4
  407388:	6053      	str	r3, [r2, #4]
  40738a:	6008      	str	r0, [r1, #0]
  40738c:	e7d5      	b.n	40733a <_malloc_trim_r+0x3e>
  40738e:	bf00      	nop
  407390:	20000444 	.word	0x20000444
  407394:	20000a80 	.word	0x20000a80
  407398:	2000084c 	.word	0x2000084c

0040739c <_free_r>:
  40739c:	2900      	cmp	r1, #0
  40739e:	d044      	beq.n	40742a <_free_r+0x8e>
  4073a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4073a4:	460d      	mov	r5, r1
  4073a6:	4680      	mov	r8, r0
  4073a8:	f7ff fa94 	bl	4068d4 <__malloc_lock>
  4073ac:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4073b0:	4969      	ldr	r1, [pc, #420]	; (407558 <_free_r+0x1bc>)
  4073b2:	f027 0301 	bic.w	r3, r7, #1
  4073b6:	f1a5 0408 	sub.w	r4, r5, #8
  4073ba:	18e2      	adds	r2, r4, r3
  4073bc:	688e      	ldr	r6, [r1, #8]
  4073be:	6850      	ldr	r0, [r2, #4]
  4073c0:	42b2      	cmp	r2, r6
  4073c2:	f020 0003 	bic.w	r0, r0, #3
  4073c6:	d05e      	beq.n	407486 <_free_r+0xea>
  4073c8:	07fe      	lsls	r6, r7, #31
  4073ca:	6050      	str	r0, [r2, #4]
  4073cc:	d40b      	bmi.n	4073e6 <_free_r+0x4a>
  4073ce:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4073d2:	1be4      	subs	r4, r4, r7
  4073d4:	f101 0e08 	add.w	lr, r1, #8
  4073d8:	68a5      	ldr	r5, [r4, #8]
  4073da:	4575      	cmp	r5, lr
  4073dc:	443b      	add	r3, r7
  4073de:	d06d      	beq.n	4074bc <_free_r+0x120>
  4073e0:	68e7      	ldr	r7, [r4, #12]
  4073e2:	60ef      	str	r7, [r5, #12]
  4073e4:	60bd      	str	r5, [r7, #8]
  4073e6:	1815      	adds	r5, r2, r0
  4073e8:	686d      	ldr	r5, [r5, #4]
  4073ea:	07ed      	lsls	r5, r5, #31
  4073ec:	d53e      	bpl.n	40746c <_free_r+0xd0>
  4073ee:	f043 0201 	orr.w	r2, r3, #1
  4073f2:	6062      	str	r2, [r4, #4]
  4073f4:	50e3      	str	r3, [r4, r3]
  4073f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4073fa:	d217      	bcs.n	40742c <_free_r+0x90>
  4073fc:	08db      	lsrs	r3, r3, #3
  4073fe:	1c58      	adds	r0, r3, #1
  407400:	109a      	asrs	r2, r3, #2
  407402:	684d      	ldr	r5, [r1, #4]
  407404:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407408:	60a7      	str	r7, [r4, #8]
  40740a:	2301      	movs	r3, #1
  40740c:	4093      	lsls	r3, r2
  40740e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407412:	432b      	orrs	r3, r5
  407414:	3a08      	subs	r2, #8
  407416:	60e2      	str	r2, [r4, #12]
  407418:	604b      	str	r3, [r1, #4]
  40741a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40741e:	60fc      	str	r4, [r7, #12]
  407420:	4640      	mov	r0, r8
  407422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407426:	f7ff ba5b 	b.w	4068e0 <__malloc_unlock>
  40742a:	4770      	bx	lr
  40742c:	0a5a      	lsrs	r2, r3, #9
  40742e:	2a04      	cmp	r2, #4
  407430:	d852      	bhi.n	4074d8 <_free_r+0x13c>
  407432:	099a      	lsrs	r2, r3, #6
  407434:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407438:	00ff      	lsls	r7, r7, #3
  40743a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40743e:	19c8      	adds	r0, r1, r7
  407440:	59ca      	ldr	r2, [r1, r7]
  407442:	3808      	subs	r0, #8
  407444:	4290      	cmp	r0, r2
  407446:	d04f      	beq.n	4074e8 <_free_r+0x14c>
  407448:	6851      	ldr	r1, [r2, #4]
  40744a:	f021 0103 	bic.w	r1, r1, #3
  40744e:	428b      	cmp	r3, r1
  407450:	d232      	bcs.n	4074b8 <_free_r+0x11c>
  407452:	6892      	ldr	r2, [r2, #8]
  407454:	4290      	cmp	r0, r2
  407456:	d1f7      	bne.n	407448 <_free_r+0xac>
  407458:	68c3      	ldr	r3, [r0, #12]
  40745a:	60a0      	str	r0, [r4, #8]
  40745c:	60e3      	str	r3, [r4, #12]
  40745e:	609c      	str	r4, [r3, #8]
  407460:	60c4      	str	r4, [r0, #12]
  407462:	4640      	mov	r0, r8
  407464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407468:	f7ff ba3a 	b.w	4068e0 <__malloc_unlock>
  40746c:	6895      	ldr	r5, [r2, #8]
  40746e:	4f3b      	ldr	r7, [pc, #236]	; (40755c <_free_r+0x1c0>)
  407470:	42bd      	cmp	r5, r7
  407472:	4403      	add	r3, r0
  407474:	d040      	beq.n	4074f8 <_free_r+0x15c>
  407476:	68d0      	ldr	r0, [r2, #12]
  407478:	60e8      	str	r0, [r5, #12]
  40747a:	f043 0201 	orr.w	r2, r3, #1
  40747e:	6085      	str	r5, [r0, #8]
  407480:	6062      	str	r2, [r4, #4]
  407482:	50e3      	str	r3, [r4, r3]
  407484:	e7b7      	b.n	4073f6 <_free_r+0x5a>
  407486:	07ff      	lsls	r7, r7, #31
  407488:	4403      	add	r3, r0
  40748a:	d407      	bmi.n	40749c <_free_r+0x100>
  40748c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407490:	1aa4      	subs	r4, r4, r2
  407492:	4413      	add	r3, r2
  407494:	68a0      	ldr	r0, [r4, #8]
  407496:	68e2      	ldr	r2, [r4, #12]
  407498:	60c2      	str	r2, [r0, #12]
  40749a:	6090      	str	r0, [r2, #8]
  40749c:	4a30      	ldr	r2, [pc, #192]	; (407560 <_free_r+0x1c4>)
  40749e:	6812      	ldr	r2, [r2, #0]
  4074a0:	f043 0001 	orr.w	r0, r3, #1
  4074a4:	4293      	cmp	r3, r2
  4074a6:	6060      	str	r0, [r4, #4]
  4074a8:	608c      	str	r4, [r1, #8]
  4074aa:	d3b9      	bcc.n	407420 <_free_r+0x84>
  4074ac:	4b2d      	ldr	r3, [pc, #180]	; (407564 <_free_r+0x1c8>)
  4074ae:	4640      	mov	r0, r8
  4074b0:	6819      	ldr	r1, [r3, #0]
  4074b2:	f7ff ff23 	bl	4072fc <_malloc_trim_r>
  4074b6:	e7b3      	b.n	407420 <_free_r+0x84>
  4074b8:	4610      	mov	r0, r2
  4074ba:	e7cd      	b.n	407458 <_free_r+0xbc>
  4074bc:	1811      	adds	r1, r2, r0
  4074be:	6849      	ldr	r1, [r1, #4]
  4074c0:	07c9      	lsls	r1, r1, #31
  4074c2:	d444      	bmi.n	40754e <_free_r+0x1b2>
  4074c4:	6891      	ldr	r1, [r2, #8]
  4074c6:	68d2      	ldr	r2, [r2, #12]
  4074c8:	60ca      	str	r2, [r1, #12]
  4074ca:	4403      	add	r3, r0
  4074cc:	f043 0001 	orr.w	r0, r3, #1
  4074d0:	6091      	str	r1, [r2, #8]
  4074d2:	6060      	str	r0, [r4, #4]
  4074d4:	50e3      	str	r3, [r4, r3]
  4074d6:	e7a3      	b.n	407420 <_free_r+0x84>
  4074d8:	2a14      	cmp	r2, #20
  4074da:	d816      	bhi.n	40750a <_free_r+0x16e>
  4074dc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4074e0:	00ff      	lsls	r7, r7, #3
  4074e2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4074e6:	e7aa      	b.n	40743e <_free_r+0xa2>
  4074e8:	10aa      	asrs	r2, r5, #2
  4074ea:	2301      	movs	r3, #1
  4074ec:	684d      	ldr	r5, [r1, #4]
  4074ee:	4093      	lsls	r3, r2
  4074f0:	432b      	orrs	r3, r5
  4074f2:	604b      	str	r3, [r1, #4]
  4074f4:	4603      	mov	r3, r0
  4074f6:	e7b0      	b.n	40745a <_free_r+0xbe>
  4074f8:	f043 0201 	orr.w	r2, r3, #1
  4074fc:	614c      	str	r4, [r1, #20]
  4074fe:	610c      	str	r4, [r1, #16]
  407500:	60e5      	str	r5, [r4, #12]
  407502:	60a5      	str	r5, [r4, #8]
  407504:	6062      	str	r2, [r4, #4]
  407506:	50e3      	str	r3, [r4, r3]
  407508:	e78a      	b.n	407420 <_free_r+0x84>
  40750a:	2a54      	cmp	r2, #84	; 0x54
  40750c:	d806      	bhi.n	40751c <_free_r+0x180>
  40750e:	0b1a      	lsrs	r2, r3, #12
  407510:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407514:	00ff      	lsls	r7, r7, #3
  407516:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40751a:	e790      	b.n	40743e <_free_r+0xa2>
  40751c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407520:	d806      	bhi.n	407530 <_free_r+0x194>
  407522:	0bda      	lsrs	r2, r3, #15
  407524:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407528:	00ff      	lsls	r7, r7, #3
  40752a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40752e:	e786      	b.n	40743e <_free_r+0xa2>
  407530:	f240 5054 	movw	r0, #1364	; 0x554
  407534:	4282      	cmp	r2, r0
  407536:	d806      	bhi.n	407546 <_free_r+0x1aa>
  407538:	0c9a      	lsrs	r2, r3, #18
  40753a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40753e:	00ff      	lsls	r7, r7, #3
  407540:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407544:	e77b      	b.n	40743e <_free_r+0xa2>
  407546:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40754a:	257e      	movs	r5, #126	; 0x7e
  40754c:	e777      	b.n	40743e <_free_r+0xa2>
  40754e:	f043 0101 	orr.w	r1, r3, #1
  407552:	6061      	str	r1, [r4, #4]
  407554:	6013      	str	r3, [r2, #0]
  407556:	e763      	b.n	407420 <_free_r+0x84>
  407558:	20000444 	.word	0x20000444
  40755c:	2000044c 	.word	0x2000044c
  407560:	20000850 	.word	0x20000850
  407564:	20000ab0 	.word	0x20000ab0

00407568 <__ascii_mbtowc>:
  407568:	b082      	sub	sp, #8
  40756a:	b149      	cbz	r1, 407580 <__ascii_mbtowc+0x18>
  40756c:	b15a      	cbz	r2, 407586 <__ascii_mbtowc+0x1e>
  40756e:	b16b      	cbz	r3, 40758c <__ascii_mbtowc+0x24>
  407570:	7813      	ldrb	r3, [r2, #0]
  407572:	600b      	str	r3, [r1, #0]
  407574:	7812      	ldrb	r2, [r2, #0]
  407576:	1c10      	adds	r0, r2, #0
  407578:	bf18      	it	ne
  40757a:	2001      	movne	r0, #1
  40757c:	b002      	add	sp, #8
  40757e:	4770      	bx	lr
  407580:	a901      	add	r1, sp, #4
  407582:	2a00      	cmp	r2, #0
  407584:	d1f3      	bne.n	40756e <__ascii_mbtowc+0x6>
  407586:	4610      	mov	r0, r2
  407588:	b002      	add	sp, #8
  40758a:	4770      	bx	lr
  40758c:	f06f 0001 	mvn.w	r0, #1
  407590:	e7f4      	b.n	40757c <__ascii_mbtowc+0x14>
  407592:	bf00      	nop

00407594 <memmove>:
  407594:	4288      	cmp	r0, r1
  407596:	b5f0      	push	{r4, r5, r6, r7, lr}
  407598:	d90d      	bls.n	4075b6 <memmove+0x22>
  40759a:	188b      	adds	r3, r1, r2
  40759c:	4298      	cmp	r0, r3
  40759e:	d20a      	bcs.n	4075b6 <memmove+0x22>
  4075a0:	1884      	adds	r4, r0, r2
  4075a2:	2a00      	cmp	r2, #0
  4075a4:	d051      	beq.n	40764a <memmove+0xb6>
  4075a6:	4622      	mov	r2, r4
  4075a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4075ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4075b0:	4299      	cmp	r1, r3
  4075b2:	d1f9      	bne.n	4075a8 <memmove+0x14>
  4075b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4075b6:	2a0f      	cmp	r2, #15
  4075b8:	d948      	bls.n	40764c <memmove+0xb8>
  4075ba:	ea41 0300 	orr.w	r3, r1, r0
  4075be:	079b      	lsls	r3, r3, #30
  4075c0:	d146      	bne.n	407650 <memmove+0xbc>
  4075c2:	f100 0410 	add.w	r4, r0, #16
  4075c6:	f101 0310 	add.w	r3, r1, #16
  4075ca:	4615      	mov	r5, r2
  4075cc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4075d0:	f844 6c10 	str.w	r6, [r4, #-16]
  4075d4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4075d8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4075dc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4075e0:	f844 6c08 	str.w	r6, [r4, #-8]
  4075e4:	3d10      	subs	r5, #16
  4075e6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4075ea:	f844 6c04 	str.w	r6, [r4, #-4]
  4075ee:	2d0f      	cmp	r5, #15
  4075f0:	f103 0310 	add.w	r3, r3, #16
  4075f4:	f104 0410 	add.w	r4, r4, #16
  4075f8:	d8e8      	bhi.n	4075cc <memmove+0x38>
  4075fa:	f1a2 0310 	sub.w	r3, r2, #16
  4075fe:	f023 030f 	bic.w	r3, r3, #15
  407602:	f002 0e0f 	and.w	lr, r2, #15
  407606:	3310      	adds	r3, #16
  407608:	f1be 0f03 	cmp.w	lr, #3
  40760c:	4419      	add	r1, r3
  40760e:	4403      	add	r3, r0
  407610:	d921      	bls.n	407656 <memmove+0xc2>
  407612:	1f1e      	subs	r6, r3, #4
  407614:	460d      	mov	r5, r1
  407616:	4674      	mov	r4, lr
  407618:	3c04      	subs	r4, #4
  40761a:	f855 7b04 	ldr.w	r7, [r5], #4
  40761e:	f846 7f04 	str.w	r7, [r6, #4]!
  407622:	2c03      	cmp	r4, #3
  407624:	d8f8      	bhi.n	407618 <memmove+0x84>
  407626:	f1ae 0404 	sub.w	r4, lr, #4
  40762a:	f024 0403 	bic.w	r4, r4, #3
  40762e:	3404      	adds	r4, #4
  407630:	4421      	add	r1, r4
  407632:	4423      	add	r3, r4
  407634:	f002 0203 	and.w	r2, r2, #3
  407638:	b162      	cbz	r2, 407654 <memmove+0xc0>
  40763a:	3b01      	subs	r3, #1
  40763c:	440a      	add	r2, r1
  40763e:	f811 4b01 	ldrb.w	r4, [r1], #1
  407642:	f803 4f01 	strb.w	r4, [r3, #1]!
  407646:	428a      	cmp	r2, r1
  407648:	d1f9      	bne.n	40763e <memmove+0xaa>
  40764a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40764c:	4603      	mov	r3, r0
  40764e:	e7f3      	b.n	407638 <memmove+0xa4>
  407650:	4603      	mov	r3, r0
  407652:	e7f2      	b.n	40763a <memmove+0xa6>
  407654:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407656:	4672      	mov	r2, lr
  407658:	e7ee      	b.n	407638 <memmove+0xa4>
  40765a:	bf00      	nop

0040765c <_realloc_r>:
  40765c:	2900      	cmp	r1, #0
  40765e:	f000 8095 	beq.w	40778c <_realloc_r+0x130>
  407662:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407666:	460d      	mov	r5, r1
  407668:	4616      	mov	r6, r2
  40766a:	b083      	sub	sp, #12
  40766c:	4680      	mov	r8, r0
  40766e:	f106 070b 	add.w	r7, r6, #11
  407672:	f7ff f92f 	bl	4068d4 <__malloc_lock>
  407676:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40767a:	2f16      	cmp	r7, #22
  40767c:	f02e 0403 	bic.w	r4, lr, #3
  407680:	f1a5 0908 	sub.w	r9, r5, #8
  407684:	d83c      	bhi.n	407700 <_realloc_r+0xa4>
  407686:	2210      	movs	r2, #16
  407688:	4617      	mov	r7, r2
  40768a:	42be      	cmp	r6, r7
  40768c:	d83d      	bhi.n	40770a <_realloc_r+0xae>
  40768e:	4294      	cmp	r4, r2
  407690:	da43      	bge.n	40771a <_realloc_r+0xbe>
  407692:	4bc4      	ldr	r3, [pc, #784]	; (4079a4 <_realloc_r+0x348>)
  407694:	6899      	ldr	r1, [r3, #8]
  407696:	eb09 0004 	add.w	r0, r9, r4
  40769a:	4288      	cmp	r0, r1
  40769c:	f000 80b4 	beq.w	407808 <_realloc_r+0x1ac>
  4076a0:	6843      	ldr	r3, [r0, #4]
  4076a2:	f023 0101 	bic.w	r1, r3, #1
  4076a6:	4401      	add	r1, r0
  4076a8:	6849      	ldr	r1, [r1, #4]
  4076aa:	07c9      	lsls	r1, r1, #31
  4076ac:	d54c      	bpl.n	407748 <_realloc_r+0xec>
  4076ae:	f01e 0f01 	tst.w	lr, #1
  4076b2:	f000 809b 	beq.w	4077ec <_realloc_r+0x190>
  4076b6:	4631      	mov	r1, r6
  4076b8:	4640      	mov	r0, r8
  4076ba:	f7fe fd3f 	bl	40613c <_malloc_r>
  4076be:	4606      	mov	r6, r0
  4076c0:	2800      	cmp	r0, #0
  4076c2:	d03a      	beq.n	40773a <_realloc_r+0xde>
  4076c4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4076c8:	f023 0301 	bic.w	r3, r3, #1
  4076cc:	444b      	add	r3, r9
  4076ce:	f1a0 0208 	sub.w	r2, r0, #8
  4076d2:	429a      	cmp	r2, r3
  4076d4:	f000 8121 	beq.w	40791a <_realloc_r+0x2be>
  4076d8:	1f22      	subs	r2, r4, #4
  4076da:	2a24      	cmp	r2, #36	; 0x24
  4076dc:	f200 8107 	bhi.w	4078ee <_realloc_r+0x292>
  4076e0:	2a13      	cmp	r2, #19
  4076e2:	f200 80db 	bhi.w	40789c <_realloc_r+0x240>
  4076e6:	4603      	mov	r3, r0
  4076e8:	462a      	mov	r2, r5
  4076ea:	6811      	ldr	r1, [r2, #0]
  4076ec:	6019      	str	r1, [r3, #0]
  4076ee:	6851      	ldr	r1, [r2, #4]
  4076f0:	6059      	str	r1, [r3, #4]
  4076f2:	6892      	ldr	r2, [r2, #8]
  4076f4:	609a      	str	r2, [r3, #8]
  4076f6:	4629      	mov	r1, r5
  4076f8:	4640      	mov	r0, r8
  4076fa:	f7ff fe4f 	bl	40739c <_free_r>
  4076fe:	e01c      	b.n	40773a <_realloc_r+0xde>
  407700:	f027 0707 	bic.w	r7, r7, #7
  407704:	2f00      	cmp	r7, #0
  407706:	463a      	mov	r2, r7
  407708:	dabf      	bge.n	40768a <_realloc_r+0x2e>
  40770a:	2600      	movs	r6, #0
  40770c:	230c      	movs	r3, #12
  40770e:	4630      	mov	r0, r6
  407710:	f8c8 3000 	str.w	r3, [r8]
  407714:	b003      	add	sp, #12
  407716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40771a:	462e      	mov	r6, r5
  40771c:	1be3      	subs	r3, r4, r7
  40771e:	2b0f      	cmp	r3, #15
  407720:	d81e      	bhi.n	407760 <_realloc_r+0x104>
  407722:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407726:	f003 0301 	and.w	r3, r3, #1
  40772a:	4323      	orrs	r3, r4
  40772c:	444c      	add	r4, r9
  40772e:	f8c9 3004 	str.w	r3, [r9, #4]
  407732:	6863      	ldr	r3, [r4, #4]
  407734:	f043 0301 	orr.w	r3, r3, #1
  407738:	6063      	str	r3, [r4, #4]
  40773a:	4640      	mov	r0, r8
  40773c:	f7ff f8d0 	bl	4068e0 <__malloc_unlock>
  407740:	4630      	mov	r0, r6
  407742:	b003      	add	sp, #12
  407744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407748:	f023 0303 	bic.w	r3, r3, #3
  40774c:	18e1      	adds	r1, r4, r3
  40774e:	4291      	cmp	r1, r2
  407750:	db1f      	blt.n	407792 <_realloc_r+0x136>
  407752:	68c3      	ldr	r3, [r0, #12]
  407754:	6882      	ldr	r2, [r0, #8]
  407756:	462e      	mov	r6, r5
  407758:	60d3      	str	r3, [r2, #12]
  40775a:	460c      	mov	r4, r1
  40775c:	609a      	str	r2, [r3, #8]
  40775e:	e7dd      	b.n	40771c <_realloc_r+0xc0>
  407760:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407764:	eb09 0107 	add.w	r1, r9, r7
  407768:	f002 0201 	and.w	r2, r2, #1
  40776c:	444c      	add	r4, r9
  40776e:	f043 0301 	orr.w	r3, r3, #1
  407772:	4317      	orrs	r7, r2
  407774:	f8c9 7004 	str.w	r7, [r9, #4]
  407778:	604b      	str	r3, [r1, #4]
  40777a:	6863      	ldr	r3, [r4, #4]
  40777c:	f043 0301 	orr.w	r3, r3, #1
  407780:	3108      	adds	r1, #8
  407782:	6063      	str	r3, [r4, #4]
  407784:	4640      	mov	r0, r8
  407786:	f7ff fe09 	bl	40739c <_free_r>
  40778a:	e7d6      	b.n	40773a <_realloc_r+0xde>
  40778c:	4611      	mov	r1, r2
  40778e:	f7fe bcd5 	b.w	40613c <_malloc_r>
  407792:	f01e 0f01 	tst.w	lr, #1
  407796:	d18e      	bne.n	4076b6 <_realloc_r+0x5a>
  407798:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40779c:	eba9 0a01 	sub.w	sl, r9, r1
  4077a0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4077a4:	f021 0103 	bic.w	r1, r1, #3
  4077a8:	440b      	add	r3, r1
  4077aa:	4423      	add	r3, r4
  4077ac:	4293      	cmp	r3, r2
  4077ae:	db25      	blt.n	4077fc <_realloc_r+0x1a0>
  4077b0:	68c2      	ldr	r2, [r0, #12]
  4077b2:	6881      	ldr	r1, [r0, #8]
  4077b4:	4656      	mov	r6, sl
  4077b6:	60ca      	str	r2, [r1, #12]
  4077b8:	6091      	str	r1, [r2, #8]
  4077ba:	f8da 100c 	ldr.w	r1, [sl, #12]
  4077be:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4077c2:	1f22      	subs	r2, r4, #4
  4077c4:	2a24      	cmp	r2, #36	; 0x24
  4077c6:	60c1      	str	r1, [r0, #12]
  4077c8:	6088      	str	r0, [r1, #8]
  4077ca:	f200 8094 	bhi.w	4078f6 <_realloc_r+0x29a>
  4077ce:	2a13      	cmp	r2, #19
  4077d0:	d96f      	bls.n	4078b2 <_realloc_r+0x256>
  4077d2:	6829      	ldr	r1, [r5, #0]
  4077d4:	f8ca 1008 	str.w	r1, [sl, #8]
  4077d8:	6869      	ldr	r1, [r5, #4]
  4077da:	f8ca 100c 	str.w	r1, [sl, #12]
  4077de:	2a1b      	cmp	r2, #27
  4077e0:	f200 80a2 	bhi.w	407928 <_realloc_r+0x2cc>
  4077e4:	3508      	adds	r5, #8
  4077e6:	f10a 0210 	add.w	r2, sl, #16
  4077ea:	e063      	b.n	4078b4 <_realloc_r+0x258>
  4077ec:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4077f0:	eba9 0a03 	sub.w	sl, r9, r3
  4077f4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4077f8:	f021 0103 	bic.w	r1, r1, #3
  4077fc:	1863      	adds	r3, r4, r1
  4077fe:	4293      	cmp	r3, r2
  407800:	f6ff af59 	blt.w	4076b6 <_realloc_r+0x5a>
  407804:	4656      	mov	r6, sl
  407806:	e7d8      	b.n	4077ba <_realloc_r+0x15e>
  407808:	6841      	ldr	r1, [r0, #4]
  40780a:	f021 0b03 	bic.w	fp, r1, #3
  40780e:	44a3      	add	fp, r4
  407810:	f107 0010 	add.w	r0, r7, #16
  407814:	4583      	cmp	fp, r0
  407816:	da56      	bge.n	4078c6 <_realloc_r+0x26a>
  407818:	f01e 0f01 	tst.w	lr, #1
  40781c:	f47f af4b 	bne.w	4076b6 <_realloc_r+0x5a>
  407820:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407824:	eba9 0a01 	sub.w	sl, r9, r1
  407828:	f8da 1004 	ldr.w	r1, [sl, #4]
  40782c:	f021 0103 	bic.w	r1, r1, #3
  407830:	448b      	add	fp, r1
  407832:	4558      	cmp	r0, fp
  407834:	dce2      	bgt.n	4077fc <_realloc_r+0x1a0>
  407836:	4656      	mov	r6, sl
  407838:	f8da 100c 	ldr.w	r1, [sl, #12]
  40783c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407840:	1f22      	subs	r2, r4, #4
  407842:	2a24      	cmp	r2, #36	; 0x24
  407844:	60c1      	str	r1, [r0, #12]
  407846:	6088      	str	r0, [r1, #8]
  407848:	f200 808f 	bhi.w	40796a <_realloc_r+0x30e>
  40784c:	2a13      	cmp	r2, #19
  40784e:	f240 808a 	bls.w	407966 <_realloc_r+0x30a>
  407852:	6829      	ldr	r1, [r5, #0]
  407854:	f8ca 1008 	str.w	r1, [sl, #8]
  407858:	6869      	ldr	r1, [r5, #4]
  40785a:	f8ca 100c 	str.w	r1, [sl, #12]
  40785e:	2a1b      	cmp	r2, #27
  407860:	f200 808a 	bhi.w	407978 <_realloc_r+0x31c>
  407864:	3508      	adds	r5, #8
  407866:	f10a 0210 	add.w	r2, sl, #16
  40786a:	6829      	ldr	r1, [r5, #0]
  40786c:	6011      	str	r1, [r2, #0]
  40786e:	6869      	ldr	r1, [r5, #4]
  407870:	6051      	str	r1, [r2, #4]
  407872:	68a9      	ldr	r1, [r5, #8]
  407874:	6091      	str	r1, [r2, #8]
  407876:	eb0a 0107 	add.w	r1, sl, r7
  40787a:	ebab 0207 	sub.w	r2, fp, r7
  40787e:	f042 0201 	orr.w	r2, r2, #1
  407882:	6099      	str	r1, [r3, #8]
  407884:	604a      	str	r2, [r1, #4]
  407886:	f8da 3004 	ldr.w	r3, [sl, #4]
  40788a:	f003 0301 	and.w	r3, r3, #1
  40788e:	431f      	orrs	r7, r3
  407890:	4640      	mov	r0, r8
  407892:	f8ca 7004 	str.w	r7, [sl, #4]
  407896:	f7ff f823 	bl	4068e0 <__malloc_unlock>
  40789a:	e751      	b.n	407740 <_realloc_r+0xe4>
  40789c:	682b      	ldr	r3, [r5, #0]
  40789e:	6003      	str	r3, [r0, #0]
  4078a0:	686b      	ldr	r3, [r5, #4]
  4078a2:	6043      	str	r3, [r0, #4]
  4078a4:	2a1b      	cmp	r2, #27
  4078a6:	d82d      	bhi.n	407904 <_realloc_r+0x2a8>
  4078a8:	f100 0308 	add.w	r3, r0, #8
  4078ac:	f105 0208 	add.w	r2, r5, #8
  4078b0:	e71b      	b.n	4076ea <_realloc_r+0x8e>
  4078b2:	4632      	mov	r2, r6
  4078b4:	6829      	ldr	r1, [r5, #0]
  4078b6:	6011      	str	r1, [r2, #0]
  4078b8:	6869      	ldr	r1, [r5, #4]
  4078ba:	6051      	str	r1, [r2, #4]
  4078bc:	68a9      	ldr	r1, [r5, #8]
  4078be:	6091      	str	r1, [r2, #8]
  4078c0:	461c      	mov	r4, r3
  4078c2:	46d1      	mov	r9, sl
  4078c4:	e72a      	b.n	40771c <_realloc_r+0xc0>
  4078c6:	eb09 0107 	add.w	r1, r9, r7
  4078ca:	ebab 0b07 	sub.w	fp, fp, r7
  4078ce:	f04b 0201 	orr.w	r2, fp, #1
  4078d2:	6099      	str	r1, [r3, #8]
  4078d4:	604a      	str	r2, [r1, #4]
  4078d6:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4078da:	f003 0301 	and.w	r3, r3, #1
  4078de:	431f      	orrs	r7, r3
  4078e0:	4640      	mov	r0, r8
  4078e2:	f845 7c04 	str.w	r7, [r5, #-4]
  4078e6:	f7fe fffb 	bl	4068e0 <__malloc_unlock>
  4078ea:	462e      	mov	r6, r5
  4078ec:	e728      	b.n	407740 <_realloc_r+0xe4>
  4078ee:	4629      	mov	r1, r5
  4078f0:	f7ff fe50 	bl	407594 <memmove>
  4078f4:	e6ff      	b.n	4076f6 <_realloc_r+0x9a>
  4078f6:	4629      	mov	r1, r5
  4078f8:	4630      	mov	r0, r6
  4078fa:	461c      	mov	r4, r3
  4078fc:	46d1      	mov	r9, sl
  4078fe:	f7ff fe49 	bl	407594 <memmove>
  407902:	e70b      	b.n	40771c <_realloc_r+0xc0>
  407904:	68ab      	ldr	r3, [r5, #8]
  407906:	6083      	str	r3, [r0, #8]
  407908:	68eb      	ldr	r3, [r5, #12]
  40790a:	60c3      	str	r3, [r0, #12]
  40790c:	2a24      	cmp	r2, #36	; 0x24
  40790e:	d017      	beq.n	407940 <_realloc_r+0x2e4>
  407910:	f100 0310 	add.w	r3, r0, #16
  407914:	f105 0210 	add.w	r2, r5, #16
  407918:	e6e7      	b.n	4076ea <_realloc_r+0x8e>
  40791a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40791e:	f023 0303 	bic.w	r3, r3, #3
  407922:	441c      	add	r4, r3
  407924:	462e      	mov	r6, r5
  407926:	e6f9      	b.n	40771c <_realloc_r+0xc0>
  407928:	68a9      	ldr	r1, [r5, #8]
  40792a:	f8ca 1010 	str.w	r1, [sl, #16]
  40792e:	68e9      	ldr	r1, [r5, #12]
  407930:	f8ca 1014 	str.w	r1, [sl, #20]
  407934:	2a24      	cmp	r2, #36	; 0x24
  407936:	d00c      	beq.n	407952 <_realloc_r+0x2f6>
  407938:	3510      	adds	r5, #16
  40793a:	f10a 0218 	add.w	r2, sl, #24
  40793e:	e7b9      	b.n	4078b4 <_realloc_r+0x258>
  407940:	692b      	ldr	r3, [r5, #16]
  407942:	6103      	str	r3, [r0, #16]
  407944:	696b      	ldr	r3, [r5, #20]
  407946:	6143      	str	r3, [r0, #20]
  407948:	f105 0218 	add.w	r2, r5, #24
  40794c:	f100 0318 	add.w	r3, r0, #24
  407950:	e6cb      	b.n	4076ea <_realloc_r+0x8e>
  407952:	692a      	ldr	r2, [r5, #16]
  407954:	f8ca 2018 	str.w	r2, [sl, #24]
  407958:	696a      	ldr	r2, [r5, #20]
  40795a:	f8ca 201c 	str.w	r2, [sl, #28]
  40795e:	3518      	adds	r5, #24
  407960:	f10a 0220 	add.w	r2, sl, #32
  407964:	e7a6      	b.n	4078b4 <_realloc_r+0x258>
  407966:	4632      	mov	r2, r6
  407968:	e77f      	b.n	40786a <_realloc_r+0x20e>
  40796a:	4629      	mov	r1, r5
  40796c:	4630      	mov	r0, r6
  40796e:	9301      	str	r3, [sp, #4]
  407970:	f7ff fe10 	bl	407594 <memmove>
  407974:	9b01      	ldr	r3, [sp, #4]
  407976:	e77e      	b.n	407876 <_realloc_r+0x21a>
  407978:	68a9      	ldr	r1, [r5, #8]
  40797a:	f8ca 1010 	str.w	r1, [sl, #16]
  40797e:	68e9      	ldr	r1, [r5, #12]
  407980:	f8ca 1014 	str.w	r1, [sl, #20]
  407984:	2a24      	cmp	r2, #36	; 0x24
  407986:	d003      	beq.n	407990 <_realloc_r+0x334>
  407988:	3510      	adds	r5, #16
  40798a:	f10a 0218 	add.w	r2, sl, #24
  40798e:	e76c      	b.n	40786a <_realloc_r+0x20e>
  407990:	692a      	ldr	r2, [r5, #16]
  407992:	f8ca 2018 	str.w	r2, [sl, #24]
  407996:	696a      	ldr	r2, [r5, #20]
  407998:	f8ca 201c 	str.w	r2, [sl, #28]
  40799c:	3518      	adds	r5, #24
  40799e:	f10a 0220 	add.w	r2, sl, #32
  4079a2:	e762      	b.n	40786a <_realloc_r+0x20e>
  4079a4:	20000444 	.word	0x20000444

004079a8 <__ascii_wctomb>:
  4079a8:	b121      	cbz	r1, 4079b4 <__ascii_wctomb+0xc>
  4079aa:	2aff      	cmp	r2, #255	; 0xff
  4079ac:	d804      	bhi.n	4079b8 <__ascii_wctomb+0x10>
  4079ae:	700a      	strb	r2, [r1, #0]
  4079b0:	2001      	movs	r0, #1
  4079b2:	4770      	bx	lr
  4079b4:	4608      	mov	r0, r1
  4079b6:	4770      	bx	lr
  4079b8:	238a      	movs	r3, #138	; 0x8a
  4079ba:	6003      	str	r3, [r0, #0]
  4079bc:	f04f 30ff 	mov.w	r0, #4294967295
  4079c0:	4770      	bx	lr
  4079c2:	bf00      	nop

004079c4 <__aeabi_drsub>:
  4079c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4079c8:	e002      	b.n	4079d0 <__adddf3>
  4079ca:	bf00      	nop

004079cc <__aeabi_dsub>:
  4079cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004079d0 <__adddf3>:
  4079d0:	b530      	push	{r4, r5, lr}
  4079d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4079d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4079da:	ea94 0f05 	teq	r4, r5
  4079de:	bf08      	it	eq
  4079e0:	ea90 0f02 	teqeq	r0, r2
  4079e4:	bf1f      	itttt	ne
  4079e6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4079ea:	ea55 0c02 	orrsne.w	ip, r5, r2
  4079ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4079f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4079f6:	f000 80e2 	beq.w	407bbe <__adddf3+0x1ee>
  4079fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4079fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  407a02:	bfb8      	it	lt
  407a04:	426d      	neglt	r5, r5
  407a06:	dd0c      	ble.n	407a22 <__adddf3+0x52>
  407a08:	442c      	add	r4, r5
  407a0a:	ea80 0202 	eor.w	r2, r0, r2
  407a0e:	ea81 0303 	eor.w	r3, r1, r3
  407a12:	ea82 0000 	eor.w	r0, r2, r0
  407a16:	ea83 0101 	eor.w	r1, r3, r1
  407a1a:	ea80 0202 	eor.w	r2, r0, r2
  407a1e:	ea81 0303 	eor.w	r3, r1, r3
  407a22:	2d36      	cmp	r5, #54	; 0x36
  407a24:	bf88      	it	hi
  407a26:	bd30      	pophi	{r4, r5, pc}
  407a28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407a2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407a30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  407a34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  407a38:	d002      	beq.n	407a40 <__adddf3+0x70>
  407a3a:	4240      	negs	r0, r0
  407a3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407a40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407a44:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407a48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  407a4c:	d002      	beq.n	407a54 <__adddf3+0x84>
  407a4e:	4252      	negs	r2, r2
  407a50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407a54:	ea94 0f05 	teq	r4, r5
  407a58:	f000 80a7 	beq.w	407baa <__adddf3+0x1da>
  407a5c:	f1a4 0401 	sub.w	r4, r4, #1
  407a60:	f1d5 0e20 	rsbs	lr, r5, #32
  407a64:	db0d      	blt.n	407a82 <__adddf3+0xb2>
  407a66:	fa02 fc0e 	lsl.w	ip, r2, lr
  407a6a:	fa22 f205 	lsr.w	r2, r2, r5
  407a6e:	1880      	adds	r0, r0, r2
  407a70:	f141 0100 	adc.w	r1, r1, #0
  407a74:	fa03 f20e 	lsl.w	r2, r3, lr
  407a78:	1880      	adds	r0, r0, r2
  407a7a:	fa43 f305 	asr.w	r3, r3, r5
  407a7e:	4159      	adcs	r1, r3
  407a80:	e00e      	b.n	407aa0 <__adddf3+0xd0>
  407a82:	f1a5 0520 	sub.w	r5, r5, #32
  407a86:	f10e 0e20 	add.w	lr, lr, #32
  407a8a:	2a01      	cmp	r2, #1
  407a8c:	fa03 fc0e 	lsl.w	ip, r3, lr
  407a90:	bf28      	it	cs
  407a92:	f04c 0c02 	orrcs.w	ip, ip, #2
  407a96:	fa43 f305 	asr.w	r3, r3, r5
  407a9a:	18c0      	adds	r0, r0, r3
  407a9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407aa0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407aa4:	d507      	bpl.n	407ab6 <__adddf3+0xe6>
  407aa6:	f04f 0e00 	mov.w	lr, #0
  407aaa:	f1dc 0c00 	rsbs	ip, ip, #0
  407aae:	eb7e 0000 	sbcs.w	r0, lr, r0
  407ab2:	eb6e 0101 	sbc.w	r1, lr, r1
  407ab6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407aba:	d31b      	bcc.n	407af4 <__adddf3+0x124>
  407abc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407ac0:	d30c      	bcc.n	407adc <__adddf3+0x10c>
  407ac2:	0849      	lsrs	r1, r1, #1
  407ac4:	ea5f 0030 	movs.w	r0, r0, rrx
  407ac8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407acc:	f104 0401 	add.w	r4, r4, #1
  407ad0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407ad4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407ad8:	f080 809a 	bcs.w	407c10 <__adddf3+0x240>
  407adc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407ae0:	bf08      	it	eq
  407ae2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407ae6:	f150 0000 	adcs.w	r0, r0, #0
  407aea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407aee:	ea41 0105 	orr.w	r1, r1, r5
  407af2:	bd30      	pop	{r4, r5, pc}
  407af4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407af8:	4140      	adcs	r0, r0
  407afa:	eb41 0101 	adc.w	r1, r1, r1
  407afe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407b02:	f1a4 0401 	sub.w	r4, r4, #1
  407b06:	d1e9      	bne.n	407adc <__adddf3+0x10c>
  407b08:	f091 0f00 	teq	r1, #0
  407b0c:	bf04      	itt	eq
  407b0e:	4601      	moveq	r1, r0
  407b10:	2000      	moveq	r0, #0
  407b12:	fab1 f381 	clz	r3, r1
  407b16:	bf08      	it	eq
  407b18:	3320      	addeq	r3, #32
  407b1a:	f1a3 030b 	sub.w	r3, r3, #11
  407b1e:	f1b3 0220 	subs.w	r2, r3, #32
  407b22:	da0c      	bge.n	407b3e <__adddf3+0x16e>
  407b24:	320c      	adds	r2, #12
  407b26:	dd08      	ble.n	407b3a <__adddf3+0x16a>
  407b28:	f102 0c14 	add.w	ip, r2, #20
  407b2c:	f1c2 020c 	rsb	r2, r2, #12
  407b30:	fa01 f00c 	lsl.w	r0, r1, ip
  407b34:	fa21 f102 	lsr.w	r1, r1, r2
  407b38:	e00c      	b.n	407b54 <__adddf3+0x184>
  407b3a:	f102 0214 	add.w	r2, r2, #20
  407b3e:	bfd8      	it	le
  407b40:	f1c2 0c20 	rsble	ip, r2, #32
  407b44:	fa01 f102 	lsl.w	r1, r1, r2
  407b48:	fa20 fc0c 	lsr.w	ip, r0, ip
  407b4c:	bfdc      	itt	le
  407b4e:	ea41 010c 	orrle.w	r1, r1, ip
  407b52:	4090      	lslle	r0, r2
  407b54:	1ae4      	subs	r4, r4, r3
  407b56:	bfa2      	ittt	ge
  407b58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407b5c:	4329      	orrge	r1, r5
  407b5e:	bd30      	popge	{r4, r5, pc}
  407b60:	ea6f 0404 	mvn.w	r4, r4
  407b64:	3c1f      	subs	r4, #31
  407b66:	da1c      	bge.n	407ba2 <__adddf3+0x1d2>
  407b68:	340c      	adds	r4, #12
  407b6a:	dc0e      	bgt.n	407b8a <__adddf3+0x1ba>
  407b6c:	f104 0414 	add.w	r4, r4, #20
  407b70:	f1c4 0220 	rsb	r2, r4, #32
  407b74:	fa20 f004 	lsr.w	r0, r0, r4
  407b78:	fa01 f302 	lsl.w	r3, r1, r2
  407b7c:	ea40 0003 	orr.w	r0, r0, r3
  407b80:	fa21 f304 	lsr.w	r3, r1, r4
  407b84:	ea45 0103 	orr.w	r1, r5, r3
  407b88:	bd30      	pop	{r4, r5, pc}
  407b8a:	f1c4 040c 	rsb	r4, r4, #12
  407b8e:	f1c4 0220 	rsb	r2, r4, #32
  407b92:	fa20 f002 	lsr.w	r0, r0, r2
  407b96:	fa01 f304 	lsl.w	r3, r1, r4
  407b9a:	ea40 0003 	orr.w	r0, r0, r3
  407b9e:	4629      	mov	r1, r5
  407ba0:	bd30      	pop	{r4, r5, pc}
  407ba2:	fa21 f004 	lsr.w	r0, r1, r4
  407ba6:	4629      	mov	r1, r5
  407ba8:	bd30      	pop	{r4, r5, pc}
  407baa:	f094 0f00 	teq	r4, #0
  407bae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  407bb2:	bf06      	itte	eq
  407bb4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407bb8:	3401      	addeq	r4, #1
  407bba:	3d01      	subne	r5, #1
  407bbc:	e74e      	b.n	407a5c <__adddf3+0x8c>
  407bbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407bc2:	bf18      	it	ne
  407bc4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407bc8:	d029      	beq.n	407c1e <__adddf3+0x24e>
  407bca:	ea94 0f05 	teq	r4, r5
  407bce:	bf08      	it	eq
  407bd0:	ea90 0f02 	teqeq	r0, r2
  407bd4:	d005      	beq.n	407be2 <__adddf3+0x212>
  407bd6:	ea54 0c00 	orrs.w	ip, r4, r0
  407bda:	bf04      	itt	eq
  407bdc:	4619      	moveq	r1, r3
  407bde:	4610      	moveq	r0, r2
  407be0:	bd30      	pop	{r4, r5, pc}
  407be2:	ea91 0f03 	teq	r1, r3
  407be6:	bf1e      	ittt	ne
  407be8:	2100      	movne	r1, #0
  407bea:	2000      	movne	r0, #0
  407bec:	bd30      	popne	{r4, r5, pc}
  407bee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  407bf2:	d105      	bne.n	407c00 <__adddf3+0x230>
  407bf4:	0040      	lsls	r0, r0, #1
  407bf6:	4149      	adcs	r1, r1
  407bf8:	bf28      	it	cs
  407bfa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407bfe:	bd30      	pop	{r4, r5, pc}
  407c00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407c04:	bf3c      	itt	cc
  407c06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407c0a:	bd30      	popcc	{r4, r5, pc}
  407c0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407c10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407c14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407c18:	f04f 0000 	mov.w	r0, #0
  407c1c:	bd30      	pop	{r4, r5, pc}
  407c1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407c22:	bf1a      	itte	ne
  407c24:	4619      	movne	r1, r3
  407c26:	4610      	movne	r0, r2
  407c28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407c2c:	bf1c      	itt	ne
  407c2e:	460b      	movne	r3, r1
  407c30:	4602      	movne	r2, r0
  407c32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407c36:	bf06      	itte	eq
  407c38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407c3c:	ea91 0f03 	teqeq	r1, r3
  407c40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407c44:	bd30      	pop	{r4, r5, pc}
  407c46:	bf00      	nop

00407c48 <__aeabi_ui2d>:
  407c48:	f090 0f00 	teq	r0, #0
  407c4c:	bf04      	itt	eq
  407c4e:	2100      	moveq	r1, #0
  407c50:	4770      	bxeq	lr
  407c52:	b530      	push	{r4, r5, lr}
  407c54:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407c58:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407c5c:	f04f 0500 	mov.w	r5, #0
  407c60:	f04f 0100 	mov.w	r1, #0
  407c64:	e750      	b.n	407b08 <__adddf3+0x138>
  407c66:	bf00      	nop

00407c68 <__aeabi_i2d>:
  407c68:	f090 0f00 	teq	r0, #0
  407c6c:	bf04      	itt	eq
  407c6e:	2100      	moveq	r1, #0
  407c70:	4770      	bxeq	lr
  407c72:	b530      	push	{r4, r5, lr}
  407c74:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407c78:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407c7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407c80:	bf48      	it	mi
  407c82:	4240      	negmi	r0, r0
  407c84:	f04f 0100 	mov.w	r1, #0
  407c88:	e73e      	b.n	407b08 <__adddf3+0x138>
  407c8a:	bf00      	nop

00407c8c <__aeabi_f2d>:
  407c8c:	0042      	lsls	r2, r0, #1
  407c8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  407c92:	ea4f 0131 	mov.w	r1, r1, rrx
  407c96:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407c9a:	bf1f      	itttt	ne
  407c9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407ca0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407ca4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407ca8:	4770      	bxne	lr
  407caa:	f092 0f00 	teq	r2, #0
  407cae:	bf14      	ite	ne
  407cb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407cb4:	4770      	bxeq	lr
  407cb6:	b530      	push	{r4, r5, lr}
  407cb8:	f44f 7460 	mov.w	r4, #896	; 0x380
  407cbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407cc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407cc4:	e720      	b.n	407b08 <__adddf3+0x138>
  407cc6:	bf00      	nop

00407cc8 <__aeabi_ul2d>:
  407cc8:	ea50 0201 	orrs.w	r2, r0, r1
  407ccc:	bf08      	it	eq
  407cce:	4770      	bxeq	lr
  407cd0:	b530      	push	{r4, r5, lr}
  407cd2:	f04f 0500 	mov.w	r5, #0
  407cd6:	e00a      	b.n	407cee <__aeabi_l2d+0x16>

00407cd8 <__aeabi_l2d>:
  407cd8:	ea50 0201 	orrs.w	r2, r0, r1
  407cdc:	bf08      	it	eq
  407cde:	4770      	bxeq	lr
  407ce0:	b530      	push	{r4, r5, lr}
  407ce2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407ce6:	d502      	bpl.n	407cee <__aeabi_l2d+0x16>
  407ce8:	4240      	negs	r0, r0
  407cea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407cee:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407cf2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407cf6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407cfa:	f43f aedc 	beq.w	407ab6 <__adddf3+0xe6>
  407cfe:	f04f 0203 	mov.w	r2, #3
  407d02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407d06:	bf18      	it	ne
  407d08:	3203      	addne	r2, #3
  407d0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407d0e:	bf18      	it	ne
  407d10:	3203      	addne	r2, #3
  407d12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407d16:	f1c2 0320 	rsb	r3, r2, #32
  407d1a:	fa00 fc03 	lsl.w	ip, r0, r3
  407d1e:	fa20 f002 	lsr.w	r0, r0, r2
  407d22:	fa01 fe03 	lsl.w	lr, r1, r3
  407d26:	ea40 000e 	orr.w	r0, r0, lr
  407d2a:	fa21 f102 	lsr.w	r1, r1, r2
  407d2e:	4414      	add	r4, r2
  407d30:	e6c1      	b.n	407ab6 <__adddf3+0xe6>
  407d32:	bf00      	nop

00407d34 <__aeabi_dmul>:
  407d34:	b570      	push	{r4, r5, r6, lr}
  407d36:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407d3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407d3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407d42:	bf1d      	ittte	ne
  407d44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407d48:	ea94 0f0c 	teqne	r4, ip
  407d4c:	ea95 0f0c 	teqne	r5, ip
  407d50:	f000 f8de 	bleq	407f10 <__aeabi_dmul+0x1dc>
  407d54:	442c      	add	r4, r5
  407d56:	ea81 0603 	eor.w	r6, r1, r3
  407d5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407d5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407d62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407d66:	bf18      	it	ne
  407d68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407d6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407d74:	d038      	beq.n	407de8 <__aeabi_dmul+0xb4>
  407d76:	fba0 ce02 	umull	ip, lr, r0, r2
  407d7a:	f04f 0500 	mov.w	r5, #0
  407d7e:	fbe1 e502 	umlal	lr, r5, r1, r2
  407d82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407d86:	fbe0 e503 	umlal	lr, r5, r0, r3
  407d8a:	f04f 0600 	mov.w	r6, #0
  407d8e:	fbe1 5603 	umlal	r5, r6, r1, r3
  407d92:	f09c 0f00 	teq	ip, #0
  407d96:	bf18      	it	ne
  407d98:	f04e 0e01 	orrne.w	lr, lr, #1
  407d9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407da0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407da4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407da8:	d204      	bcs.n	407db4 <__aeabi_dmul+0x80>
  407daa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407dae:	416d      	adcs	r5, r5
  407db0:	eb46 0606 	adc.w	r6, r6, r6
  407db4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407db8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407dbc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407dc0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407dc4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407dc8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407dcc:	bf88      	it	hi
  407dce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407dd2:	d81e      	bhi.n	407e12 <__aeabi_dmul+0xde>
  407dd4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407dd8:	bf08      	it	eq
  407dda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407dde:	f150 0000 	adcs.w	r0, r0, #0
  407de2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407de6:	bd70      	pop	{r4, r5, r6, pc}
  407de8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407dec:	ea46 0101 	orr.w	r1, r6, r1
  407df0:	ea40 0002 	orr.w	r0, r0, r2
  407df4:	ea81 0103 	eor.w	r1, r1, r3
  407df8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407dfc:	bfc2      	ittt	gt
  407dfe:	ebd4 050c 	rsbsgt	r5, r4, ip
  407e02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407e06:	bd70      	popgt	{r4, r5, r6, pc}
  407e08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407e0c:	f04f 0e00 	mov.w	lr, #0
  407e10:	3c01      	subs	r4, #1
  407e12:	f300 80ab 	bgt.w	407f6c <__aeabi_dmul+0x238>
  407e16:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407e1a:	bfde      	ittt	le
  407e1c:	2000      	movle	r0, #0
  407e1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407e22:	bd70      	pople	{r4, r5, r6, pc}
  407e24:	f1c4 0400 	rsb	r4, r4, #0
  407e28:	3c20      	subs	r4, #32
  407e2a:	da35      	bge.n	407e98 <__aeabi_dmul+0x164>
  407e2c:	340c      	adds	r4, #12
  407e2e:	dc1b      	bgt.n	407e68 <__aeabi_dmul+0x134>
  407e30:	f104 0414 	add.w	r4, r4, #20
  407e34:	f1c4 0520 	rsb	r5, r4, #32
  407e38:	fa00 f305 	lsl.w	r3, r0, r5
  407e3c:	fa20 f004 	lsr.w	r0, r0, r4
  407e40:	fa01 f205 	lsl.w	r2, r1, r5
  407e44:	ea40 0002 	orr.w	r0, r0, r2
  407e48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407e4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407e50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407e54:	fa21 f604 	lsr.w	r6, r1, r4
  407e58:	eb42 0106 	adc.w	r1, r2, r6
  407e5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407e60:	bf08      	it	eq
  407e62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407e66:	bd70      	pop	{r4, r5, r6, pc}
  407e68:	f1c4 040c 	rsb	r4, r4, #12
  407e6c:	f1c4 0520 	rsb	r5, r4, #32
  407e70:	fa00 f304 	lsl.w	r3, r0, r4
  407e74:	fa20 f005 	lsr.w	r0, r0, r5
  407e78:	fa01 f204 	lsl.w	r2, r1, r4
  407e7c:	ea40 0002 	orr.w	r0, r0, r2
  407e80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407e84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407e88:	f141 0100 	adc.w	r1, r1, #0
  407e8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407e90:	bf08      	it	eq
  407e92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407e96:	bd70      	pop	{r4, r5, r6, pc}
  407e98:	f1c4 0520 	rsb	r5, r4, #32
  407e9c:	fa00 f205 	lsl.w	r2, r0, r5
  407ea0:	ea4e 0e02 	orr.w	lr, lr, r2
  407ea4:	fa20 f304 	lsr.w	r3, r0, r4
  407ea8:	fa01 f205 	lsl.w	r2, r1, r5
  407eac:	ea43 0302 	orr.w	r3, r3, r2
  407eb0:	fa21 f004 	lsr.w	r0, r1, r4
  407eb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407eb8:	fa21 f204 	lsr.w	r2, r1, r4
  407ebc:	ea20 0002 	bic.w	r0, r0, r2
  407ec0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407ec4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407ec8:	bf08      	it	eq
  407eca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407ece:	bd70      	pop	{r4, r5, r6, pc}
  407ed0:	f094 0f00 	teq	r4, #0
  407ed4:	d10f      	bne.n	407ef6 <__aeabi_dmul+0x1c2>
  407ed6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407eda:	0040      	lsls	r0, r0, #1
  407edc:	eb41 0101 	adc.w	r1, r1, r1
  407ee0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407ee4:	bf08      	it	eq
  407ee6:	3c01      	subeq	r4, #1
  407ee8:	d0f7      	beq.n	407eda <__aeabi_dmul+0x1a6>
  407eea:	ea41 0106 	orr.w	r1, r1, r6
  407eee:	f095 0f00 	teq	r5, #0
  407ef2:	bf18      	it	ne
  407ef4:	4770      	bxne	lr
  407ef6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407efa:	0052      	lsls	r2, r2, #1
  407efc:	eb43 0303 	adc.w	r3, r3, r3
  407f00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407f04:	bf08      	it	eq
  407f06:	3d01      	subeq	r5, #1
  407f08:	d0f7      	beq.n	407efa <__aeabi_dmul+0x1c6>
  407f0a:	ea43 0306 	orr.w	r3, r3, r6
  407f0e:	4770      	bx	lr
  407f10:	ea94 0f0c 	teq	r4, ip
  407f14:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407f18:	bf18      	it	ne
  407f1a:	ea95 0f0c 	teqne	r5, ip
  407f1e:	d00c      	beq.n	407f3a <__aeabi_dmul+0x206>
  407f20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407f24:	bf18      	it	ne
  407f26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407f2a:	d1d1      	bne.n	407ed0 <__aeabi_dmul+0x19c>
  407f2c:	ea81 0103 	eor.w	r1, r1, r3
  407f30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407f34:	f04f 0000 	mov.w	r0, #0
  407f38:	bd70      	pop	{r4, r5, r6, pc}
  407f3a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407f3e:	bf06      	itte	eq
  407f40:	4610      	moveq	r0, r2
  407f42:	4619      	moveq	r1, r3
  407f44:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407f48:	d019      	beq.n	407f7e <__aeabi_dmul+0x24a>
  407f4a:	ea94 0f0c 	teq	r4, ip
  407f4e:	d102      	bne.n	407f56 <__aeabi_dmul+0x222>
  407f50:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407f54:	d113      	bne.n	407f7e <__aeabi_dmul+0x24a>
  407f56:	ea95 0f0c 	teq	r5, ip
  407f5a:	d105      	bne.n	407f68 <__aeabi_dmul+0x234>
  407f5c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407f60:	bf1c      	itt	ne
  407f62:	4610      	movne	r0, r2
  407f64:	4619      	movne	r1, r3
  407f66:	d10a      	bne.n	407f7e <__aeabi_dmul+0x24a>
  407f68:	ea81 0103 	eor.w	r1, r1, r3
  407f6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407f70:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407f74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407f78:	f04f 0000 	mov.w	r0, #0
  407f7c:	bd70      	pop	{r4, r5, r6, pc}
  407f7e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407f82:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407f86:	bd70      	pop	{r4, r5, r6, pc}

00407f88 <__aeabi_ddiv>:
  407f88:	b570      	push	{r4, r5, r6, lr}
  407f8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407f8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407f92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407f96:	bf1d      	ittte	ne
  407f98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407f9c:	ea94 0f0c 	teqne	r4, ip
  407fa0:	ea95 0f0c 	teqne	r5, ip
  407fa4:	f000 f8a7 	bleq	4080f6 <__aeabi_ddiv+0x16e>
  407fa8:	eba4 0405 	sub.w	r4, r4, r5
  407fac:	ea81 0e03 	eor.w	lr, r1, r3
  407fb0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407fb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407fb8:	f000 8088 	beq.w	4080cc <__aeabi_ddiv+0x144>
  407fbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407fc0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407fc4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407fc8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407fcc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407fd0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407fd4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407fd8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407fdc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407fe0:	429d      	cmp	r5, r3
  407fe2:	bf08      	it	eq
  407fe4:	4296      	cmpeq	r6, r2
  407fe6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407fea:	f504 7440 	add.w	r4, r4, #768	; 0x300
  407fee:	d202      	bcs.n	407ff6 <__aeabi_ddiv+0x6e>
  407ff0:	085b      	lsrs	r3, r3, #1
  407ff2:	ea4f 0232 	mov.w	r2, r2, rrx
  407ff6:	1ab6      	subs	r6, r6, r2
  407ff8:	eb65 0503 	sbc.w	r5, r5, r3
  407ffc:	085b      	lsrs	r3, r3, #1
  407ffe:	ea4f 0232 	mov.w	r2, r2, rrx
  408002:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408006:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40800a:	ebb6 0e02 	subs.w	lr, r6, r2
  40800e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408012:	bf22      	ittt	cs
  408014:	1ab6      	subcs	r6, r6, r2
  408016:	4675      	movcs	r5, lr
  408018:	ea40 000c 	orrcs.w	r0, r0, ip
  40801c:	085b      	lsrs	r3, r3, #1
  40801e:	ea4f 0232 	mov.w	r2, r2, rrx
  408022:	ebb6 0e02 	subs.w	lr, r6, r2
  408026:	eb75 0e03 	sbcs.w	lr, r5, r3
  40802a:	bf22      	ittt	cs
  40802c:	1ab6      	subcs	r6, r6, r2
  40802e:	4675      	movcs	r5, lr
  408030:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408034:	085b      	lsrs	r3, r3, #1
  408036:	ea4f 0232 	mov.w	r2, r2, rrx
  40803a:	ebb6 0e02 	subs.w	lr, r6, r2
  40803e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408042:	bf22      	ittt	cs
  408044:	1ab6      	subcs	r6, r6, r2
  408046:	4675      	movcs	r5, lr
  408048:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40804c:	085b      	lsrs	r3, r3, #1
  40804e:	ea4f 0232 	mov.w	r2, r2, rrx
  408052:	ebb6 0e02 	subs.w	lr, r6, r2
  408056:	eb75 0e03 	sbcs.w	lr, r5, r3
  40805a:	bf22      	ittt	cs
  40805c:	1ab6      	subcs	r6, r6, r2
  40805e:	4675      	movcs	r5, lr
  408060:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408064:	ea55 0e06 	orrs.w	lr, r5, r6
  408068:	d018      	beq.n	40809c <__aeabi_ddiv+0x114>
  40806a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40806e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408072:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408076:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40807a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40807e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408082:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408086:	d1c0      	bne.n	40800a <__aeabi_ddiv+0x82>
  408088:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40808c:	d10b      	bne.n	4080a6 <__aeabi_ddiv+0x11e>
  40808e:	ea41 0100 	orr.w	r1, r1, r0
  408092:	f04f 0000 	mov.w	r0, #0
  408096:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40809a:	e7b6      	b.n	40800a <__aeabi_ddiv+0x82>
  40809c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4080a0:	bf04      	itt	eq
  4080a2:	4301      	orreq	r1, r0
  4080a4:	2000      	moveq	r0, #0
  4080a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4080aa:	bf88      	it	hi
  4080ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4080b0:	f63f aeaf 	bhi.w	407e12 <__aeabi_dmul+0xde>
  4080b4:	ebb5 0c03 	subs.w	ip, r5, r3
  4080b8:	bf04      	itt	eq
  4080ba:	ebb6 0c02 	subseq.w	ip, r6, r2
  4080be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4080c2:	f150 0000 	adcs.w	r0, r0, #0
  4080c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4080ca:	bd70      	pop	{r4, r5, r6, pc}
  4080cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4080d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4080d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4080d8:	bfc2      	ittt	gt
  4080da:	ebd4 050c 	rsbsgt	r5, r4, ip
  4080de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4080e2:	bd70      	popgt	{r4, r5, r6, pc}
  4080e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4080e8:	f04f 0e00 	mov.w	lr, #0
  4080ec:	3c01      	subs	r4, #1
  4080ee:	e690      	b.n	407e12 <__aeabi_dmul+0xde>
  4080f0:	ea45 0e06 	orr.w	lr, r5, r6
  4080f4:	e68d      	b.n	407e12 <__aeabi_dmul+0xde>
  4080f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4080fa:	ea94 0f0c 	teq	r4, ip
  4080fe:	bf08      	it	eq
  408100:	ea95 0f0c 	teqeq	r5, ip
  408104:	f43f af3b 	beq.w	407f7e <__aeabi_dmul+0x24a>
  408108:	ea94 0f0c 	teq	r4, ip
  40810c:	d10a      	bne.n	408124 <__aeabi_ddiv+0x19c>
  40810e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408112:	f47f af34 	bne.w	407f7e <__aeabi_dmul+0x24a>
  408116:	ea95 0f0c 	teq	r5, ip
  40811a:	f47f af25 	bne.w	407f68 <__aeabi_dmul+0x234>
  40811e:	4610      	mov	r0, r2
  408120:	4619      	mov	r1, r3
  408122:	e72c      	b.n	407f7e <__aeabi_dmul+0x24a>
  408124:	ea95 0f0c 	teq	r5, ip
  408128:	d106      	bne.n	408138 <__aeabi_ddiv+0x1b0>
  40812a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40812e:	f43f aefd 	beq.w	407f2c <__aeabi_dmul+0x1f8>
  408132:	4610      	mov	r0, r2
  408134:	4619      	mov	r1, r3
  408136:	e722      	b.n	407f7e <__aeabi_dmul+0x24a>
  408138:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40813c:	bf18      	it	ne
  40813e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408142:	f47f aec5 	bne.w	407ed0 <__aeabi_dmul+0x19c>
  408146:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40814a:	f47f af0d 	bne.w	407f68 <__aeabi_dmul+0x234>
  40814e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408152:	f47f aeeb 	bne.w	407f2c <__aeabi_dmul+0x1f8>
  408156:	e712      	b.n	407f7e <__aeabi_dmul+0x24a>

00408158 <__gedf2>:
  408158:	f04f 3cff 	mov.w	ip, #4294967295
  40815c:	e006      	b.n	40816c <__cmpdf2+0x4>
  40815e:	bf00      	nop

00408160 <__ledf2>:
  408160:	f04f 0c01 	mov.w	ip, #1
  408164:	e002      	b.n	40816c <__cmpdf2+0x4>
  408166:	bf00      	nop

00408168 <__cmpdf2>:
  408168:	f04f 0c01 	mov.w	ip, #1
  40816c:	f84d cd04 	str.w	ip, [sp, #-4]!
  408170:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408174:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408178:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40817c:	bf18      	it	ne
  40817e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408182:	d01b      	beq.n	4081bc <__cmpdf2+0x54>
  408184:	b001      	add	sp, #4
  408186:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40818a:	bf0c      	ite	eq
  40818c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408190:	ea91 0f03 	teqne	r1, r3
  408194:	bf02      	ittt	eq
  408196:	ea90 0f02 	teqeq	r0, r2
  40819a:	2000      	moveq	r0, #0
  40819c:	4770      	bxeq	lr
  40819e:	f110 0f00 	cmn.w	r0, #0
  4081a2:	ea91 0f03 	teq	r1, r3
  4081a6:	bf58      	it	pl
  4081a8:	4299      	cmppl	r1, r3
  4081aa:	bf08      	it	eq
  4081ac:	4290      	cmpeq	r0, r2
  4081ae:	bf2c      	ite	cs
  4081b0:	17d8      	asrcs	r0, r3, #31
  4081b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4081b6:	f040 0001 	orr.w	r0, r0, #1
  4081ba:	4770      	bx	lr
  4081bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4081c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4081c4:	d102      	bne.n	4081cc <__cmpdf2+0x64>
  4081c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4081ca:	d107      	bne.n	4081dc <__cmpdf2+0x74>
  4081cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4081d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4081d4:	d1d6      	bne.n	408184 <__cmpdf2+0x1c>
  4081d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4081da:	d0d3      	beq.n	408184 <__cmpdf2+0x1c>
  4081dc:	f85d 0b04 	ldr.w	r0, [sp], #4
  4081e0:	4770      	bx	lr
  4081e2:	bf00      	nop

004081e4 <__aeabi_cdrcmple>:
  4081e4:	4684      	mov	ip, r0
  4081e6:	4610      	mov	r0, r2
  4081e8:	4662      	mov	r2, ip
  4081ea:	468c      	mov	ip, r1
  4081ec:	4619      	mov	r1, r3
  4081ee:	4663      	mov	r3, ip
  4081f0:	e000      	b.n	4081f4 <__aeabi_cdcmpeq>
  4081f2:	bf00      	nop

004081f4 <__aeabi_cdcmpeq>:
  4081f4:	b501      	push	{r0, lr}
  4081f6:	f7ff ffb7 	bl	408168 <__cmpdf2>
  4081fa:	2800      	cmp	r0, #0
  4081fc:	bf48      	it	mi
  4081fe:	f110 0f00 	cmnmi.w	r0, #0
  408202:	bd01      	pop	{r0, pc}

00408204 <__aeabi_dcmpeq>:
  408204:	f84d ed08 	str.w	lr, [sp, #-8]!
  408208:	f7ff fff4 	bl	4081f4 <__aeabi_cdcmpeq>
  40820c:	bf0c      	ite	eq
  40820e:	2001      	moveq	r0, #1
  408210:	2000      	movne	r0, #0
  408212:	f85d fb08 	ldr.w	pc, [sp], #8
  408216:	bf00      	nop

00408218 <__aeabi_dcmplt>:
  408218:	f84d ed08 	str.w	lr, [sp, #-8]!
  40821c:	f7ff ffea 	bl	4081f4 <__aeabi_cdcmpeq>
  408220:	bf34      	ite	cc
  408222:	2001      	movcc	r0, #1
  408224:	2000      	movcs	r0, #0
  408226:	f85d fb08 	ldr.w	pc, [sp], #8
  40822a:	bf00      	nop

0040822c <__aeabi_dcmple>:
  40822c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408230:	f7ff ffe0 	bl	4081f4 <__aeabi_cdcmpeq>
  408234:	bf94      	ite	ls
  408236:	2001      	movls	r0, #1
  408238:	2000      	movhi	r0, #0
  40823a:	f85d fb08 	ldr.w	pc, [sp], #8
  40823e:	bf00      	nop

00408240 <__aeabi_dcmpge>:
  408240:	f84d ed08 	str.w	lr, [sp, #-8]!
  408244:	f7ff ffce 	bl	4081e4 <__aeabi_cdrcmple>
  408248:	bf94      	ite	ls
  40824a:	2001      	movls	r0, #1
  40824c:	2000      	movhi	r0, #0
  40824e:	f85d fb08 	ldr.w	pc, [sp], #8
  408252:	bf00      	nop

00408254 <__aeabi_dcmpgt>:
  408254:	f84d ed08 	str.w	lr, [sp, #-8]!
  408258:	f7ff ffc4 	bl	4081e4 <__aeabi_cdrcmple>
  40825c:	bf34      	ite	cc
  40825e:	2001      	movcc	r0, #1
  408260:	2000      	movcs	r0, #0
  408262:	f85d fb08 	ldr.w	pc, [sp], #8
  408266:	bf00      	nop

00408268 <__aeabi_dcmpun>:
  408268:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40826c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408270:	d102      	bne.n	408278 <__aeabi_dcmpun+0x10>
  408272:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408276:	d10a      	bne.n	40828e <__aeabi_dcmpun+0x26>
  408278:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40827c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408280:	d102      	bne.n	408288 <__aeabi_dcmpun+0x20>
  408282:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408286:	d102      	bne.n	40828e <__aeabi_dcmpun+0x26>
  408288:	f04f 0000 	mov.w	r0, #0
  40828c:	4770      	bx	lr
  40828e:	f04f 0001 	mov.w	r0, #1
  408292:	4770      	bx	lr

00408294 <__aeabi_d2iz>:
  408294:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408298:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40829c:	d215      	bcs.n	4082ca <__aeabi_d2iz+0x36>
  40829e:	d511      	bpl.n	4082c4 <__aeabi_d2iz+0x30>
  4082a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4082a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4082a8:	d912      	bls.n	4082d0 <__aeabi_d2iz+0x3c>
  4082aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4082ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4082b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4082b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4082ba:	fa23 f002 	lsr.w	r0, r3, r2
  4082be:	bf18      	it	ne
  4082c0:	4240      	negne	r0, r0
  4082c2:	4770      	bx	lr
  4082c4:	f04f 0000 	mov.w	r0, #0
  4082c8:	4770      	bx	lr
  4082ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4082ce:	d105      	bne.n	4082dc <__aeabi_d2iz+0x48>
  4082d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4082d4:	bf08      	it	eq
  4082d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4082da:	4770      	bx	lr
  4082dc:	f04f 0000 	mov.w	r0, #0
  4082e0:	4770      	bx	lr
  4082e2:	bf00      	nop

004082e4 <OV2640_JPEG_INIT>:
  4082e4:	00ff ff2c df2e 01ff 323c 0111 0209 2804     ..,.....<2.....(
  4082f4:	e513 4814 0c2c 7833 333a fb3b 003e 1143     ...H,.3x:3;.>.C.
  408304:	1016 9239 da35 1a22 c337 0023 c034 1a36     ..9.5.".7.#.4.6.
  408314:	8806 c007 870d 410e 004c 0048 005b 0342     .......AL.H.[.B.
  408324:	814a 9921 4024 3825 8226 005c 0063 7061     J.!.$@%8&.\.c.ap
  408334:	8062 057c 8020 3028 006c 806d 006e 0270     b.|. .(0l.m.n.p.
  408344:	9471 c173 4012 1117 4318 0019 4b1a 0932     q.s..@...C...K2.
  408354:	c037 604f a850 006d 383d 3f46 604f 3c0c     7.O`P.m.=8F?O`.<
  408364:	00ff 7fe5 c0f9 2441 14e0 ff76 a033 2042     ......A$..v.3.B 
  408374:	1843 004c d587 3f88 03d7 10d9 82d3 08c8     C.L....?........
  408384:	80c9 007c 007d 037c 487d 487d 087c 207d     ..|.}.|.}H}H|.} 
  408394:	107d 0e7d 0090 0e91 1a91 3191 5a91 6991     }.}........1.Z.i
  4083a4:	7591 7e91 8891 8f91 9691 a391 af91 c491     .u.~............
  4083b4:	d791 e891 2091 0092 0693 e393 0593 0593     ..... ..........
  4083c4:	0093 0493 0093 0093 0093 0093 0093 0093     ................
  4083d4:	0093 0096 0897 1997 0297 0c97 2497 3097     .............$.0
  4083e4:	2897 2697 0297 9897 8097 0097 0097 edc3     .(.&............
  4083f4:	00a4 00a8 11c5 51c6 80bf 10c7 66b6 a5b8     .......Q.....f..
  408404:	64b7 7cb9 afb3 97b4 ffb5 c5b0 94b1 0fb2     .d.|............
  408414:	5cc4 64c0 4bc1 008c 3d86 0050 c851 9652     .\.d.K...=P.Q.R.
  408424:	0053 0054 0055 c85a 965b 005c 00d3 edc3     S.T.U.Z.[.\.....
  408434:	007f 00da 1fe5 67e1 00e0 7fdd 0005 4012     .......g.......@
  408444:	04d3 16c0 12c1 008c 3d86 0050 2c51 2452     .........=P.Q,R$
  408454:	0053 0054 0055 2c5a 245b 005c ffff 0000     S.T.U.Z,[$\.....

00408464 <OV2640_YUV422>:
  408464:	00ff 0005 10da 03d7 00df 8033 403c 77e1     ..........3.<@.w
  408474:	0000 ffff                                   ....

00408478 <OV2640_JPEG>:
  408478:	14e0 77e1 1fe5 03d7 10da 00e0 01ff 0804     ...w............
  408488:	ffff 0000                                   ....

0040848c <OV2640_JPEG_320x240>:
  40848c:	01ff 4012 1117 4318 0019 4b1a 0932 ca4f     ...@...C...K2.O.
  40849c:	a850 235a 006d 1239 da35 1a22 c337 0023     P.Z#m.9.5.".7.#.
  4084ac:	c034 1a36 8806 c007 870d 410e 004c 00ff     4.6........AL...
  4084bc:	04e0 64c0 4bc1 3586 8950 c851 9652 0053     ...d.K.5P.Q.R.S.
  4084cc:	0054 0055 0057 505a 3c5b 005c 00e0 ffff     T.U.W.ZP[<\.....

004084dc <OV2640_JPEG_640x480>:
  4084dc:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  4084ec:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  4084fc:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  40850c:	04e0 c8c0 96c1 3d86 8950 9051 2c52 0053     .......=P.Q.R,S.
  40851c:	0054 8855 0057 a05a 785b 005c 04d3 00e0     T.U.W.Z.[x\.....
  40852c:	ffff 0000                                   ....

00408530 <OV2640_JPEG_800x600>:
  408530:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408540:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408550:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408560:	04e0 c8c0 96c1 3586 8950 9051 2c52 0053     .......5P.Q.R,S.
  408570:	0054 8855 0057 c85a 965b 005c 02d3 00e0     T.U.W.Z.[.\.....
  408580:	ffff 0000                                   ....

00408584 <OV2640_JPEG_1024x768>:
  408584:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408594:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  4085a4:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  4085b4:	c8c0 96c1 008c 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  4085c4:	0054 8855 005a c05b 015c 02d3 ffff 0000     T.U.Z.[.\.......

004085d4 <OV2640_JPEG_1280x1024>:
  4085d4:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  4085e4:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  4085f4:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408604:	04e0 c8c0 96c1 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408614:	0054 8855 0057 405a f05b 015c 02d3 00e0     T.U.W.Z@[.\.....
  408624:	ffff 0000                                   ....

00408628 <OV2640_JPEG_1600x1200>:
  408628:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408638:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408648:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408658:	04e0 c8c0 96c1 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408668:	0054 8855 0057 905a 2c5b 055c 02d3 00e0     T.U.W.Z.[,\.....
  408678:	ffff 0000                                   ....

0040867c <OV2640_QVGA_YUV422_10FPS>:
  40867c:	000e 8012 05fe 0013 0511 0012 10d5 d40c     ................
  40868c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40869c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  4086ac:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  4086bc:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  4086cc:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4086dc:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  4086ec:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  4086fc:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  40870c:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40871c:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40872c:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40873c:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40874c:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  40875c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040876c <OV2640_QVGA_YUV422_15FPS>:
  40876c:	000e 8012 05fe 0013 0311 0012 10d5 d40c     ................
  40877c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40878c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40879c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  4087ac:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  4087bc:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4087cc:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  4087dc:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  4087ec:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  4087fc:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40880c:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40881c:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40882c:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40883c:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  40884c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040885c <OV2640_QVGA_YUV422_20FPS>:
  40885c:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  40886c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40887c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40888c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40889c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  4088ac:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4088bc:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  4088cc:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  4088dc:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  4088ec:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  4088fc:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40890c:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40891c:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40892c:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  40893c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040894c <OV2640_QVGA_YUV422_30FPS>:
  40894c:	000e 8012 05fe 0013 0111 0012 10d5 d40c     ................
  40895c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40896c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40897c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40898c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40899c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4089ac:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  4089bc:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  4089cc:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  4089dc:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  4089ec:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  4089fc:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  408a0c:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  408a1c:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  408a2c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

00408a3c <OV2640_QVGA_RGB888>:
  408a3c:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  408a4c:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  408a5c:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  408a6c:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  408a7c:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  408a8c:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  408a9c:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  408aac:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  408abc:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  408acc:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  408adc:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  408aec:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  408afc:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  408b0c:	605d 6eac ffbe 00bf 5031 7832 3f82 0112     ]`.n....1P2x.?..
  408b1c:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  408b2c:	0228 ffff                                   (...

00408b30 <OV2640_QQVGA_YUV422>:
  408b30:	000e 8012 0013 0111 0012 10d5 540c 340d     .............T.4
  408b40:	0116 2517 a018 0319 f01a 891b 0322 1829     ...%........".).
  408b50:	f82b 012c a031 f032 c433 b43a 3f36 6004     +.,.1.2.3.:.6?.`
  408b60:	8027 0f3d 803e 403f 7f40 6a41 2942 e544     '.=.>.?@@.AjB)D.
  408b70:	4145 0247 6449 a14a 704b 1a4c 504d 134e     EAG.IdJ.KpL.MPN.
  408b80:	0064 8867 1a68 3814 3c24 3025 7226 9750     d.g.h..8$<%0&rP.
  408b90:	7e51 0052 0053 0020 2321 1438 00e9 5556     Q~R.S. .!#8...VU
  408ba0:	ff57 ff58 ff59 045f 00ec ff13 7f80 3f81     W.X.Y._........?
  408bb0:	3282 0183 1138 7084 0085 0386 0187 0588     .2..8..p........
  408bc0:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  408bd0:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  408be0:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  408bf0:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  408c00:	885c 605d 6eac ffbe 00bf 2831 3c32 0034     \.]`.n....1(2<4.
  408c10:	3f82 0012 3f36 0053 0033 891b 0322 0228     .?..6?S.3...".(.
  408c20:	00d9 ffff                                   ....

00408c24 <OV2640_QQVGA_RGB888>:
  408c24:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  408c34:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  408c44:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  408c54:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  408c64:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  408c74:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  408c84:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  408c94:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  408ca4:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  408cb4:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  408cc4:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  408cd4:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  408ce4:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  408cf4:	605d 6eac ffbe 00bf 2831 3c32 3f82 0112     ]`.n....1(2<.?..
  408d04:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  408d14:	0228 ffff                                   (...

00408d18 <OV2640_TEST_PATTERN>:
  408d18:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  408d28:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  408d38:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  408d48:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  408d58:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  408d68:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  408d78:	9750 7e51 0052 0053 0020 2321 0738 0284     P.Q~R.S. .!#8...
  408d88:	1438 00e9 5556 ff57 ff58 ff59 045f 00ec     8...VUW.X.Y._...
  408d98:	ff13 7f80 3f81 3282 0183 1138 0085 0386     .....?.2..8.....
  408da8:	0187 0588 3089 308d 858f 3093 8595 3099     .....0.0...0...0
  408db8:	859b 089c 129d 239e 459f 55a0 64a1 72a2     .......#.E.U.d.r
  408dc8:	7fa3 8ba4 95a5 a7a6 b5a7 cba8 dda9 ecaa     ................
  408dd8:	1aab 78ce 6ecf 0ad0 0cd1 84d2 90d3 1ed4     ...x.n..........
  408de8:	245a 1f5b 885c 605d 6eac ffbe 00bf 5031     Z$[.\.]`.n....1P
  408df8:	7832 3f82 0012 3f36 0053 c433 891b 0322     2x.?..6?S.3...".
  408e08:	0228 ffff                                   (...

00408e0c <OV2640_VGA_YUV422_20FPS>:
  408e0c:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  408e1c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  408e2c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  408e3c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  408e4c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  408e5c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  408e6c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  408e7c:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  408e8c:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  408e9c:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  408eac:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  408ebc:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  408ecc:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  408edc:	885c 605d 6eac ffbe 00bf a031 f032 3f82     \.]`.n....1.2..?
  408eec:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...
  408efc:	c200 0001 00c0 0000 0800 0000 0000 0000     ................
	...
  408f14:	6d69 6761 5f65 7274 6e61 6673 7265 2520     image_transfer %
  408f24:	0d64 000a 6f43 706d 656c 6574 0a0d 0000     d...Complete....
  408f34:	6f4e 656e 0000 0000 6d49 6761 0065 0000     None....Image...
  408f44:	6573 2074 7973 6320 7020 6f20 6666 0a0d     set sy c p off..
  408f54:	0000 0000 6573 7574 2070 6577 0d62 000a     ....setup web...
  408f64:	6573 2074 6175 7472 662e 6f6c 2077 2030     set uart.flow 0 
  408f74:	6e6f 0d20 000a 0000 6573 2074 7562 2e73     on .....set bus.
  408f84:	6f63 6d6d 6e61 2e64 7872 625f 6675 6973     command.rx_bufsi
  408f94:	657a 3520 3030 0d30 000a 0000 6573 2074     ze 5000.....set 
  408fa4:	7973 6920 6720 7720 616c 206e 3032 0a0d     sy i g wlan 20..
  408fb4:	0000 0000 6573 2074 7973 6920 6720 6e20     ....set sy i g n
  408fc4:	7465 6f77 6b72 3120 0d39 000a 6573 2074     etwork 19...set 
  408fd4:	7973 6920 6720 7320 666f 6174 2070 3132     sy i g softap 21
  408fe4:	0a0d 0000 6573 2074 7973 7473 6d65 632e     ....set system.c
  408ff4:	646d 672e 6970 206f 3331 0a0d 0000 0000     md.gpio 13......
  409004:	6573 2074 6c77 6e20 6f20 3120 0d34 000a     set wl n o 14...
  409014:	6173 6576 0a0d 0000 6572 6f62 746f 0a0d     save....reboot..
  409024:	0000 0000 6f70 6c6c 6120 6c6c 0a0d 0000     ....poll all....

00409034 <_global_impure_ptr>:
  409034:	0018 2000 4e49 0046 6e69 0066 414e 004e     ... INF.inf.NAN.
  409044:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  409054:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  409064:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  409074:	296c 0000 0030 0000                         l)..0...

0040907c <blanks.7223>:
  40907c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040908c <zeroes.7224>:
  40908c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40909c:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  4090ac:	0000 0000                                   ....

004090b0 <__mprec_bigtens>:
  4090b0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  4090c0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4090d0:	bf3c 7f73 4fdd 7515                         <.s..O.u

004090d8 <__mprec_tens>:
  4090d8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  4090e8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  4090f8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  409108:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  409118:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  409128:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  409138:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  409148:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  409158:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  409168:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  409178:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  409188:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  409198:	9db4 79d9 7843 44ea                         ...yCx.D

004091a0 <p05.6055>:
  4091a0:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  4091b0:	4f50 4953 0058 0000 002e 0000               POSIX.......

004091bc <_ctype_>:
  4091bc:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4091cc:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4091dc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4091ec:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  4091fc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40920c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40921c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40922c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40923c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

004092c0 <_init>:
  4092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4092c2:	bf00      	nop
  4092c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4092c6:	bc08      	pop	{r3}
  4092c8:	469e      	mov	lr, r3
  4092ca:	4770      	bx	lr

004092cc <__init_array_start>:
  4092cc:	00405145 	.word	0x00405145

004092d0 <__frame_dummy_init_array_entry>:
  4092d0:	004000f1                                ..@.

004092d4 <_fini>:
  4092d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4092d6:	bf00      	nop
  4092d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4092da:	bc08      	pop	{r3}
  4092dc:	469e      	mov	lr, r3
  4092de:	4770      	bx	lr

004092e0 <__fini_array_start>:
  4092e0:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__atexit_recursive_mutex>:
20000440:	d1fc 2000                                   ... 

20000444 <__malloc_av_>:
	...
2000044c:	0444 2000 0444 2000 044c 2000 044c 2000     D.. D.. L.. L.. 
2000045c:	0454 2000 0454 2000 045c 2000 045c 2000     T.. T.. \.. \.. 
2000046c:	0464 2000 0464 2000 046c 2000 046c 2000     d.. d.. l.. l.. 
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 

2000084c <__malloc_sbrk_base>:
2000084c:	ffff ffff                                   ....

20000850 <__malloc_trim_threshold>:
20000850:	0000 0002                                   ....

20000854 <__global_locale>:
20000854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000934:	79a9 0040 7569 0040 0000 0000 91bc 0040     .y@.iu@.......@.
20000944:	91b8 0040 9058 0040 9058 0040 9058 0040     ..@.X.@.X.@.X.@.
20000954:	9058 0040 9058 0040 9058 0040 9058 0040     X.@.X.@.X.@.X.@.
20000964:	9058 0040 9058 0040 ffff ffff ffff ffff     X.@.X.@.........
20000974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2000099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
