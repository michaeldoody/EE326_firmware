
webcam_firmware2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000091a4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004091a4  004091a4  000191a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20000000  004091ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c864  200009c0  00409b6c  000209c0  2**2
                  ALLOC
  4 .stack        00003004  2000d224  004163d0  000209c0  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209ea  2**0
                  CONTENTS, READONLY
  7 .debug_info   00017166  00000000  00000000  00020a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002f71  00000000  00000000  00037ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007000  00000000  00000000  0003ab1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c70  00000000  00000000  00041b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b68  00000000  00000000  0004278a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00015865  00000000  00000000  000432f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f204  00000000  00000000  00058b57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005211b  00000000  00000000  00067d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000040f8  00000000  00000000  000b9e78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	28 02 01 20 09 29 40 00 d1 29 40 00 d1 29 40 00     (.. .)@..)@..)@.
  400010:	d1 29 40 00 d1 29 40 00 d1 29 40 00 00 00 00 00     .)@..)@..)@.....
	...
  40002c:	d1 29 40 00 d1 29 40 00 00 00 00 00 d1 29 40 00     .)@..)@......)@.
  40003c:	d1 29 40 00 d1 29 40 00 d1 29 40 00 d1 29 40 00     .)@..)@..)@..)@.
  40004c:	d1 29 40 00 d1 29 40 00 d1 29 40 00 d1 29 40 00     .)@..)@..)@..)@.
  40005c:	00 00 00 00 d1 29 40 00 d1 29 40 00 00 00 00 00     .....)@..)@.....
  40006c:	51 0b 40 00 69 0b 40 00 00 00 00 00 d1 29 40 00     Q.@.i.@......)@.
  40007c:	d1 29 40 00 00 00 00 00 00 00 00 00 d1 29 40 00     .)@..........)@.
  40008c:	d1 29 40 00 d1 29 40 00 d1 29 40 00 d1 29 40 00     .)@..)@..)@..)@.
  40009c:	f5 21 40 00 d1 29 40 00 d1 29 40 00 00 00 00 00     .!@..)@..)@.....
	...
  4000b4:	d1 29 40 00 d1 29 40 00 d1 29 40 00 d1 29 40 00     .)@..)@..)@..)@.
  4000c4:	d1 29 40 00 d1 29 40 00                             .)@..)@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009c0 	.word	0x200009c0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004091ac 	.word	0x004091ac

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	004091ac 	.word	0x004091ac
  40012c:	200009c4 	.word	0x200009c4
  400130:	004091ac 	.word	0x004091ac
  400134:	00000000 	.word	0x00000000

00400138 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400138:	b580      	push	{r7, lr}
  40013a:	b082      	sub	sp, #8
  40013c:	af00      	add	r7, sp, #0
  40013e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400140:	687b      	ldr	r3, [r7, #4]
  400142:	2b07      	cmp	r3, #7
  400144:	d831      	bhi.n	4001aa <osc_enable+0x72>
  400146:	a201      	add	r2, pc, #4	; (adr r2, 40014c <osc_enable+0x14>)
  400148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40014c:	004001a9 	.word	0x004001a9
  400150:	0040016d 	.word	0x0040016d
  400154:	00400175 	.word	0x00400175
  400158:	0040017d 	.word	0x0040017d
  40015c:	00400185 	.word	0x00400185
  400160:	0040018d 	.word	0x0040018d
  400164:	00400195 	.word	0x00400195
  400168:	0040019f 	.word	0x0040019f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40016c:	2000      	movs	r0, #0
  40016e:	4b11      	ldr	r3, [pc, #68]	; (4001b4 <osc_enable+0x7c>)
  400170:	4798      	blx	r3
		break;
  400172:	e01a      	b.n	4001aa <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400174:	2001      	movs	r0, #1
  400176:	4b0f      	ldr	r3, [pc, #60]	; (4001b4 <osc_enable+0x7c>)
  400178:	4798      	blx	r3
		break;
  40017a:	e016      	b.n	4001aa <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  40017c:	2000      	movs	r0, #0
  40017e:	4b0e      	ldr	r3, [pc, #56]	; (4001b8 <osc_enable+0x80>)
  400180:	4798      	blx	r3
		break;
  400182:	e012      	b.n	4001aa <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400184:	2010      	movs	r0, #16
  400186:	4b0c      	ldr	r3, [pc, #48]	; (4001b8 <osc_enable+0x80>)
  400188:	4798      	blx	r3
		break;
  40018a:	e00e      	b.n	4001aa <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40018c:	2020      	movs	r0, #32
  40018e:	4b0a      	ldr	r3, [pc, #40]	; (4001b8 <osc_enable+0x80>)
  400190:	4798      	blx	r3
		break;
  400192:	e00a      	b.n	4001aa <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400194:	213e      	movs	r1, #62	; 0x3e
  400196:	2000      	movs	r0, #0
  400198:	4b08      	ldr	r3, [pc, #32]	; (4001bc <osc_enable+0x84>)
  40019a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40019c:	e005      	b.n	4001aa <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40019e:	213e      	movs	r1, #62	; 0x3e
  4001a0:	2001      	movs	r0, #1
  4001a2:	4b06      	ldr	r3, [pc, #24]	; (4001bc <osc_enable+0x84>)
  4001a4:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4001a6:	e000      	b.n	4001aa <osc_enable+0x72>
		break;
  4001a8:	bf00      	nop
	}
}
  4001aa:	bf00      	nop
  4001ac:	3708      	adds	r7, #8
  4001ae:	46bd      	mov	sp, r7
  4001b0:	bd80      	pop	{r7, pc}
  4001b2:	bf00      	nop
  4001b4:	00400c01 	.word	0x00400c01
  4001b8:	00400c6d 	.word	0x00400c6d
  4001bc:	00400cdd 	.word	0x00400cdd

004001c0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4001c0:	b580      	push	{r7, lr}
  4001c2:	b082      	sub	sp, #8
  4001c4:	af00      	add	r7, sp, #0
  4001c6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001c8:	687b      	ldr	r3, [r7, #4]
  4001ca:	2b07      	cmp	r3, #7
  4001cc:	d826      	bhi.n	40021c <osc_is_ready+0x5c>
  4001ce:	a201      	add	r2, pc, #4	; (adr r2, 4001d4 <osc_is_ready+0x14>)
  4001d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001d4:	004001f5 	.word	0x004001f5
  4001d8:	004001f9 	.word	0x004001f9
  4001dc:	004001f9 	.word	0x004001f9
  4001e0:	0040020b 	.word	0x0040020b
  4001e4:	0040020b 	.word	0x0040020b
  4001e8:	0040020b 	.word	0x0040020b
  4001ec:	0040020b 	.word	0x0040020b
  4001f0:	0040020b 	.word	0x0040020b
	case OSC_SLCK_32K_RC:
		return 1;
  4001f4:	2301      	movs	r3, #1
  4001f6:	e012      	b.n	40021e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4001f8:	4b0b      	ldr	r3, [pc, #44]	; (400228 <osc_is_ready+0x68>)
  4001fa:	4798      	blx	r3
  4001fc:	4603      	mov	r3, r0
  4001fe:	2b00      	cmp	r3, #0
  400200:	bf14      	ite	ne
  400202:	2301      	movne	r3, #1
  400204:	2300      	moveq	r3, #0
  400206:	b2db      	uxtb	r3, r3
  400208:	e009      	b.n	40021e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40020a:	4b08      	ldr	r3, [pc, #32]	; (40022c <osc_is_ready+0x6c>)
  40020c:	4798      	blx	r3
  40020e:	4603      	mov	r3, r0
  400210:	2b00      	cmp	r3, #0
  400212:	bf14      	ite	ne
  400214:	2301      	movne	r3, #1
  400216:	2300      	moveq	r3, #0
  400218:	b2db      	uxtb	r3, r3
  40021a:	e000      	b.n	40021e <osc_is_ready+0x5e>
	}

	return 0;
  40021c:	2300      	movs	r3, #0
}
  40021e:	4618      	mov	r0, r3
  400220:	3708      	adds	r7, #8
  400222:	46bd      	mov	sp, r7
  400224:	bd80      	pop	{r7, pc}
  400226:	bf00      	nop
  400228:	00400c39 	.word	0x00400c39
  40022c:	00400d55 	.word	0x00400d55

00400230 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400230:	b480      	push	{r7}
  400232:	b083      	sub	sp, #12
  400234:	af00      	add	r7, sp, #0
  400236:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400238:	687b      	ldr	r3, [r7, #4]
  40023a:	2b07      	cmp	r3, #7
  40023c:	d825      	bhi.n	40028a <osc_get_rate+0x5a>
  40023e:	a201      	add	r2, pc, #4	; (adr r2, 400244 <osc_get_rate+0x14>)
  400240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400244:	00400265 	.word	0x00400265
  400248:	0040026b 	.word	0x0040026b
  40024c:	00400271 	.word	0x00400271
  400250:	00400277 	.word	0x00400277
  400254:	0040027b 	.word	0x0040027b
  400258:	0040027f 	.word	0x0040027f
  40025c:	00400283 	.word	0x00400283
  400260:	00400287 	.word	0x00400287
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400264:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400268:	e010      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40026a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40026e:	e00d      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400274:	e00a      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400276:	4b08      	ldr	r3, [pc, #32]	; (400298 <osc_get_rate+0x68>)
  400278:	e008      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40027a:	4b08      	ldr	r3, [pc, #32]	; (40029c <osc_get_rate+0x6c>)
  40027c:	e006      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_get_rate+0x70>)
  400280:	e004      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400282:	4b07      	ldr	r3, [pc, #28]	; (4002a0 <osc_get_rate+0x70>)
  400284:	e002      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400286:	4b06      	ldr	r3, [pc, #24]	; (4002a0 <osc_get_rate+0x70>)
  400288:	e000      	b.n	40028c <osc_get_rate+0x5c>
	}

	return 0;
  40028a:	2300      	movs	r3, #0
}
  40028c:	4618      	mov	r0, r3
  40028e:	370c      	adds	r7, #12
  400290:	46bd      	mov	sp, r7
  400292:	bc80      	pop	{r7}
  400294:	4770      	bx	lr
  400296:	bf00      	nop
  400298:	003d0900 	.word	0x003d0900
  40029c:	007a1200 	.word	0x007a1200
  4002a0:	00b71b00 	.word	0x00b71b00

004002a4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4002a4:	b580      	push	{r7, lr}
  4002a6:	b082      	sub	sp, #8
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	4603      	mov	r3, r0
  4002ac:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4002ae:	bf00      	nop
  4002b0:	79fb      	ldrb	r3, [r7, #7]
  4002b2:	4618      	mov	r0, r3
  4002b4:	4b05      	ldr	r3, [pc, #20]	; (4002cc <osc_wait_ready+0x28>)
  4002b6:	4798      	blx	r3
  4002b8:	4603      	mov	r3, r0
  4002ba:	f083 0301 	eor.w	r3, r3, #1
  4002be:	b2db      	uxtb	r3, r3
  4002c0:	2b00      	cmp	r3, #0
  4002c2:	d1f5      	bne.n	4002b0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4002c4:	bf00      	nop
  4002c6:	3708      	adds	r7, #8
  4002c8:	46bd      	mov	sp, r7
  4002ca:	bd80      	pop	{r7, pc}
  4002cc:	004001c1 	.word	0x004001c1

004002d0 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4002d0:	b580      	push	{r7, lr}
  4002d2:	b086      	sub	sp, #24
  4002d4:	af00      	add	r7, sp, #0
  4002d6:	60f8      	str	r0, [r7, #12]
  4002d8:	607a      	str	r2, [r7, #4]
  4002da:	603b      	str	r3, [r7, #0]
  4002dc:	460b      	mov	r3, r1
  4002de:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4002e0:	7afb      	ldrb	r3, [r7, #11]
  4002e2:	4618      	mov	r0, r3
  4002e4:	4b0d      	ldr	r3, [pc, #52]	; (40031c <pll_config_init+0x4c>)
  4002e6:	4798      	blx	r3
  4002e8:	4602      	mov	r2, r0
  4002ea:	687b      	ldr	r3, [r7, #4]
  4002ec:	fbb2 f3f3 	udiv	r3, r2, r3
  4002f0:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4002f2:	697b      	ldr	r3, [r7, #20]
  4002f4:	683a      	ldr	r2, [r7, #0]
  4002f6:	fb02 f303 	mul.w	r3, r2, r3
  4002fa:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4002fc:	683b      	ldr	r3, [r7, #0]
  4002fe:	3b01      	subs	r3, #1
  400300:	041a      	lsls	r2, r3, #16
  400302:	4b07      	ldr	r3, [pc, #28]	; (400320 <pll_config_init+0x50>)
  400304:	4013      	ands	r3, r2
  400306:	687a      	ldr	r2, [r7, #4]
  400308:	b2d2      	uxtb	r2, r2
  40030a:	4313      	orrs	r3, r2
  40030c:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400310:	68fb      	ldr	r3, [r7, #12]
  400312:	601a      	str	r2, [r3, #0]
}
  400314:	bf00      	nop
  400316:	3718      	adds	r7, #24
  400318:	46bd      	mov	sp, r7
  40031a:	bd80      	pop	{r7, pc}
  40031c:	00400231 	.word	0x00400231
  400320:	07ff0000 	.word	0x07ff0000

00400324 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400324:	b580      	push	{r7, lr}
  400326:	b082      	sub	sp, #8
  400328:	af00      	add	r7, sp, #0
  40032a:	6078      	str	r0, [r7, #4]
  40032c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40032e:	683b      	ldr	r3, [r7, #0]
  400330:	2b00      	cmp	r3, #0
  400332:	d108      	bne.n	400346 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400334:	4b09      	ldr	r3, [pc, #36]	; (40035c <pll_enable+0x38>)
  400336:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400338:	4a09      	ldr	r2, [pc, #36]	; (400360 <pll_enable+0x3c>)
  40033a:	687b      	ldr	r3, [r7, #4]
  40033c:	681b      	ldr	r3, [r3, #0]
  40033e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400342:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400344:	e005      	b.n	400352 <pll_enable+0x2e>
		pmc_disable_pllbck();
  400346:	4b07      	ldr	r3, [pc, #28]	; (400364 <pll_enable+0x40>)
  400348:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40034a:	4a05      	ldr	r2, [pc, #20]	; (400360 <pll_enable+0x3c>)
  40034c:	687b      	ldr	r3, [r7, #4]
  40034e:	681b      	ldr	r3, [r3, #0]
  400350:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  400352:	bf00      	nop
  400354:	3708      	adds	r7, #8
  400356:	46bd      	mov	sp, r7
  400358:	bd80      	pop	{r7, pc}
  40035a:	bf00      	nop
  40035c:	00400d6d 	.word	0x00400d6d
  400360:	400e0400 	.word	0x400e0400
  400364:	00400ded 	.word	0x00400ded

00400368 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400368:	b580      	push	{r7, lr}
  40036a:	b082      	sub	sp, #8
  40036c:	af00      	add	r7, sp, #0
  40036e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400370:	687b      	ldr	r3, [r7, #4]
  400372:	2b00      	cmp	r3, #0
  400374:	d103      	bne.n	40037e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400376:	4b05      	ldr	r3, [pc, #20]	; (40038c <pll_is_locked+0x24>)
  400378:	4798      	blx	r3
  40037a:	4603      	mov	r3, r0
  40037c:	e002      	b.n	400384 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40037e:	4b04      	ldr	r3, [pc, #16]	; (400390 <pll_is_locked+0x28>)
  400380:	4798      	blx	r3
  400382:	4603      	mov	r3, r0
	}
}
  400384:	4618      	mov	r0, r3
  400386:	3708      	adds	r7, #8
  400388:	46bd      	mov	sp, r7
  40038a:	bd80      	pop	{r7, pc}
  40038c:	00400d85 	.word	0x00400d85
  400390:	00400e05 	.word	0x00400e05

00400394 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400394:	b580      	push	{r7, lr}
  400396:	b082      	sub	sp, #8
  400398:	af00      	add	r7, sp, #0
  40039a:	4603      	mov	r3, r0
  40039c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40039e:	79fb      	ldrb	r3, [r7, #7]
  4003a0:	3b03      	subs	r3, #3
  4003a2:	2b04      	cmp	r3, #4
  4003a4:	d808      	bhi.n	4003b8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4003a6:	79fb      	ldrb	r3, [r7, #7]
  4003a8:	4618      	mov	r0, r3
  4003aa:	4b06      	ldr	r3, [pc, #24]	; (4003c4 <pll_enable_source+0x30>)
  4003ac:	4798      	blx	r3
		osc_wait_ready(e_src);
  4003ae:	79fb      	ldrb	r3, [r7, #7]
  4003b0:	4618      	mov	r0, r3
  4003b2:	4b05      	ldr	r3, [pc, #20]	; (4003c8 <pll_enable_source+0x34>)
  4003b4:	4798      	blx	r3
		break;
  4003b6:	e000      	b.n	4003ba <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4003b8:	bf00      	nop
	}
}
  4003ba:	bf00      	nop
  4003bc:	3708      	adds	r7, #8
  4003be:	46bd      	mov	sp, r7
  4003c0:	bd80      	pop	{r7, pc}
  4003c2:	bf00      	nop
  4003c4:	00400139 	.word	0x00400139
  4003c8:	004002a5 	.word	0x004002a5

004003cc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4003cc:	b580      	push	{r7, lr}
  4003ce:	b082      	sub	sp, #8
  4003d0:	af00      	add	r7, sp, #0
  4003d2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4003d4:	bf00      	nop
  4003d6:	6878      	ldr	r0, [r7, #4]
  4003d8:	4b04      	ldr	r3, [pc, #16]	; (4003ec <pll_wait_for_lock+0x20>)
  4003da:	4798      	blx	r3
  4003dc:	4603      	mov	r3, r0
  4003de:	2b00      	cmp	r3, #0
  4003e0:	d0f9      	beq.n	4003d6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4003e2:	2300      	movs	r3, #0
}
  4003e4:	4618      	mov	r0, r3
  4003e6:	3708      	adds	r7, #8
  4003e8:	46bd      	mov	sp, r7
  4003ea:	bd80      	pop	{r7, pc}
  4003ec:	00400369 	.word	0x00400369

004003f0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4003f4:	2006      	movs	r0, #6
  4003f6:	4b04      	ldr	r3, [pc, #16]	; (400408 <sysclk_get_main_hz+0x18>)
  4003f8:	4798      	blx	r3
  4003fa:	4602      	mov	r2, r0
  4003fc:	4613      	mov	r3, r2
  4003fe:	009b      	lsls	r3, r3, #2
  400400:	4413      	add	r3, r2
  400402:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400404:	4618      	mov	r0, r3
  400406:	bd80      	pop	{r7, pc}
  400408:	00400231 	.word	0x00400231

0040040c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40040c:	b580      	push	{r7, lr}
  40040e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400410:	4b02      	ldr	r3, [pc, #8]	; (40041c <sysclk_get_cpu_hz+0x10>)
  400412:	4798      	blx	r3
  400414:	4603      	mov	r3, r0
  400416:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400418:	4618      	mov	r0, r3
  40041a:	bd80      	pop	{r7, pc}
  40041c:	004003f1 	.word	0x004003f1

00400420 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400420:	b590      	push	{r4, r7, lr}
  400422:	b083      	sub	sp, #12
  400424:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400426:	4811      	ldr	r0, [pc, #68]	; (40046c <sysclk_init+0x4c>)
  400428:	4b11      	ldr	r3, [pc, #68]	; (400470 <sysclk_init+0x50>)
  40042a:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  40042c:	2006      	movs	r0, #6
  40042e:	4b11      	ldr	r3, [pc, #68]	; (400474 <sysclk_init+0x54>)
  400430:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400432:	1d38      	adds	r0, r7, #4
  400434:	2314      	movs	r3, #20
  400436:	2201      	movs	r2, #1
  400438:	2106      	movs	r1, #6
  40043a:	4c0f      	ldr	r4, [pc, #60]	; (400478 <sysclk_init+0x58>)
  40043c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40043e:	1d3b      	adds	r3, r7, #4
  400440:	2100      	movs	r1, #0
  400442:	4618      	mov	r0, r3
  400444:	4b0d      	ldr	r3, [pc, #52]	; (40047c <sysclk_init+0x5c>)
  400446:	4798      	blx	r3
		pll_wait_for_lock(0);
  400448:	2000      	movs	r0, #0
  40044a:	4b0d      	ldr	r3, [pc, #52]	; (400480 <sysclk_init+0x60>)
  40044c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40044e:	2010      	movs	r0, #16
  400450:	4b0c      	ldr	r3, [pc, #48]	; (400484 <sysclk_init+0x64>)
  400452:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400454:	4b0c      	ldr	r3, [pc, #48]	; (400488 <sysclk_init+0x68>)
  400456:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400458:	4b0c      	ldr	r3, [pc, #48]	; (40048c <sysclk_init+0x6c>)
  40045a:	4798      	blx	r3
  40045c:	4603      	mov	r3, r0
  40045e:	4618      	mov	r0, r3
  400460:	4b03      	ldr	r3, [pc, #12]	; (400470 <sysclk_init+0x50>)
  400462:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400464:	bf00      	nop
  400466:	370c      	adds	r7, #12
  400468:	46bd      	mov	sp, r7
  40046a:	bd90      	pop	{r4, r7, pc}
  40046c:	07270e00 	.word	0x07270e00
  400470:	00402b71 	.word	0x00402b71
  400474:	00400395 	.word	0x00400395
  400478:	004002d1 	.word	0x004002d1
  40047c:	00400325 	.word	0x00400325
  400480:	004003cd 	.word	0x004003cd
  400484:	00400b81 	.word	0x00400b81
  400488:	004029d9 	.word	0x004029d9
  40048c:	0040040d 	.word	0x0040040d

00400490 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400490:	b480      	push	{r7}
  400492:	b085      	sub	sp, #20
  400494:	af00      	add	r7, sp, #0
  400496:	60f8      	str	r0, [r7, #12]
  400498:	60b9      	str	r1, [r7, #8]
  40049a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40049c:	687b      	ldr	r3, [r7, #4]
  40049e:	2b00      	cmp	r3, #0
  4004a0:	d003      	beq.n	4004aa <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4004a2:	68fb      	ldr	r3, [r7, #12]
  4004a4:	68ba      	ldr	r2, [r7, #8]
  4004a6:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4004a8:	e002      	b.n	4004b0 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  4004aa:	68fb      	ldr	r3, [r7, #12]
  4004ac:	68ba      	ldr	r2, [r7, #8]
  4004ae:	661a      	str	r2, [r3, #96]	; 0x60
}
  4004b0:	bf00      	nop
  4004b2:	3714      	adds	r7, #20
  4004b4:	46bd      	mov	sp, r7
  4004b6:	bc80      	pop	{r7}
  4004b8:	4770      	bx	lr

004004ba <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  4004ba:	b480      	push	{r7}
  4004bc:	b085      	sub	sp, #20
  4004be:	af00      	add	r7, sp, #0
  4004c0:	60f8      	str	r0, [r7, #12]
  4004c2:	60b9      	str	r1, [r7, #8]
  4004c4:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4004c6:	68fb      	ldr	r3, [r7, #12]
  4004c8:	68ba      	ldr	r2, [r7, #8]
  4004ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4004ce:	687b      	ldr	r3, [r7, #4]
  4004d0:	005b      	lsls	r3, r3, #1
  4004d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4004d6:	fbb2 f3f3 	udiv	r3, r2, r3
  4004da:	3b01      	subs	r3, #1
  4004dc:	f3c3 020d 	ubfx	r2, r3, #0, #14
  4004e0:	68fb      	ldr	r3, [r7, #12]
  4004e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  4004e6:	bf00      	nop
  4004e8:	3714      	adds	r7, #20
  4004ea:	46bd      	mov	sp, r7
  4004ec:	bc80      	pop	{r7}
  4004ee:	4770      	bx	lr

004004f0 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4004f0:	b480      	push	{r7}
  4004f2:	b087      	sub	sp, #28
  4004f4:	af00      	add	r7, sp, #0
  4004f6:	60f8      	str	r0, [r7, #12]
  4004f8:	60b9      	str	r1, [r7, #8]
  4004fa:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4004fc:	68fb      	ldr	r3, [r7, #12]
  4004fe:	687a      	ldr	r2, [r7, #4]
  400500:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400502:	68bb      	ldr	r3, [r7, #8]
  400504:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400508:	d04a      	beq.n	4005a0 <pio_set_peripheral+0xb0>
  40050a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40050e:	d808      	bhi.n	400522 <pio_set_peripheral+0x32>
  400510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400514:	d016      	beq.n	400544 <pio_set_peripheral+0x54>
  400516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40051a:	d02c      	beq.n	400576 <pio_set_peripheral+0x86>
  40051c:	2b00      	cmp	r3, #0
  40051e:	d069      	beq.n	4005f4 <pio_set_peripheral+0x104>
  400520:	e064      	b.n	4005ec <pio_set_peripheral+0xfc>
  400522:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400526:	d065      	beq.n	4005f4 <pio_set_peripheral+0x104>
  400528:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40052c:	d803      	bhi.n	400536 <pio_set_peripheral+0x46>
  40052e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400532:	d04a      	beq.n	4005ca <pio_set_peripheral+0xda>
  400534:	e05a      	b.n	4005ec <pio_set_peripheral+0xfc>
  400536:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40053a:	d05b      	beq.n	4005f4 <pio_set_peripheral+0x104>
  40053c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400540:	d058      	beq.n	4005f4 <pio_set_peripheral+0x104>
  400542:	e053      	b.n	4005ec <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400544:	68fb      	ldr	r3, [r7, #12]
  400546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400548:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40054a:	68fb      	ldr	r3, [r7, #12]
  40054c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40054e:	687b      	ldr	r3, [r7, #4]
  400550:	43d9      	mvns	r1, r3
  400552:	697b      	ldr	r3, [r7, #20]
  400554:	400b      	ands	r3, r1
  400556:	401a      	ands	r2, r3
  400558:	68fb      	ldr	r3, [r7, #12]
  40055a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40055c:	68fb      	ldr	r3, [r7, #12]
  40055e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400560:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400562:	68fb      	ldr	r3, [r7, #12]
  400564:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400566:	687b      	ldr	r3, [r7, #4]
  400568:	43d9      	mvns	r1, r3
  40056a:	697b      	ldr	r3, [r7, #20]
  40056c:	400b      	ands	r3, r1
  40056e:	401a      	ands	r2, r3
  400570:	68fb      	ldr	r3, [r7, #12]
  400572:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400574:	e03a      	b.n	4005ec <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400576:	68fb      	ldr	r3, [r7, #12]
  400578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40057a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40057c:	687a      	ldr	r2, [r7, #4]
  40057e:	697b      	ldr	r3, [r7, #20]
  400580:	431a      	orrs	r2, r3
  400582:	68fb      	ldr	r3, [r7, #12]
  400584:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400586:	68fb      	ldr	r3, [r7, #12]
  400588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40058a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40058c:	68fb      	ldr	r3, [r7, #12]
  40058e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400590:	687b      	ldr	r3, [r7, #4]
  400592:	43d9      	mvns	r1, r3
  400594:	697b      	ldr	r3, [r7, #20]
  400596:	400b      	ands	r3, r1
  400598:	401a      	ands	r2, r3
  40059a:	68fb      	ldr	r3, [r7, #12]
  40059c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40059e:	e025      	b.n	4005ec <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005a0:	68fb      	ldr	r3, [r7, #12]
  4005a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4005a4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4005a6:	68fb      	ldr	r3, [r7, #12]
  4005a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005aa:	687b      	ldr	r3, [r7, #4]
  4005ac:	43d9      	mvns	r1, r3
  4005ae:	697b      	ldr	r3, [r7, #20]
  4005b0:	400b      	ands	r3, r1
  4005b2:	401a      	ands	r2, r3
  4005b4:	68fb      	ldr	r3, [r7, #12]
  4005b6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005b8:	68fb      	ldr	r3, [r7, #12]
  4005ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4005bc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4005be:	687a      	ldr	r2, [r7, #4]
  4005c0:	697b      	ldr	r3, [r7, #20]
  4005c2:	431a      	orrs	r2, r3
  4005c4:	68fb      	ldr	r3, [r7, #12]
  4005c6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4005c8:	e010      	b.n	4005ec <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005ca:	68fb      	ldr	r3, [r7, #12]
  4005cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4005ce:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4005d0:	687a      	ldr	r2, [r7, #4]
  4005d2:	697b      	ldr	r3, [r7, #20]
  4005d4:	431a      	orrs	r2, r3
  4005d6:	68fb      	ldr	r3, [r7, #12]
  4005d8:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005da:	68fb      	ldr	r3, [r7, #12]
  4005dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4005de:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4005e0:	687a      	ldr	r2, [r7, #4]
  4005e2:	697b      	ldr	r3, [r7, #20]
  4005e4:	431a      	orrs	r2, r3
  4005e6:	68fb      	ldr	r3, [r7, #12]
  4005e8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4005ea:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4005ec:	68fb      	ldr	r3, [r7, #12]
  4005ee:	687a      	ldr	r2, [r7, #4]
  4005f0:	605a      	str	r2, [r3, #4]
  4005f2:	e000      	b.n	4005f6 <pio_set_peripheral+0x106>
		return;
  4005f4:	bf00      	nop
}
  4005f6:	371c      	adds	r7, #28
  4005f8:	46bd      	mov	sp, r7
  4005fa:	bc80      	pop	{r7}
  4005fc:	4770      	bx	lr
	...

00400600 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400600:	b580      	push	{r7, lr}
  400602:	b084      	sub	sp, #16
  400604:	af00      	add	r7, sp, #0
  400606:	60f8      	str	r0, [r7, #12]
  400608:	60b9      	str	r1, [r7, #8]
  40060a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  40060c:	68b9      	ldr	r1, [r7, #8]
  40060e:	68f8      	ldr	r0, [r7, #12]
  400610:	4b19      	ldr	r3, [pc, #100]	; (400678 <pio_set_input+0x78>)
  400612:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400614:	687b      	ldr	r3, [r7, #4]
  400616:	f003 0301 	and.w	r3, r3, #1
  40061a:	461a      	mov	r2, r3
  40061c:	68b9      	ldr	r1, [r7, #8]
  40061e:	68f8      	ldr	r0, [r7, #12]
  400620:	4b16      	ldr	r3, [pc, #88]	; (40067c <pio_set_input+0x7c>)
  400622:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400624:	687b      	ldr	r3, [r7, #4]
  400626:	f003 030a 	and.w	r3, r3, #10
  40062a:	2b00      	cmp	r3, #0
  40062c:	d003      	beq.n	400636 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	68ba      	ldr	r2, [r7, #8]
  400632:	621a      	str	r2, [r3, #32]
  400634:	e002      	b.n	40063c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400636:	68fb      	ldr	r3, [r7, #12]
  400638:	68ba      	ldr	r2, [r7, #8]
  40063a:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40063c:	687b      	ldr	r3, [r7, #4]
  40063e:	f003 0302 	and.w	r3, r3, #2
  400642:	2b00      	cmp	r3, #0
  400644:	d004      	beq.n	400650 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400646:	68fb      	ldr	r3, [r7, #12]
  400648:	68ba      	ldr	r2, [r7, #8]
  40064a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40064e:	e008      	b.n	400662 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400650:	687b      	ldr	r3, [r7, #4]
  400652:	f003 0308 	and.w	r3, r3, #8
  400656:	2b00      	cmp	r3, #0
  400658:	d003      	beq.n	400662 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40065a:	68fb      	ldr	r3, [r7, #12]
  40065c:	68ba      	ldr	r2, [r7, #8]
  40065e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400662:	68fb      	ldr	r3, [r7, #12]
  400664:	68ba      	ldr	r2, [r7, #8]
  400666:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400668:	68fb      	ldr	r3, [r7, #12]
  40066a:	68ba      	ldr	r2, [r7, #8]
  40066c:	601a      	str	r2, [r3, #0]
}
  40066e:	bf00      	nop
  400670:	3710      	adds	r7, #16
  400672:	46bd      	mov	sp, r7
  400674:	bd80      	pop	{r7, pc}
  400676:	bf00      	nop
  400678:	00400769 	.word	0x00400769
  40067c:	00400491 	.word	0x00400491

00400680 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400680:	b580      	push	{r7, lr}
  400682:	b084      	sub	sp, #16
  400684:	af00      	add	r7, sp, #0
  400686:	60f8      	str	r0, [r7, #12]
  400688:	60b9      	str	r1, [r7, #8]
  40068a:	607a      	str	r2, [r7, #4]
  40068c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40068e:	68b9      	ldr	r1, [r7, #8]
  400690:	68f8      	ldr	r0, [r7, #12]
  400692:	4b12      	ldr	r3, [pc, #72]	; (4006dc <pio_set_output+0x5c>)
  400694:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400696:	69ba      	ldr	r2, [r7, #24]
  400698:	68b9      	ldr	r1, [r7, #8]
  40069a:	68f8      	ldr	r0, [r7, #12]
  40069c:	4b10      	ldr	r3, [pc, #64]	; (4006e0 <pio_set_output+0x60>)
  40069e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4006a0:	683b      	ldr	r3, [r7, #0]
  4006a2:	2b00      	cmp	r3, #0
  4006a4:	d003      	beq.n	4006ae <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4006a6:	68fb      	ldr	r3, [r7, #12]
  4006a8:	68ba      	ldr	r2, [r7, #8]
  4006aa:	651a      	str	r2, [r3, #80]	; 0x50
  4006ac:	e002      	b.n	4006b4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4006ae:	68fb      	ldr	r3, [r7, #12]
  4006b0:	68ba      	ldr	r2, [r7, #8]
  4006b2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4006b4:	687b      	ldr	r3, [r7, #4]
  4006b6:	2b00      	cmp	r3, #0
  4006b8:	d003      	beq.n	4006c2 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4006ba:	68fb      	ldr	r3, [r7, #12]
  4006bc:	68ba      	ldr	r2, [r7, #8]
  4006be:	631a      	str	r2, [r3, #48]	; 0x30
  4006c0:	e002      	b.n	4006c8 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4006c2:	68fb      	ldr	r3, [r7, #12]
  4006c4:	68ba      	ldr	r2, [r7, #8]
  4006c6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4006c8:	68fb      	ldr	r3, [r7, #12]
  4006ca:	68ba      	ldr	r2, [r7, #8]
  4006cc:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4006ce:	68fb      	ldr	r3, [r7, #12]
  4006d0:	68ba      	ldr	r2, [r7, #8]
  4006d2:	601a      	str	r2, [r3, #0]
}
  4006d4:	bf00      	nop
  4006d6:	3710      	adds	r7, #16
  4006d8:	46bd      	mov	sp, r7
  4006da:	bd80      	pop	{r7, pc}
  4006dc:	00400769 	.word	0x00400769
  4006e0:	00400491 	.word	0x00400491

004006e4 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  4006e4:	b480      	push	{r7}
  4006e6:	b085      	sub	sp, #20
  4006e8:	af00      	add	r7, sp, #0
  4006ea:	60f8      	str	r0, [r7, #12]
  4006ec:	60b9      	str	r1, [r7, #8]
  4006ee:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4006f0:	687b      	ldr	r3, [r7, #4]
  4006f2:	f003 0310 	and.w	r3, r3, #16
  4006f6:	2b00      	cmp	r3, #0
  4006f8:	d020      	beq.n	40073c <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4006fa:	68fb      	ldr	r3, [r7, #12]
  4006fc:	68ba      	ldr	r2, [r7, #8]
  4006fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400702:	687b      	ldr	r3, [r7, #4]
  400704:	f003 0320 	and.w	r3, r3, #32
  400708:	2b00      	cmp	r3, #0
  40070a:	d004      	beq.n	400716 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40070c:	68fb      	ldr	r3, [r7, #12]
  40070e:	68ba      	ldr	r2, [r7, #8]
  400710:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400714:	e003      	b.n	40071e <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400716:	68fb      	ldr	r3, [r7, #12]
  400718:	68ba      	ldr	r2, [r7, #8]
  40071a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40071e:	687b      	ldr	r3, [r7, #4]
  400720:	f003 0340 	and.w	r3, r3, #64	; 0x40
  400724:	2b00      	cmp	r3, #0
  400726:	d004      	beq.n	400732 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400728:	68fb      	ldr	r3, [r7, #12]
  40072a:	68ba      	ldr	r2, [r7, #8]
  40072c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400730:	e008      	b.n	400744 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  400732:	68fb      	ldr	r3, [r7, #12]
  400734:	68ba      	ldr	r2, [r7, #8]
  400736:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  40073a:	e003      	b.n	400744 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  40073c:	68fb      	ldr	r3, [r7, #12]
  40073e:	68ba      	ldr	r2, [r7, #8]
  400740:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  400744:	bf00      	nop
  400746:	3714      	adds	r7, #20
  400748:	46bd      	mov	sp, r7
  40074a:	bc80      	pop	{r7}
  40074c:	4770      	bx	lr

0040074e <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40074e:	b480      	push	{r7}
  400750:	b083      	sub	sp, #12
  400752:	af00      	add	r7, sp, #0
  400754:	6078      	str	r0, [r7, #4]
  400756:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  400758:	687b      	ldr	r3, [r7, #4]
  40075a:	683a      	ldr	r2, [r7, #0]
  40075c:	641a      	str	r2, [r3, #64]	; 0x40
}
  40075e:	bf00      	nop
  400760:	370c      	adds	r7, #12
  400762:	46bd      	mov	sp, r7
  400764:	bc80      	pop	{r7}
  400766:	4770      	bx	lr

00400768 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400768:	b480      	push	{r7}
  40076a:	b083      	sub	sp, #12
  40076c:	af00      	add	r7, sp, #0
  40076e:	6078      	str	r0, [r7, #4]
  400770:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400772:	687b      	ldr	r3, [r7, #4]
  400774:	683a      	ldr	r2, [r7, #0]
  400776:	645a      	str	r2, [r3, #68]	; 0x44
}
  400778:	bf00      	nop
  40077a:	370c      	adds	r7, #12
  40077c:	46bd      	mov	sp, r7
  40077e:	bc80      	pop	{r7}
  400780:	4770      	bx	lr

00400782 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400782:	b480      	push	{r7}
  400784:	b083      	sub	sp, #12
  400786:	af00      	add	r7, sp, #0
  400788:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40078a:	687b      	ldr	r3, [r7, #4]
  40078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40078e:	4618      	mov	r0, r3
  400790:	370c      	adds	r7, #12
  400792:	46bd      	mov	sp, r7
  400794:	bc80      	pop	{r7}
  400796:	4770      	bx	lr

00400798 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400798:	b480      	push	{r7}
  40079a:	b083      	sub	sp, #12
  40079c:	af00      	add	r7, sp, #0
  40079e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4007a0:	687b      	ldr	r3, [r7, #4]
  4007a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4007a4:	4618      	mov	r0, r3
  4007a6:	370c      	adds	r7, #12
  4007a8:	46bd      	mov	sp, r7
  4007aa:	bc80      	pop	{r7}
  4007ac:	4770      	bx	lr
	...

004007b0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4007b0:	b590      	push	{r4, r7, lr}
  4007b2:	b087      	sub	sp, #28
  4007b4:	af02      	add	r7, sp, #8
  4007b6:	6078      	str	r0, [r7, #4]
  4007b8:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4007ba:	6878      	ldr	r0, [r7, #4]
  4007bc:	4b63      	ldr	r3, [pc, #396]	; (40094c <pio_configure_pin+0x19c>)
  4007be:	4798      	blx	r3
  4007c0:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4007c2:	683b      	ldr	r3, [r7, #0]
  4007c4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4007c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4007cc:	d067      	beq.n	40089e <pio_configure_pin+0xee>
  4007ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4007d2:	d809      	bhi.n	4007e8 <pio_configure_pin+0x38>
  4007d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4007d8:	d02b      	beq.n	400832 <pio_configure_pin+0x82>
  4007da:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4007de:	d043      	beq.n	400868 <pio_configure_pin+0xb8>
  4007e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4007e4:	d00a      	beq.n	4007fc <pio_configure_pin+0x4c>
  4007e6:	e0a9      	b.n	40093c <pio_configure_pin+0x18c>
  4007e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4007ec:	d07e      	beq.n	4008ec <pio_configure_pin+0x13c>
  4007ee:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4007f2:	d07b      	beq.n	4008ec <pio_configure_pin+0x13c>
  4007f4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4007f8:	d06c      	beq.n	4008d4 <pio_configure_pin+0x124>
  4007fa:	e09f      	b.n	40093c <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4007fc:	687b      	ldr	r3, [r7, #4]
  4007fe:	f003 031f 	and.w	r3, r3, #31
  400802:	2201      	movs	r2, #1
  400804:	fa02 f303 	lsl.w	r3, r2, r3
  400808:	461a      	mov	r2, r3
  40080a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40080e:	68f8      	ldr	r0, [r7, #12]
  400810:	4b4f      	ldr	r3, [pc, #316]	; (400950 <pio_configure_pin+0x1a0>)
  400812:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400814:	687b      	ldr	r3, [r7, #4]
  400816:	f003 031f 	and.w	r3, r3, #31
  40081a:	2201      	movs	r2, #1
  40081c:	fa02 f303 	lsl.w	r3, r2, r3
  400820:	4619      	mov	r1, r3
  400822:	683b      	ldr	r3, [r7, #0]
  400824:	f003 0301 	and.w	r3, r3, #1
  400828:	461a      	mov	r2, r3
  40082a:	68f8      	ldr	r0, [r7, #12]
  40082c:	4b49      	ldr	r3, [pc, #292]	; (400954 <pio_configure_pin+0x1a4>)
  40082e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400830:	e086      	b.n	400940 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400832:	687b      	ldr	r3, [r7, #4]
  400834:	f003 031f 	and.w	r3, r3, #31
  400838:	2201      	movs	r2, #1
  40083a:	fa02 f303 	lsl.w	r3, r2, r3
  40083e:	461a      	mov	r2, r3
  400840:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400844:	68f8      	ldr	r0, [r7, #12]
  400846:	4b42      	ldr	r3, [pc, #264]	; (400950 <pio_configure_pin+0x1a0>)
  400848:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40084a:	687b      	ldr	r3, [r7, #4]
  40084c:	f003 031f 	and.w	r3, r3, #31
  400850:	2201      	movs	r2, #1
  400852:	fa02 f303 	lsl.w	r3, r2, r3
  400856:	4619      	mov	r1, r3
  400858:	683b      	ldr	r3, [r7, #0]
  40085a:	f003 0301 	and.w	r3, r3, #1
  40085e:	461a      	mov	r2, r3
  400860:	68f8      	ldr	r0, [r7, #12]
  400862:	4b3c      	ldr	r3, [pc, #240]	; (400954 <pio_configure_pin+0x1a4>)
  400864:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400866:	e06b      	b.n	400940 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400868:	687b      	ldr	r3, [r7, #4]
  40086a:	f003 031f 	and.w	r3, r3, #31
  40086e:	2201      	movs	r2, #1
  400870:	fa02 f303 	lsl.w	r3, r2, r3
  400874:	461a      	mov	r2, r3
  400876:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40087a:	68f8      	ldr	r0, [r7, #12]
  40087c:	4b34      	ldr	r3, [pc, #208]	; (400950 <pio_configure_pin+0x1a0>)
  40087e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400880:	687b      	ldr	r3, [r7, #4]
  400882:	f003 031f 	and.w	r3, r3, #31
  400886:	2201      	movs	r2, #1
  400888:	fa02 f303 	lsl.w	r3, r2, r3
  40088c:	4619      	mov	r1, r3
  40088e:	683b      	ldr	r3, [r7, #0]
  400890:	f003 0301 	and.w	r3, r3, #1
  400894:	461a      	mov	r2, r3
  400896:	68f8      	ldr	r0, [r7, #12]
  400898:	4b2e      	ldr	r3, [pc, #184]	; (400954 <pio_configure_pin+0x1a4>)
  40089a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40089c:	e050      	b.n	400940 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40089e:	687b      	ldr	r3, [r7, #4]
  4008a0:	f003 031f 	and.w	r3, r3, #31
  4008a4:	2201      	movs	r2, #1
  4008a6:	fa02 f303 	lsl.w	r3, r2, r3
  4008aa:	461a      	mov	r2, r3
  4008ac:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4008b0:	68f8      	ldr	r0, [r7, #12]
  4008b2:	4b27      	ldr	r3, [pc, #156]	; (400950 <pio_configure_pin+0x1a0>)
  4008b4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4008b6:	687b      	ldr	r3, [r7, #4]
  4008b8:	f003 031f 	and.w	r3, r3, #31
  4008bc:	2201      	movs	r2, #1
  4008be:	fa02 f303 	lsl.w	r3, r2, r3
  4008c2:	4619      	mov	r1, r3
  4008c4:	683b      	ldr	r3, [r7, #0]
  4008c6:	f003 0301 	and.w	r3, r3, #1
  4008ca:	461a      	mov	r2, r3
  4008cc:	68f8      	ldr	r0, [r7, #12]
  4008ce:	4b21      	ldr	r3, [pc, #132]	; (400954 <pio_configure_pin+0x1a4>)
  4008d0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4008d2:	e035      	b.n	400940 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4008d4:	687b      	ldr	r3, [r7, #4]
  4008d6:	f003 031f 	and.w	r3, r3, #31
  4008da:	2201      	movs	r2, #1
  4008dc:	fa02 f303 	lsl.w	r3, r2, r3
  4008e0:	683a      	ldr	r2, [r7, #0]
  4008e2:	4619      	mov	r1, r3
  4008e4:	68f8      	ldr	r0, [r7, #12]
  4008e6:	4b1c      	ldr	r3, [pc, #112]	; (400958 <pio_configure_pin+0x1a8>)
  4008e8:	4798      	blx	r3
		break;
  4008ea:	e029      	b.n	400940 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4008ec:	687b      	ldr	r3, [r7, #4]
  4008ee:	f003 031f 	and.w	r3, r3, #31
  4008f2:	2201      	movs	r2, #1
  4008f4:	fa02 f303 	lsl.w	r3, r2, r3
  4008f8:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4008fa:	683b      	ldr	r3, [r7, #0]
  4008fc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400900:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400904:	bf0c      	ite	eq
  400906:	2301      	moveq	r3, #1
  400908:	2300      	movne	r3, #0
  40090a:	b2db      	uxtb	r3, r3
  40090c:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40090e:	683b      	ldr	r3, [r7, #0]
  400910:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400914:	2b00      	cmp	r3, #0
  400916:	bf14      	ite	ne
  400918:	2301      	movne	r3, #1
  40091a:	2300      	moveq	r3, #0
  40091c:	b2db      	uxtb	r3, r3
  40091e:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  400920:	683b      	ldr	r3, [r7, #0]
  400922:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400926:	2b00      	cmp	r3, #0
  400928:	bf14      	ite	ne
  40092a:	2301      	movne	r3, #1
  40092c:	2300      	moveq	r3, #0
  40092e:	b2db      	uxtb	r3, r3
  400930:	9300      	str	r3, [sp, #0]
  400932:	4603      	mov	r3, r0
  400934:	68f8      	ldr	r0, [r7, #12]
  400936:	4c09      	ldr	r4, [pc, #36]	; (40095c <pio_configure_pin+0x1ac>)
  400938:	47a0      	blx	r4
		break;
  40093a:	e001      	b.n	400940 <pio_configure_pin+0x190>

	default:
		return 0;
  40093c:	2300      	movs	r3, #0
  40093e:	e000      	b.n	400942 <pio_configure_pin+0x192>
	}

	return 1;
  400940:	2301      	movs	r3, #1
}
  400942:	4618      	mov	r0, r3
  400944:	3714      	adds	r7, #20
  400946:	46bd      	mov	sp, r7
  400948:	bd90      	pop	{r4, r7, pc}
  40094a:	bf00      	nop
  40094c:	00400961 	.word	0x00400961
  400950:	004004f1 	.word	0x004004f1
  400954:	00400491 	.word	0x00400491
  400958:	00400601 	.word	0x00400601
  40095c:	00400681 	.word	0x00400681

00400960 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  400960:	b480      	push	{r7}
  400962:	b085      	sub	sp, #20
  400964:	af00      	add	r7, sp, #0
  400966:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400968:	687b      	ldr	r3, [r7, #4]
  40096a:	095b      	lsrs	r3, r3, #5
  40096c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400970:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400974:	025b      	lsls	r3, r3, #9
  400976:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  400978:	68fb      	ldr	r3, [r7, #12]
}
  40097a:	4618      	mov	r0, r3
  40097c:	3714      	adds	r7, #20
  40097e:	46bd      	mov	sp, r7
  400980:	bc80      	pop	{r7}
  400982:	4770      	bx	lr

00400984 <pio_capture_enable>:
 * \brief Enable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
  400984:	b480      	push	{r7}
  400986:	b083      	sub	sp, #12
  400988:	af00      	add	r7, sp, #0
  40098a:	6078      	str	r0, [r7, #4]
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  40098c:	687b      	ldr	r3, [r7, #4]
  40098e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  400992:	f043 0201 	orr.w	r2, r3, #1
  400996:	687b      	ldr	r3, [r7, #4]
  400998:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pio_capture_enable_flag = true;
  40099c:	4b03      	ldr	r3, [pc, #12]	; (4009ac <pio_capture_enable+0x28>)
  40099e:	2201      	movs	r2, #1
  4009a0:	601a      	str	r2, [r3, #0]
}
  4009a2:	bf00      	nop
  4009a4:	370c      	adds	r7, #12
  4009a6:	46bd      	mov	sp, r7
  4009a8:	bc80      	pop	{r7}
  4009aa:	4770      	bx	lr
  4009ac:	20000ab4 	.word	0x20000ab4

004009b0 <pio_capture_disable>:
 * \brief Disable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_disable(Pio *p_pio)
{
  4009b0:	b480      	push	{r7}
  4009b2:	b083      	sub	sp, #12
  4009b4:	af00      	add	r7, sp, #0
  4009b6:	6078      	str	r0, [r7, #4]
	p_pio->PIO_PCMR &= (~PIO_PCMR_PCEN);
  4009b8:	687b      	ldr	r3, [r7, #4]
  4009ba:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4009be:	f023 0201 	bic.w	r2, r3, #1
  4009c2:	687b      	ldr	r3, [r7, #4]
  4009c4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pio_capture_enable_flag = false;
  4009c8:	4b03      	ldr	r3, [pc, #12]	; (4009d8 <pio_capture_disable+0x28>)
  4009ca:	2200      	movs	r2, #0
  4009cc:	601a      	str	r2, [r3, #0]
}
  4009ce:	bf00      	nop
  4009d0:	370c      	adds	r7, #12
  4009d2:	46bd      	mov	sp, r7
  4009d4:	bc80      	pop	{r7}
  4009d6:	4770      	bx	lr
  4009d8:	20000ab4 	.word	0x20000ab4

004009dc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4009dc:	b580      	push	{r7, lr}
  4009de:	b084      	sub	sp, #16
  4009e0:	af00      	add	r7, sp, #0
  4009e2:	6078      	str	r0, [r7, #4]
  4009e4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4009e6:	6878      	ldr	r0, [r7, #4]
  4009e8:	4b2c      	ldr	r3, [pc, #176]	; (400a9c <pio_handler_process+0xc0>)
  4009ea:	4798      	blx	r3
  4009ec:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4009ee:	6878      	ldr	r0, [r7, #4]
  4009f0:	4b2b      	ldr	r3, [pc, #172]	; (400aa0 <pio_handler_process+0xc4>)
  4009f2:	4798      	blx	r3
  4009f4:	4602      	mov	r2, r0
  4009f6:	68fb      	ldr	r3, [r7, #12]
  4009f8:	4013      	ands	r3, r2
  4009fa:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4009fc:	68fb      	ldr	r3, [r7, #12]
  4009fe:	2b00      	cmp	r3, #0
  400a00:	d03c      	beq.n	400a7c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400a02:	2300      	movs	r3, #0
  400a04:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400a06:	e034      	b.n	400a72 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400a08:	4a26      	ldr	r2, [pc, #152]	; (400aa4 <pio_handler_process+0xc8>)
  400a0a:	68bb      	ldr	r3, [r7, #8]
  400a0c:	011b      	lsls	r3, r3, #4
  400a0e:	4413      	add	r3, r2
  400a10:	681a      	ldr	r2, [r3, #0]
  400a12:	683b      	ldr	r3, [r7, #0]
  400a14:	429a      	cmp	r2, r3
  400a16:	d126      	bne.n	400a66 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a18:	4a22      	ldr	r2, [pc, #136]	; (400aa4 <pio_handler_process+0xc8>)
  400a1a:	68bb      	ldr	r3, [r7, #8]
  400a1c:	011b      	lsls	r3, r3, #4
  400a1e:	4413      	add	r3, r2
  400a20:	3304      	adds	r3, #4
  400a22:	681a      	ldr	r2, [r3, #0]
  400a24:	68fb      	ldr	r3, [r7, #12]
  400a26:	4013      	ands	r3, r2
  400a28:	2b00      	cmp	r3, #0
  400a2a:	d01c      	beq.n	400a66 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a2c:	4a1d      	ldr	r2, [pc, #116]	; (400aa4 <pio_handler_process+0xc8>)
  400a2e:	68bb      	ldr	r3, [r7, #8]
  400a30:	011b      	lsls	r3, r3, #4
  400a32:	4413      	add	r3, r2
  400a34:	330c      	adds	r3, #12
  400a36:	681b      	ldr	r3, [r3, #0]
  400a38:	491a      	ldr	r1, [pc, #104]	; (400aa4 <pio_handler_process+0xc8>)
  400a3a:	68ba      	ldr	r2, [r7, #8]
  400a3c:	0112      	lsls	r2, r2, #4
  400a3e:	440a      	add	r2, r1
  400a40:	6810      	ldr	r0, [r2, #0]
  400a42:	4918      	ldr	r1, [pc, #96]	; (400aa4 <pio_handler_process+0xc8>)
  400a44:	68ba      	ldr	r2, [r7, #8]
  400a46:	0112      	lsls	r2, r2, #4
  400a48:	440a      	add	r2, r1
  400a4a:	3204      	adds	r2, #4
  400a4c:	6812      	ldr	r2, [r2, #0]
  400a4e:	4611      	mov	r1, r2
  400a50:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400a52:	4a14      	ldr	r2, [pc, #80]	; (400aa4 <pio_handler_process+0xc8>)
  400a54:	68bb      	ldr	r3, [r7, #8]
  400a56:	011b      	lsls	r3, r3, #4
  400a58:	4413      	add	r3, r2
  400a5a:	3304      	adds	r3, #4
  400a5c:	681b      	ldr	r3, [r3, #0]
  400a5e:	43db      	mvns	r3, r3
  400a60:	68fa      	ldr	r2, [r7, #12]
  400a62:	4013      	ands	r3, r2
  400a64:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400a66:	68bb      	ldr	r3, [r7, #8]
  400a68:	3301      	adds	r3, #1
  400a6a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a6c:	68bb      	ldr	r3, [r7, #8]
  400a6e:	2b06      	cmp	r3, #6
  400a70:	d803      	bhi.n	400a7a <pio_handler_process+0x9e>
		while (status != 0) {
  400a72:	68fb      	ldr	r3, [r7, #12]
  400a74:	2b00      	cmp	r3, #0
  400a76:	d1c7      	bne.n	400a08 <pio_handler_process+0x2c>
  400a78:	e000      	b.n	400a7c <pio_handler_process+0xa0>
				break;
  400a7a:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400a7c:	4b0a      	ldr	r3, [pc, #40]	; (400aa8 <pio_handler_process+0xcc>)
  400a7e:	681b      	ldr	r3, [r3, #0]
  400a80:	2b00      	cmp	r3, #0
  400a82:	d007      	beq.n	400a94 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400a84:	4b09      	ldr	r3, [pc, #36]	; (400aac <pio_handler_process+0xd0>)
  400a86:	681b      	ldr	r3, [r3, #0]
  400a88:	2b00      	cmp	r3, #0
  400a8a:	d003      	beq.n	400a94 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400a8c:	4b07      	ldr	r3, [pc, #28]	; (400aac <pio_handler_process+0xd0>)
  400a8e:	681b      	ldr	r3, [r3, #0]
  400a90:	6878      	ldr	r0, [r7, #4]
  400a92:	4798      	blx	r3
		}
	}
#endif
}
  400a94:	bf00      	nop
  400a96:	3710      	adds	r7, #16
  400a98:	46bd      	mov	sp, r7
  400a9a:	bd80      	pop	{r7, pc}
  400a9c:	00400783 	.word	0x00400783
  400aa0:	00400799 	.word	0x00400799
  400aa4:	200009dc 	.word	0x200009dc
  400aa8:	20000ab4 	.word	0x20000ab4
  400aac:	20000a50 	.word	0x20000a50

00400ab0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400ab0:	b580      	push	{r7, lr}
  400ab2:	b086      	sub	sp, #24
  400ab4:	af00      	add	r7, sp, #0
  400ab6:	60f8      	str	r0, [r7, #12]
  400ab8:	60b9      	str	r1, [r7, #8]
  400aba:	607a      	str	r2, [r7, #4]
  400abc:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400abe:	4b21      	ldr	r3, [pc, #132]	; (400b44 <pio_handler_set+0x94>)
  400ac0:	681b      	ldr	r3, [r3, #0]
  400ac2:	2b06      	cmp	r3, #6
  400ac4:	d901      	bls.n	400aca <pio_handler_set+0x1a>
		return 1;
  400ac6:	2301      	movs	r3, #1
  400ac8:	e038      	b.n	400b3c <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400aca:	2300      	movs	r3, #0
  400acc:	75fb      	strb	r3, [r7, #23]
  400ace:	e011      	b.n	400af4 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400ad0:	7dfb      	ldrb	r3, [r7, #23]
  400ad2:	011b      	lsls	r3, r3, #4
  400ad4:	4a1c      	ldr	r2, [pc, #112]	; (400b48 <pio_handler_set+0x98>)
  400ad6:	4413      	add	r3, r2
  400ad8:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400ada:	693b      	ldr	r3, [r7, #16]
  400adc:	681a      	ldr	r2, [r3, #0]
  400ade:	68bb      	ldr	r3, [r7, #8]
  400ae0:	429a      	cmp	r2, r3
  400ae2:	d104      	bne.n	400aee <pio_handler_set+0x3e>
  400ae4:	693b      	ldr	r3, [r7, #16]
  400ae6:	685a      	ldr	r2, [r3, #4]
  400ae8:	687b      	ldr	r3, [r7, #4]
  400aea:	429a      	cmp	r2, r3
  400aec:	d008      	beq.n	400b00 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400aee:	7dfb      	ldrb	r3, [r7, #23]
  400af0:	3301      	adds	r3, #1
  400af2:	75fb      	strb	r3, [r7, #23]
  400af4:	7dfa      	ldrb	r2, [r7, #23]
  400af6:	4b13      	ldr	r3, [pc, #76]	; (400b44 <pio_handler_set+0x94>)
  400af8:	681b      	ldr	r3, [r3, #0]
  400afa:	429a      	cmp	r2, r3
  400afc:	d9e8      	bls.n	400ad0 <pio_handler_set+0x20>
  400afe:	e000      	b.n	400b02 <pio_handler_set+0x52>
			break;
  400b00:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400b02:	693b      	ldr	r3, [r7, #16]
  400b04:	68ba      	ldr	r2, [r7, #8]
  400b06:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400b08:	693b      	ldr	r3, [r7, #16]
  400b0a:	687a      	ldr	r2, [r7, #4]
  400b0c:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  400b0e:	693b      	ldr	r3, [r7, #16]
  400b10:	683a      	ldr	r2, [r7, #0]
  400b12:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400b14:	693b      	ldr	r3, [r7, #16]
  400b16:	6a3a      	ldr	r2, [r7, #32]
  400b18:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400b1a:	7dfa      	ldrb	r2, [r7, #23]
  400b1c:	4b09      	ldr	r3, [pc, #36]	; (400b44 <pio_handler_set+0x94>)
  400b1e:	681b      	ldr	r3, [r3, #0]
  400b20:	3301      	adds	r3, #1
  400b22:	429a      	cmp	r2, r3
  400b24:	d104      	bne.n	400b30 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400b26:	4b07      	ldr	r3, [pc, #28]	; (400b44 <pio_handler_set+0x94>)
  400b28:	681b      	ldr	r3, [r3, #0]
  400b2a:	3301      	adds	r3, #1
  400b2c:	4a05      	ldr	r2, [pc, #20]	; (400b44 <pio_handler_set+0x94>)
  400b2e:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400b30:	683a      	ldr	r2, [r7, #0]
  400b32:	6879      	ldr	r1, [r7, #4]
  400b34:	68f8      	ldr	r0, [r7, #12]
  400b36:	4b05      	ldr	r3, [pc, #20]	; (400b4c <pio_handler_set+0x9c>)
  400b38:	4798      	blx	r3

	return 0;
  400b3a:	2300      	movs	r3, #0
}
  400b3c:	4618      	mov	r0, r3
  400b3e:	3718      	adds	r7, #24
  400b40:	46bd      	mov	sp, r7
  400b42:	bd80      	pop	{r7, pc}
  400b44:	20000a4c 	.word	0x20000a4c
  400b48:	200009dc 	.word	0x200009dc
  400b4c:	004006e5 	.word	0x004006e5

00400b50 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400b50:	b580      	push	{r7, lr}
  400b52:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400b54:	210b      	movs	r1, #11
  400b56:	4802      	ldr	r0, [pc, #8]	; (400b60 <PIOA_Handler+0x10>)
  400b58:	4b02      	ldr	r3, [pc, #8]	; (400b64 <PIOA_Handler+0x14>)
  400b5a:	4798      	blx	r3
}
  400b5c:	bf00      	nop
  400b5e:	bd80      	pop	{r7, pc}
  400b60:	400e0e00 	.word	0x400e0e00
  400b64:	004009dd 	.word	0x004009dd

00400b68 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400b68:	b580      	push	{r7, lr}
  400b6a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400b6c:	210c      	movs	r1, #12
  400b6e:	4802      	ldr	r0, [pc, #8]	; (400b78 <PIOB_Handler+0x10>)
  400b70:	4b02      	ldr	r3, [pc, #8]	; (400b7c <PIOB_Handler+0x14>)
  400b72:	4798      	blx	r3
}
  400b74:	bf00      	nop
  400b76:	bd80      	pop	{r7, pc}
  400b78:	400e1000 	.word	0x400e1000
  400b7c:	004009dd 	.word	0x004009dd

00400b80 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400b80:	b480      	push	{r7}
  400b82:	b085      	sub	sp, #20
  400b84:	af00      	add	r7, sp, #0
  400b86:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b88:	491c      	ldr	r1, [pc, #112]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400b8a:	4b1c      	ldr	r3, [pc, #112]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400b92:	687b      	ldr	r3, [r7, #4]
  400b94:	4313      	orrs	r3, r2
  400b96:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b98:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400b9c:	60fb      	str	r3, [r7, #12]
  400b9e:	e007      	b.n	400bb0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ba0:	68fb      	ldr	r3, [r7, #12]
  400ba2:	2b00      	cmp	r3, #0
  400ba4:	d101      	bne.n	400baa <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400ba6:	2301      	movs	r3, #1
  400ba8:	e023      	b.n	400bf2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400baa:	68fb      	ldr	r3, [r7, #12]
  400bac:	3b01      	subs	r3, #1
  400bae:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bb0:	4b12      	ldr	r3, [pc, #72]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400bb4:	f003 0308 	and.w	r3, r3, #8
  400bb8:	2b00      	cmp	r3, #0
  400bba:	d0f1      	beq.n	400ba0 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400bbc:	4a0f      	ldr	r2, [pc, #60]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400bbe:	4b0f      	ldr	r3, [pc, #60]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bc2:	f023 0303 	bic.w	r3, r3, #3
  400bc6:	f043 0302 	orr.w	r3, r3, #2
  400bca:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400bd0:	60fb      	str	r3, [r7, #12]
  400bd2:	e007      	b.n	400be4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400bd4:	68fb      	ldr	r3, [r7, #12]
  400bd6:	2b00      	cmp	r3, #0
  400bd8:	d101      	bne.n	400bde <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400bda:	2301      	movs	r3, #1
  400bdc:	e009      	b.n	400bf2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400bde:	68fb      	ldr	r3, [r7, #12]
  400be0:	3b01      	subs	r3, #1
  400be2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400be4:	4b05      	ldr	r3, [pc, #20]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400be8:	f003 0308 	and.w	r3, r3, #8
  400bec:	2b00      	cmp	r3, #0
  400bee:	d0f1      	beq.n	400bd4 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  400bf0:	2300      	movs	r3, #0
}
  400bf2:	4618      	mov	r0, r3
  400bf4:	3714      	adds	r7, #20
  400bf6:	46bd      	mov	sp, r7
  400bf8:	bc80      	pop	{r7}
  400bfa:	4770      	bx	lr
  400bfc:	400e0400 	.word	0x400e0400

00400c00 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400c00:	b480      	push	{r7}
  400c02:	b083      	sub	sp, #12
  400c04:	af00      	add	r7, sp, #0
  400c06:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400c08:	687b      	ldr	r3, [r7, #4]
  400c0a:	2b01      	cmp	r3, #1
  400c0c:	d107      	bne.n	400c1e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400c0e:	4a08      	ldr	r2, [pc, #32]	; (400c30 <pmc_switch_sclk_to_32kxtal+0x30>)
  400c10:	4b07      	ldr	r3, [pc, #28]	; (400c30 <pmc_switch_sclk_to_32kxtal+0x30>)
  400c12:	689b      	ldr	r3, [r3, #8]
  400c14:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  400c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  400c1c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400c1e:	4b04      	ldr	r3, [pc, #16]	; (400c30 <pmc_switch_sclk_to_32kxtal+0x30>)
  400c20:	4a04      	ldr	r2, [pc, #16]	; (400c34 <pmc_switch_sclk_to_32kxtal+0x34>)
  400c22:	601a      	str	r2, [r3, #0]
}
  400c24:	bf00      	nop
  400c26:	370c      	adds	r7, #12
  400c28:	46bd      	mov	sp, r7
  400c2a:	bc80      	pop	{r7}
  400c2c:	4770      	bx	lr
  400c2e:	bf00      	nop
  400c30:	400e1410 	.word	0x400e1410
  400c34:	a5000008 	.word	0xa5000008

00400c38 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400c38:	b480      	push	{r7}
  400c3a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400c3c:	4b09      	ldr	r3, [pc, #36]	; (400c64 <pmc_osc_is_ready_32kxtal+0x2c>)
  400c3e:	695b      	ldr	r3, [r3, #20]
  400c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400c44:	2b00      	cmp	r3, #0
  400c46:	d007      	beq.n	400c58 <pmc_osc_is_ready_32kxtal+0x20>
  400c48:	4b07      	ldr	r3, [pc, #28]	; (400c68 <pmc_osc_is_ready_32kxtal+0x30>)
  400c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400c50:	2b00      	cmp	r3, #0
  400c52:	d001      	beq.n	400c58 <pmc_osc_is_ready_32kxtal+0x20>
  400c54:	2301      	movs	r3, #1
  400c56:	e000      	b.n	400c5a <pmc_osc_is_ready_32kxtal+0x22>
  400c58:	2300      	movs	r3, #0
}
  400c5a:	4618      	mov	r0, r3
  400c5c:	46bd      	mov	sp, r7
  400c5e:	bc80      	pop	{r7}
  400c60:	4770      	bx	lr
  400c62:	bf00      	nop
  400c64:	400e1410 	.word	0x400e1410
  400c68:	400e0400 	.word	0x400e0400

00400c6c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400c6c:	b480      	push	{r7}
  400c6e:	b083      	sub	sp, #12
  400c70:	af00      	add	r7, sp, #0
  400c72:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400c74:	4a18      	ldr	r2, [pc, #96]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400c76:	4b18      	ldr	r3, [pc, #96]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400c78:	6a1b      	ldr	r3, [r3, #32]
  400c7a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400c7e:	f043 0308 	orr.w	r3, r3, #8
  400c82:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400c84:	bf00      	nop
  400c86:	4b14      	ldr	r3, [pc, #80]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400c8e:	2b00      	cmp	r3, #0
  400c90:	d0f9      	beq.n	400c86 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400c92:	4911      	ldr	r1, [pc, #68]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400c94:	4b10      	ldr	r3, [pc, #64]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400c96:	6a1b      	ldr	r3, [r3, #32]
  400c98:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400ca0:	687a      	ldr	r2, [r7, #4]
  400ca2:	4313      	orrs	r3, r2
  400ca4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400ca8:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400caa:	bf00      	nop
  400cac:	4b0a      	ldr	r3, [pc, #40]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400cb4:	2b00      	cmp	r3, #0
  400cb6:	d0f9      	beq.n	400cac <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400cb8:	4a07      	ldr	r2, [pc, #28]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400cba:	4b07      	ldr	r3, [pc, #28]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400cbc:	6a1b      	ldr	r3, [r3, #32]
  400cbe:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  400cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400cc6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400cca:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400ccc:	bf00      	nop
  400cce:	370c      	adds	r7, #12
  400cd0:	46bd      	mov	sp, r7
  400cd2:	bc80      	pop	{r7}
  400cd4:	4770      	bx	lr
  400cd6:	bf00      	nop
  400cd8:	400e0400 	.word	0x400e0400

00400cdc <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400cdc:	b480      	push	{r7}
  400cde:	b083      	sub	sp, #12
  400ce0:	af00      	add	r7, sp, #0
  400ce2:	6078      	str	r0, [r7, #4]
  400ce4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400ce6:	687b      	ldr	r3, [r7, #4]
  400ce8:	2b00      	cmp	r3, #0
  400cea:	d008      	beq.n	400cfe <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400cec:	4916      	ldr	r1, [pc, #88]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400cee:	4b16      	ldr	r3, [pc, #88]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400cf0:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400cf2:	4a16      	ldr	r2, [pc, #88]	; (400d4c <pmc_switch_mainck_to_xtal+0x70>)
  400cf4:	401a      	ands	r2, r3
  400cf6:	4b16      	ldr	r3, [pc, #88]	; (400d50 <pmc_switch_mainck_to_xtal+0x74>)
  400cf8:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400cfa:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400cfc:	e01e      	b.n	400d3c <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400cfe:	4912      	ldr	r1, [pc, #72]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400d00:	4b11      	ldr	r3, [pc, #68]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400d02:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400d04:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400d08:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400d0c:	683a      	ldr	r2, [r7, #0]
  400d0e:	0212      	lsls	r2, r2, #8
  400d10:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400d12:	4313      	orrs	r3, r2
  400d14:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400d18:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d1c:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400d1e:	bf00      	nop
  400d20:	4b09      	ldr	r3, [pc, #36]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d24:	f003 0301 	and.w	r3, r3, #1
  400d28:	2b00      	cmp	r3, #0
  400d2a:	d0f9      	beq.n	400d20 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400d2c:	4a06      	ldr	r2, [pc, #24]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400d2e:	4b06      	ldr	r3, [pc, #24]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400d30:	6a1b      	ldr	r3, [r3, #32]
  400d32:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400d3a:	6213      	str	r3, [r2, #32]
}
  400d3c:	bf00      	nop
  400d3e:	370c      	adds	r7, #12
  400d40:	46bd      	mov	sp, r7
  400d42:	bc80      	pop	{r7}
  400d44:	4770      	bx	lr
  400d46:	bf00      	nop
  400d48:	400e0400 	.word	0x400e0400
  400d4c:	fec8fffc 	.word	0xfec8fffc
  400d50:	01370002 	.word	0x01370002

00400d54 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400d54:	b480      	push	{r7}
  400d56:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400d58:	4b03      	ldr	r3, [pc, #12]	; (400d68 <pmc_osc_is_ready_mainck+0x14>)
  400d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400d60:	4618      	mov	r0, r3
  400d62:	46bd      	mov	sp, r7
  400d64:	bc80      	pop	{r7}
  400d66:	4770      	bx	lr
  400d68:	400e0400 	.word	0x400e0400

00400d6c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400d6c:	b480      	push	{r7}
  400d6e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400d70:	4b03      	ldr	r3, [pc, #12]	; (400d80 <pmc_disable_pllack+0x14>)
  400d72:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400d76:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400d78:	bf00      	nop
  400d7a:	46bd      	mov	sp, r7
  400d7c:	bc80      	pop	{r7}
  400d7e:	4770      	bx	lr
  400d80:	400e0400 	.word	0x400e0400

00400d84 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400d84:	b480      	push	{r7}
  400d86:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400d88:	4b03      	ldr	r3, [pc, #12]	; (400d98 <pmc_is_locked_pllack+0x14>)
  400d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d8c:	f003 0302 	and.w	r3, r3, #2
}
  400d90:	4618      	mov	r0, r3
  400d92:	46bd      	mov	sp, r7
  400d94:	bc80      	pop	{r7}
  400d96:	4770      	bx	lr
  400d98:	400e0400 	.word	0x400e0400

00400d9c <pmc_enable_pllbck>:
 * \param mulb PLLB multiplier.
 * \param pllbcount PLLB counter.
 * \param divb Divider.
 */
void pmc_enable_pllbck(uint32_t mulb, uint32_t pllbcount, uint32_t divb)
{
  400d9c:	b580      	push	{r7, lr}
  400d9e:	b084      	sub	sp, #16
  400da0:	af00      	add	r7, sp, #0
  400da2:	60f8      	str	r0, [r7, #12]
  400da4:	60b9      	str	r1, [r7, #8]
  400da6:	607a      	str	r2, [r7, #4]
	/* first disable the PLL to unlock the lock */
	pmc_disable_pllbck();
  400da8:	4b0d      	ldr	r3, [pc, #52]	; (400de0 <pmc_enable_pllbck+0x44>)
  400daa:	4798      	blx	r3

#if SAMG55
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(divb) |
		CKGR_PLLAR_PLLACOUNT(pllbcount) | CKGR_PLLAR_MULA(mulb);
#else
	PMC->CKGR_PLLBR =
  400dac:	480d      	ldr	r0, [pc, #52]	; (400de4 <pmc_enable_pllbck+0x48>)
			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
  400dae:	687b      	ldr	r3, [r7, #4]
  400db0:	b2da      	uxtb	r2, r3
  400db2:	68bb      	ldr	r3, [r7, #8]
  400db4:	021b      	lsls	r3, r3, #8
  400db6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
  400dba:	431a      	orrs	r2, r3
			| CKGR_PLLBR_MULB(mulb);
  400dbc:	68fb      	ldr	r3, [r7, #12]
  400dbe:	0419      	lsls	r1, r3, #16
  400dc0:	4b09      	ldr	r3, [pc, #36]	; (400de8 <pmc_enable_pllbck+0x4c>)
  400dc2:	400b      	ands	r3, r1
  400dc4:	4313      	orrs	r3, r2
	PMC->CKGR_PLLBR =
  400dc6:	62c3      	str	r3, [r0, #44]	; 0x2c
#endif
	while ((PMC->PMC_SR & PMC_SR_LOCKB) == 0);
  400dc8:	bf00      	nop
  400dca:	4b06      	ldr	r3, [pc, #24]	; (400de4 <pmc_enable_pllbck+0x48>)
  400dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400dce:	f003 0304 	and.w	r3, r3, #4
  400dd2:	2b00      	cmp	r3, #0
  400dd4:	d0f9      	beq.n	400dca <pmc_enable_pllbck+0x2e>
}
  400dd6:	bf00      	nop
  400dd8:	3710      	adds	r7, #16
  400dda:	46bd      	mov	sp, r7
  400ddc:	bd80      	pop	{r7, pc}
  400dde:	bf00      	nop
  400de0:	00400ded 	.word	0x00400ded
  400de4:	400e0400 	.word	0x400e0400
  400de8:	07ff0000 	.word	0x07ff0000

00400dec <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  400dec:	b480      	push	{r7}
  400dee:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  400df0:	4b03      	ldr	r3, [pc, #12]	; (400e00 <pmc_disable_pllbck+0x14>)
  400df2:	2200      	movs	r2, #0
  400df4:	62da      	str	r2, [r3, #44]	; 0x2c
}
  400df6:	bf00      	nop
  400df8:	46bd      	mov	sp, r7
  400dfa:	bc80      	pop	{r7}
  400dfc:	4770      	bx	lr
  400dfe:	bf00      	nop
  400e00:	400e0400 	.word	0x400e0400

00400e04 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  400e04:	b480      	push	{r7}
  400e06:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  400e08:	4b03      	ldr	r3, [pc, #12]	; (400e18 <pmc_is_locked_pllbck+0x14>)
  400e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e0c:	f003 0304 	and.w	r3, r3, #4
}
  400e10:	4618      	mov	r0, r3
  400e12:	46bd      	mov	sp, r7
  400e14:	bc80      	pop	{r7}
  400e16:	4770      	bx	lr
  400e18:	400e0400 	.word	0x400e0400

00400e1c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400e1c:	b480      	push	{r7}
  400e1e:	b083      	sub	sp, #12
  400e20:	af00      	add	r7, sp, #0
  400e22:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400e24:	687b      	ldr	r3, [r7, #4]
  400e26:	2b22      	cmp	r3, #34	; 0x22
  400e28:	d901      	bls.n	400e2e <pmc_enable_periph_clk+0x12>
		return 1;
  400e2a:	2301      	movs	r3, #1
  400e2c:	e02f      	b.n	400e8e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400e2e:	687b      	ldr	r3, [r7, #4]
  400e30:	2b1f      	cmp	r3, #31
  400e32:	d813      	bhi.n	400e5c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400e34:	4b18      	ldr	r3, [pc, #96]	; (400e98 <pmc_enable_periph_clk+0x7c>)
  400e36:	699a      	ldr	r2, [r3, #24]
  400e38:	2101      	movs	r1, #1
  400e3a:	687b      	ldr	r3, [r7, #4]
  400e3c:	fa01 f303 	lsl.w	r3, r1, r3
  400e40:	401a      	ands	r2, r3
  400e42:	2101      	movs	r1, #1
  400e44:	687b      	ldr	r3, [r7, #4]
  400e46:	fa01 f303 	lsl.w	r3, r1, r3
  400e4a:	429a      	cmp	r2, r3
  400e4c:	d01e      	beq.n	400e8c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400e4e:	4a12      	ldr	r2, [pc, #72]	; (400e98 <pmc_enable_periph_clk+0x7c>)
  400e50:	2101      	movs	r1, #1
  400e52:	687b      	ldr	r3, [r7, #4]
  400e54:	fa01 f303 	lsl.w	r3, r1, r3
  400e58:	6113      	str	r3, [r2, #16]
  400e5a:	e017      	b.n	400e8c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400e5c:	687b      	ldr	r3, [r7, #4]
  400e5e:	3b20      	subs	r3, #32
  400e60:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400e62:	4b0d      	ldr	r3, [pc, #52]	; (400e98 <pmc_enable_periph_clk+0x7c>)
  400e64:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400e68:	2101      	movs	r1, #1
  400e6a:	687b      	ldr	r3, [r7, #4]
  400e6c:	fa01 f303 	lsl.w	r3, r1, r3
  400e70:	401a      	ands	r2, r3
  400e72:	2101      	movs	r1, #1
  400e74:	687b      	ldr	r3, [r7, #4]
  400e76:	fa01 f303 	lsl.w	r3, r1, r3
  400e7a:	429a      	cmp	r2, r3
  400e7c:	d006      	beq.n	400e8c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400e7e:	4a06      	ldr	r2, [pc, #24]	; (400e98 <pmc_enable_periph_clk+0x7c>)
  400e80:	2101      	movs	r1, #1
  400e82:	687b      	ldr	r3, [r7, #4]
  400e84:	fa01 f303 	lsl.w	r3, r1, r3
  400e88:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400e8c:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400e8e:	4618      	mov	r0, r3
  400e90:	370c      	adds	r7, #12
  400e92:	46bd      	mov	sp, r7
  400e94:	bc80      	pop	{r7}
  400e96:	4770      	bx	lr
  400e98:	400e0400 	.word	0x400e0400

00400e9c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400e9c:	b480      	push	{r7}
  400e9e:	b087      	sub	sp, #28
  400ea0:	af00      	add	r7, sp, #0
  400ea2:	60f8      	str	r0, [r7, #12]
  400ea4:	60b9      	str	r1, [r7, #8]
  400ea6:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400ea8:	68fa      	ldr	r2, [r7, #12]
  400eaa:	68bb      	ldr	r3, [r7, #8]
  400eac:	019b      	lsls	r3, r3, #6
  400eae:	4413      	add	r3, r2
  400eb0:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400eb2:	697b      	ldr	r3, [r7, #20]
  400eb4:	2202      	movs	r2, #2
  400eb6:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400eb8:	697b      	ldr	r3, [r7, #20]
  400eba:	f04f 32ff 	mov.w	r2, #4294967295
  400ebe:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400ec0:	697b      	ldr	r3, [r7, #20]
  400ec2:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400ec4:	697b      	ldr	r3, [r7, #20]
  400ec6:	687a      	ldr	r2, [r7, #4]
  400ec8:	605a      	str	r2, [r3, #4]
}
  400eca:	bf00      	nop
  400ecc:	371c      	adds	r7, #28
  400ece:	46bd      	mov	sp, r7
  400ed0:	bc80      	pop	{r7}
  400ed2:	4770      	bx	lr

00400ed4 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400ed4:	b480      	push	{r7}
  400ed6:	b083      	sub	sp, #12
  400ed8:	af00      	add	r7, sp, #0
  400eda:	6078      	str	r0, [r7, #4]
  400edc:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400ede:	687a      	ldr	r2, [r7, #4]
  400ee0:	683b      	ldr	r3, [r7, #0]
  400ee2:	019b      	lsls	r3, r3, #6
  400ee4:	4413      	add	r3, r2
  400ee6:	2205      	movs	r2, #5
  400ee8:	601a      	str	r2, [r3, #0]
}
  400eea:	bf00      	nop
  400eec:	370c      	adds	r7, #12
  400eee:	46bd      	mov	sp, r7
  400ef0:	bc80      	pop	{r7}
  400ef2:	4770      	bx	lr

00400ef4 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  400ef4:	b480      	push	{r7}
  400ef6:	b085      	sub	sp, #20
  400ef8:	af00      	add	r7, sp, #0
  400efa:	60f8      	str	r0, [r7, #12]
  400efc:	60b9      	str	r1, [r7, #8]
  400efe:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400f00:	68fa      	ldr	r2, [r7, #12]
  400f02:	68bb      	ldr	r3, [r7, #8]
  400f04:	019b      	lsls	r3, r3, #6
  400f06:	4413      	add	r3, r2
  400f08:	331c      	adds	r3, #28
  400f0a:	687a      	ldr	r2, [r7, #4]
  400f0c:	601a      	str	r2, [r3, #0]
}
  400f0e:	bf00      	nop
  400f10:	3714      	adds	r7, #20
  400f12:	46bd      	mov	sp, r7
  400f14:	bc80      	pop	{r7}
  400f16:	4770      	bx	lr

00400f18 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  400f18:	b480      	push	{r7}
  400f1a:	b087      	sub	sp, #28
  400f1c:	af00      	add	r7, sp, #0
  400f1e:	60f8      	str	r0, [r7, #12]
  400f20:	60b9      	str	r1, [r7, #8]
  400f22:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400f24:	68fa      	ldr	r2, [r7, #12]
  400f26:	68bb      	ldr	r3, [r7, #8]
  400f28:	019b      	lsls	r3, r3, #6
  400f2a:	4413      	add	r3, r2
  400f2c:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  400f2e:	697b      	ldr	r3, [r7, #20]
  400f30:	687a      	ldr	r2, [r7, #4]
  400f32:	625a      	str	r2, [r3, #36]	; 0x24
}
  400f34:	bf00      	nop
  400f36:	371c      	adds	r7, #28
  400f38:	46bd      	mov	sp, r7
  400f3a:	bc80      	pop	{r7}
  400f3c:	4770      	bx	lr

00400f3e <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400f3e:	b480      	push	{r7}
  400f40:	b085      	sub	sp, #20
  400f42:	af00      	add	r7, sp, #0
  400f44:	6078      	str	r0, [r7, #4]
  400f46:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400f48:	687a      	ldr	r2, [r7, #4]
  400f4a:	683b      	ldr	r3, [r7, #0]
  400f4c:	019b      	lsls	r3, r3, #6
  400f4e:	4413      	add	r3, r2
  400f50:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  400f52:	68fb      	ldr	r3, [r7, #12]
  400f54:	6a1b      	ldr	r3, [r3, #32]
}
  400f56:	4618      	mov	r0, r3
  400f58:	3714      	adds	r7, #20
  400f5a:	46bd      	mov	sp, r7
  400f5c:	bc80      	pop	{r7}
  400f5e:	4770      	bx	lr

00400f60 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400f60:	b480      	push	{r7}
  400f62:	b08d      	sub	sp, #52	; 0x34
  400f64:	af00      	add	r7, sp, #0
  400f66:	60f8      	str	r0, [r7, #12]
  400f68:	60b9      	str	r1, [r7, #8]
  400f6a:	607a      	str	r2, [r7, #4]
  400f6c:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400f6e:	2302      	movs	r3, #2
  400f70:	613b      	str	r3, [r7, #16]
  400f72:	2308      	movs	r3, #8
  400f74:	617b      	str	r3, [r7, #20]
  400f76:	2320      	movs	r3, #32
  400f78:	61bb      	str	r3, [r7, #24]
  400f7a:	2380      	movs	r3, #128	; 0x80
  400f7c:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  400f80:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400f82:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400f84:	2300      	movs	r3, #0
  400f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  400f88:	e01a      	b.n	400fc0 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  400f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f8c:	009b      	lsls	r3, r3, #2
  400f8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400f92:	4413      	add	r3, r2
  400f94:	f853 3c20 	ldr.w	r3, [r3, #-32]
  400f98:	68ba      	ldr	r2, [r7, #8]
  400f9a:	fbb2 f3f3 	udiv	r3, r2, r3
  400f9e:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  400fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400fa2:	0c1b      	lsrs	r3, r3, #16
  400fa4:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  400fa6:	68fa      	ldr	r2, [r7, #12]
  400fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400faa:	429a      	cmp	r2, r3
  400fac:	d901      	bls.n	400fb2 <tc_find_mck_divisor+0x52>
			return 0;
  400fae:	2300      	movs	r3, #0
  400fb0:	e023      	b.n	400ffa <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  400fb2:	68fa      	ldr	r2, [r7, #12]
  400fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400fb6:	429a      	cmp	r2, r3
  400fb8:	d206      	bcs.n	400fc8 <tc_find_mck_divisor+0x68>
			ul_index++) {
  400fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fbc:	3301      	adds	r3, #1
  400fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  400fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fc2:	2b04      	cmp	r3, #4
  400fc4:	d9e1      	bls.n	400f8a <tc_find_mck_divisor+0x2a>
  400fc6:	e000      	b.n	400fca <tc_find_mck_divisor+0x6a>
			break;
  400fc8:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  400fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fcc:	2b04      	cmp	r3, #4
  400fce:	d901      	bls.n	400fd4 <tc_find_mck_divisor+0x74>
		return 0;
  400fd0:	2300      	movs	r3, #0
  400fd2:	e012      	b.n	400ffa <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400fd4:	687b      	ldr	r3, [r7, #4]
  400fd6:	2b00      	cmp	r3, #0
  400fd8:	d008      	beq.n	400fec <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  400fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fdc:	009b      	lsls	r3, r3, #2
  400fde:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400fe2:	4413      	add	r3, r2
  400fe4:	f853 2c20 	ldr.w	r2, [r3, #-32]
  400fe8:	687b      	ldr	r3, [r7, #4]
  400fea:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  400fec:	683b      	ldr	r3, [r7, #0]
  400fee:	2b00      	cmp	r3, #0
  400ff0:	d002      	beq.n	400ff8 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  400ff2:	683b      	ldr	r3, [r7, #0]
  400ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400ff6:	601a      	str	r2, [r3, #0]
	}

	return 1;
  400ff8:	2301      	movs	r3, #1
}
  400ffa:	4618      	mov	r0, r3
  400ffc:	3734      	adds	r7, #52	; 0x34
  400ffe:	46bd      	mov	sp, r7
  401000:	bc80      	pop	{r7}
  401002:	4770      	bx	lr

00401004 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  401004:	b480      	push	{r7}
  401006:	b083      	sub	sp, #12
  401008:	af00      	add	r7, sp, #0
  40100a:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  40100c:	687b      	ldr	r3, [r7, #4]
  40100e:	2208      	movs	r2, #8
  401010:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  401012:	687b      	ldr	r3, [r7, #4]
  401014:	2220      	movs	r2, #32
  401016:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  401018:	687b      	ldr	r3, [r7, #4]
  40101a:	2204      	movs	r2, #4
  40101c:	601a      	str	r2, [r3, #0]
}
  40101e:	bf00      	nop
  401020:	370c      	adds	r7, #12
  401022:	46bd      	mov	sp, r7
  401024:	bc80      	pop	{r7}
  401026:	4770      	bx	lr

00401028 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  401028:	b580      	push	{r7, lr}
  40102a:	b084      	sub	sp, #16
  40102c:	af00      	add	r7, sp, #0
  40102e:	6078      	str	r0, [r7, #4]
  401030:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  401032:	2300      	movs	r3, #0
  401034:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  401036:	687b      	ldr	r3, [r7, #4]
  401038:	f04f 32ff 	mov.w	r2, #4294967295
  40103c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  40103e:	687b      	ldr	r3, [r7, #4]
  401040:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  401042:	6878      	ldr	r0, [r7, #4]
  401044:	4b0e      	ldr	r3, [pc, #56]	; (401080 <twi_master_init+0x58>)
  401046:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  401048:	6878      	ldr	r0, [r7, #4]
  40104a:	4b0e      	ldr	r3, [pc, #56]	; (401084 <twi_master_init+0x5c>)
  40104c:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  40104e:	683b      	ldr	r3, [r7, #0]
  401050:	6859      	ldr	r1, [r3, #4]
  401052:	683b      	ldr	r3, [r7, #0]
  401054:	681b      	ldr	r3, [r3, #0]
  401056:	461a      	mov	r2, r3
  401058:	6878      	ldr	r0, [r7, #4]
  40105a:	4b0b      	ldr	r3, [pc, #44]	; (401088 <twi_master_init+0x60>)
  40105c:	4798      	blx	r3
  40105e:	4603      	mov	r3, r0
  401060:	2b01      	cmp	r3, #1
  401062:	d101      	bne.n	401068 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  401064:	2301      	movs	r3, #1
  401066:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  401068:	683b      	ldr	r3, [r7, #0]
  40106a:	7a5b      	ldrb	r3, [r3, #9]
  40106c:	2b01      	cmp	r3, #1
  40106e:	d102      	bne.n	401076 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  401070:	687b      	ldr	r3, [r7, #4]
  401072:	2240      	movs	r2, #64	; 0x40
  401074:	601a      	str	r2, [r3, #0]
	}

	return status;
  401076:	68fb      	ldr	r3, [r7, #12]
}
  401078:	4618      	mov	r0, r3
  40107a:	3710      	adds	r7, #16
  40107c:	46bd      	mov	sp, r7
  40107e:	bd80      	pop	{r7, pc}
  401080:	004013c5 	.word	0x004013c5
  401084:	00401005 	.word	0x00401005
  401088:	0040108d 	.word	0x0040108d

0040108c <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  40108c:	b480      	push	{r7}
  40108e:	b089      	sub	sp, #36	; 0x24
  401090:	af00      	add	r7, sp, #0
  401092:	60f8      	str	r0, [r7, #12]
  401094:	60b9      	str	r1, [r7, #8]
  401096:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  401098:	2300      	movs	r3, #0
  40109a:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  40109c:	68bb      	ldr	r3, [r7, #8]
  40109e:	4a34      	ldr	r2, [pc, #208]	; (401170 <twi_set_speed+0xe4>)
  4010a0:	4293      	cmp	r3, r2
  4010a2:	d901      	bls.n	4010a8 <twi_set_speed+0x1c>
		return FAIL;
  4010a4:	2301      	movs	r3, #1
  4010a6:	e05d      	b.n	401164 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4010a8:	68bb      	ldr	r3, [r7, #8]
  4010aa:	4a32      	ldr	r2, [pc, #200]	; (401174 <twi_set_speed+0xe8>)
  4010ac:	4293      	cmp	r3, r2
  4010ae:	d937      	bls.n	401120 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4010b0:	687b      	ldr	r3, [r7, #4]
  4010b2:	4a31      	ldr	r2, [pc, #196]	; (401178 <twi_set_speed+0xec>)
  4010b4:	fba2 2303 	umull	r2, r3, r2, r3
  4010b8:	0b9b      	lsrs	r3, r3, #14
  4010ba:	3b04      	subs	r3, #4
  4010bc:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4010be:	68ba      	ldr	r2, [r7, #8]
  4010c0:	4b2e      	ldr	r3, [pc, #184]	; (40117c <twi_set_speed+0xf0>)
  4010c2:	4413      	add	r3, r2
  4010c4:	009b      	lsls	r3, r3, #2
  4010c6:	687a      	ldr	r2, [r7, #4]
  4010c8:	fbb2 f3f3 	udiv	r3, r2, r3
  4010cc:	3b04      	subs	r3, #4
  4010ce:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4010d0:	e005      	b.n	4010de <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  4010d2:	69fb      	ldr	r3, [r7, #28]
  4010d4:	3301      	adds	r3, #1
  4010d6:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4010d8:	697b      	ldr	r3, [r7, #20]
  4010da:	085b      	lsrs	r3, r3, #1
  4010dc:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4010de:	697b      	ldr	r3, [r7, #20]
  4010e0:	2bff      	cmp	r3, #255	; 0xff
  4010e2:	d909      	bls.n	4010f8 <twi_set_speed+0x6c>
  4010e4:	69fb      	ldr	r3, [r7, #28]
  4010e6:	2b06      	cmp	r3, #6
  4010e8:	d9f3      	bls.n	4010d2 <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4010ea:	e005      	b.n	4010f8 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  4010ec:	69fb      	ldr	r3, [r7, #28]
  4010ee:	3301      	adds	r3, #1
  4010f0:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  4010f2:	693b      	ldr	r3, [r7, #16]
  4010f4:	085b      	lsrs	r3, r3, #1
  4010f6:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4010f8:	693b      	ldr	r3, [r7, #16]
  4010fa:	2bff      	cmp	r3, #255	; 0xff
  4010fc:	d902      	bls.n	401104 <twi_set_speed+0x78>
  4010fe:	69fb      	ldr	r3, [r7, #28]
  401100:	2b06      	cmp	r3, #6
  401102:	d9f3      	bls.n	4010ec <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401104:	697b      	ldr	r3, [r7, #20]
  401106:	b2da      	uxtb	r2, r3
  401108:	693b      	ldr	r3, [r7, #16]
  40110a:	021b      	lsls	r3, r3, #8
  40110c:	b29b      	uxth	r3, r3
  40110e:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  401110:	69fb      	ldr	r3, [r7, #28]
  401112:	041b      	lsls	r3, r3, #16
  401114:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401118:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  40111a:	68fb      	ldr	r3, [r7, #12]
  40111c:	611a      	str	r2, [r3, #16]
  40111e:	e020      	b.n	401162 <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401120:	68bb      	ldr	r3, [r7, #8]
  401122:	005b      	lsls	r3, r3, #1
  401124:	687a      	ldr	r2, [r7, #4]
  401126:	fbb2 f3f3 	udiv	r3, r2, r3
  40112a:	3b04      	subs	r3, #4
  40112c:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40112e:	e005      	b.n	40113c <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  401130:	69fb      	ldr	r3, [r7, #28]
  401132:	3301      	adds	r3, #1
  401134:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  401136:	69bb      	ldr	r3, [r7, #24]
  401138:	085b      	lsrs	r3, r3, #1
  40113a:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40113c:	69bb      	ldr	r3, [r7, #24]
  40113e:	2bff      	cmp	r3, #255	; 0xff
  401140:	d902      	bls.n	401148 <twi_set_speed+0xbc>
  401142:	69fb      	ldr	r3, [r7, #28]
  401144:	2b06      	cmp	r3, #6
  401146:	d9f3      	bls.n	401130 <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401148:	69bb      	ldr	r3, [r7, #24]
  40114a:	b2da      	uxtb	r2, r3
  40114c:	69bb      	ldr	r3, [r7, #24]
  40114e:	021b      	lsls	r3, r3, #8
  401150:	b29b      	uxth	r3, r3
  401152:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  401154:	69fb      	ldr	r3, [r7, #28]
  401156:	041b      	lsls	r3, r3, #16
  401158:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  40115c:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  40115e:	68fb      	ldr	r3, [r7, #12]
  401160:	611a      	str	r2, [r3, #16]
	}

	return PASS;
  401162:	2300      	movs	r3, #0
}
  401164:	4618      	mov	r0, r3
  401166:	3724      	adds	r7, #36	; 0x24
  401168:	46bd      	mov	sp, r7
  40116a:	bc80      	pop	{r7}
  40116c:	4770      	bx	lr
  40116e:	bf00      	nop
  401170:	00061a80 	.word	0x00061a80
  401174:	0005dc00 	.word	0x0005dc00
  401178:	057619f1 	.word	0x057619f1
  40117c:	3ffd1200 	.word	0x3ffd1200

00401180 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  401180:	b480      	push	{r7}
  401182:	b085      	sub	sp, #20
  401184:	af00      	add	r7, sp, #0
  401186:	6078      	str	r0, [r7, #4]
  401188:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  40118a:	683b      	ldr	r3, [r7, #0]
  40118c:	2b00      	cmp	r3, #0
  40118e:	d101      	bne.n	401194 <twi_mk_addr+0x14>
		return 0;
  401190:	2300      	movs	r3, #0
  401192:	e01d      	b.n	4011d0 <twi_mk_addr+0x50>

	val = addr[0];
  401194:	687b      	ldr	r3, [r7, #4]
  401196:	781b      	ldrb	r3, [r3, #0]
  401198:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  40119a:	683b      	ldr	r3, [r7, #0]
  40119c:	2b01      	cmp	r3, #1
  40119e:	dd09      	ble.n	4011b4 <twi_mk_addr+0x34>
		val <<= 8;
  4011a0:	68fb      	ldr	r3, [r7, #12]
  4011a2:	021b      	lsls	r3, r3, #8
  4011a4:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  4011a6:	687b      	ldr	r3, [r7, #4]
  4011a8:	3301      	adds	r3, #1
  4011aa:	781b      	ldrb	r3, [r3, #0]
  4011ac:	461a      	mov	r2, r3
  4011ae:	68fb      	ldr	r3, [r7, #12]
  4011b0:	4313      	orrs	r3, r2
  4011b2:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  4011b4:	683b      	ldr	r3, [r7, #0]
  4011b6:	2b02      	cmp	r3, #2
  4011b8:	dd09      	ble.n	4011ce <twi_mk_addr+0x4e>
		val <<= 8;
  4011ba:	68fb      	ldr	r3, [r7, #12]
  4011bc:	021b      	lsls	r3, r3, #8
  4011be:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  4011c0:	687b      	ldr	r3, [r7, #4]
  4011c2:	3302      	adds	r3, #2
  4011c4:	781b      	ldrb	r3, [r3, #0]
  4011c6:	461a      	mov	r2, r3
  4011c8:	68fb      	ldr	r3, [r7, #12]
  4011ca:	4313      	orrs	r3, r2
  4011cc:	60fb      	str	r3, [r7, #12]
	}
	return val;
  4011ce:	68fb      	ldr	r3, [r7, #12]
}
  4011d0:	4618      	mov	r0, r3
  4011d2:	3714      	adds	r7, #20
  4011d4:	46bd      	mov	sp, r7
  4011d6:	bc80      	pop	{r7}
  4011d8:	4770      	bx	lr
	...

004011dc <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  4011dc:	b580      	push	{r7, lr}
  4011de:	b088      	sub	sp, #32
  4011e0:	af00      	add	r7, sp, #0
  4011e2:	6078      	str	r0, [r7, #4]
  4011e4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4011e6:	683b      	ldr	r3, [r7, #0]
  4011e8:	68db      	ldr	r3, [r3, #12]
  4011ea:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  4011ec:	683b      	ldr	r3, [r7, #0]
  4011ee:	689b      	ldr	r3, [r3, #8]
  4011f0:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  4011f2:	2300      	movs	r3, #0
  4011f4:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  4011f6:	f247 5330 	movw	r3, #30000	; 0x7530
  4011fa:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  4011fc:	69fb      	ldr	r3, [r7, #28]
  4011fe:	2b00      	cmp	r3, #0
  401200:	d101      	bne.n	401206 <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  401202:	2301      	movs	r3, #1
  401204:	e069      	b.n	4012da <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401206:	687b      	ldr	r3, [r7, #4]
  401208:	2200      	movs	r2, #0
  40120a:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  40120c:	683b      	ldr	r3, [r7, #0]
  40120e:	7c1b      	ldrb	r3, [r3, #16]
  401210:	041b      	lsls	r3, r3, #16
  401212:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401216:	683b      	ldr	r3, [r7, #0]
  401218:	685b      	ldr	r3, [r3, #4]
  40121a:	021b      	lsls	r3, r3, #8
  40121c:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401220:	4313      	orrs	r3, r2
  401222:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  401226:	687b      	ldr	r3, [r7, #4]
  401228:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  40122a:	687b      	ldr	r3, [r7, #4]
  40122c:	2200      	movs	r2, #0
  40122e:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401230:	683a      	ldr	r2, [r7, #0]
  401232:	683b      	ldr	r3, [r7, #0]
  401234:	685b      	ldr	r3, [r3, #4]
  401236:	4619      	mov	r1, r3
  401238:	4610      	mov	r0, r2
  40123a:	4b2a      	ldr	r3, [pc, #168]	; (4012e4 <twi_master_read+0x108>)
  40123c:	4798      	blx	r3
  40123e:	4602      	mov	r2, r0
  401240:	687b      	ldr	r3, [r7, #4]
  401242:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  401244:	69fb      	ldr	r3, [r7, #28]
  401246:	2b01      	cmp	r3, #1
  401248:	d105      	bne.n	401256 <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40124a:	687b      	ldr	r3, [r7, #4]
  40124c:	2203      	movs	r2, #3
  40124e:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  401250:	2301      	movs	r3, #1
  401252:	75fb      	strb	r3, [r7, #23]
  401254:	e034      	b.n	4012c0 <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  401256:	687b      	ldr	r3, [r7, #4]
  401258:	2201      	movs	r2, #1
  40125a:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  40125c:	2300      	movs	r3, #0
  40125e:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  401260:	e02e      	b.n	4012c0 <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  401262:	687b      	ldr	r3, [r7, #4]
  401264:	6a1b      	ldr	r3, [r3, #32]
  401266:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  401268:	68fb      	ldr	r3, [r7, #12]
  40126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40126e:	2b00      	cmp	r3, #0
  401270:	d001      	beq.n	401276 <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  401272:	2305      	movs	r3, #5
  401274:	e031      	b.n	4012da <twi_master_read+0xfe>
		}

		if (!timeout--) {
  401276:	693b      	ldr	r3, [r7, #16]
  401278:	1e5a      	subs	r2, r3, #1
  40127a:	613a      	str	r2, [r7, #16]
  40127c:	2b00      	cmp	r3, #0
  40127e:	d101      	bne.n	401284 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  401280:	2309      	movs	r3, #9
  401282:	e02a      	b.n	4012da <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  401284:	69fb      	ldr	r3, [r7, #28]
  401286:	2b01      	cmp	r3, #1
  401288:	d107      	bne.n	40129a <twi_master_read+0xbe>
  40128a:	7dfb      	ldrb	r3, [r7, #23]
  40128c:	2b00      	cmp	r3, #0
  40128e:	d104      	bne.n	40129a <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  401290:	687b      	ldr	r3, [r7, #4]
  401292:	2202      	movs	r2, #2
  401294:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  401296:	2301      	movs	r3, #1
  401298:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  40129a:	68fb      	ldr	r3, [r7, #12]
  40129c:	f003 0302 	and.w	r3, r3, #2
  4012a0:	2b00      	cmp	r3, #0
  4012a2:	d100      	bne.n	4012a6 <twi_master_read+0xca>
			continue;
  4012a4:	e00c      	b.n	4012c0 <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  4012a6:	69bb      	ldr	r3, [r7, #24]
  4012a8:	1c5a      	adds	r2, r3, #1
  4012aa:	61ba      	str	r2, [r7, #24]
  4012ac:	687a      	ldr	r2, [r7, #4]
  4012ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4012b0:	b2d2      	uxtb	r2, r2
  4012b2:	701a      	strb	r2, [r3, #0]

		cnt--;
  4012b4:	69fb      	ldr	r3, [r7, #28]
  4012b6:	3b01      	subs	r3, #1
  4012b8:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  4012ba:	f247 5330 	movw	r3, #30000	; 0x7530
  4012be:	613b      	str	r3, [r7, #16]
	while (cnt > 0) {
  4012c0:	69fb      	ldr	r3, [r7, #28]
  4012c2:	2b00      	cmp	r3, #0
  4012c4:	d1cd      	bne.n	401262 <twi_master_read+0x86>
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4012c6:	bf00      	nop
  4012c8:	687b      	ldr	r3, [r7, #4]
  4012ca:	6a1b      	ldr	r3, [r3, #32]
  4012cc:	f003 0301 	and.w	r3, r3, #1
  4012d0:	2b00      	cmp	r3, #0
  4012d2:	d0f9      	beq.n	4012c8 <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  4012d4:	687b      	ldr	r3, [r7, #4]
  4012d6:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  4012d8:	2300      	movs	r3, #0
}
  4012da:	4618      	mov	r0, r3
  4012dc:	3720      	adds	r7, #32
  4012de:	46bd      	mov	sp, r7
  4012e0:	bd80      	pop	{r7, pc}
  4012e2:	bf00      	nop
  4012e4:	00401181 	.word	0x00401181

004012e8 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4012e8:	b580      	push	{r7, lr}
  4012ea:	b086      	sub	sp, #24
  4012ec:	af00      	add	r7, sp, #0
  4012ee:	6078      	str	r0, [r7, #4]
  4012f0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4012f2:	683b      	ldr	r3, [r7, #0]
  4012f4:	68db      	ldr	r3, [r3, #12]
  4012f6:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  4012f8:	683b      	ldr	r3, [r7, #0]
  4012fa:	689b      	ldr	r3, [r3, #8]
  4012fc:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  4012fe:	697b      	ldr	r3, [r7, #20]
  401300:	2b00      	cmp	r3, #0
  401302:	d101      	bne.n	401308 <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  401304:	2301      	movs	r3, #1
  401306:	e056      	b.n	4013b6 <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401308:	687b      	ldr	r3, [r7, #4]
  40130a:	2200      	movs	r2, #0
  40130c:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  40130e:	683b      	ldr	r3, [r7, #0]
  401310:	7c1b      	ldrb	r3, [r3, #16]
  401312:	041b      	lsls	r3, r3, #16
  401314:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401318:	683b      	ldr	r3, [r7, #0]
  40131a:	685b      	ldr	r3, [r3, #4]
  40131c:	021b      	lsls	r3, r3, #8
  40131e:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401322:	431a      	orrs	r2, r3
  401324:	687b      	ldr	r3, [r7, #4]
  401326:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401328:	687b      	ldr	r3, [r7, #4]
  40132a:	2200      	movs	r2, #0
  40132c:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40132e:	683a      	ldr	r2, [r7, #0]
  401330:	683b      	ldr	r3, [r7, #0]
  401332:	685b      	ldr	r3, [r3, #4]
  401334:	4619      	mov	r1, r3
  401336:	4610      	mov	r0, r2
  401338:	4b21      	ldr	r3, [pc, #132]	; (4013c0 <twi_master_write+0xd8>)
  40133a:	4798      	blx	r3
  40133c:	4602      	mov	r2, r0
  40133e:	687b      	ldr	r3, [r7, #4]
  401340:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  401342:	e019      	b.n	401378 <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  401344:	687b      	ldr	r3, [r7, #4]
  401346:	6a1b      	ldr	r3, [r3, #32]
  401348:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  40134a:	68fb      	ldr	r3, [r7, #12]
  40134c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401350:	2b00      	cmp	r3, #0
  401352:	d001      	beq.n	401358 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  401354:	2305      	movs	r3, #5
  401356:	e02e      	b.n	4013b6 <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  401358:	68fb      	ldr	r3, [r7, #12]
  40135a:	f003 0304 	and.w	r3, r3, #4
  40135e:	2b00      	cmp	r3, #0
  401360:	d100      	bne.n	401364 <twi_master_write+0x7c>
			continue;
  401362:	e009      	b.n	401378 <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  401364:	693b      	ldr	r3, [r7, #16]
  401366:	1c5a      	adds	r2, r3, #1
  401368:	613a      	str	r2, [r7, #16]
  40136a:	781b      	ldrb	r3, [r3, #0]
  40136c:	461a      	mov	r2, r3
  40136e:	687b      	ldr	r3, [r7, #4]
  401370:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  401372:	697b      	ldr	r3, [r7, #20]
  401374:	3b01      	subs	r3, #1
  401376:	617b      	str	r3, [r7, #20]
	while (cnt > 0) {
  401378:	697b      	ldr	r3, [r7, #20]
  40137a:	2b00      	cmp	r3, #0
  40137c:	d1e2      	bne.n	401344 <twi_master_write+0x5c>
	}

	while (1) {
		status = p_twi->TWI_SR;
  40137e:	687b      	ldr	r3, [r7, #4]
  401380:	6a1b      	ldr	r3, [r3, #32]
  401382:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  401384:	68fb      	ldr	r3, [r7, #12]
  401386:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40138a:	2b00      	cmp	r3, #0
  40138c:	d001      	beq.n	401392 <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  40138e:	2305      	movs	r3, #5
  401390:	e011      	b.n	4013b6 <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  401392:	68fb      	ldr	r3, [r7, #12]
  401394:	f003 0304 	and.w	r3, r3, #4
  401398:	2b00      	cmp	r3, #0
  40139a:	d100      	bne.n	40139e <twi_master_write+0xb6>
		status = p_twi->TWI_SR;
  40139c:	e7ef      	b.n	40137e <twi_master_write+0x96>
			break;
  40139e:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  4013a0:	687b      	ldr	r3, [r7, #4]
  4013a2:	2202      	movs	r2, #2
  4013a4:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4013a6:	bf00      	nop
  4013a8:	687b      	ldr	r3, [r7, #4]
  4013aa:	6a1b      	ldr	r3, [r3, #32]
  4013ac:	f003 0301 	and.w	r3, r3, #1
  4013b0:	2b00      	cmp	r3, #0
  4013b2:	d0f9      	beq.n	4013a8 <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  4013b4:	2300      	movs	r3, #0
}
  4013b6:	4618      	mov	r0, r3
  4013b8:	3718      	adds	r7, #24
  4013ba:	46bd      	mov	sp, r7
  4013bc:	bd80      	pop	{r7, pc}
  4013be:	bf00      	nop
  4013c0:	00401181 	.word	0x00401181

004013c4 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  4013c4:	b480      	push	{r7}
  4013c6:	b083      	sub	sp, #12
  4013c8:	af00      	add	r7, sp, #0
  4013ca:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4013cc:	687b      	ldr	r3, [r7, #4]
  4013ce:	2280      	movs	r2, #128	; 0x80
  4013d0:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  4013d2:	687b      	ldr	r3, [r7, #4]
  4013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4013d6:	bf00      	nop
  4013d8:	370c      	adds	r7, #12
  4013da:	46bd      	mov	sp, r7
  4013dc:	bc80      	pop	{r7}
  4013de:	4770      	bx	lr

004013e0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4013e0:	b480      	push	{r7}
  4013e2:	b089      	sub	sp, #36	; 0x24
  4013e4:	af00      	add	r7, sp, #0
  4013e6:	60f8      	str	r0, [r7, #12]
  4013e8:	60b9      	str	r1, [r7, #8]
  4013ea:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4013ec:	68bb      	ldr	r3, [r7, #8]
  4013ee:	011a      	lsls	r2, r3, #4
  4013f0:	687b      	ldr	r3, [r7, #4]
  4013f2:	429a      	cmp	r2, r3
  4013f4:	d802      	bhi.n	4013fc <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4013f6:	2310      	movs	r3, #16
  4013f8:	61fb      	str	r3, [r7, #28]
  4013fa:	e001      	b.n	401400 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4013fc:	2308      	movs	r3, #8
  4013fe:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401400:	687b      	ldr	r3, [r7, #4]
  401402:	00da      	lsls	r2, r3, #3
  401404:	69fb      	ldr	r3, [r7, #28]
  401406:	68b9      	ldr	r1, [r7, #8]
  401408:	fb01 f303 	mul.w	r3, r1, r3
  40140c:	085b      	lsrs	r3, r3, #1
  40140e:	441a      	add	r2, r3
  401410:	69fb      	ldr	r3, [r7, #28]
  401412:	68b9      	ldr	r1, [r7, #8]
  401414:	fb01 f303 	mul.w	r3, r1, r3
  401418:	fbb2 f3f3 	udiv	r3, r2, r3
  40141c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40141e:	69bb      	ldr	r3, [r7, #24]
  401420:	08db      	lsrs	r3, r3, #3
  401422:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401424:	69bb      	ldr	r3, [r7, #24]
  401426:	f003 0307 	and.w	r3, r3, #7
  40142a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40142c:	697b      	ldr	r3, [r7, #20]
  40142e:	2b00      	cmp	r3, #0
  401430:	d003      	beq.n	40143a <usart_set_async_baudrate+0x5a>
  401432:	697b      	ldr	r3, [r7, #20]
  401434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401438:	d301      	bcc.n	40143e <usart_set_async_baudrate+0x5e>
		return 1;
  40143a:	2301      	movs	r3, #1
  40143c:	e00f      	b.n	40145e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40143e:	69fb      	ldr	r3, [r7, #28]
  401440:	2b08      	cmp	r3, #8
  401442:	d105      	bne.n	401450 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401444:	68fb      	ldr	r3, [r7, #12]
  401446:	685b      	ldr	r3, [r3, #4]
  401448:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  40144c:	68fb      	ldr	r3, [r7, #12]
  40144e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401450:	693b      	ldr	r3, [r7, #16]
  401452:	041a      	lsls	r2, r3, #16
  401454:	697b      	ldr	r3, [r7, #20]
  401456:	431a      	orrs	r2, r3
  401458:	68fb      	ldr	r3, [r7, #12]
  40145a:	621a      	str	r2, [r3, #32]

	return 0;
  40145c:	2300      	movs	r3, #0
}
  40145e:	4618      	mov	r0, r3
  401460:	3724      	adds	r7, #36	; 0x24
  401462:	46bd      	mov	sp, r7
  401464:	bc80      	pop	{r7}
  401466:	4770      	bx	lr

00401468 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  401468:	b580      	push	{r7, lr}
  40146a:	b082      	sub	sp, #8
  40146c:	af00      	add	r7, sp, #0
  40146e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401470:	6878      	ldr	r0, [r7, #4]
  401472:	4b0f      	ldr	r3, [pc, #60]	; (4014b0 <usart_reset+0x48>)
  401474:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  401476:	687b      	ldr	r3, [r7, #4]
  401478:	2200      	movs	r2, #0
  40147a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  40147c:	687b      	ldr	r3, [r7, #4]
  40147e:	2200      	movs	r2, #0
  401480:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401482:	687b      	ldr	r3, [r7, #4]
  401484:	2200      	movs	r2, #0
  401486:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401488:	6878      	ldr	r0, [r7, #4]
  40148a:	4b0a      	ldr	r3, [pc, #40]	; (4014b4 <usart_reset+0x4c>)
  40148c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40148e:	6878      	ldr	r0, [r7, #4]
  401490:	4b09      	ldr	r3, [pc, #36]	; (4014b8 <usart_reset+0x50>)
  401492:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401494:	6878      	ldr	r0, [r7, #4]
  401496:	4b09      	ldr	r3, [pc, #36]	; (4014bc <usart_reset+0x54>)
  401498:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40149a:	6878      	ldr	r0, [r7, #4]
  40149c:	4b08      	ldr	r3, [pc, #32]	; (4014c0 <usart_reset+0x58>)
  40149e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  4014a0:	6878      	ldr	r0, [r7, #4]
  4014a2:	4b08      	ldr	r3, [pc, #32]	; (4014c4 <usart_reset+0x5c>)
  4014a4:	4798      	blx	r3
#endif
}
  4014a6:	bf00      	nop
  4014a8:	3708      	adds	r7, #8
  4014aa:	46bd      	mov	sp, r7
  4014ac:	bd80      	pop	{r7, pc}
  4014ae:	bf00      	nop
  4014b0:	004016cd 	.word	0x004016cd
  4014b4:	004015a5 	.word	0x004015a5
  4014b8:	004015d5 	.word	0x004015d5
  4014bc:	00401621 	.word	0x00401621
  4014c0:	00401655 	.word	0x00401655
  4014c4:	0040163b 	.word	0x0040163b

004014c8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4014c8:	b580      	push	{r7, lr}
  4014ca:	b084      	sub	sp, #16
  4014cc:	af00      	add	r7, sp, #0
  4014ce:	60f8      	str	r0, [r7, #12]
  4014d0:	60b9      	str	r1, [r7, #8]
  4014d2:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4014d4:	68f8      	ldr	r0, [r7, #12]
  4014d6:	4b1a      	ldr	r3, [pc, #104]	; (401540 <usart_init_rs232+0x78>)
  4014d8:	4798      	blx	r3

	ul_reg_val = 0;
  4014da:	4b1a      	ldr	r3, [pc, #104]	; (401544 <usart_init_rs232+0x7c>)
  4014dc:	2200      	movs	r2, #0
  4014de:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4014e0:	68bb      	ldr	r3, [r7, #8]
  4014e2:	2b00      	cmp	r3, #0
  4014e4:	d009      	beq.n	4014fa <usart_init_rs232+0x32>
  4014e6:	68bb      	ldr	r3, [r7, #8]
  4014e8:	681b      	ldr	r3, [r3, #0]
  4014ea:	687a      	ldr	r2, [r7, #4]
  4014ec:	4619      	mov	r1, r3
  4014ee:	68f8      	ldr	r0, [r7, #12]
  4014f0:	4b15      	ldr	r3, [pc, #84]	; (401548 <usart_init_rs232+0x80>)
  4014f2:	4798      	blx	r3
  4014f4:	4603      	mov	r3, r0
  4014f6:	2b00      	cmp	r3, #0
  4014f8:	d001      	beq.n	4014fe <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4014fa:	2301      	movs	r3, #1
  4014fc:	e01b      	b.n	401536 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4014fe:	68bb      	ldr	r3, [r7, #8]
  401500:	685a      	ldr	r2, [r3, #4]
  401502:	68bb      	ldr	r3, [r7, #8]
  401504:	689b      	ldr	r3, [r3, #8]
  401506:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401508:	68bb      	ldr	r3, [r7, #8]
  40150a:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40150c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40150e:	68bb      	ldr	r3, [r7, #8]
  401510:	68db      	ldr	r3, [r3, #12]
  401512:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401514:	4b0b      	ldr	r3, [pc, #44]	; (401544 <usart_init_rs232+0x7c>)
  401516:	681b      	ldr	r3, [r3, #0]
  401518:	4313      	orrs	r3, r2
  40151a:	4a0a      	ldr	r2, [pc, #40]	; (401544 <usart_init_rs232+0x7c>)
  40151c:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40151e:	4b09      	ldr	r3, [pc, #36]	; (401544 <usart_init_rs232+0x7c>)
  401520:	681b      	ldr	r3, [r3, #0]
  401522:	4a08      	ldr	r2, [pc, #32]	; (401544 <usart_init_rs232+0x7c>)
  401524:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401526:	68fb      	ldr	r3, [r7, #12]
  401528:	685a      	ldr	r2, [r3, #4]
  40152a:	4b06      	ldr	r3, [pc, #24]	; (401544 <usart_init_rs232+0x7c>)
  40152c:	681b      	ldr	r3, [r3, #0]
  40152e:	431a      	orrs	r2, r3
  401530:	68fb      	ldr	r3, [r7, #12]
  401532:	605a      	str	r2, [r3, #4]

	return 0;
  401534:	2300      	movs	r3, #0
}
  401536:	4618      	mov	r0, r3
  401538:	3710      	adds	r7, #16
  40153a:	46bd      	mov	sp, r7
  40153c:	bd80      	pop	{r7, pc}
  40153e:	bf00      	nop
  401540:	00401469 	.word	0x00401469
  401544:	20000a54 	.word	0x20000a54
  401548:	004013e1 	.word	0x004013e1

0040154c <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  40154c:	b580      	push	{r7, lr}
  40154e:	b084      	sub	sp, #16
  401550:	af00      	add	r7, sp, #0
  401552:	60f8      	str	r0, [r7, #12]
  401554:	60b9      	str	r1, [r7, #8]
  401556:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  401558:	687a      	ldr	r2, [r7, #4]
  40155a:	68b9      	ldr	r1, [r7, #8]
  40155c:	68f8      	ldr	r0, [r7, #12]
  40155e:	4b0a      	ldr	r3, [pc, #40]	; (401588 <usart_init_hw_handshaking+0x3c>)
  401560:	4798      	blx	r3
  401562:	4603      	mov	r3, r0
  401564:	2b00      	cmp	r3, #0
  401566:	d001      	beq.n	40156c <usart_init_hw_handshaking+0x20>
		return 1;
  401568:	2301      	movs	r3, #1
  40156a:	e008      	b.n	40157e <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  40156c:	68fb      	ldr	r3, [r7, #12]
  40156e:	685b      	ldr	r3, [r3, #4]
  401570:	f023 030f 	bic.w	r3, r3, #15
  401574:	f043 0202 	orr.w	r2, r3, #2
  401578:	68fb      	ldr	r3, [r7, #12]
  40157a:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  40157c:	2300      	movs	r3, #0
}
  40157e:	4618      	mov	r0, r3
  401580:	3710      	adds	r7, #16
  401582:	46bd      	mov	sp, r7
  401584:	bd80      	pop	{r7, pc}
  401586:	bf00      	nop
  401588:	004014c9 	.word	0x004014c9

0040158c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  40158c:	b480      	push	{r7}
  40158e:	b083      	sub	sp, #12
  401590:	af00      	add	r7, sp, #0
  401592:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401594:	687b      	ldr	r3, [r7, #4]
  401596:	2240      	movs	r2, #64	; 0x40
  401598:	601a      	str	r2, [r3, #0]
}
  40159a:	bf00      	nop
  40159c:	370c      	adds	r7, #12
  40159e:	46bd      	mov	sp, r7
  4015a0:	bc80      	pop	{r7}
  4015a2:	4770      	bx	lr

004015a4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4015a4:	b480      	push	{r7}
  4015a6:	b083      	sub	sp, #12
  4015a8:	af00      	add	r7, sp, #0
  4015aa:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4015ac:	687b      	ldr	r3, [r7, #4]
  4015ae:	2288      	movs	r2, #136	; 0x88
  4015b0:	601a      	str	r2, [r3, #0]
}
  4015b2:	bf00      	nop
  4015b4:	370c      	adds	r7, #12
  4015b6:	46bd      	mov	sp, r7
  4015b8:	bc80      	pop	{r7}
  4015ba:	4770      	bx	lr

004015bc <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4015bc:	b480      	push	{r7}
  4015be:	b083      	sub	sp, #12
  4015c0:	af00      	add	r7, sp, #0
  4015c2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4015c4:	687b      	ldr	r3, [r7, #4]
  4015c6:	2210      	movs	r2, #16
  4015c8:	601a      	str	r2, [r3, #0]
}
  4015ca:	bf00      	nop
  4015cc:	370c      	adds	r7, #12
  4015ce:	46bd      	mov	sp, r7
  4015d0:	bc80      	pop	{r7}
  4015d2:	4770      	bx	lr

004015d4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4015d4:	b480      	push	{r7}
  4015d6:	b083      	sub	sp, #12
  4015d8:	af00      	add	r7, sp, #0
  4015da:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4015dc:	687b      	ldr	r3, [r7, #4]
  4015de:	2224      	movs	r2, #36	; 0x24
  4015e0:	601a      	str	r2, [r3, #0]
}
  4015e2:	bf00      	nop
  4015e4:	370c      	adds	r7, #12
  4015e6:	46bd      	mov	sp, r7
  4015e8:	bc80      	pop	{r7}
  4015ea:	4770      	bx	lr

004015ec <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4015ec:	b480      	push	{r7}
  4015ee:	b083      	sub	sp, #12
  4015f0:	af00      	add	r7, sp, #0
  4015f2:	6078      	str	r0, [r7, #4]
  4015f4:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4015f6:	687b      	ldr	r3, [r7, #4]
  4015f8:	683a      	ldr	r2, [r7, #0]
  4015fa:	609a      	str	r2, [r3, #8]
}
  4015fc:	bf00      	nop
  4015fe:	370c      	adds	r7, #12
  401600:	46bd      	mov	sp, r7
  401602:	bc80      	pop	{r7}
  401604:	4770      	bx	lr

00401606 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  401606:	b480      	push	{r7}
  401608:	b083      	sub	sp, #12
  40160a:	af00      	add	r7, sp, #0
  40160c:	6078      	str	r0, [r7, #4]
  40160e:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  401610:	687b      	ldr	r3, [r7, #4]
  401612:	683a      	ldr	r2, [r7, #0]
  401614:	60da      	str	r2, [r3, #12]
}
  401616:	bf00      	nop
  401618:	370c      	adds	r7, #12
  40161a:	46bd      	mov	sp, r7
  40161c:	bc80      	pop	{r7}
  40161e:	4770      	bx	lr

00401620 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401620:	b480      	push	{r7}
  401622:	b083      	sub	sp, #12
  401624:	af00      	add	r7, sp, #0
  401626:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401628:	687b      	ldr	r3, [r7, #4]
  40162a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40162e:	601a      	str	r2, [r3, #0]
}
  401630:	bf00      	nop
  401632:	370c      	adds	r7, #12
  401634:	46bd      	mov	sp, r7
  401636:	bc80      	pop	{r7}
  401638:	4770      	bx	lr

0040163a <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  40163a:	b480      	push	{r7}
  40163c:	b083      	sub	sp, #12
  40163e:	af00      	add	r7, sp, #0
  401640:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  401642:	687b      	ldr	r3, [r7, #4]
  401644:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  401648:	601a      	str	r2, [r3, #0]
}
  40164a:	bf00      	nop
  40164c:	370c      	adds	r7, #12
  40164e:	46bd      	mov	sp, r7
  401650:	bc80      	pop	{r7}
  401652:	4770      	bx	lr

00401654 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401654:	b480      	push	{r7}
  401656:	b083      	sub	sp, #12
  401658:	af00      	add	r7, sp, #0
  40165a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  40165c:	687b      	ldr	r3, [r7, #4]
  40165e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401662:	601a      	str	r2, [r3, #0]
}
  401664:	bf00      	nop
  401666:	370c      	adds	r7, #12
  401668:	46bd      	mov	sp, r7
  40166a:	bc80      	pop	{r7}
  40166c:	4770      	bx	lr

0040166e <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  40166e:	b480      	push	{r7}
  401670:	b083      	sub	sp, #12
  401672:	af00      	add	r7, sp, #0
  401674:	6078      	str	r0, [r7, #4]
  401676:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401678:	bf00      	nop
  40167a:	687b      	ldr	r3, [r7, #4]
  40167c:	695b      	ldr	r3, [r3, #20]
  40167e:	f003 0302 	and.w	r3, r3, #2
  401682:	2b00      	cmp	r3, #0
  401684:	d0f9      	beq.n	40167a <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401686:	683b      	ldr	r3, [r7, #0]
  401688:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40168c:	687b      	ldr	r3, [r7, #4]
  40168e:	61da      	str	r2, [r3, #28]

	return 0;
  401690:	2300      	movs	r3, #0
}
  401692:	4618      	mov	r0, r3
  401694:	370c      	adds	r7, #12
  401696:	46bd      	mov	sp, r7
  401698:	bc80      	pop	{r7}
  40169a:	4770      	bx	lr

0040169c <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  40169c:	b580      	push	{r7, lr}
  40169e:	b082      	sub	sp, #8
  4016a0:	af00      	add	r7, sp, #0
  4016a2:	6078      	str	r0, [r7, #4]
  4016a4:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  4016a6:	e007      	b.n	4016b8 <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  4016a8:	683b      	ldr	r3, [r7, #0]
  4016aa:	1c5a      	adds	r2, r3, #1
  4016ac:	603a      	str	r2, [r7, #0]
  4016ae:	781b      	ldrb	r3, [r3, #0]
  4016b0:	4619      	mov	r1, r3
  4016b2:	6878      	ldr	r0, [r7, #4]
  4016b4:	4b04      	ldr	r3, [pc, #16]	; (4016c8 <usart_write_line+0x2c>)
  4016b6:	4798      	blx	r3
	while (*string != '\0') {
  4016b8:	683b      	ldr	r3, [r7, #0]
  4016ba:	781b      	ldrb	r3, [r3, #0]
  4016bc:	2b00      	cmp	r3, #0
  4016be:	d1f3      	bne.n	4016a8 <usart_write_line+0xc>
	}
}
  4016c0:	bf00      	nop
  4016c2:	3708      	adds	r7, #8
  4016c4:	46bd      	mov	sp, r7
  4016c6:	bd80      	pop	{r7, pc}
  4016c8:	0040166f 	.word	0x0040166f

004016cc <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4016cc:	b480      	push	{r7}
  4016ce:	b083      	sub	sp, #12
  4016d0:	af00      	add	r7, sp, #0
  4016d2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4016d4:	687b      	ldr	r3, [r7, #4]
  4016d6:	4a04      	ldr	r2, [pc, #16]	; (4016e8 <usart_disable_writeprotect+0x1c>)
  4016d8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4016dc:	bf00      	nop
  4016de:	370c      	adds	r7, #12
  4016e0:	46bd      	mov	sp, r7
  4016e2:	bc80      	pop	{r7}
  4016e4:	4770      	bx	lr
  4016e6:	bf00      	nop
  4016e8:	55534100 	.word	0x55534100

004016ec <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  4016ec:	b480      	push	{r7}
  4016ee:	b083      	sub	sp, #12
  4016f0:	af00      	add	r7, sp, #0
  4016f2:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4016f4:	687b      	ldr	r3, [r7, #4]
  4016f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4016fa:	605a      	str	r2, [r3, #4]

}
  4016fc:	bf00      	nop
  4016fe:	370c      	adds	r7, #12
  401700:	46bd      	mov	sp, r7
  401702:	bc80      	pop	{r7}
  401704:	4770      	bx	lr
	...

00401708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401708:	b480      	push	{r7}
  40170a:	b083      	sub	sp, #12
  40170c:	af00      	add	r7, sp, #0
  40170e:	4603      	mov	r3, r0
  401710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  401712:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401716:	2b00      	cmp	r3, #0
  401718:	db0b      	blt.n	401732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40171a:	4908      	ldr	r1, [pc, #32]	; (40173c <__NVIC_EnableIRQ+0x34>)
  40171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401720:	095b      	lsrs	r3, r3, #5
  401722:	79fa      	ldrb	r2, [r7, #7]
  401724:	f002 021f 	and.w	r2, r2, #31
  401728:	2001      	movs	r0, #1
  40172a:	fa00 f202 	lsl.w	r2, r0, r2
  40172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  401732:	bf00      	nop
  401734:	370c      	adds	r7, #12
  401736:	46bd      	mov	sp, r7
  401738:	bc80      	pop	{r7}
  40173a:	4770      	bx	lr
  40173c:	e000e100 	.word	0xe000e100

00401740 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  401740:	b480      	push	{r7}
  401742:	b083      	sub	sp, #12
  401744:	af00      	add	r7, sp, #0
  401746:	4603      	mov	r3, r0
  401748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40174e:	2b00      	cmp	r3, #0
  401750:	db10      	blt.n	401774 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401752:	490b      	ldr	r1, [pc, #44]	; (401780 <__NVIC_DisableIRQ+0x40>)
  401754:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401758:	095b      	lsrs	r3, r3, #5
  40175a:	79fa      	ldrb	r2, [r7, #7]
  40175c:	f002 021f 	and.w	r2, r2, #31
  401760:	2001      	movs	r0, #1
  401762:	fa00 f202 	lsl.w	r2, r0, r2
  401766:	3320      	adds	r3, #32
  401768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  40176c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401770:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
  401774:	bf00      	nop
  401776:	370c      	adds	r7, #12
  401778:	46bd      	mov	sp, r7
  40177a:	bc80      	pop	{r7}
  40177c:	4770      	bx	lr
  40177e:	bf00      	nop
  401780:	e000e100 	.word	0xe000e100

00401784 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  401784:	b480      	push	{r7}
  401786:	b083      	sub	sp, #12
  401788:	af00      	add	r7, sp, #0
  40178a:	4603      	mov	r3, r0
  40178c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401792:	2b00      	cmp	r3, #0
  401794:	db0c      	blt.n	4017b0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401796:	4909      	ldr	r1, [pc, #36]	; (4017bc <__NVIC_ClearPendingIRQ+0x38>)
  401798:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40179c:	095b      	lsrs	r3, r3, #5
  40179e:	79fa      	ldrb	r2, [r7, #7]
  4017a0:	f002 021f 	and.w	r2, r2, #31
  4017a4:	2001      	movs	r0, #1
  4017a6:	fa00 f202 	lsl.w	r2, r0, r2
  4017aa:	3360      	adds	r3, #96	; 0x60
  4017ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  4017b0:	bf00      	nop
  4017b2:	370c      	adds	r7, #12
  4017b4:	46bd      	mov	sp, r7
  4017b6:	bc80      	pop	{r7}
  4017b8:	4770      	bx	lr
  4017ba:	bf00      	nop
  4017bc:	e000e100 	.word	0xe000e100

004017c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  4017c0:	b480      	push	{r7}
  4017c2:	b083      	sub	sp, #12
  4017c4:	af00      	add	r7, sp, #0
  4017c6:	4603      	mov	r3, r0
  4017c8:	6039      	str	r1, [r7, #0]
  4017ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4017cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017d0:	2b00      	cmp	r3, #0
  4017d2:	db0a      	blt.n	4017ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4017d4:	490d      	ldr	r1, [pc, #52]	; (40180c <__NVIC_SetPriority+0x4c>)
  4017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017da:	683a      	ldr	r2, [r7, #0]
  4017dc:	b2d2      	uxtb	r2, r2
  4017de:	0112      	lsls	r2, r2, #4
  4017e0:	b2d2      	uxtb	r2, r2
  4017e2:	440b      	add	r3, r1
  4017e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
  4017e8:	e00a      	b.n	401800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4017ea:	4909      	ldr	r1, [pc, #36]	; (401810 <__NVIC_SetPriority+0x50>)
  4017ec:	79fb      	ldrb	r3, [r7, #7]
  4017ee:	f003 030f 	and.w	r3, r3, #15
  4017f2:	3b04      	subs	r3, #4
  4017f4:	683a      	ldr	r2, [r7, #0]
  4017f6:	b2d2      	uxtb	r2, r2
  4017f8:	0112      	lsls	r2, r2, #4
  4017fa:	b2d2      	uxtb	r2, r2
  4017fc:	440b      	add	r3, r1
  4017fe:	761a      	strb	r2, [r3, #24]
}
  401800:	bf00      	nop
  401802:	370c      	adds	r7, #12
  401804:	46bd      	mov	sp, r7
  401806:	bc80      	pop	{r7}
  401808:	4770      	bx	lr
  40180a:	bf00      	nop
  40180c:	e000e100 	.word	0xe000e100
  401810:	e000ed00 	.word	0xe000ed00

00401814 <osc_get_rate>:
{
  401814:	b480      	push	{r7}
  401816:	b083      	sub	sp, #12
  401818:	af00      	add	r7, sp, #0
  40181a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40181c:	687b      	ldr	r3, [r7, #4]
  40181e:	2b07      	cmp	r3, #7
  401820:	d825      	bhi.n	40186e <osc_get_rate+0x5a>
  401822:	a201      	add	r2, pc, #4	; (adr r2, 401828 <osc_get_rate+0x14>)
  401824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401828:	00401849 	.word	0x00401849
  40182c:	0040184f 	.word	0x0040184f
  401830:	00401855 	.word	0x00401855
  401834:	0040185b 	.word	0x0040185b
  401838:	0040185f 	.word	0x0040185f
  40183c:	00401863 	.word	0x00401863
  401840:	00401867 	.word	0x00401867
  401844:	0040186b 	.word	0x0040186b
		return OSC_SLCK_32K_RC_HZ;
  401848:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40184c:	e010      	b.n	401870 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40184e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401852:	e00d      	b.n	401870 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401858:	e00a      	b.n	401870 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40185a:	4b08      	ldr	r3, [pc, #32]	; (40187c <osc_get_rate+0x68>)
  40185c:	e008      	b.n	401870 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40185e:	4b08      	ldr	r3, [pc, #32]	; (401880 <osc_get_rate+0x6c>)
  401860:	e006      	b.n	401870 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401862:	4b08      	ldr	r3, [pc, #32]	; (401884 <osc_get_rate+0x70>)
  401864:	e004      	b.n	401870 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401866:	4b07      	ldr	r3, [pc, #28]	; (401884 <osc_get_rate+0x70>)
  401868:	e002      	b.n	401870 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40186a:	4b06      	ldr	r3, [pc, #24]	; (401884 <osc_get_rate+0x70>)
  40186c:	e000      	b.n	401870 <osc_get_rate+0x5c>
	return 0;
  40186e:	2300      	movs	r3, #0
}
  401870:	4618      	mov	r0, r3
  401872:	370c      	adds	r7, #12
  401874:	46bd      	mov	sp, r7
  401876:	bc80      	pop	{r7}
  401878:	4770      	bx	lr
  40187a:	bf00      	nop
  40187c:	003d0900 	.word	0x003d0900
  401880:	007a1200 	.word	0x007a1200
  401884:	00b71b00 	.word	0x00b71b00

00401888 <sysclk_get_main_hz>:
{
  401888:	b580      	push	{r7, lr}
  40188a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40188c:	2006      	movs	r0, #6
  40188e:	4b04      	ldr	r3, [pc, #16]	; (4018a0 <sysclk_get_main_hz+0x18>)
  401890:	4798      	blx	r3
  401892:	4602      	mov	r2, r0
  401894:	4613      	mov	r3, r2
  401896:	009b      	lsls	r3, r3, #2
  401898:	4413      	add	r3, r2
  40189a:	009b      	lsls	r3, r3, #2
}
  40189c:	4618      	mov	r0, r3
  40189e:	bd80      	pop	{r7, pc}
  4018a0:	00401815 	.word	0x00401815

004018a4 <sysclk_get_cpu_hz>:
{
  4018a4:	b580      	push	{r7, lr}
  4018a6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4018a8:	4b02      	ldr	r3, [pc, #8]	; (4018b4 <sysclk_get_cpu_hz+0x10>)
  4018aa:	4798      	blx	r3
  4018ac:	4603      	mov	r3, r0
  4018ae:	085b      	lsrs	r3, r3, #1
}
  4018b0:	4618      	mov	r0, r3
  4018b2:	bd80      	pop	{r7, pc}
  4018b4:	00401889 	.word	0x00401889

004018b8 <vsync_handler>:
#include "ov2640.h"

static volatile uint32_t g_ul_vsync_flag = false;

void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
  4018b8:	b480      	push	{r7}
  4018ba:	b083      	sub	sp, #12
  4018bc:	af00      	add	r7, sp, #0
  4018be:	6078      	str	r0, [r7, #4]
  4018c0:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	g_ul_vsync_flag = true;
  4018c2:	4b04      	ldr	r3, [pc, #16]	; (4018d4 <vsync_handler+0x1c>)
  4018c4:	2201      	movs	r2, #1
  4018c6:	601a      	str	r2, [r3, #0]
}
  4018c8:	bf00      	nop
  4018ca:	370c      	adds	r7, #12
  4018cc:	46bd      	mov	sp, r7
  4018ce:	bc80      	pop	{r7}
  4018d0:	4770      	bx	lr
  4018d2:	bf00      	nop
  4018d4:	20000a58 	.word	0x20000a58

004018d8 <init_vsync_interrupts>:

void init_vsync_interrupts(void)
{
  4018d8:	b590      	push	{r4, r7, lr}
  4018da:	b083      	sub	sp, #12
  4018dc:	af02      	add	r7, sp, #8
	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(OV2640_VSYNC_PIO, OV2640_VSYNC_ID, OV2640_VSYNC_MASK,
  4018de:	4b0a      	ldr	r3, [pc, #40]	; (401908 <init_vsync_interrupts+0x30>)
  4018e0:	9300      	str	r3, [sp, #0]
  4018e2:	2301      	movs	r3, #1
  4018e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4018e8:	210b      	movs	r1, #11
  4018ea:	4808      	ldr	r0, [pc, #32]	; (40190c <init_vsync_interrupts+0x34>)
  4018ec:	4c08      	ldr	r4, [pc, #32]	; (401910 <init_vsync_interrupts+0x38>)
  4018ee:	47a0      	blx	r4
			OV2640_VSYNC_TYPE, vsync_handler);

	/* Enable PIO controller IRQs */
	NVIC_EnableIRQ((IRQn_Type)OV2640_VSYNC_ID);
  4018f0:	200b      	movs	r0, #11
  4018f2:	4b08      	ldr	r3, [pc, #32]	; (401914 <init_vsync_interrupts+0x3c>)
  4018f4:	4798      	blx	r3
	
	pio_enable_interrupt(OV2640_VSYNC_PIO, OV2640_VSYNC_MASK);
  4018f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4018fa:	4804      	ldr	r0, [pc, #16]	; (40190c <init_vsync_interrupts+0x34>)
  4018fc:	4b06      	ldr	r3, [pc, #24]	; (401918 <init_vsync_interrupts+0x40>)
  4018fe:	4798      	blx	r3
}
  401900:	bf00      	nop
  401902:	3704      	adds	r7, #4
  401904:	46bd      	mov	sp, r7
  401906:	bd90      	pop	{r4, r7, pc}
  401908:	004018b9 	.word	0x004018b9
  40190c:	400e0e00 	.word	0x400e0e00
  401910:	00400ab1 	.word	0x00400ab1
  401914:	00401709 	.word	0x00401709
  401918:	0040074f 	.word	0x0040074f

0040191c <configure_twi>:

void configure_twi(void)
{
  40191c:	b580      	push	{r7, lr}
  40191e:	b084      	sub	sp, #16
  401920:	af00      	add	r7, sp, #0
	twi_options_t opt;
	
	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);
  401922:	2013      	movs	r0, #19
  401924:	4b13      	ldr	r3, [pc, #76]	; (401974 <configure_twi+0x58>)
  401926:	4798      	blx	r3

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  401928:	4b13      	ldr	r3, [pc, #76]	; (401978 <configure_twi+0x5c>)
  40192a:	4798      	blx	r3
  40192c:	4603      	mov	r3, r0
  40192e:	607b      	str	r3, [r7, #4]
	opt.speed      = TWI_CLK;
  401930:	4b12      	ldr	r3, [pc, #72]	; (40197c <configure_twi+0x60>)
  401932:	60bb      	str	r3, [r7, #8]
	twi_master_init(BOARD_TWI, &opt);
  401934:	1d3b      	adds	r3, r7, #4
  401936:	4619      	mov	r1, r3
  401938:	4811      	ldr	r0, [pc, #68]	; (401980 <configure_twi+0x64>)
  40193a:	4b12      	ldr	r3, [pc, #72]	; (401984 <configure_twi+0x68>)
  40193c:	4798      	blx	r3

	/* Configure TWI interrupts */
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
  40193e:	2013      	movs	r0, #19
  401940:	4b11      	ldr	r3, [pc, #68]	; (401988 <configure_twi+0x6c>)
  401942:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
  401944:	2013      	movs	r0, #19
  401946:	4b11      	ldr	r3, [pc, #68]	; (40198c <configure_twi+0x70>)
  401948:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
  40194a:	2100      	movs	r1, #0
  40194c:	2013      	movs	r0, #19
  40194e:	4b10      	ldr	r3, [pc, #64]	; (401990 <configure_twi+0x74>)
  401950:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
  401952:	2013      	movs	r0, #19
  401954:	4b0f      	ldr	r3, [pc, #60]	; (401994 <configure_twi+0x78>)
  401956:	4798      	blx	r3
	
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401958:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40195c:	2003      	movs	r0, #3
  40195e:	4b0e      	ldr	r3, [pc, #56]	; (401998 <configure_twi+0x7c>)
  401960:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  401962:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401966:	2004      	movs	r0, #4
  401968:	4b0b      	ldr	r3, [pc, #44]	; (401998 <configure_twi+0x7c>)
  40196a:	4798      	blx	r3
	
}
  40196c:	bf00      	nop
  40196e:	3710      	adds	r7, #16
  401970:	46bd      	mov	sp, r7
  401972:	bd80      	pop	{r7, pc}
  401974:	00400e1d 	.word	0x00400e1d
  401978:	004018a5 	.word	0x004018a5
  40197c:	00061a80 	.word	0x00061a80
  401980:	40018000 	.word	0x40018000
  401984:	00401029 	.word	0x00401029
  401988:	00401741 	.word	0x00401741
  40198c:	00401785 	.word	0x00401785
  401990:	004017c1 	.word	0x004017c1
  401994:	00401709 	.word	0x00401709
  401998:	004007b1 	.word	0x004007b1

0040199c <pio_capture_init>:



void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
  40199c:	b580      	push	{r7, lr}
  40199e:	b082      	sub	sp, #8
  4019a0:	af00      	add	r7, sp, #0
  4019a2:	6078      	str	r0, [r7, #4]
  4019a4:	6039      	str	r1, [r7, #0]
	/* Enable peripheral clock */
	pmc_enable_periph_clk(ul_id);
  4019a6:	6838      	ldr	r0, [r7, #0]
  4019a8:	4b1a      	ldr	r3, [pc, #104]	; (401a14 <pio_capture_init+0x78>)
  4019aa:	4798      	blx	r3

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  4019ac:	687b      	ldr	r3, [r7, #4]
  4019ae:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4019b2:	f023 0201 	bic.w	r2, r3, #1
  4019b6:	687b      	ldr	r3, [r7, #4]
  4019b8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  4019bc:	687b      	ldr	r3, [r7, #4]
  4019be:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
  4019c2:	f043 0208 	orr.w	r2, r3, #8
  4019c6:	687b      	ldr	r3, [r7, #4]
  4019c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  4019cc:	687b      	ldr	r3, [r7, #4]
  4019ce:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4019d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
  4019d6:	687b      	ldr	r3, [r7, #4]
  4019d8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  4019dc:	687b      	ldr	r3, [r7, #4]
  4019de:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4019e2:	f043 0220 	orr.w	r2, r3, #32
  4019e6:	687b      	ldr	r3, [r7, #4]
  4019e8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  4019ec:	687b      	ldr	r3, [r7, #4]
  4019ee:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4019f2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
  4019f6:	687b      	ldr	r3, [r7, #4]
  4019f8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  4019fc:	687b      	ldr	r3, [r7, #4]
  4019fe:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401a02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  401a06:	687b      	ldr	r3, [r7, #4]
  401a08:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150



}
  401a0c:	bf00      	nop
  401a0e:	3708      	adds	r7, #8
  401a10:	46bd      	mov	sp, r7
  401a12:	bd80      	pop	{r7, pc}
  401a14:	00400e1d 	.word	0x00400e1d

00401a18 <pio_capture_to_buffer>:

static uint8_t pio_capture_to_buffer(Pio *p_pio, uint8_t *uc_buf,
uint32_t ul_size)
{
  401a18:	b480      	push	{r7}
  401a1a:	b085      	sub	sp, #20
  401a1c:	af00      	add	r7, sp, #0
  401a1e:	60f8      	str	r0, [r7, #12]
  401a20:	60b9      	str	r1, [r7, #8]
  401a22:	607a      	str	r2, [r7, #4]
	/* Check if the first PDC bank is free */
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) {
  401a24:	68fb      	ldr	r3, [r7, #12]
  401a26:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
  401a2a:	2b00      	cmp	r3, #0
  401a2c:	d112      	bne.n	401a54 <pio_capture_to_buffer+0x3c>
  401a2e:	68fb      	ldr	r3, [r7, #12]
  401a30:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  401a34:	2b00      	cmp	r3, #0
  401a36:	d10d      	bne.n	401a54 <pio_capture_to_buffer+0x3c>
		p_pio->PIO_RPR = (uint32_t)uc_buf;
  401a38:	68ba      	ldr	r2, [r7, #8]
  401a3a:	68fb      	ldr	r3, [r7, #12]
  401a3c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		p_pio->PIO_RCR = ul_size;
  401a40:	68fb      	ldr	r3, [r7, #12]
  401a42:	687a      	ldr	r2, [r7, #4]
  401a44:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
		p_pio->PIO_PTCR = PIO_PTCR_RXTEN;
  401a48:	68fb      	ldr	r3, [r7, #12]
  401a4a:	2201      	movs	r2, #1
  401a4c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		return 1;
  401a50:	2301      	movs	r3, #1
  401a52:	e00f      	b.n	401a74 <pio_capture_to_buffer+0x5c>
		} else if (p_pio->PIO_RNCR == 0) {
  401a54:	68fb      	ldr	r3, [r7, #12]
  401a56:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  401a5a:	2b00      	cmp	r3, #0
  401a5c:	d109      	bne.n	401a72 <pio_capture_to_buffer+0x5a>
		p_pio->PIO_RNPR = (uint32_t)uc_buf;
  401a5e:	68ba      	ldr	r2, [r7, #8]
  401a60:	68fb      	ldr	r3, [r7, #12]
  401a62:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		p_pio->PIO_RNCR = ul_size;
  401a66:	68fb      	ldr	r3, [r7, #12]
  401a68:	687a      	ldr	r2, [r7, #4]
  401a6a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
		return 1;
  401a6e:	2301      	movs	r3, #1
  401a70:	e000      	b.n	401a74 <pio_capture_to_buffer+0x5c>
		} else {
		return 0;
  401a72:	2300      	movs	r3, #0
	}
}
  401a74:	4618      	mov	r0, r3
  401a76:	3714      	adds	r7, #20
  401a78:	46bd      	mov	sp, r7
  401a7a:	bc80      	pop	{r7}
  401a7c:	4770      	bx	lr
	...

00401a80 <init_camera>:


void init_camera(void)
{
  401a80:	b580      	push	{r7, lr}
  401a82:	af00      	add	r7, sp, #0
	
	pmc_enable_pllbck(7, 0x1, 1);
  401a84:	2201      	movs	r2, #1
  401a86:	2101      	movs	r1, #1
  401a88:	2007      	movs	r0, #7
  401a8a:	4b26      	ldr	r3, [pc, #152]	; (401b24 <init_camera+0xa4>)
  401a8c:	4798      	blx	r3
	
	pio_capture_init(OV_DATA_BUS_PIO, OV_DATA_BUS_ID);
  401a8e:	210b      	movs	r1, #11
  401a90:	4825      	ldr	r0, [pc, #148]	; (401b28 <init_camera+0xa8>)
  401a92:	4b26      	ldr	r3, [pc, #152]	; (401b2c <init_camera+0xac>)
  401a94:	4798      	blx	r3
	
	init_vsync_interrupts();
  401a96:	4b26      	ldr	r3, [pc, #152]	; (401b30 <init_camera+0xb0>)
  401a98:	4798      	blx	r3
	
	/* Init PCK1 to work at 24 Mhz */
	/* 96/4=24 Mhz */
	PMC->PMC_PCK[0] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLB_CLK);
  401a9a:	4b26      	ldr	r3, [pc, #152]	; (401b34 <init_camera+0xb4>)
  401a9c:	2223      	movs	r2, #35	; 0x23
  401a9e:	641a      	str	r2, [r3, #64]	; 0x40
	PMC->PMC_SCER = PMC_SCER_PCK0;
  401aa0:	4b24      	ldr	r3, [pc, #144]	; (401b34 <init_camera+0xb4>)
  401aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
  401aa6:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK0)) {
  401aa8:	bf00      	nop
  401aaa:	4b22      	ldr	r3, [pc, #136]	; (401b34 <init_camera+0xb4>)
  401aac:	689b      	ldr	r3, [r3, #8]
  401aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401ab2:	2b00      	cmp	r3, #0
  401ab4:	d0f9      	beq.n	401aaa <init_camera+0x2a>
	}
	
	configure_twi();	
  401ab6:	4b20      	ldr	r3, [pc, #128]	; (401b38 <init_camera+0xb8>)
  401ab8:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  401aba:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401abe:	2011      	movs	r0, #17
  401ac0:	4b1e      	ldr	r3, [pc, #120]	; (401b3c <init_camera+0xbc>)
  401ac2:	4798      	blx	r3
	
	
	gpio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
  401ac4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401ac8:	2014      	movs	r0, #20
  401aca:	4b1c      	ldr	r3, [pc, #112]	; (401b3c <init_camera+0xbc>)
  401acc:	4798      	blx	r3
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  401ace:	2171      	movs	r1, #113	; 0x71
  401ad0:	2010      	movs	r0, #16
  401ad2:	4b1a      	ldr	r3, [pc, #104]	; (401b3c <init_camera+0xbc>)
  401ad4:	4798      	blx	r3
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  401ad6:	2171      	movs	r1, #113	; 0x71
  401ad8:	200f      	movs	r0, #15
  401ada:	4b18      	ldr	r3, [pc, #96]	; (401b3c <init_camera+0xbc>)
  401adc:	4798      	blx	r3
	
	gpio_configure_pin(OV_DATA_BUS_D0, OV_DATA_BUS_FLAGS);
  401ade:	4918      	ldr	r1, [pc, #96]	; (401b40 <init_camera+0xc0>)
  401ae0:	2018      	movs	r0, #24
  401ae2:	4b16      	ldr	r3, [pc, #88]	; (401b3c <init_camera+0xbc>)
  401ae4:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D1, OV_DATA_BUS_FLAGS);
  401ae6:	4916      	ldr	r1, [pc, #88]	; (401b40 <init_camera+0xc0>)
  401ae8:	2019      	movs	r0, #25
  401aea:	4b14      	ldr	r3, [pc, #80]	; (401b3c <init_camera+0xbc>)
  401aec:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  401aee:	4914      	ldr	r1, [pc, #80]	; (401b40 <init_camera+0xc0>)
  401af0:	201a      	movs	r0, #26
  401af2:	4b12      	ldr	r3, [pc, #72]	; (401b3c <init_camera+0xbc>)
  401af4:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  401af6:	4912      	ldr	r1, [pc, #72]	; (401b40 <init_camera+0xc0>)
  401af8:	201b      	movs	r0, #27
  401afa:	4b10      	ldr	r3, [pc, #64]	; (401b3c <init_camera+0xbc>)
  401afc:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  401afe:	4910      	ldr	r1, [pc, #64]	; (401b40 <init_camera+0xc0>)
  401b00:	201c      	movs	r0, #28
  401b02:	4b0e      	ldr	r3, [pc, #56]	; (401b3c <init_camera+0xbc>)
  401b04:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  401b06:	490e      	ldr	r1, [pc, #56]	; (401b40 <init_camera+0xc0>)
  401b08:	201d      	movs	r0, #29
  401b0a:	4b0c      	ldr	r3, [pc, #48]	; (401b3c <init_camera+0xbc>)
  401b0c:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  401b0e:	490c      	ldr	r1, [pc, #48]	; (401b40 <init_camera+0xc0>)
  401b10:	201e      	movs	r0, #30
  401b12:	4b0a      	ldr	r3, [pc, #40]	; (401b3c <init_camera+0xbc>)
  401b14:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  401b16:	490a      	ldr	r1, [pc, #40]	; (401b40 <init_camera+0xc0>)
  401b18:	201f      	movs	r0, #31
  401b1a:	4b08      	ldr	r3, [pc, #32]	; (401b3c <init_camera+0xbc>)
  401b1c:	4798      	blx	r3


	/* Init PIO capture*/


}
  401b1e:	bf00      	nop
  401b20:	bd80      	pop	{r7, pc}
  401b22:	bf00      	nop
  401b24:	00400d9d 	.word	0x00400d9d
  401b28:	400e0e00 	.word	0x400e0e00
  401b2c:	0040199d 	.word	0x0040199d
  401b30:	004018d9 	.word	0x004018d9
  401b34:	400e0400 	.word	0x400e0400
  401b38:	0040191d 	.word	0x0040191d
  401b3c:	004007b1 	.word	0x004007b1
  401b40:	28000001 	.word	0x28000001

00401b44 <configure_camera>:

void configure_camera(void)
{
  401b44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b48:	af00      	add	r7, sp, #0
	/* ov7740 Initialization */
	while (ov_init(BOARD_TWI) == 1) {
  401b4a:	bf00      	nop
  401b4c:	482c      	ldr	r0, [pc, #176]	; (401c00 <configure_camera+0xbc>)
  401b4e:	4b2d      	ldr	r3, [pc, #180]	; (401c04 <configure_camera+0xc0>)
  401b50:	4798      	blx	r3
  401b52:	4603      	mov	r3, r0
  401b54:	2b01      	cmp	r3, #1
  401b56:	d0f9      	beq.n	401b4c <configure_camera+0x8>
	}

	/* ov7740 configuration */
	ov_configure(BOARD_TWI, JPEG_INIT);
  401b58:	2100      	movs	r1, #0
  401b5a:	4829      	ldr	r0, [pc, #164]	; (401c00 <configure_camera+0xbc>)
  401b5c:	4b2a      	ldr	r3, [pc, #168]	; (401c08 <configure_camera+0xc4>)
  401b5e:	4798      	blx	r3
	ov_configure(BOARD_TWI, YUV422);
  401b60:	2101      	movs	r1, #1
  401b62:	4827      	ldr	r0, [pc, #156]	; (401c00 <configure_camera+0xbc>)
  401b64:	4b28      	ldr	r3, [pc, #160]	; (401c08 <configure_camera+0xc4>)
  401b66:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG);
  401b68:	2102      	movs	r1, #2
  401b6a:	4825      	ldr	r0, [pc, #148]	; (401c00 <configure_camera+0xbc>)
  401b6c:	4b26      	ldr	r3, [pc, #152]	; (401c08 <configure_camera+0xc4>)
  401b6e:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG_640x480);
  401b70:	2104      	movs	r1, #4
  401b72:	4823      	ldr	r0, [pc, #140]	; (401c00 <configure_camera+0xbc>)
  401b74:	4b24      	ldr	r3, [pc, #144]	; (401c08 <configure_camera+0xc4>)
  401b76:	4798      	blx	r3

	/* Wait 3 seconds to let the image sensor to adapt to environment */
	delay_ms(3000);
  401b78:	4b24      	ldr	r3, [pc, #144]	; (401c0c <configure_camera+0xc8>)
  401b7a:	4798      	blx	r3
  401b7c:	4603      	mov	r3, r0
  401b7e:	4619      	mov	r1, r3
  401b80:	f04f 0200 	mov.w	r2, #0
  401b84:	460b      	mov	r3, r1
  401b86:	4614      	mov	r4, r2
  401b88:	18db      	adds	r3, r3, r3
  401b8a:	eb44 0404 	adc.w	r4, r4, r4
  401b8e:	185b      	adds	r3, r3, r1
  401b90:	eb44 0402 	adc.w	r4, r4, r2
  401b94:	ea4f 1b04 	mov.w	fp, r4, lsl #4
  401b98:	ea4b 7b13 	orr.w	fp, fp, r3, lsr #28
  401b9c:	ea4f 1a03 	mov.w	sl, r3, lsl #4
  401ba0:	4653      	mov	r3, sl
  401ba2:	465c      	mov	r4, fp
  401ba4:	1a5b      	subs	r3, r3, r1
  401ba6:	eb64 0402 	sbc.w	r4, r4, r2
  401baa:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  401bae:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  401bb2:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  401bb6:	4643      	mov	r3, r8
  401bb8:	464c      	mov	r4, r9
  401bba:	1a5b      	subs	r3, r3, r1
  401bbc:	eb64 0402 	sbc.w	r4, r4, r2
  401bc0:	00e6      	lsls	r6, r4, #3
  401bc2:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  401bc6:	00dd      	lsls	r5, r3, #3
  401bc8:	462b      	mov	r3, r5
  401bca:	4634      	mov	r4, r6
  401bcc:	4619      	mov	r1, r3
  401bce:	4622      	mov	r2, r4
  401bd0:	f243 63af 	movw	r3, #13999	; 0x36af
  401bd4:	f04f 0400 	mov.w	r4, #0
  401bd8:	18cd      	adds	r5, r1, r3
  401bda:	eb42 0604 	adc.w	r6, r2, r4
  401bde:	4628      	mov	r0, r5
  401be0:	4631      	mov	r1, r6
  401be2:	4c0b      	ldr	r4, [pc, #44]	; (401c10 <configure_camera+0xcc>)
  401be4:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401be8:	f04f 0300 	mov.w	r3, #0
  401bec:	47a0      	blx	r4
  401bee:	4603      	mov	r3, r0
  401bf0:	460c      	mov	r4, r1
  401bf2:	4618      	mov	r0, r3
  401bf4:	4b07      	ldr	r3, [pc, #28]	; (401c14 <configure_camera+0xd0>)
  401bf6:	4798      	blx	r3
}
  401bf8:	bf00      	nop
  401bfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401bfe:	bf00      	nop
  401c00:	40018000 	.word	0x40018000
  401c04:	00401f7d 	.word	0x00401f7d
  401c08:	00401fdd 	.word	0x00401fdd
  401c0c:	004018a5 	.word	0x004018a5
  401c10:	00403285 	.word	0x00403285
  401c14:	20000001 	.word	0x20000001

00401c18 <start_capture>:


uint8_t start_capture(void)
{
  401c18:	b580      	push	{r7, lr}
  401c1a:	b082      	sub	sp, #8
  401c1c:	af00      	add	r7, sp, #0

	/* Enable vsync interrupt*/
	pio_enable_interrupt(OV2640_VSYNC_PIO, OV2640_VSYNC_MASK);
  401c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401c22:	4818      	ldr	r0, [pc, #96]	; (401c84 <start_capture+0x6c>)
  401c24:	4b18      	ldr	r3, [pc, #96]	; (401c88 <start_capture+0x70>)
  401c26:	4798      	blx	r3

	/* Capture acquisition will start on rising edge of Vsync signal.
	 * So wait g_vsync_flag = 1 before start process
	 */
	while (!g_ul_vsync_flag) {
  401c28:	bf00      	nop
  401c2a:	4b18      	ldr	r3, [pc, #96]	; (401c8c <start_capture+0x74>)
  401c2c:	681b      	ldr	r3, [r3, #0]
  401c2e:	2b00      	cmp	r3, #0
  401c30:	d0fb      	beq.n	401c2a <start_capture+0x12>
	}

	/* Disable vsync interrupt*/
	pio_disable_interrupt(OV2640_VSYNC_PIO, OV2640_VSYNC_MASK);
  401c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401c36:	4813      	ldr	r0, [pc, #76]	; (401c84 <start_capture+0x6c>)
  401c38:	4b15      	ldr	r3, [pc, #84]	; (401c90 <start_capture+0x78>)
  401c3a:	4798      	blx	r3

	/* Enable pio capture*/
	pio_capture_enable(OV_DATA_BUS_PIO);
  401c3c:	4811      	ldr	r0, [pc, #68]	; (401c84 <start_capture+0x6c>)
  401c3e:	4b15      	ldr	r3, [pc, #84]	; (401c94 <start_capture+0x7c>)
  401c40:	4798      	blx	r3

	/* Capture data and send it to external SRAM memory thanks to PDC
	 * feature */
	pio_capture_to_buffer(OV_DATA_BUS_PIO, image_buffer,
  401c42:	f243 02d4 	movw	r2, #12500	; 0x30d4
  401c46:	4914      	ldr	r1, [pc, #80]	; (401c98 <start_capture+0x80>)
  401c48:	480e      	ldr	r0, [pc, #56]	; (401c84 <start_capture+0x6c>)
  401c4a:	4b14      	ldr	r3, [pc, #80]	; (401c9c <start_capture+0x84>)
  401c4c:	4798      	blx	r3
			IMAGE_MAX >> 2);


	/* Wait end of capture*/
	while (!((OV_DATA_BUS_PIO->PIO_PCISR & PIO_PCIMR_RXBUFF) ==
  401c4e:	bf00      	nop
  401c50:	4b0c      	ldr	r3, [pc, #48]	; (401c84 <start_capture+0x6c>)
  401c52:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
  401c56:	f003 0308 	and.w	r3, r3, #8
  401c5a:	2b08      	cmp	r3, #8
  401c5c:	d1f8      	bne.n	401c50 <start_capture+0x38>
			PIO_PCIMR_RXBUFF)) {
	}

	/* Disable pio capture*/
	pio_capture_disable(OV_DATA_BUS_PIO);
  401c5e:	4809      	ldr	r0, [pc, #36]	; (401c84 <start_capture+0x6c>)
  401c60:	4b0f      	ldr	r3, [pc, #60]	; (401ca0 <start_capture+0x88>)
  401c62:	4798      	blx	r3
	
				
				
	vsync_flag = false;
  401c64:	4b0f      	ldr	r3, [pc, #60]	; (401ca4 <start_capture+0x8c>)
  401c66:	2200      	movs	r2, #0
  401c68:	601a      	str	r2, [r3, #0]

	/* Reset vsync flag*/
	g_ul_vsync_flag = false;
  401c6a:	4b08      	ldr	r3, [pc, #32]	; (401c8c <start_capture+0x74>)
  401c6c:	2200      	movs	r2, #0
  401c6e:	601a      	str	r2, [r3, #0]
	
	uint8_t val = find_image_len();
  401c70:	4b0d      	ldr	r3, [pc, #52]	; (401ca8 <start_capture+0x90>)
  401c72:	4798      	blx	r3
  401c74:	4603      	mov	r3, r0
  401c76:	71fb      	strb	r3, [r7, #7]
	return val;
  401c78:	79fb      	ldrb	r3, [r7, #7]
}
  401c7a:	4618      	mov	r0, r3
  401c7c:	3708      	adds	r7, #8
  401c7e:	46bd      	mov	sp, r7
  401c80:	bd80      	pop	{r7, pc}
  401c82:	bf00      	nop
  401c84:	400e0e00 	.word	0x400e0e00
  401c88:	0040074f 	.word	0x0040074f
  401c8c:	20000a58 	.word	0x20000a58
  401c90:	00400769 	.word	0x00400769
  401c94:	00400985 	.word	0x00400985
  401c98:	20000ac4 	.word	0x20000ac4
  401c9c:	00401a19 	.word	0x00401a19
  401ca0:	004009b1 	.word	0x004009b1
  401ca4:	20000abc 	.word	0x20000abc
  401ca8:	00401cad 	.word	0x00401cad

00401cac <find_image_len>:


uint8_t find_image_len(void){
  401cac:	b480      	push	{r7}
  401cae:	b083      	sub	sp, #12
  401cb0:	af00      	add	r7, sp, #0
		uint8_t start_exists = 0;
  401cb2:	2300      	movs	r3, #0
  401cb4:	71fb      	strb	r3, [r7, #7]
		uint32_t arrSize = 0;
  401cb6:	2300      	movs	r3, #0
  401cb8:	603b      	str	r3, [r7, #0]
		start_of_image = 0;
  401cba:	4b21      	ldr	r3, [pc, #132]	; (401d40 <find_image_len+0x94>)
  401cbc:	2200      	movs	r2, #0
  401cbe:	601a      	str	r2, [r3, #0]
		end_of_image = 0;
  401cc0:	4b20      	ldr	r3, [pc, #128]	; (401d44 <find_image_len+0x98>)
  401cc2:	2200      	movs	r2, #0
  401cc4:	601a      	str	r2, [r3, #0]
		while( arrSize+1 < IMAGE_MAX){
  401cc6:	e028      	b.n	401d1a <find_image_len+0x6e>
			if(image_buffer[arrSize] == 0xff && image_buffer[arrSize+1] == 0xd8){
  401cc8:	4a1f      	ldr	r2, [pc, #124]	; (401d48 <find_image_len+0x9c>)
  401cca:	683b      	ldr	r3, [r7, #0]
  401ccc:	4413      	add	r3, r2
  401cce:	781b      	ldrb	r3, [r3, #0]
  401cd0:	2bff      	cmp	r3, #255	; 0xff
  401cd2:	d10a      	bne.n	401cea <find_image_len+0x3e>
  401cd4:	683b      	ldr	r3, [r7, #0]
  401cd6:	3301      	adds	r3, #1
  401cd8:	4a1b      	ldr	r2, [pc, #108]	; (401d48 <find_image_len+0x9c>)
  401cda:	5cd3      	ldrb	r3, [r2, r3]
  401cdc:	2bd8      	cmp	r3, #216	; 0xd8
  401cde:	d104      	bne.n	401cea <find_image_len+0x3e>
				start_of_image = arrSize;
  401ce0:	4a17      	ldr	r2, [pc, #92]	; (401d40 <find_image_len+0x94>)
  401ce2:	683b      	ldr	r3, [r7, #0]
  401ce4:	6013      	str	r3, [r2, #0]
				start_exists = 1;
  401ce6:	2301      	movs	r3, #1
  401ce8:	71fb      	strb	r3, [r7, #7]
			}
			if(image_buffer[arrSize] == 0xff && image_buffer[arrSize+1] == 0xd9 && start_exists == 1){
  401cea:	4a17      	ldr	r2, [pc, #92]	; (401d48 <find_image_len+0x9c>)
  401cec:	683b      	ldr	r3, [r7, #0]
  401cee:	4413      	add	r3, r2
  401cf0:	781b      	ldrb	r3, [r3, #0]
  401cf2:	2bff      	cmp	r3, #255	; 0xff
  401cf4:	d10e      	bne.n	401d14 <find_image_len+0x68>
  401cf6:	683b      	ldr	r3, [r7, #0]
  401cf8:	3301      	adds	r3, #1
  401cfa:	4a13      	ldr	r2, [pc, #76]	; (401d48 <find_image_len+0x9c>)
  401cfc:	5cd3      	ldrb	r3, [r2, r3]
  401cfe:	2bd9      	cmp	r3, #217	; 0xd9
  401d00:	d108      	bne.n	401d14 <find_image_len+0x68>
  401d02:	79fb      	ldrb	r3, [r7, #7]
  401d04:	2b01      	cmp	r3, #1
  401d06:	d105      	bne.n	401d14 <find_image_len+0x68>
				end_of_image = arrSize+2;
  401d08:	683b      	ldr	r3, [r7, #0]
  401d0a:	3302      	adds	r3, #2
  401d0c:	4a0d      	ldr	r2, [pc, #52]	; (401d44 <find_image_len+0x98>)
  401d0e:	6013      	str	r3, [r2, #0]
				return 1;
  401d10:	2301      	movs	r3, #1
  401d12:	e00f      	b.n	401d34 <find_image_len+0x88>
			}
			arrSize = arrSize + 1;
  401d14:	683b      	ldr	r3, [r7, #0]
  401d16:	3301      	adds	r3, #1
  401d18:	603b      	str	r3, [r7, #0]
		while( arrSize+1 < IMAGE_MAX){
  401d1a:	683b      	ldr	r3, [r7, #0]
  401d1c:	3301      	adds	r3, #1
  401d1e:	f24c 324f 	movw	r2, #49999	; 0xc34f
  401d22:	4293      	cmp	r3, r2
  401d24:	d9d0      	bls.n	401cc8 <find_image_len+0x1c>
		}
		start_of_image = 0;
  401d26:	4b06      	ldr	r3, [pc, #24]	; (401d40 <find_image_len+0x94>)
  401d28:	2200      	movs	r2, #0
  401d2a:	601a      	str	r2, [r3, #0]
		end_of_image = 0;
  401d2c:	4b05      	ldr	r3, [pc, #20]	; (401d44 <find_image_len+0x98>)
  401d2e:	2200      	movs	r2, #0
  401d30:	601a      	str	r2, [r3, #0]
		
		return 0;
  401d32:	2300      	movs	r3, #0
}
  401d34:	4618      	mov	r0, r3
  401d36:	370c      	adds	r7, #12
  401d38:	46bd      	mov	sp, r7
  401d3a:	bc80      	pop	{r7}
  401d3c:	4770      	bx	lr
  401d3e:	bf00      	nop
  401d40:	20000ab8 	.word	0x20000ab8
  401d44:	20000ac0 	.word	0x20000ac0
  401d48:	20000ac4 	.word	0x20000ac4

00401d4c <osc_get_rate>:
{
  401d4c:	b480      	push	{r7}
  401d4e:	b083      	sub	sp, #12
  401d50:	af00      	add	r7, sp, #0
  401d52:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401d54:	687b      	ldr	r3, [r7, #4]
  401d56:	2b07      	cmp	r3, #7
  401d58:	d825      	bhi.n	401da6 <osc_get_rate+0x5a>
  401d5a:	a201      	add	r2, pc, #4	; (adr r2, 401d60 <osc_get_rate+0x14>)
  401d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401d60:	00401d81 	.word	0x00401d81
  401d64:	00401d87 	.word	0x00401d87
  401d68:	00401d8d 	.word	0x00401d8d
  401d6c:	00401d93 	.word	0x00401d93
  401d70:	00401d97 	.word	0x00401d97
  401d74:	00401d9b 	.word	0x00401d9b
  401d78:	00401d9f 	.word	0x00401d9f
  401d7c:	00401da3 	.word	0x00401da3
		return OSC_SLCK_32K_RC_HZ;
  401d80:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401d84:	e010      	b.n	401da8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401d8a:	e00d      	b.n	401da8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401d8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401d90:	e00a      	b.n	401da8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401d92:	4b08      	ldr	r3, [pc, #32]	; (401db4 <osc_get_rate+0x68>)
  401d94:	e008      	b.n	401da8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401d96:	4b08      	ldr	r3, [pc, #32]	; (401db8 <osc_get_rate+0x6c>)
  401d98:	e006      	b.n	401da8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401d9a:	4b08      	ldr	r3, [pc, #32]	; (401dbc <osc_get_rate+0x70>)
  401d9c:	e004      	b.n	401da8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401d9e:	4b07      	ldr	r3, [pc, #28]	; (401dbc <osc_get_rate+0x70>)
  401da0:	e002      	b.n	401da8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401da2:	4b06      	ldr	r3, [pc, #24]	; (401dbc <osc_get_rate+0x70>)
  401da4:	e000      	b.n	401da8 <osc_get_rate+0x5c>
	return 0;
  401da6:	2300      	movs	r3, #0
}
  401da8:	4618      	mov	r0, r3
  401daa:	370c      	adds	r7, #12
  401dac:	46bd      	mov	sp, r7
  401dae:	bc80      	pop	{r7}
  401db0:	4770      	bx	lr
  401db2:	bf00      	nop
  401db4:	003d0900 	.word	0x003d0900
  401db8:	007a1200 	.word	0x007a1200
  401dbc:	00b71b00 	.word	0x00b71b00

00401dc0 <sysclk_get_main_hz>:
{
  401dc0:	b580      	push	{r7, lr}
  401dc2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401dc4:	2006      	movs	r0, #6
  401dc6:	4b04      	ldr	r3, [pc, #16]	; (401dd8 <sysclk_get_main_hz+0x18>)
  401dc8:	4798      	blx	r3
  401dca:	4602      	mov	r2, r0
  401dcc:	4613      	mov	r3, r2
  401dce:	009b      	lsls	r3, r3, #2
  401dd0:	4413      	add	r3, r2
  401dd2:	009b      	lsls	r3, r3, #2
}
  401dd4:	4618      	mov	r0, r3
  401dd6:	bd80      	pop	{r7, pc}
  401dd8:	00401d4d 	.word	0x00401d4d

00401ddc <sysclk_get_cpu_hz>:
{
  401ddc:	b580      	push	{r7, lr}
  401dde:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401de0:	4b02      	ldr	r3, [pc, #8]	; (401dec <sysclk_get_cpu_hz+0x10>)
  401de2:	4798      	blx	r3
  401de4:	4603      	mov	r3, r0
  401de6:	085b      	lsrs	r3, r3, #1
}
  401de8:	4618      	mov	r0, r3
  401dea:	bd80      	pop	{r7, pc}
  401dec:	00401dc1 	.word	0x00401dc1

00401df0 <ov_id>:
 *
 * \param p_twi TWI interface.
 * \return PID and VER.
 */
static uint32_t ov_id(Twi* const p_twi)
{
  401df0:	b580      	push	{r7, lr}
  401df2:	b08e      	sub	sp, #56	; 0x38
  401df4:	af00      	add	r7, sp, #0
  401df6:	6078      	str	r0, [r7, #4]
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  401df8:	2300      	movs	r3, #0
  401dfa:	60fb      	str	r3, [r7, #12]
	uint32_t ul_ver = 0;
  401dfc:	2300      	movs	r3, #0
  401dfe:	60bb      	str	r3, [r7, #8]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  401e00:	2330      	movs	r3, #48	; 0x30
  401e02:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	packet_pid.addr[0] = OV2640_PIDH;
  401e06:	230a      	movs	r3, #10
  401e08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	packet_pid.addr_length = 1;
  401e0c:	2301      	movs	r3, #1
  401e0e:	62bb      	str	r3, [r7, #40]	; 0x28
	packet_pid.buffer = &ul_id;
  401e10:	f107 030c 	add.w	r3, r7, #12
  401e14:	62fb      	str	r3, [r7, #44]	; 0x2c
	packet_pid.length = 1;
  401e16:	2301      	movs	r3, #1
  401e18:	633b      	str	r3, [r7, #48]	; 0x30

	ov_read_reg(p_twi, &packet_pid);
  401e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401e1e:	4619      	mov	r1, r3
  401e20:	6878      	ldr	r0, [r7, #4]
  401e22:	4b0e      	ldr	r3, [pc, #56]	; (401e5c <ov_id+0x6c>)
  401e24:	4798      	blx	r3

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  401e26:	2330      	movs	r3, #48	; 0x30
  401e28:	f887 3020 	strb.w	r3, [r7, #32]
	packet_ver.addr[0] = OV2640_PIDL;
  401e2c:	230b      	movs	r3, #11
  401e2e:	743b      	strb	r3, [r7, #16]
	packet_ver.addr_length = 1;
  401e30:	2301      	movs	r3, #1
  401e32:	617b      	str	r3, [r7, #20]
	packet_ver.buffer = &ul_ver;
  401e34:	f107 0308 	add.w	r3, r7, #8
  401e38:	61bb      	str	r3, [r7, #24]
	packet_ver.length = 1;
  401e3a:	2301      	movs	r3, #1
  401e3c:	61fb      	str	r3, [r7, #28]

	ov_read_reg(p_twi, &packet_ver);
  401e3e:	f107 0310 	add.w	r3, r7, #16
  401e42:	4619      	mov	r1, r3
  401e44:	6878      	ldr	r0, [r7, #4]
  401e46:	4b05      	ldr	r3, [pc, #20]	; (401e5c <ov_id+0x6c>)
  401e48:	4798      	blx	r3
	return ((uint32_t)(ul_id << 8) | ul_ver);
  401e4a:	68fb      	ldr	r3, [r7, #12]
  401e4c:	021a      	lsls	r2, r3, #8
  401e4e:	68bb      	ldr	r3, [r7, #8]
  401e50:	4313      	orrs	r3, r2
}
  401e52:	4618      	mov	r0, r3
  401e54:	3738      	adds	r7, #56	; 0x38
  401e56:	46bd      	mov	sp, r7
  401e58:	bd80      	pop	{r7, pc}
  401e5a:	bf00      	nop
  401e5c:	00401e61 	.word	0x00401e61

00401e60 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  401e60:	b580      	push	{r7, lr}
  401e62:	b084      	sub	sp, #16
  401e64:	af00      	add	r7, sp, #0
  401e66:	6078      	str	r0, [r7, #4]
  401e68:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  401e6a:	6839      	ldr	r1, [r7, #0]
  401e6c:	6878      	ldr	r0, [r7, #4]
  401e6e:	4b04      	ldr	r3, [pc, #16]	; (401e80 <ov_read_reg+0x20>)
  401e70:	4798      	blx	r3
  401e72:	60f8      	str	r0, [r7, #12]

	return ul_status;
  401e74:	68fb      	ldr	r3, [r7, #12]
}
  401e76:	4618      	mov	r0, r3
  401e78:	3710      	adds	r7, #16
  401e7a:	46bd      	mov	sp, r7
  401e7c:	bd80      	pop	{r7, pc}
  401e7e:	bf00      	nop
  401e80:	004011dd 	.word	0x004011dd

00401e84 <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  401e84:	b580      	push	{r7, lr}
  401e86:	b084      	sub	sp, #16
  401e88:	af00      	add	r7, sp, #0
  401e8a:	6078      	str	r0, [r7, #4]
  401e8c:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  401e8e:	6839      	ldr	r1, [r7, #0]
  401e90:	6878      	ldr	r0, [r7, #4]
  401e92:	4b04      	ldr	r3, [pc, #16]	; (401ea4 <ov_write_reg+0x20>)
  401e94:	4798      	blx	r3
  401e96:	60f8      	str	r0, [r7, #12]

	return ul_status;
  401e98:	68fb      	ldr	r3, [r7, #12]
}
  401e9a:	4618      	mov	r0, r3
  401e9c:	3710      	adds	r7, #16
  401e9e:	46bd      	mov	sp, r7
  401ea0:	bd80      	pop	{r7, pc}
  401ea2:	bf00      	nop
  401ea4:	004012e9 	.word	0x004012e9

00401ea8 <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  401ea8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  401eac:	b08a      	sub	sp, #40	; 0x28
  401eae:	af00      	add	r7, sp, #0
  401eb0:	6078      	str	r0, [r7, #4]
  401eb2:	6039      	str	r1, [r7, #0]
	uint32_t ul_err;
	uint32_t ul_size = 0;
  401eb4:	2300      	movs	r3, #0
  401eb6:	627b      	str	r3, [r7, #36]	; 0x24
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;
  401eb8:	683b      	ldr	r3, [r7, #0]
  401eba:	623b      	str	r3, [r7, #32]

	while (!((p_next->reg == OV_REG_TERM) &&
  401ebc:	e048      	b.n	401f50 <ov_write_regs+0xa8>
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
  401ebe:	6a3b      	ldr	r3, [r7, #32]
  401ec0:	781b      	ldrb	r3, [r3, #0]
  401ec2:	2bfe      	cmp	r3, #254	; 0xfe
  401ec4:	d126      	bne.n	401f14 <ov_write_regs+0x6c>
			delay_ms(5);
  401ec6:	4b29      	ldr	r3, [pc, #164]	; (401f6c <ov_write_regs+0xc4>)
  401ec8:	4798      	blx	r3
  401eca:	4603      	mov	r3, r0
  401ecc:	4619      	mov	r1, r3
  401ece:	f04f 0200 	mov.w	r2, #0
  401ed2:	460b      	mov	r3, r1
  401ed4:	4614      	mov	r4, r2
  401ed6:	00a6      	lsls	r6, r4, #2
  401ed8:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  401edc:	009d      	lsls	r5, r3, #2
  401ede:	462b      	mov	r3, r5
  401ee0:	4634      	mov	r4, r6
  401ee2:	185b      	adds	r3, r3, r1
  401ee4:	eb44 0402 	adc.w	r4, r4, r2
  401ee8:	f243 61af 	movw	r1, #13999	; 0x36af
  401eec:	f04f 0200 	mov.w	r2, #0
  401ef0:	eb13 0b01 	adds.w	fp, r3, r1
  401ef4:	eb44 0c02 	adc.w	ip, r4, r2
  401ef8:	4658      	mov	r0, fp
  401efa:	4661      	mov	r1, ip
  401efc:	4c1c      	ldr	r4, [pc, #112]	; (401f70 <ov_write_regs+0xc8>)
  401efe:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401f02:	f04f 0300 	mov.w	r3, #0
  401f06:	47a0      	blx	r4
  401f08:	4603      	mov	r3, r0
  401f0a:	460c      	mov	r4, r1
  401f0c:	4618      	mov	r0, r3
  401f0e:	4b19      	ldr	r3, [pc, #100]	; (401f74 <ov_write_regs+0xcc>)
  401f10:	4798      	blx	r3
  401f12:	e01a      	b.n	401f4a <ov_write_regs+0xa2>
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
  401f14:	6a3b      	ldr	r3, [r7, #32]
  401f16:	781b      	ldrb	r3, [r3, #0]
  401f18:	723b      	strb	r3, [r7, #8]
			twi_packet_regs.addr_length = 1;
  401f1a:	2301      	movs	r3, #1
  401f1c:	60fb      	str	r3, [r7, #12]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  401f1e:	2330      	movs	r3, #48	; 0x30
  401f20:	763b      	strb	r3, [r7, #24]
			twi_packet_regs.length = 1;
  401f22:	2301      	movs	r3, #1
  401f24:	617b      	str	r3, [r7, #20]
			twi_packet_regs.buffer = &(p_next->val);
  401f26:	6a3b      	ldr	r3, [r7, #32]
  401f28:	3301      	adds	r3, #1
  401f2a:	613b      	str	r3, [r7, #16]

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  401f2c:	f107 0308 	add.w	r3, r7, #8
  401f30:	4619      	mov	r1, r3
  401f32:	6878      	ldr	r0, [r7, #4]
  401f34:	4b10      	ldr	r3, [pc, #64]	; (401f78 <ov_write_regs+0xd0>)
  401f36:	4798      	blx	r3
  401f38:	61f8      	str	r0, [r7, #28]
			ul_size++;
  401f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401f3c:	3301      	adds	r3, #1
  401f3e:	627b      	str	r3, [r7, #36]	; 0x24

			if (ul_err == TWI_BUSY) {
  401f40:	69fb      	ldr	r3, [r7, #28]
  401f42:	2b08      	cmp	r3, #8
  401f44:	d101      	bne.n	401f4a <ov_write_regs+0xa2>
				return ul_err;
  401f46:	69fb      	ldr	r3, [r7, #28]
  401f48:	e00b      	b.n	401f62 <ov_write_regs+0xba>
			}
		}

		p_next++;
  401f4a:	6a3b      	ldr	r3, [r7, #32]
  401f4c:	3302      	adds	r3, #2
  401f4e:	623b      	str	r3, [r7, #32]
	while (!((p_next->reg == OV_REG_TERM) &&
  401f50:	6a3b      	ldr	r3, [r7, #32]
  401f52:	781b      	ldrb	r3, [r3, #0]
  401f54:	2bff      	cmp	r3, #255	; 0xff
  401f56:	d1b2      	bne.n	401ebe <ov_write_regs+0x16>
			(p_next->val == OV_VAL_TERM))) {
  401f58:	6a3b      	ldr	r3, [r7, #32]
  401f5a:	785b      	ldrb	r3, [r3, #1]
	while (!((p_next->reg == OV_REG_TERM) &&
  401f5c:	2bff      	cmp	r3, #255	; 0xff
  401f5e:	d1ae      	bne.n	401ebe <ov_write_regs+0x16>
	}
	return 0;
  401f60:	2300      	movs	r3, #0
}
  401f62:	4618      	mov	r0, r3
  401f64:	3728      	adds	r7, #40	; 0x28
  401f66:	46bd      	mov	sp, r7
  401f68:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  401f6c:	00401ddd 	.word	0x00401ddd
  401f70:	00403285 	.word	0x00403285
  401f74:	20000001 	.word	0x20000001
  401f78:	00401e85 	.word	0x00401e85

00401f7c <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  401f7c:	b580      	push	{r7, lr}
  401f7e:	b08a      	sub	sp, #40	; 0x28
  401f80:	af00      	add	r7, sp, #0
  401f82:	6078      	str	r0, [r7, #4]
	const uint8_t cont_reg_val = 1;
  401f84:	2301      	movs	r3, #1
  401f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	twi_packet_t init_packet = {
  401f8a:	f107 030c 	add.w	r3, r7, #12
  401f8e:	2200      	movs	r2, #0
  401f90:	601a      	str	r2, [r3, #0]
  401f92:	605a      	str	r2, [r3, #4]
  401f94:	609a      	str	r2, [r3, #8]
  401f96:	60da      	str	r2, [r3, #12]
  401f98:	611a      	str	r2, [r3, #16]
  401f9a:	23ff      	movs	r3, #255	; 0xff
  401f9c:	733b      	strb	r3, [r7, #12]
  401f9e:	2301      	movs	r3, #1
  401fa0:	613b      	str	r3, [r7, #16]
  401fa2:	f107 0323 	add.w	r3, r7, #35	; 0x23
  401fa6:	617b      	str	r3, [r7, #20]
  401fa8:	2301      	movs	r3, #1
  401faa:	61bb      	str	r3, [r7, #24]
  401fac:	2330      	movs	r3, #48	; 0x30
  401fae:	773b      	strb	r3, [r7, #28]
		.addr_length  = 1, //sizeof (uint16_t),    // TWI slave memory address data size
		.chip         = OV_I2C_SENSOR_ADDRESS,      // TWI slave bus address
		.buffer       = &cont_reg_val,        // transfer data destination buffer
		.length       = 1                    // transfer data size (bytes)
	};
	ov_write_reg(p_twi, &init_packet);
  401fb0:	f107 030c 	add.w	r3, r7, #12
  401fb4:	4619      	mov	r1, r3
  401fb6:	6878      	ldr	r0, [r7, #4]
  401fb8:	4b06      	ldr	r3, [pc, #24]	; (401fd4 <ov_init+0x58>)
  401fba:	4798      	blx	r3
	
	
	uint32_t ul_id = 0;
  401fbc:	2300      	movs	r3, #0
  401fbe:	627b      	str	r3, [r7, #36]	; 0x24

	ul_id = ov_id( p_twi );
  401fc0:	6878      	ldr	r0, [r7, #4]
  401fc2:	4b05      	ldr	r3, [pc, #20]	; (401fd8 <ov_init+0x5c>)
  401fc4:	4798      	blx	r3
  401fc6:	6278      	str	r0, [r7, #36]	; 0x24
// 			if (ov_test_write( p_twi ) == 0) {
// 				return 0;
// 			}
// 		}
// 	}
	return 0;
  401fc8:	2300      	movs	r3, #0

	return 1;
}
  401fca:	4618      	mov	r0, r3
  401fcc:	3728      	adds	r7, #40	; 0x28
  401fce:	46bd      	mov	sp, r7
  401fd0:	bd80      	pop	{r7, pc}
  401fd2:	bf00      	nop
  401fd4:	00401e85 	.word	0x00401e85
  401fd8:	00401df1 	.word	0x00401df1

00401fdc <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_OV2640_format format)
{
  401fdc:	b580      	push	{r7, lr}
  401fde:	b084      	sub	sp, #16
  401fe0:	af00      	add	r7, sp, #0
  401fe2:	6078      	str	r0, [r7, #4]
  401fe4:	460b      	mov	r3, r1
  401fe6:	70fb      	strb	r3, [r7, #3]
	const ov_reg *p_regs_conf = NULL;
  401fe8:	2300      	movs	r3, #0
  401fea:	60fb      	str	r3, [r7, #12]

	/* Common register initialization */
	switch (format) {
  401fec:	78fb      	ldrb	r3, [r7, #3]
  401fee:	2b11      	cmp	r3, #17
  401ff0:	d85c      	bhi.n	4020ac <ov_configure+0xd0>
  401ff2:	a201      	add	r2, pc, #4	; (adr r2, 401ff8 <ov_configure+0x1c>)
  401ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401ff8:	00402041 	.word	0x00402041
  401ffc:	00402047 	.word	0x00402047
  402000:	0040204d 	.word	0x0040204d
  402004:	00402053 	.word	0x00402053
  402008:	00402059 	.word	0x00402059
  40200c:	0040205f 	.word	0x0040205f
  402010:	00402065 	.word	0x00402065
  402014:	0040206b 	.word	0x0040206b
  402018:	00402071 	.word	0x00402071
  40201c:	00402077 	.word	0x00402077
  402020:	0040207d 	.word	0x0040207d
  402024:	00402083 	.word	0x00402083
  402028:	00402089 	.word	0x00402089
  40202c:	0040208f 	.word	0x0040208f
  402030:	00402095 	.word	0x00402095
  402034:	0040209b 	.word	0x0040209b
  402038:	004020a1 	.word	0x004020a1
  40203c:	004020a7 	.word	0x004020a7
		
	case JPEG_INIT:
		p_regs_conf = OV2640_JPEG_INIT;
  402040:	4b22      	ldr	r3, [pc, #136]	; (4020cc <ov_configure+0xf0>)
  402042:	60fb      	str	r3, [r7, #12]
		break;
  402044:	e033      	b.n	4020ae <ov_configure+0xd2>
		
	case YUV422:
		p_regs_conf = OV2640_YUV422;
  402046:	4b22      	ldr	r3, [pc, #136]	; (4020d0 <ov_configure+0xf4>)
  402048:	60fb      	str	r3, [r7, #12]
		break;
  40204a:	e030      	b.n	4020ae <ov_configure+0xd2>
		
	case JPEG:
		p_regs_conf = OV2640_JPEG;
  40204c:	4b21      	ldr	r3, [pc, #132]	; (4020d4 <ov_configure+0xf8>)
  40204e:	60fb      	str	r3, [r7, #12]
		break;
  402050:	e02d      	b.n	4020ae <ov_configure+0xd2>
		
	case JPEG_320x240:
		p_regs_conf = OV2640_JPEG_320x240;
  402052:	4b21      	ldr	r3, [pc, #132]	; (4020d8 <ov_configure+0xfc>)
  402054:	60fb      	str	r3, [r7, #12]
		break;
  402056:	e02a      	b.n	4020ae <ov_configure+0xd2>
		
	case JPEG_640x480:
		p_regs_conf = OV2640_JPEG_640x480;
  402058:	4b20      	ldr	r3, [pc, #128]	; (4020dc <ov_configure+0x100>)
  40205a:	60fb      	str	r3, [r7, #12]
		break;
  40205c:	e027      	b.n	4020ae <ov_configure+0xd2>
		
	case JPEG_800x600:
		p_regs_conf = OV2640_JPEG_800x600;
  40205e:	4b20      	ldr	r3, [pc, #128]	; (4020e0 <ov_configure+0x104>)
  402060:	60fb      	str	r3, [r7, #12]
		break;
  402062:	e024      	b.n	4020ae <ov_configure+0xd2>
		
	case JPEG_1024x768:
		p_regs_conf = OV2640_JPEG_1024x768;
  402064:	4b1f      	ldr	r3, [pc, #124]	; (4020e4 <ov_configure+0x108>)
  402066:	60fb      	str	r3, [r7, #12]
		break;
  402068:	e021      	b.n	4020ae <ov_configure+0xd2>
		
	case JPEG_1280x1024:
		p_regs_conf = OV2640_JPEG_1280x1024;
  40206a:	4b1f      	ldr	r3, [pc, #124]	; (4020e8 <ov_configure+0x10c>)
  40206c:	60fb      	str	r3, [r7, #12]
		break;
  40206e:	e01e      	b.n	4020ae <ov_configure+0xd2>
		
	case JPEG_1600x1200:
		p_regs_conf = OV2640_JPEG_1600x1200;
  402070:	4b1e      	ldr	r3, [pc, #120]	; (4020ec <ov_configure+0x110>)
  402072:	60fb      	str	r3, [r7, #12]
		break;
  402074:	e01b      	b.n	4020ae <ov_configure+0xd2>
		
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV2640_QVGA_YUV422_10FPS;
  402076:	4b1e      	ldr	r3, [pc, #120]	; (4020f0 <ov_configure+0x114>)
  402078:	60fb      	str	r3, [r7, #12]
		break;
  40207a:	e018      	b.n	4020ae <ov_configure+0xd2>

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV2640_QVGA_YUV422_15FPS;
  40207c:	4b1d      	ldr	r3, [pc, #116]	; (4020f4 <ov_configure+0x118>)
  40207e:	60fb      	str	r3, [r7, #12]
		break;
  402080:	e015      	b.n	4020ae <ov_configure+0xd2>

	case QVGA_YUV422_20FPS:
		p_regs_conf = OV2640_QVGA_YUV422_20FPS;
  402082:	4b1d      	ldr	r3, [pc, #116]	; (4020f8 <ov_configure+0x11c>)
  402084:	60fb      	str	r3, [r7, #12]
		break;
  402086:	e012      	b.n	4020ae <ov_configure+0xd2>

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV2640_QVGA_YUV422_30FPS;
  402088:	4b1c      	ldr	r3, [pc, #112]	; (4020fc <ov_configure+0x120>)
  40208a:	60fb      	str	r3, [r7, #12]
		break;
  40208c:	e00f      	b.n	4020ae <ov_configure+0xd2>

	case QVGA_RGB888:
		p_regs_conf = OV2640_QVGA_RGB888;
  40208e:	4b1c      	ldr	r3, [pc, #112]	; (402100 <ov_configure+0x124>)
  402090:	60fb      	str	r3, [r7, #12]
		break;
  402092:	e00c      	b.n	4020ae <ov_configure+0xd2>

	case QQVGA_YUV422:
		p_regs_conf = OV2640_QQVGA_YUV422;
  402094:	4b1b      	ldr	r3, [pc, #108]	; (402104 <ov_configure+0x128>)
  402096:	60fb      	str	r3, [r7, #12]
		break;
  402098:	e009      	b.n	4020ae <ov_configure+0xd2>

	case QQVGA_RGB888:
		p_regs_conf = OV2640_QQVGA_RGB888;
  40209a:	4b1b      	ldr	r3, [pc, #108]	; (402108 <ov_configure+0x12c>)
  40209c:	60fb      	str	r3, [r7, #12]
		break;
  40209e:	e006      	b.n	4020ae <ov_configure+0xd2>

	case TEST_PATTERN:
		p_regs_conf = OV2640_TEST_PATTERN;
  4020a0:	4b1a      	ldr	r3, [pc, #104]	; (40210c <ov_configure+0x130>)
  4020a2:	60fb      	str	r3, [r7, #12]
		break;
  4020a4:	e003      	b.n	4020ae <ov_configure+0xd2>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV2640_VGA_YUV422_20FPS;
  4020a6:	4b1a      	ldr	r3, [pc, #104]	; (402110 <ov_configure+0x134>)
  4020a8:	60fb      	str	r3, [r7, #12]
		break;
  4020aa:	e000      	b.n	4020ae <ov_configure+0xd2>

	default:
		break;
  4020ac:	bf00      	nop
	}

	if (p_regs_conf != NULL) {
  4020ae:	68fb      	ldr	r3, [r7, #12]
  4020b0:	2b00      	cmp	r3, #0
  4020b2:	d005      	beq.n	4020c0 <ov_configure+0xe4>
		ov_write_regs( p_twi, p_regs_conf );
  4020b4:	68f9      	ldr	r1, [r7, #12]
  4020b6:	6878      	ldr	r0, [r7, #4]
  4020b8:	4b16      	ldr	r3, [pc, #88]	; (402114 <ov_configure+0x138>)
  4020ba:	4798      	blx	r3
		return 0;
  4020bc:	2300      	movs	r3, #0
  4020be:	e000      	b.n	4020c2 <ov_configure+0xe6>
	}

	return 1;
  4020c0:	2301      	movs	r3, #1
}
  4020c2:	4618      	mov	r0, r3
  4020c4:	3710      	adds	r7, #16
  4020c6:	46bd      	mov	sp, r7
  4020c8:	bd80      	pop	{r7, pc}
  4020ca:	bf00      	nop
  4020cc:	004081a4 	.word	0x004081a4
  4020d0:	00408324 	.word	0x00408324
  4020d4:	00408338 	.word	0x00408338
  4020d8:	0040834c 	.word	0x0040834c
  4020dc:	0040839c 	.word	0x0040839c
  4020e0:	004083f0 	.word	0x004083f0
  4020e4:	00408444 	.word	0x00408444
  4020e8:	00408494 	.word	0x00408494
  4020ec:	004084e8 	.word	0x004084e8
  4020f0:	0040853c 	.word	0x0040853c
  4020f4:	0040862c 	.word	0x0040862c
  4020f8:	0040871c 	.word	0x0040871c
  4020fc:	0040880c 	.word	0x0040880c
  402100:	004088fc 	.word	0x004088fc
  402104:	004089f0 	.word	0x004089f0
  402108:	00408ae4 	.word	0x00408ae4
  40210c:	00408bd8 	.word	0x00408bd8
  402110:	00408ccc 	.word	0x00408ccc
  402114:	00401ea9 	.word	0x00401ea9

00402118 <__NVIC_EnableIRQ>:
{
  402118:	b480      	push	{r7}
  40211a:	b083      	sub	sp, #12
  40211c:	af00      	add	r7, sp, #0
  40211e:	4603      	mov	r3, r0
  402120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  402122:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402126:	2b00      	cmp	r3, #0
  402128:	db0b      	blt.n	402142 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40212a:	4908      	ldr	r1, [pc, #32]	; (40214c <__NVIC_EnableIRQ+0x34>)
  40212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402130:	095b      	lsrs	r3, r3, #5
  402132:	79fa      	ldrb	r2, [r7, #7]
  402134:	f002 021f 	and.w	r2, r2, #31
  402138:	2001      	movs	r0, #1
  40213a:	fa00 f202 	lsl.w	r2, r0, r2
  40213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402142:	bf00      	nop
  402144:	370c      	adds	r7, #12
  402146:	46bd      	mov	sp, r7
  402148:	bc80      	pop	{r7}
  40214a:	4770      	bx	lr
  40214c:	e000e100 	.word	0xe000e100

00402150 <osc_get_rate>:
{
  402150:	b480      	push	{r7}
  402152:	b083      	sub	sp, #12
  402154:	af00      	add	r7, sp, #0
  402156:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402158:	687b      	ldr	r3, [r7, #4]
  40215a:	2b07      	cmp	r3, #7
  40215c:	d825      	bhi.n	4021aa <osc_get_rate+0x5a>
  40215e:	a201      	add	r2, pc, #4	; (adr r2, 402164 <osc_get_rate+0x14>)
  402160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402164:	00402185 	.word	0x00402185
  402168:	0040218b 	.word	0x0040218b
  40216c:	00402191 	.word	0x00402191
  402170:	00402197 	.word	0x00402197
  402174:	0040219b 	.word	0x0040219b
  402178:	0040219f 	.word	0x0040219f
  40217c:	004021a3 	.word	0x004021a3
  402180:	004021a7 	.word	0x004021a7
		return OSC_SLCK_32K_RC_HZ;
  402184:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402188:	e010      	b.n	4021ac <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40218a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40218e:	e00d      	b.n	4021ac <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402190:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402194:	e00a      	b.n	4021ac <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402196:	4b08      	ldr	r3, [pc, #32]	; (4021b8 <osc_get_rate+0x68>)
  402198:	e008      	b.n	4021ac <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40219a:	4b08      	ldr	r3, [pc, #32]	; (4021bc <osc_get_rate+0x6c>)
  40219c:	e006      	b.n	4021ac <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40219e:	4b08      	ldr	r3, [pc, #32]	; (4021c0 <osc_get_rate+0x70>)
  4021a0:	e004      	b.n	4021ac <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4021a2:	4b07      	ldr	r3, [pc, #28]	; (4021c0 <osc_get_rate+0x70>)
  4021a4:	e002      	b.n	4021ac <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4021a6:	4b06      	ldr	r3, [pc, #24]	; (4021c0 <osc_get_rate+0x70>)
  4021a8:	e000      	b.n	4021ac <osc_get_rate+0x5c>
	return 0;
  4021aa:	2300      	movs	r3, #0
}
  4021ac:	4618      	mov	r0, r3
  4021ae:	370c      	adds	r7, #12
  4021b0:	46bd      	mov	sp, r7
  4021b2:	bc80      	pop	{r7}
  4021b4:	4770      	bx	lr
  4021b6:	bf00      	nop
  4021b8:	003d0900 	.word	0x003d0900
  4021bc:	007a1200 	.word	0x007a1200
  4021c0:	00b71b00 	.word	0x00b71b00

004021c4 <sysclk_get_main_hz>:
{
  4021c4:	b580      	push	{r7, lr}
  4021c6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4021c8:	2006      	movs	r0, #6
  4021ca:	4b04      	ldr	r3, [pc, #16]	; (4021dc <sysclk_get_main_hz+0x18>)
  4021cc:	4798      	blx	r3
  4021ce:	4602      	mov	r2, r0
  4021d0:	4613      	mov	r3, r2
  4021d2:	009b      	lsls	r3, r3, #2
  4021d4:	4413      	add	r3, r2
  4021d6:	009b      	lsls	r3, r3, #2
}
  4021d8:	4618      	mov	r0, r3
  4021da:	bd80      	pop	{r7, pc}
  4021dc:	00402151 	.word	0x00402151

004021e0 <sysclk_get_cpu_hz>:
{
  4021e0:	b580      	push	{r7, lr}
  4021e2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4021e4:	4b02      	ldr	r3, [pc, #8]	; (4021f0 <sysclk_get_cpu_hz+0x10>)
  4021e6:	4798      	blx	r3
  4021e8:	4603      	mov	r3, r0
  4021ea:	085b      	lsrs	r3, r3, #1
}
  4021ec:	4618      	mov	r0, r3
  4021ee:	bd80      	pop	{r7, pc}
  4021f0:	004021c5 	.word	0x004021c5

004021f4 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  4021f4:	b580      	push	{r7, lr}
  4021f6:	b082      	sub	sp, #8
  4021f8:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  4021fa:	2100      	movs	r1, #0
  4021fc:	4809      	ldr	r0, [pc, #36]	; (402224 <TC0_Handler+0x30>)
  4021fe:	4b0a      	ldr	r3, [pc, #40]	; (402228 <TC0_Handler+0x34>)
  402200:	4798      	blx	r3
  402202:	6078      	str	r0, [r7, #4]

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  402204:	687b      	ldr	r3, [r7, #4]
  402206:	f003 0310 	and.w	r3, r3, #16
  40220a:	2b00      	cmp	r3, #0
  40220c:	d006      	beq.n	40221c <TC0_Handler+0x28>
		counts++;
  40220e:	4b07      	ldr	r3, [pc, #28]	; (40222c <TC0_Handler+0x38>)
  402210:	781b      	ldrb	r3, [r3, #0]
  402212:	b2db      	uxtb	r3, r3
  402214:	3301      	adds	r3, #1
  402216:	b2da      	uxtb	r2, r3
  402218:	4b04      	ldr	r3, [pc, #16]	; (40222c <TC0_Handler+0x38>)
  40221a:	701a      	strb	r2, [r3, #0]
	}
}
  40221c:	bf00      	nop
  40221e:	3708      	adds	r7, #8
  402220:	46bd      	mov	sp, r7
  402222:	bd80      	pop	{r7, pc}
  402224:	40010000 	.word	0x40010000
  402228:	00400f3f 	.word	0x00400f3f
  40222c:	20000a74 	.word	0x20000a74

00402230 <configure_tc>:

void configure_tc(void)
{
  402230:	b590      	push	{r4, r7, lr}
  402232:	b087      	sub	sp, #28
  402234:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();
  402236:	4b18      	ldr	r3, [pc, #96]	; (402298 <configure_tc+0x68>)
  402238:	4798      	blx	r3
  40223a:	60f8      	str	r0, [r7, #12]

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  40223c:	2017      	movs	r0, #23
  40223e:	4b17      	ldr	r3, [pc, #92]	; (40229c <configure_tc+0x6c>)
  402240:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  402242:	1d39      	adds	r1, r7, #4
  402244:	f107 0208 	add.w	r2, r7, #8
  402248:	68fb      	ldr	r3, [r7, #12]
  40224a:	9300      	str	r3, [sp, #0]
  40224c:	460b      	mov	r3, r1
  40224e:	68f9      	ldr	r1, [r7, #12]
  402250:	2001      	movs	r0, #1
  402252:	4c13      	ldr	r4, [pc, #76]	; (4022a0 <configure_tc+0x70>)
  402254:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  402256:	687b      	ldr	r3, [r7, #4]
  402258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40225c:	461a      	mov	r2, r3
  40225e:	2100      	movs	r1, #0
  402260:	4810      	ldr	r0, [pc, #64]	; (4022a4 <configure_tc+0x74>)
  402262:	4b11      	ldr	r3, [pc, #68]	; (4022a8 <configure_tc+0x78>)
  402264:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  402266:	68bb      	ldr	r3, [r7, #8]
  402268:	68fa      	ldr	r2, [r7, #12]
  40226a:	fbb2 f3f3 	udiv	r3, r2, r3
  40226e:	461a      	mov	r2, r3
  402270:	2100      	movs	r1, #0
  402272:	480c      	ldr	r0, [pc, #48]	; (4022a4 <configure_tc+0x74>)
  402274:	4b0d      	ldr	r3, [pc, #52]	; (4022ac <configure_tc+0x7c>)
  402276:	4798      	blx	r3

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  402278:	2017      	movs	r0, #23
  40227a:	4b0d      	ldr	r3, [pc, #52]	; (4022b0 <configure_tc+0x80>)
  40227c:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  40227e:	2210      	movs	r2, #16
  402280:	2100      	movs	r1, #0
  402282:	4808      	ldr	r0, [pc, #32]	; (4022a4 <configure_tc+0x74>)
  402284:	4b0b      	ldr	r3, [pc, #44]	; (4022b4 <configure_tc+0x84>)
  402286:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  402288:	2100      	movs	r1, #0
  40228a:	4806      	ldr	r0, [pc, #24]	; (4022a4 <configure_tc+0x74>)
  40228c:	4b0a      	ldr	r3, [pc, #40]	; (4022b8 <configure_tc+0x88>)
  40228e:	4798      	blx	r3
  402290:	bf00      	nop
  402292:	3714      	adds	r7, #20
  402294:	46bd      	mov	sp, r7
  402296:	bd90      	pop	{r4, r7, pc}
  402298:	004021e1 	.word	0x004021e1
  40229c:	00400e1d 	.word	0x00400e1d
  4022a0:	00400f61 	.word	0x00400f61
  4022a4:	40010000 	.word	0x40010000
  4022a8:	00400e9d 	.word	0x00400e9d
  4022ac:	00400ef5 	.word	0x00400ef5
  4022b0:	00402119 	.word	0x00402119
  4022b4:	00400f19 	.word	0x00400f19
  4022b8:	00400ed5 	.word	0x00400ed5

004022bc <__NVIC_EnableIRQ>:
{
  4022bc:	b480      	push	{r7}
  4022be:	b083      	sub	sp, #12
  4022c0:	af00      	add	r7, sp, #0
  4022c2:	4603      	mov	r3, r0
  4022c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4022ca:	2b00      	cmp	r3, #0
  4022cc:	db0b      	blt.n	4022e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4022ce:	4908      	ldr	r1, [pc, #32]	; (4022f0 <__NVIC_EnableIRQ+0x34>)
  4022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4022d4:	095b      	lsrs	r3, r3, #5
  4022d6:	79fa      	ldrb	r2, [r7, #7]
  4022d8:	f002 021f 	and.w	r2, r2, #31
  4022dc:	2001      	movs	r0, #1
  4022de:	fa00 f202 	lsl.w	r2, r0, r2
  4022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4022e6:	bf00      	nop
  4022e8:	370c      	adds	r7, #12
  4022ea:	46bd      	mov	sp, r7
  4022ec:	bc80      	pop	{r7}
  4022ee:	4770      	bx	lr
  4022f0:	e000e100 	.word	0xe000e100

004022f4 <osc_get_rate>:
{
  4022f4:	b480      	push	{r7}
  4022f6:	b083      	sub	sp, #12
  4022f8:	af00      	add	r7, sp, #0
  4022fa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4022fc:	687b      	ldr	r3, [r7, #4]
  4022fe:	2b07      	cmp	r3, #7
  402300:	d825      	bhi.n	40234e <osc_get_rate+0x5a>
  402302:	a201      	add	r2, pc, #4	; (adr r2, 402308 <osc_get_rate+0x14>)
  402304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402308:	00402329 	.word	0x00402329
  40230c:	0040232f 	.word	0x0040232f
  402310:	00402335 	.word	0x00402335
  402314:	0040233b 	.word	0x0040233b
  402318:	0040233f 	.word	0x0040233f
  40231c:	00402343 	.word	0x00402343
  402320:	00402347 	.word	0x00402347
  402324:	0040234b 	.word	0x0040234b
		return OSC_SLCK_32K_RC_HZ;
  402328:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40232c:	e010      	b.n	402350 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40232e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402332:	e00d      	b.n	402350 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402338:	e00a      	b.n	402350 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40233a:	4b08      	ldr	r3, [pc, #32]	; (40235c <osc_get_rate+0x68>)
  40233c:	e008      	b.n	402350 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40233e:	4b08      	ldr	r3, [pc, #32]	; (402360 <osc_get_rate+0x6c>)
  402340:	e006      	b.n	402350 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402342:	4b08      	ldr	r3, [pc, #32]	; (402364 <osc_get_rate+0x70>)
  402344:	e004      	b.n	402350 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402346:	4b07      	ldr	r3, [pc, #28]	; (402364 <osc_get_rate+0x70>)
  402348:	e002      	b.n	402350 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40234a:	4b06      	ldr	r3, [pc, #24]	; (402364 <osc_get_rate+0x70>)
  40234c:	e000      	b.n	402350 <osc_get_rate+0x5c>
	return 0;
  40234e:	2300      	movs	r3, #0
}
  402350:	4618      	mov	r0, r3
  402352:	370c      	adds	r7, #12
  402354:	46bd      	mov	sp, r7
  402356:	bc80      	pop	{r7}
  402358:	4770      	bx	lr
  40235a:	bf00      	nop
  40235c:	003d0900 	.word	0x003d0900
  402360:	007a1200 	.word	0x007a1200
  402364:	00b71b00 	.word	0x00b71b00

00402368 <sysclk_get_main_hz>:
{
  402368:	b580      	push	{r7, lr}
  40236a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40236c:	2006      	movs	r0, #6
  40236e:	4b04      	ldr	r3, [pc, #16]	; (402380 <sysclk_get_main_hz+0x18>)
  402370:	4798      	blx	r3
  402372:	4602      	mov	r2, r0
  402374:	4613      	mov	r3, r2
  402376:	009b      	lsls	r3, r3, #2
  402378:	4413      	add	r3, r2
  40237a:	009b      	lsls	r3, r3, #2
}
  40237c:	4618      	mov	r0, r3
  40237e:	bd80      	pop	{r7, pc}
  402380:	004022f5 	.word	0x004022f5

00402384 <sysclk_get_cpu_hz>:
{
  402384:	b580      	push	{r7, lr}
  402386:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402388:	4b02      	ldr	r3, [pc, #8]	; (402394 <sysclk_get_cpu_hz+0x10>)
  40238a:	4798      	blx	r3
  40238c:	4603      	mov	r3, r0
  40238e:	085b      	lsrs	r3, r3, #1
}
  402390:	4618      	mov	r0, r3
  402392:	bd80      	pop	{r7, pc}
  402394:	00402369 	.word	0x00402369

00402398 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402398:	b580      	push	{r7, lr}
  40239a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40239c:	4b02      	ldr	r3, [pc, #8]	; (4023a8 <sysclk_get_peripheral_hz+0x10>)
  40239e:	4798      	blx	r3
  4023a0:	4603      	mov	r3, r0
  4023a2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4023a4:	4618      	mov	r0, r3
  4023a6:	bd80      	pop	{r7, pc}
  4023a8:	00402369 	.word	0x00402369

004023ac <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4023ac:	b580      	push	{r7, lr}
  4023ae:	b082      	sub	sp, #8
  4023b0:	af00      	add	r7, sp, #0
  4023b2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4023b4:	6878      	ldr	r0, [r7, #4]
  4023b6:	4b03      	ldr	r3, [pc, #12]	; (4023c4 <sysclk_enable_peripheral_clock+0x18>)
  4023b8:	4798      	blx	r3
}
  4023ba:	bf00      	nop
  4023bc:	3708      	adds	r7, #8
  4023be:	46bd      	mov	sp, r7
  4023c0:	bd80      	pop	{r7, pc}
  4023c2:	bf00      	nop
  4023c4:	00400e1d 	.word	0x00400e1d

004023c8 <wifi_command_response_handler>:
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
	}
}

static void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask)
{
  4023c8:	b580      	push	{r7, lr}
  4023ca:	b084      	sub	sp, #16
  4023cc:	af00      	add	r7, sp, #0
  4023ce:	6078      	str	r0, [r7, #4]
  4023d0:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	
	wifi_comm_success = true;
  4023d2:	4b0d      	ldr	r3, [pc, #52]	; (402408 <wifi_command_response_handler+0x40>)
  4023d4:	2201      	movs	r2, #1
  4023d6:	601a      	str	r2, [r3, #0]

	process_data_wifi();
  4023d8:	4b0c      	ldr	r3, [pc, #48]	; (40240c <wifi_command_response_handler+0x44>)
  4023da:	4798      	blx	r3
	for (int jj = 0;jj<1000;jj++) input_line_wifi[jj] = 0;
  4023dc:	2300      	movs	r3, #0
  4023de:	60fb      	str	r3, [r7, #12]
  4023e0:	e007      	b.n	4023f2 <wifi_command_response_handler+0x2a>
  4023e2:	4a0b      	ldr	r2, [pc, #44]	; (402410 <wifi_command_response_handler+0x48>)
  4023e4:	68fb      	ldr	r3, [r7, #12]
  4023e6:	4413      	add	r3, r2
  4023e8:	2200      	movs	r2, #0
  4023ea:	701a      	strb	r2, [r3, #0]
  4023ec:	68fb      	ldr	r3, [r7, #12]
  4023ee:	3301      	adds	r3, #1
  4023f0:	60fb      	str	r3, [r7, #12]
  4023f2:	68fb      	ldr	r3, [r7, #12]
  4023f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4023f8:	dbf3      	blt.n	4023e2 <wifi_command_response_handler+0x1a>
	input_pos_wifi = 0;
  4023fa:	4b06      	ldr	r3, [pc, #24]	; (402414 <wifi_command_response_handler+0x4c>)
  4023fc:	2200      	movs	r2, #0
  4023fe:	601a      	str	r2, [r3, #0]
}
  402400:	bf00      	nop
  402402:	3710      	adds	r7, #16
  402404:	46bd      	mov	sp, r7
  402406:	bd80      	pop	{r7, pc}
  402408:	20000a64 	.word	0x20000a64
  40240c:	0040273d 	.word	0x0040273d
  402410:	2000ce14 	.word	0x2000ce14
  402414:	20000a5c 	.word	0x20000a5c

00402418 <wifi_web_setup_handler>:

void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask)
{
  402418:	b480      	push	{r7}
  40241a:	b083      	sub	sp, #12
  40241c:	af00      	add	r7, sp, #0
  40241e:	6078      	str	r0, [r7, #4]
  402420:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	
	wifi_setup_button_flag = true;
  402422:	4b04      	ldr	r3, [pc, #16]	; (402434 <wifi_web_setup_handler+0x1c>)
  402424:	2201      	movs	r2, #1
  402426:	601a      	str	r2, [r3, #0]
}
  402428:	bf00      	nop
  40242a:	370c      	adds	r7, #12
  40242c:	46bd      	mov	sp, r7
  40242e:	bc80      	pop	{r7}
  402430:	4770      	bx	lr
  402432:	bf00      	nop
  402434:	20000a60 	.word	0x20000a60

00402438 <configure_usart_wifi>:

void configure_usart_wifi(void)
{
  402438:	b5b0      	push	{r4, r5, r7, lr}
  40243a:	b086      	sub	sp, #24
  40243c:	af00      	add	r7, sp, #0
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  40243e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402442:	2005      	movs	r0, #5
  402444:	4b1c      	ldr	r3, [pc, #112]	; (4024b8 <configure_usart_wifi+0x80>)
  402446:	4798      	blx	r3
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  402448:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40244c:	2006      	movs	r0, #6
  40244e:	4b1a      	ldr	r3, [pc, #104]	; (4024b8 <configure_usart_wifi+0x80>)
  402450:	4798      	blx	r3
	gpio_configure_pin(PIN_USART1_CTS_IDX, PIN_USART1_CTS_FLAGS);
  402452:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402456:	2008      	movs	r0, #8
  402458:	4b17      	ldr	r3, [pc, #92]	; (4024b8 <configure_usart_wifi+0x80>)
  40245a:	4798      	blx	r3
	//gpio_configure_pin(PIN_USART1_RTS_IDX, PIN_USART1_RTS_FLAGS);

	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  40245c:	4b17      	ldr	r3, [pc, #92]	; (4024bc <configure_usart_wifi+0x84>)
  40245e:	463c      	mov	r4, r7
  402460:	461d      	mov	r5, r3
  402462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402466:	e895 0003 	ldmia.w	r5, {r0, r1}
  40246a:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  40246e:	4b14      	ldr	r3, [pc, #80]	; (4024c0 <configure_usart_wifi+0x88>)
  402470:	4798      	blx	r3
  402472:	4602      	mov	r2, r0
  402474:	4b13      	ldr	r3, [pc, #76]	; (4024c4 <configure_usart_wifi+0x8c>)
  402476:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  402478:	200e      	movs	r0, #14
  40247a:	4b13      	ldr	r3, [pc, #76]	; (4024c8 <configure_usart_wifi+0x90>)
  40247c:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(WIFI_USART, &usart_console_settings, ul_sysclk);
  40247e:	4b11      	ldr	r3, [pc, #68]	; (4024c4 <configure_usart_wifi+0x8c>)
  402480:	681a      	ldr	r2, [r3, #0]
  402482:	463b      	mov	r3, r7
  402484:	4619      	mov	r1, r3
  402486:	4811      	ldr	r0, [pc, #68]	; (4024cc <configure_usart_wifi+0x94>)
  402488:	4b11      	ldr	r3, [pc, #68]	; (4024d0 <configure_usart_wifi+0x98>)
  40248a:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(WIFI_USART, ALL_INTERRUPT_MASK);
  40248c:	f04f 31ff 	mov.w	r1, #4294967295
  402490:	480e      	ldr	r0, [pc, #56]	; (4024cc <configure_usart_wifi+0x94>)
  402492:	4b10      	ldr	r3, [pc, #64]	; (4024d4 <configure_usart_wifi+0x9c>)
  402494:	4798      	blx	r3

	/* Enable TX & RX function. */
	usart_enable_tx(WIFI_USART);
  402496:	480d      	ldr	r0, [pc, #52]	; (4024cc <configure_usart_wifi+0x94>)
  402498:	4b0f      	ldr	r3, [pc, #60]	; (4024d8 <configure_usart_wifi+0xa0>)
  40249a:	4798      	blx	r3
	usart_enable_rx(WIFI_USART);
  40249c:	480b      	ldr	r0, [pc, #44]	; (4024cc <configure_usart_wifi+0x94>)
  40249e:	4b0f      	ldr	r3, [pc, #60]	; (4024dc <configure_usart_wifi+0xa4>)
  4024a0:	4798      	blx	r3

	usart_enable_interrupt(WIFI_USART, US_IER_RXRDY);
  4024a2:	2101      	movs	r1, #1
  4024a4:	4809      	ldr	r0, [pc, #36]	; (4024cc <configure_usart_wifi+0x94>)
  4024a6:	4b0e      	ldr	r3, [pc, #56]	; (4024e0 <configure_usart_wifi+0xa8>)
  4024a8:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  4024aa:	200e      	movs	r0, #14
  4024ac:	4b0d      	ldr	r3, [pc, #52]	; (4024e4 <configure_usart_wifi+0xac>)
  4024ae:	4798      	blx	r3
}
  4024b0:	bf00      	nop
  4024b2:	3718      	adds	r7, #24
  4024b4:	46bd      	mov	sp, r7
  4024b6:	bdb0      	pop	{r4, r5, r7, pc}
  4024b8:	004007b1 	.word	0x004007b1
  4024bc:	00408dbc 	.word	0x00408dbc
  4024c0:	00402399 	.word	0x00402399
  4024c4:	20000a78 	.word	0x20000a78
  4024c8:	004023ad 	.word	0x004023ad
  4024cc:	40024000 	.word	0x40024000
  4024d0:	0040154d 	.word	0x0040154d
  4024d4:	00401607 	.word	0x00401607
  4024d8:	0040158d 	.word	0x0040158d
  4024dc:	004015bd 	.word	0x004015bd
  4024e0:	004015ed 	.word	0x004015ed
  4024e4:	004022bd 	.word	0x004022bd

004024e8 <configure_wifi_command_pin>:

void configure_wifi_command_pin(void)
{
  4024e8:	b590      	push	{r4, r7, lr}
  4024ea:	b083      	sub	sp, #12
  4024ec:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_COMM_ID);
  4024ee:	200c      	movs	r0, #12
  4024f0:	4b0e      	ldr	r3, [pc, #56]	; (40252c <configure_wifi_command_pin+0x44>)
  4024f2:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK, 10);
  4024f4:	220a      	movs	r2, #10
  4024f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4024fa:	480d      	ldr	r0, [pc, #52]	; (402530 <configure_wifi_command_pin+0x48>)
  4024fc:	4b0d      	ldr	r3, [pc, #52]	; (402534 <configure_wifi_command_pin+0x4c>)
  4024fe:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_MSK,
  402500:	4b0d      	ldr	r3, [pc, #52]	; (402538 <configure_wifi_command_pin+0x50>)
  402502:	9300      	str	r3, [sp, #0]
  402504:	2370      	movs	r3, #112	; 0x70
  402506:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40250a:	210c      	movs	r1, #12
  40250c:	4808      	ldr	r0, [pc, #32]	; (402530 <configure_wifi_command_pin+0x48>)
  40250e:	4c0b      	ldr	r4, [pc, #44]	; (40253c <configure_wifi_command_pin+0x54>)
  402510:	47a0      	blx	r4
			WIFI_COMM_ATTR, wifi_command_response_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  402512:	200c      	movs	r0, #12
  402514:	4b0a      	ldr	r3, [pc, #40]	; (402540 <configure_wifi_command_pin+0x58>)
  402516:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK);
  402518:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40251c:	4804      	ldr	r0, [pc, #16]	; (402530 <configure_wifi_command_pin+0x48>)
  40251e:	4b09      	ldr	r3, [pc, #36]	; (402544 <configure_wifi_command_pin+0x5c>)
  402520:	4798      	blx	r3
}
  402522:	bf00      	nop
  402524:	3704      	adds	r7, #4
  402526:	46bd      	mov	sp, r7
  402528:	bd90      	pop	{r4, r7, pc}
  40252a:	bf00      	nop
  40252c:	00400e1d 	.word	0x00400e1d
  402530:	400e1000 	.word	0x400e1000
  402534:	004004bb 	.word	0x004004bb
  402538:	004023c9 	.word	0x004023c9
  40253c:	00400ab1 	.word	0x00400ab1
  402540:	004022bd 	.word	0x004022bd
  402544:	0040074f 	.word	0x0040074f

00402548 <configure_wifi_web_setup_pin>:

void configure_wifi_web_setup_pin(void)
{
  402548:	b590      	push	{r4, r7, lr}
  40254a:	b083      	sub	sp, #12
  40254c:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WEB_SETUP_BUTTON_ID);
  40254e:	200b      	movs	r0, #11
  402550:	4b0e      	ldr	r3, [pc, #56]	; (40258c <configure_wifi_web_setup_pin+0x44>)
  402552:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WEB_SETUP_BUTTON_PIO, WEB_SETUP_BUTTON_PIN_MSK, 10);
  402554:	220a      	movs	r2, #10
  402556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  40255a:	480d      	ldr	r0, [pc, #52]	; (402590 <configure_wifi_web_setup_pin+0x48>)
  40255c:	4b0d      	ldr	r3, [pc, #52]	; (402594 <configure_wifi_web_setup_pin+0x4c>)
  40255e:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WEB_SETUP_BUTTON_PIO, WEB_SETUP_BUTTON_ID, WEB_SETUP_BUTTON_PIN_MSK,
  402560:	4b0d      	ldr	r3, [pc, #52]	; (402598 <configure_wifi_web_setup_pin+0x50>)
  402562:	9300      	str	r3, [sp, #0]
  402564:	2370      	movs	r3, #112	; 0x70
  402566:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40256a:	210b      	movs	r1, #11
  40256c:	4808      	ldr	r0, [pc, #32]	; (402590 <configure_wifi_web_setup_pin+0x48>)
  40256e:	4c0b      	ldr	r4, [pc, #44]	; (40259c <configure_wifi_web_setup_pin+0x54>)
  402570:	47a0      	blx	r4
			WEB_SETUP_BUTTON_ATTR, wifi_web_setup_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WEB_SETUP_BUTTON_ID);
  402572:	200b      	movs	r0, #11
  402574:	4b0a      	ldr	r3, [pc, #40]	; (4025a0 <configure_wifi_web_setup_pin+0x58>)
  402576:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WEB_SETUP_BUTTON_PIO, WEB_SETUP_BUTTON_PIN_MSK);
  402578:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  40257c:	4804      	ldr	r0, [pc, #16]	; (402590 <configure_wifi_web_setup_pin+0x48>)
  40257e:	4b09      	ldr	r3, [pc, #36]	; (4025a4 <configure_wifi_web_setup_pin+0x5c>)
  402580:	4798      	blx	r3
}
  402582:	bf00      	nop
  402584:	3704      	adds	r7, #4
  402586:	46bd      	mov	sp, r7
  402588:	bd90      	pop	{r4, r7, pc}
  40258a:	bf00      	nop
  40258c:	00400e1d 	.word	0x00400e1d
  402590:	400e0e00 	.word	0x400e0e00
  402594:	004004bb 	.word	0x004004bb
  402598:	00402419 	.word	0x00402419
  40259c:	00400ab1 	.word	0x00400ab1
  4025a0:	004022bd 	.word	0x004022bd
  4025a4:	0040074f 	.word	0x0040074f

004025a8 <write_wifi_command>:

void write_wifi_command(char* comm, uint8_t cnt)
{
  4025a8:	b580      	push	{r7, lr}
  4025aa:	b082      	sub	sp, #8
  4025ac:	af00      	add	r7, sp, #0
  4025ae:	6078      	str	r0, [r7, #4]
  4025b0:	460b      	mov	r3, r1
  4025b2:	70fb      	strb	r3, [r7, #3]
	//Write command to the AMW136
	usart_write_line(WIFI_USART, comm);
  4025b4:	6879      	ldr	r1, [r7, #4]
  4025b6:	480c      	ldr	r0, [pc, #48]	; (4025e8 <write_wifi_command+0x40>)
  4025b8:	4b0c      	ldr	r3, [pc, #48]	; (4025ec <write_wifi_command+0x44>)
  4025ba:	4798      	blx	r3
	
	//Wait for either an acknowledgment or a timeout
	counts = 0;
  4025bc:	4b0c      	ldr	r3, [pc, #48]	; (4025f0 <write_wifi_command+0x48>)
  4025be:	2200      	movs	r2, #0
  4025c0:	601a      	str	r2, [r3, #0]
	while (counts < cnt)
  4025c2:	e007      	b.n	4025d4 <write_wifi_command+0x2c>
	{
		if (wifi_comm_success==true)
  4025c4:	4b0b      	ldr	r3, [pc, #44]	; (4025f4 <write_wifi_command+0x4c>)
  4025c6:	681b      	ldr	r3, [r3, #0]
  4025c8:	2b01      	cmp	r3, #1
  4025ca:	d103      	bne.n	4025d4 <write_wifi_command+0x2c>
		{
			wifi_comm_success = false;
  4025cc:	4b09      	ldr	r3, [pc, #36]	; (4025f4 <write_wifi_command+0x4c>)
  4025ce:	2200      	movs	r2, #0
  4025d0:	601a      	str	r2, [r3, #0]
			return;
  4025d2:	e005      	b.n	4025e0 <write_wifi_command+0x38>
	while (counts < cnt)
  4025d4:	78fa      	ldrb	r2, [r7, #3]
  4025d6:	4b06      	ldr	r3, [pc, #24]	; (4025f0 <write_wifi_command+0x48>)
  4025d8:	681b      	ldr	r3, [r3, #0]
  4025da:	429a      	cmp	r2, r3
  4025dc:	d8f2      	bhi.n	4025c4 <write_wifi_command+0x1c>
		}
	}
	return;
  4025de:	bf00      	nop
}
  4025e0:	3708      	adds	r7, #8
  4025e2:	46bd      	mov	sp, r7
  4025e4:	bd80      	pop	{r7, pc}
  4025e6:	bf00      	nop
  4025e8:	40024000 	.word	0x40024000
  4025ec:	0040169d 	.word	0x0040169d
  4025f0:	20000a74 	.word	0x20000a74
  4025f4:	20000a64 	.word	0x20000a64

004025f8 <write_image_to_file>:

void write_image_to_file(void)
{
  4025f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025fc:	b08f      	sub	sp, #60	; 0x3c
  4025fe:	af00      	add	r7, sp, #0
	if (find_image_len()==0)
  402600:	4b3d      	ldr	r3, [pc, #244]	; (4026f8 <write_image_to_file+0x100>)
  402602:	4798      	blx	r3
  402604:	4603      	mov	r3, r0
  402606:	2b00      	cmp	r3, #0
  402608:	d070      	beq.n	4026ec <write_image_to_file+0xf4>
	{
		return;
	}
	
	image_length = end_of_image - start_of_image;
  40260a:	4b3c      	ldr	r3, [pc, #240]	; (4026fc <write_image_to_file+0x104>)
  40260c:	681a      	ldr	r2, [r3, #0]
  40260e:	4b3c      	ldr	r3, [pc, #240]	; (402700 <write_image_to_file+0x108>)
  402610:	681b      	ldr	r3, [r3, #0]
  402612:	1ad3      	subs	r3, r2, r3
  402614:	4a3b      	ldr	r2, [pc, #236]	; (402704 <write_image_to_file+0x10c>)
  402616:	6013      	str	r3, [r2, #0]
	char string[50] = {0};
  402618:	463b      	mov	r3, r7
  40261a:	2232      	movs	r2, #50	; 0x32
  40261c:	2100      	movs	r1, #0
  40261e:	4618      	mov	r0, r3
  402620:	4b39      	ldr	r3, [pc, #228]	; (402708 <write_image_to_file+0x110>)
  402622:	4798      	blx	r3
	sprintf(string,"image_transfer %d\r\n", image_length);
  402624:	4b37      	ldr	r3, [pc, #220]	; (402704 <write_image_to_file+0x10c>)
  402626:	681a      	ldr	r2, [r3, #0]
  402628:	463b      	mov	r3, r7
  40262a:	4938      	ldr	r1, [pc, #224]	; (40270c <write_image_to_file+0x114>)
  40262c:	4618      	mov	r0, r3
  40262e:	4b38      	ldr	r3, [pc, #224]	; (402710 <write_image_to_file+0x118>)
  402630:	4798      	blx	r3
	write_wifi_command(string, 20);
  402632:	463b      	mov	r3, r7
  402634:	2114      	movs	r1, #20
  402636:	4618      	mov	r0, r3
  402638:	4b36      	ldr	r3, [pc, #216]	; (402714 <write_image_to_file+0x11c>)
  40263a:	4798      	blx	r3
	
	while(!wifi_comm_success)
  40263c:	bf00      	nop
  40263e:	4b36      	ldr	r3, [pc, #216]	; (402718 <write_image_to_file+0x120>)
  402640:	681b      	ldr	r3, [r3, #0]
  402642:	2b00      	cmp	r3, #0
  402644:	d0fb      	beq.n	40263e <write_image_to_file+0x46>
	{
		
	}
	
	uint32_t img = start_of_image;
  402646:	4b2e      	ldr	r3, [pc, #184]	; (402700 <write_image_to_file+0x108>)
  402648:	681b      	ldr	r3, [r3, #0]
  40264a:	637b      	str	r3, [r7, #52]	; 0x34
	while (img < end_of_image)
  40264c:	e00a      	b.n	402664 <write_image_to_file+0x6c>
	{
		usart_putchar(WIFI_USART, image_buffer[img]);
  40264e:	4a33      	ldr	r2, [pc, #204]	; (40271c <write_image_to_file+0x124>)
  402650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  402652:	4413      	add	r3, r2
  402654:	781b      	ldrb	r3, [r3, #0]
  402656:	4619      	mov	r1, r3
  402658:	4831      	ldr	r0, [pc, #196]	; (402720 <write_image_to_file+0x128>)
  40265a:	4b32      	ldr	r3, [pc, #200]	; (402724 <write_image_to_file+0x12c>)
  40265c:	4798      	blx	r3
		img++;
  40265e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  402660:	3301      	adds	r3, #1
  402662:	637b      	str	r3, [r7, #52]	; 0x34
	while (img < end_of_image)
  402664:	4b25      	ldr	r3, [pc, #148]	; (4026fc <write_image_to_file+0x104>)
  402666:	681b      	ldr	r3, [r3, #0]
  402668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40266a:	429a      	cmp	r2, r3
  40266c:	d3ef      	bcc.n	40264e <write_image_to_file+0x56>
	}
	
	usart_write_line(WIFI_USART, "Complete\r\n");
  40266e:	492e      	ldr	r1, [pc, #184]	; (402728 <write_image_to_file+0x130>)
  402670:	482b      	ldr	r0, [pc, #172]	; (402720 <write_image_to_file+0x128>)
  402672:	4b2e      	ldr	r3, [pc, #184]	; (40272c <write_image_to_file+0x134>)
  402674:	4798      	blx	r3
	delay_s(2);
  402676:	4b2e      	ldr	r3, [pc, #184]	; (402730 <write_image_to_file+0x138>)
  402678:	4798      	blx	r3
  40267a:	4603      	mov	r3, r0
  40267c:	4619      	mov	r1, r3
  40267e:	f04f 0200 	mov.w	r2, #0
  402682:	460b      	mov	r3, r1
  402684:	4614      	mov	r4, r2
  402686:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  40268a:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
  40268e:	ea4f 1a43 	mov.w	sl, r3, lsl #5
  402692:	4653      	mov	r3, sl
  402694:	465c      	mov	r4, fp
  402696:	1a5b      	subs	r3, r3, r1
  402698:	eb64 0402 	sbc.w	r4, r4, r2
  40269c:	ea4f 0984 	mov.w	r9, r4, lsl #2
  4026a0:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  4026a4:	ea4f 0883 	mov.w	r8, r3, lsl #2
  4026a8:	4643      	mov	r3, r8
  4026aa:	464c      	mov	r4, r9
  4026ac:	185b      	adds	r3, r3, r1
  4026ae:	eb44 0402 	adc.w	r4, r4, r2
  4026b2:	0126      	lsls	r6, r4, #4
  4026b4:	ea46 7613 	orr.w	r6, r6, r3, lsr #28
  4026b8:	011d      	lsls	r5, r3, #4
  4026ba:	462b      	mov	r3, r5
  4026bc:	4634      	mov	r4, r6
  4026be:	4619      	mov	r1, r3
  4026c0:	4622      	mov	r2, r4
  4026c2:	f243 63af 	movw	r3, #13999	; 0x36af
  4026c6:	f04f 0400 	mov.w	r4, #0
  4026ca:	18cd      	adds	r5, r1, r3
  4026cc:	eb42 0604 	adc.w	r6, r2, r4
  4026d0:	4628      	mov	r0, r5
  4026d2:	4631      	mov	r1, r6
  4026d4:	4c17      	ldr	r4, [pc, #92]	; (402734 <write_image_to_file+0x13c>)
  4026d6:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4026da:	f04f 0300 	mov.w	r3, #0
  4026de:	47a0      	blx	r4
  4026e0:	4603      	mov	r3, r0
  4026e2:	460c      	mov	r4, r1
  4026e4:	4618      	mov	r0, r3
  4026e6:	4b14      	ldr	r3, [pc, #80]	; (402738 <write_image_to_file+0x140>)
  4026e8:	4798      	blx	r3
  4026ea:	e000      	b.n	4026ee <write_image_to_file+0xf6>
		return;
  4026ec:	bf00      	nop
	
}
  4026ee:	373c      	adds	r7, #60	; 0x3c
  4026f0:	46bd      	mov	sp, r7
  4026f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026f6:	bf00      	nop
  4026f8:	00401cad 	.word	0x00401cad
  4026fc:	20000ac0 	.word	0x20000ac0
  402700:	20000ab8 	.word	0x20000ab8
  402704:	20000a68 	.word	0x20000a68
  402708:	004035e5 	.word	0x004035e5
  40270c:	00408dd4 	.word	0x00408dd4
  402710:	00403681 	.word	0x00403681
  402714:	004025a9 	.word	0x004025a9
  402718:	20000a64 	.word	0x20000a64
  40271c:	20000ac4 	.word	0x20000ac4
  402720:	40024000 	.word	0x40024000
  402724:	0040166f 	.word	0x0040166f
  402728:	00408de8 	.word	0x00408de8
  40272c:	0040169d 	.word	0x0040169d
  402730:	00402385 	.word	0x00402385
  402734:	00403285 	.word	0x00403285
  402738:	20000001 	.word	0x20000001

0040273c <process_data_wifi>:
void process_incoming_byte_wifi(uint8_t in_byte) {
	
	input_line_wifi[input_pos_wifi++ ] = in_byte;
}

void process_data_wifi(void) {
  40273c:	b580      	push	{r7, lr}
  40273e:	af00      	add	r7, sp, #0
	
	if (strstr(input_line_wifi, "None")) {
  402740:	490a      	ldr	r1, [pc, #40]	; (40276c <process_data_wifi+0x30>)
  402742:	480b      	ldr	r0, [pc, #44]	; (402770 <process_data_wifi+0x34>)
  402744:	4b0b      	ldr	r3, [pc, #44]	; (402774 <process_data_wifi+0x38>)
  402746:	4798      	blx	r3
  402748:	4603      	mov	r3, r0
  40274a:	2b00      	cmp	r3, #0
  40274c:	d002      	beq.n	402754 <process_data_wifi+0x18>
		wait_flag = 1;
  40274e:	4b0a      	ldr	r3, [pc, #40]	; (402778 <process_data_wifi+0x3c>)
  402750:	2201      	movs	r2, #1
  402752:	601a      	str	r2, [r3, #0]
	} 
	if (strstr(input_line_wifi, "Image")){
  402754:	4909      	ldr	r1, [pc, #36]	; (40277c <process_data_wifi+0x40>)
  402756:	4806      	ldr	r0, [pc, #24]	; (402770 <process_data_wifi+0x34>)
  402758:	4b06      	ldr	r3, [pc, #24]	; (402774 <process_data_wifi+0x38>)
  40275a:	4798      	blx	r3
  40275c:	4603      	mov	r3, r0
  40275e:	2b00      	cmp	r3, #0
  402760:	d002      	beq.n	402768 <process_data_wifi+0x2c>
		start_image_transfer = 1;
  402762:	4b07      	ldr	r3, [pc, #28]	; (402780 <process_data_wifi+0x44>)
  402764:	2201      	movs	r2, #1
  402766:	601a      	str	r2, [r3, #0]
	}
  402768:	bf00      	nop
  40276a:	bd80      	pop	{r7, pc}
  40276c:	00408df4 	.word	0x00408df4
  402770:	2000ce14 	.word	0x2000ce14
  402774:	0040397d 	.word	0x0040397d
  402778:	20000a70 	.word	0x20000a70
  40277c:	00408dfc 	.word	0x00408dfc
  402780:	20000a6c 	.word	0x20000a6c

00402784 <sysclk_enable_peripheral_clock>:
{
  402784:	b580      	push	{r7, lr}
  402786:	b082      	sub	sp, #8
  402788:	af00      	add	r7, sp, #0
  40278a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40278c:	6878      	ldr	r0, [r7, #4]
  40278e:	4b03      	ldr	r3, [pc, #12]	; (40279c <sysclk_enable_peripheral_clock+0x18>)
  402790:	4798      	blx	r3
}
  402792:	bf00      	nop
  402794:	3708      	adds	r7, #8
  402796:	46bd      	mov	sp, r7
  402798:	bd80      	pop	{r7, pc}
  40279a:	bf00      	nop
  40279c:	00400e1d 	.word	0x00400e1d

004027a0 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4027a0:	b580      	push	{r7, lr}
  4027a2:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4027a4:	200b      	movs	r0, #11
  4027a6:	4b03      	ldr	r3, [pc, #12]	; (4027b4 <ioport_init+0x14>)
  4027a8:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4027aa:	200c      	movs	r0, #12
  4027ac:	4b01      	ldr	r3, [pc, #4]	; (4027b4 <ioport_init+0x14>)
  4027ae:	4798      	blx	r3
	arch_ioport_init();
}
  4027b0:	bf00      	nop
  4027b2:	bd80      	pop	{r7, pc}
  4027b4:	00402785 	.word	0x00402785

004027b8 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4027b8:	b480      	push	{r7}
  4027ba:	b08d      	sub	sp, #52	; 0x34
  4027bc:	af00      	add	r7, sp, #0
  4027be:	6078      	str	r0, [r7, #4]
  4027c0:	460b      	mov	r3, r1
  4027c2:	70fb      	strb	r3, [r7, #3]
  4027c4:	687b      	ldr	r3, [r7, #4]
  4027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  4027c8:	78fb      	ldrb	r3, [r7, #3]
  4027ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4027ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4027d0:	627b      	str	r3, [r7, #36]	; 0x24
  4027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4027d4:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4027d6:	6a3b      	ldr	r3, [r7, #32]
  4027d8:	095b      	lsrs	r3, r3, #5
  4027da:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4027dc:	69fb      	ldr	r3, [r7, #28]
  4027de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4027e2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4027e6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4027e8:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4027ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4027ee:	2b01      	cmp	r3, #1
  4027f0:	d109      	bne.n	402806 <ioport_set_pin_dir+0x4e>
  4027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4027f4:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4027f6:	697b      	ldr	r3, [r7, #20]
  4027f8:	f003 031f 	and.w	r3, r3, #31
  4027fc:	2201      	movs	r2, #1
  4027fe:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402800:	69bb      	ldr	r3, [r7, #24]
  402802:	611a      	str	r2, [r3, #16]
  402804:	e00c      	b.n	402820 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  402806:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40280a:	2b00      	cmp	r3, #0
  40280c:	d108      	bne.n	402820 <ioport_set_pin_dir+0x68>
  40280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402810:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  402812:	693b      	ldr	r3, [r7, #16]
  402814:	f003 031f 	and.w	r3, r3, #31
  402818:	2201      	movs	r2, #1
  40281a:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40281c:	69bb      	ldr	r3, [r7, #24]
  40281e:	615a      	str	r2, [r3, #20]
  402820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402822:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402824:	68fb      	ldr	r3, [r7, #12]
  402826:	f003 031f 	and.w	r3, r3, #31
  40282a:	2201      	movs	r2, #1
  40282c:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40282e:	69bb      	ldr	r3, [r7, #24]
  402830:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402834:	bf00      	nop
  402836:	3734      	adds	r7, #52	; 0x34
  402838:	46bd      	mov	sp, r7
  40283a:	bc80      	pop	{r7}
  40283c:	4770      	bx	lr

0040283e <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  40283e:	b480      	push	{r7}
  402840:	b08b      	sub	sp, #44	; 0x2c
  402842:	af00      	add	r7, sp, #0
  402844:	6078      	str	r0, [r7, #4]
  402846:	460b      	mov	r3, r1
  402848:	70fb      	strb	r3, [r7, #3]
  40284a:	687b      	ldr	r3, [r7, #4]
  40284c:	627b      	str	r3, [r7, #36]	; 0x24
  40284e:	78fb      	ldrb	r3, [r7, #3]
  402850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402856:	61fb      	str	r3, [r7, #28]
  402858:	69fb      	ldr	r3, [r7, #28]
  40285a:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40285c:	69bb      	ldr	r3, [r7, #24]
  40285e:	095b      	lsrs	r3, r3, #5
  402860:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402862:	697b      	ldr	r3, [r7, #20]
  402864:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402868:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40286c:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40286e:	613b      	str	r3, [r7, #16]

	if (level) {
  402870:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402874:	2b00      	cmp	r3, #0
  402876:	d009      	beq.n	40288c <ioport_set_pin_level+0x4e>
  402878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40287a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40287c:	68fb      	ldr	r3, [r7, #12]
  40287e:	f003 031f 	and.w	r3, r3, #31
  402882:	2201      	movs	r2, #1
  402884:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402886:	693b      	ldr	r3, [r7, #16]
  402888:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  40288a:	e008      	b.n	40289e <ioport_set_pin_level+0x60>
  40288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40288e:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  402890:	68bb      	ldr	r3, [r7, #8]
  402892:	f003 031f 	and.w	r3, r3, #31
  402896:	2201      	movs	r2, #1
  402898:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40289a:	693b      	ldr	r3, [r7, #16]
  40289c:	635a      	str	r2, [r3, #52]	; 0x34
  40289e:	bf00      	nop
  4028a0:	372c      	adds	r7, #44	; 0x2c
  4028a2:	46bd      	mov	sp, r7
  4028a4:	bc80      	pop	{r7}
  4028a6:	4770      	bx	lr

004028a8 <board_init>:
#include <board.h>
#include <conf_board.h>
#include "wifi.h"

void board_init(void)
{
  4028a8:	b580      	push	{r7, lr}
  4028aa:	af00      	add	r7, sp, #0
	
	ioport_init();
  4028ac:	4b13      	ldr	r3, [pc, #76]	; (4028fc <board_init+0x54>)
  4028ae:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_RESET_PIN, IOPORT_DIR_OUTPUT);
  4028b0:	2101      	movs	r1, #1
  4028b2:	2000      	movs	r0, #0
  4028b4:	4b12      	ldr	r3, [pc, #72]	; (402900 <board_init+0x58>)
  4028b6:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET_PIN, true);
  4028b8:	2101      	movs	r1, #1
  4028ba:	2000      	movs	r0, #0
  4028bc:	4b11      	ldr	r3, [pc, #68]	; (402904 <board_init+0x5c>)
  4028be:	4798      	blx	r3
	
	ioport_set_pin_dir(PIN_LED, IOPORT_DIR_OUTPUT);
  4028c0:	2101      	movs	r1, #1
  4028c2:	2016      	movs	r0, #22
  4028c4:	4b0e      	ldr	r3, [pc, #56]	; (402900 <board_init+0x58>)
  4028c6:	4798      	blx	r3
	ioport_set_pin_level(PIN_LED, false);
  4028c8:	2100      	movs	r1, #0
  4028ca:	2016      	movs	r0, #22
  4028cc:	4b0d      	ldr	r3, [pc, #52]	; (402904 <board_init+0x5c>)
  4028ce:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_CTS_PIN, IOPORT_DIR_OUTPUT);
  4028d0:	2101      	movs	r1, #1
  4028d2:	2007      	movs	r0, #7
  4028d4:	4b0a      	ldr	r3, [pc, #40]	; (402900 <board_init+0x58>)
  4028d6:	4798      	blx	r3
	ioport_set_pin_level(WIFI_CTS_PIN, false);
  4028d8:	2100      	movs	r1, #0
  4028da:	2007      	movs	r0, #7
  4028dc:	4b09      	ldr	r3, [pc, #36]	; (402904 <board_init+0x5c>)
  4028de:	4798      	blx	r3
	
	ioport_set_pin_dir(CAM_RST, IOPORT_DIR_OUTPUT);
  4028e0:	2101      	movs	r1, #1
  4028e2:	2014      	movs	r0, #20
  4028e4:	4b06      	ldr	r3, [pc, #24]	; (402900 <board_init+0x58>)
  4028e6:	4798      	blx	r3
	ioport_set_pin_dir(CAM_RST, true);
  4028e8:	2101      	movs	r1, #1
  4028ea:	2014      	movs	r0, #20
  4028ec:	4b04      	ldr	r3, [pc, #16]	; (402900 <board_init+0x58>)
  4028ee:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_STATUS, IOPORT_DIR_INPUT);
  4028f0:	2100      	movs	r1, #0
  4028f2:	202e      	movs	r0, #46	; 0x2e
  4028f4:	4b02      	ldr	r3, [pc, #8]	; (402900 <board_init+0x58>)
  4028f6:	4798      	blx	r3
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
}
  4028f8:	bf00      	nop
  4028fa:	bd80      	pop	{r7, pc}
  4028fc:	004027a1 	.word	0x004027a1
  402900:	004027b9 	.word	0x004027b9
  402904:	0040283f 	.word	0x0040283f

00402908 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402908:	b580      	push	{r7, lr}
  40290a:	b084      	sub	sp, #16
  40290c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  40290e:	4b27      	ldr	r3, [pc, #156]	; (4029ac <Reset_Handler+0xa4>)
  402910:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  402912:	4b27      	ldr	r3, [pc, #156]	; (4029b0 <Reset_Handler+0xa8>)
  402914:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  402916:	68fa      	ldr	r2, [r7, #12]
  402918:	68bb      	ldr	r3, [r7, #8]
  40291a:	429a      	cmp	r2, r3
  40291c:	d90d      	bls.n	40293a <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40291e:	e007      	b.n	402930 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  402920:	68bb      	ldr	r3, [r7, #8]
  402922:	1d1a      	adds	r2, r3, #4
  402924:	60ba      	str	r2, [r7, #8]
  402926:	68fa      	ldr	r2, [r7, #12]
  402928:	1d11      	adds	r1, r2, #4
  40292a:	60f9      	str	r1, [r7, #12]
  40292c:	6812      	ldr	r2, [r2, #0]
  40292e:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  402930:	68bb      	ldr	r3, [r7, #8]
  402932:	4a20      	ldr	r2, [pc, #128]	; (4029b4 <Reset_Handler+0xac>)
  402934:	4293      	cmp	r3, r2
  402936:	d3f3      	bcc.n	402920 <Reset_Handler+0x18>
  402938:	e020      	b.n	40297c <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  40293a:	68fa      	ldr	r2, [r7, #12]
  40293c:	68bb      	ldr	r3, [r7, #8]
  40293e:	429a      	cmp	r2, r3
  402940:	d21c      	bcs.n	40297c <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402942:	4a1c      	ldr	r2, [pc, #112]	; (4029b4 <Reset_Handler+0xac>)
  402944:	4b1a      	ldr	r3, [pc, #104]	; (4029b0 <Reset_Handler+0xa8>)
  402946:	1ad3      	subs	r3, r2, r3
  402948:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40294a:	68fa      	ldr	r2, [r7, #12]
  40294c:	687b      	ldr	r3, [r7, #4]
  40294e:	4413      	add	r3, r2
  402950:	3b04      	subs	r3, #4
  402952:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  402954:	68ba      	ldr	r2, [r7, #8]
  402956:	687b      	ldr	r3, [r7, #4]
  402958:	4413      	add	r3, r2
  40295a:	3b04      	subs	r3, #4
  40295c:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40295e:	e00a      	b.n	402976 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  402960:	68bb      	ldr	r3, [r7, #8]
  402962:	1f1a      	subs	r2, r3, #4
  402964:	60ba      	str	r2, [r7, #8]
  402966:	68fa      	ldr	r2, [r7, #12]
  402968:	1f11      	subs	r1, r2, #4
  40296a:	60f9      	str	r1, [r7, #12]
  40296c:	6812      	ldr	r2, [r2, #0]
  40296e:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  402970:	687b      	ldr	r3, [r7, #4]
  402972:	3b04      	subs	r3, #4
  402974:	607b      	str	r3, [r7, #4]
  402976:	687b      	ldr	r3, [r7, #4]
  402978:	2b00      	cmp	r3, #0
  40297a:	d1f1      	bne.n	402960 <Reset_Handler+0x58>
		}
	}
	__NOP();
  40297c:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40297e:	4b0e      	ldr	r3, [pc, #56]	; (4029b8 <Reset_Handler+0xb0>)
  402980:	60bb      	str	r3, [r7, #8]
  402982:	e004      	b.n	40298e <Reset_Handler+0x86>
		*pDest++ = 0;
  402984:	68bb      	ldr	r3, [r7, #8]
  402986:	1d1a      	adds	r2, r3, #4
  402988:	60ba      	str	r2, [r7, #8]
  40298a:	2200      	movs	r2, #0
  40298c:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  40298e:	68bb      	ldr	r3, [r7, #8]
  402990:	4a0a      	ldr	r2, [pc, #40]	; (4029bc <Reset_Handler+0xb4>)
  402992:	4293      	cmp	r3, r2
  402994:	d3f6      	bcc.n	402984 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  402996:	4b0a      	ldr	r3, [pc, #40]	; (4029c0 <Reset_Handler+0xb8>)
  402998:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  40299a:	4a0a      	ldr	r2, [pc, #40]	; (4029c4 <Reset_Handler+0xbc>)
  40299c:	68fb      	ldr	r3, [r7, #12]
  40299e:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  4029a0:	4b09      	ldr	r3, [pc, #36]	; (4029c8 <Reset_Handler+0xc0>)
  4029a2:	4798      	blx	r3

	/* Branch to main function */
	main();
  4029a4:	4b09      	ldr	r3, [pc, #36]	; (4029cc <Reset_Handler+0xc4>)
  4029a6:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4029a8:	e7fe      	b.n	4029a8 <Reset_Handler+0xa0>
  4029aa:	bf00      	nop
  4029ac:	004091ac 	.word	0x004091ac
  4029b0:	20000000 	.word	0x20000000
  4029b4:	200009c0 	.word	0x200009c0
  4029b8:	200009c0 	.word	0x200009c0
  4029bc:	2000d224 	.word	0x2000d224
  4029c0:	00400000 	.word	0x00400000
  4029c4:	e000ed00 	.word	0xe000ed00
  4029c8:	00403595 	.word	0x00403595
  4029cc:	00402db9 	.word	0x00402db9

004029d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4029d0:	b480      	push	{r7}
  4029d2:	af00      	add	r7, sp, #0
	while (1) {
  4029d4:	e7fe      	b.n	4029d4 <Dummy_Handler+0x4>
	...

004029d8 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  4029d8:	b480      	push	{r7}
  4029da:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4029dc:	4b5d      	ldr	r3, [pc, #372]	; (402b54 <SystemCoreClockUpdate+0x17c>)
  4029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4029e0:	f003 0303 	and.w	r3, r3, #3
  4029e4:	2b03      	cmp	r3, #3
  4029e6:	f200 8096 	bhi.w	402b16 <SystemCoreClockUpdate+0x13e>
  4029ea:	a201      	add	r2, pc, #4	; (adr r2, 4029f0 <SystemCoreClockUpdate+0x18>)
  4029ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4029f0:	00402a01 	.word	0x00402a01
  4029f4:	00402a21 	.word	0x00402a21
  4029f8:	00402a6b 	.word	0x00402a6b
  4029fc:	00402a6b 	.word	0x00402a6b
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402a00:	4b55      	ldr	r3, [pc, #340]	; (402b58 <SystemCoreClockUpdate+0x180>)
  402a02:	695b      	ldr	r3, [r3, #20]
  402a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402a08:	2b00      	cmp	r3, #0
  402a0a:	d004      	beq.n	402a16 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402a0c:	4b53      	ldr	r3, [pc, #332]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402a0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402a12:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  402a14:	e080      	b.n	402b18 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402a16:	4b51      	ldr	r3, [pc, #324]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402a18:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402a1c:	601a      	str	r2, [r3, #0]
		break;
  402a1e:	e07b      	b.n	402b18 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402a20:	4b4c      	ldr	r3, [pc, #304]	; (402b54 <SystemCoreClockUpdate+0x17c>)
  402a22:	6a1b      	ldr	r3, [r3, #32]
  402a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402a28:	2b00      	cmp	r3, #0
  402a2a:	d003      	beq.n	402a34 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402a2c:	4b4b      	ldr	r3, [pc, #300]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402a2e:	4a4c      	ldr	r2, [pc, #304]	; (402b60 <SystemCoreClockUpdate+0x188>)
  402a30:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  402a32:	e071      	b.n	402b18 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402a34:	4b49      	ldr	r3, [pc, #292]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402a36:	4a4b      	ldr	r2, [pc, #300]	; (402b64 <SystemCoreClockUpdate+0x18c>)
  402a38:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402a3a:	4b46      	ldr	r3, [pc, #280]	; (402b54 <SystemCoreClockUpdate+0x17c>)
  402a3c:	6a1b      	ldr	r3, [r3, #32]
  402a3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402a42:	2b10      	cmp	r3, #16
  402a44:	d008      	beq.n	402a58 <SystemCoreClockUpdate+0x80>
  402a46:	2b20      	cmp	r3, #32
  402a48:	d00a      	beq.n	402a60 <SystemCoreClockUpdate+0x88>
  402a4a:	2b00      	cmp	r3, #0
  402a4c:	d000      	beq.n	402a50 <SystemCoreClockUpdate+0x78>
			break;
  402a4e:	e00b      	b.n	402a68 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402a50:	4b42      	ldr	r3, [pc, #264]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402a52:	4a44      	ldr	r2, [pc, #272]	; (402b64 <SystemCoreClockUpdate+0x18c>)
  402a54:	601a      	str	r2, [r3, #0]
			break;
  402a56:	e007      	b.n	402a68 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402a58:	4b40      	ldr	r3, [pc, #256]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402a5a:	4a43      	ldr	r2, [pc, #268]	; (402b68 <SystemCoreClockUpdate+0x190>)
  402a5c:	601a      	str	r2, [r3, #0]
			break;
  402a5e:	e003      	b.n	402a68 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402a60:	4b3e      	ldr	r3, [pc, #248]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402a62:	4a3f      	ldr	r2, [pc, #252]	; (402b60 <SystemCoreClockUpdate+0x188>)
  402a64:	601a      	str	r2, [r3, #0]
			break;
  402a66:	bf00      	nop
		break;
  402a68:	e056      	b.n	402b18 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402a6a:	4b3a      	ldr	r3, [pc, #232]	; (402b54 <SystemCoreClockUpdate+0x17c>)
  402a6c:	6a1b      	ldr	r3, [r3, #32]
  402a6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402a72:	2b00      	cmp	r3, #0
  402a74:	d003      	beq.n	402a7e <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402a76:	4b39      	ldr	r3, [pc, #228]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402a78:	4a39      	ldr	r2, [pc, #228]	; (402b60 <SystemCoreClockUpdate+0x188>)
  402a7a:	601a      	str	r2, [r3, #0]
  402a7c:	e019      	b.n	402ab2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402a7e:	4b37      	ldr	r3, [pc, #220]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402a80:	4a38      	ldr	r2, [pc, #224]	; (402b64 <SystemCoreClockUpdate+0x18c>)
  402a82:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402a84:	4b33      	ldr	r3, [pc, #204]	; (402b54 <SystemCoreClockUpdate+0x17c>)
  402a86:	6a1b      	ldr	r3, [r3, #32]
  402a88:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402a8c:	2b10      	cmp	r3, #16
  402a8e:	d008      	beq.n	402aa2 <SystemCoreClockUpdate+0xca>
  402a90:	2b20      	cmp	r3, #32
  402a92:	d00a      	beq.n	402aaa <SystemCoreClockUpdate+0xd2>
  402a94:	2b00      	cmp	r3, #0
  402a96:	d000      	beq.n	402a9a <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402a98:	e00b      	b.n	402ab2 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402a9a:	4b30      	ldr	r3, [pc, #192]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402a9c:	4a31      	ldr	r2, [pc, #196]	; (402b64 <SystemCoreClockUpdate+0x18c>)
  402a9e:	601a      	str	r2, [r3, #0]
					break;
  402aa0:	e007      	b.n	402ab2 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402aa2:	4b2e      	ldr	r3, [pc, #184]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402aa4:	4a30      	ldr	r2, [pc, #192]	; (402b68 <SystemCoreClockUpdate+0x190>)
  402aa6:	601a      	str	r2, [r3, #0]
					break;
  402aa8:	e003      	b.n	402ab2 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402aaa:	4b2c      	ldr	r3, [pc, #176]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402aac:	4a2c      	ldr	r2, [pc, #176]	; (402b60 <SystemCoreClockUpdate+0x188>)
  402aae:	601a      	str	r2, [r3, #0]
					break;
  402ab0:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402ab2:	4b28      	ldr	r3, [pc, #160]	; (402b54 <SystemCoreClockUpdate+0x17c>)
  402ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ab6:	f003 0303 	and.w	r3, r3, #3
  402aba:	2b02      	cmp	r3, #2
  402abc:	d115      	bne.n	402aea <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402abe:	4b25      	ldr	r3, [pc, #148]	; (402b54 <SystemCoreClockUpdate+0x17c>)
  402ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  402ac2:	0c1b      	lsrs	r3, r3, #16
  402ac4:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402ac8:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402aca:	4a24      	ldr	r2, [pc, #144]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402acc:	6812      	ldr	r2, [r2, #0]
  402ace:	fb02 f303 	mul.w	r3, r2, r3
  402ad2:	4a22      	ldr	r2, [pc, #136]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402ad4:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402ad6:	4b1f      	ldr	r3, [pc, #124]	; (402b54 <SystemCoreClockUpdate+0x17c>)
  402ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  402ada:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402adc:	4a1f      	ldr	r2, [pc, #124]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402ade:	6812      	ldr	r2, [r2, #0]
  402ae0:	fbb2 f3f3 	udiv	r3, r2, r3
  402ae4:	4a1d      	ldr	r2, [pc, #116]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402ae6:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402ae8:	e016      	b.n	402b18 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402aea:	4b1a      	ldr	r3, [pc, #104]	; (402b54 <SystemCoreClockUpdate+0x17c>)
  402aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402aee:	0c1b      	lsrs	r3, r3, #16
  402af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402af4:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402af6:	4a19      	ldr	r2, [pc, #100]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402af8:	6812      	ldr	r2, [r2, #0]
  402afa:	fb02 f303 	mul.w	r3, r2, r3
  402afe:	4a17      	ldr	r2, [pc, #92]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402b00:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402b02:	4b14      	ldr	r3, [pc, #80]	; (402b54 <SystemCoreClockUpdate+0x17c>)
  402b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  402b06:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402b08:	4a14      	ldr	r2, [pc, #80]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402b0a:	6812      	ldr	r2, [r2, #0]
  402b0c:	fbb2 f3f3 	udiv	r3, r2, r3
  402b10:	4a12      	ldr	r2, [pc, #72]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402b12:	6013      	str	r3, [r2, #0]
		break;
  402b14:	e000      	b.n	402b18 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  402b16:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402b18:	4b0e      	ldr	r3, [pc, #56]	; (402b54 <SystemCoreClockUpdate+0x17c>)
  402b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402b20:	2b70      	cmp	r3, #112	; 0x70
  402b22:	d108      	bne.n	402b36 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  402b24:	4b0d      	ldr	r3, [pc, #52]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402b26:	681b      	ldr	r3, [r3, #0]
  402b28:	4a10      	ldr	r2, [pc, #64]	; (402b6c <SystemCoreClockUpdate+0x194>)
  402b2a:	fba2 2303 	umull	r2, r3, r2, r3
  402b2e:	085b      	lsrs	r3, r3, #1
  402b30:	4a0a      	ldr	r2, [pc, #40]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402b32:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  402b34:	e00a      	b.n	402b4c <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402b36:	4b07      	ldr	r3, [pc, #28]	; (402b54 <SystemCoreClockUpdate+0x17c>)
  402b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b3a:	091b      	lsrs	r3, r3, #4
  402b3c:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  402b40:	4a06      	ldr	r2, [pc, #24]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402b42:	6812      	ldr	r2, [r2, #0]
  402b44:	fa22 f303 	lsr.w	r3, r2, r3
  402b48:	4a04      	ldr	r2, [pc, #16]	; (402b5c <SystemCoreClockUpdate+0x184>)
  402b4a:	6013      	str	r3, [r2, #0]
}
  402b4c:	bf00      	nop
  402b4e:	46bd      	mov	sp, r7
  402b50:	bc80      	pop	{r7}
  402b52:	4770      	bx	lr
  402b54:	400e0400 	.word	0x400e0400
  402b58:	400e1410 	.word	0x400e1410
  402b5c:	2000000c 	.word	0x2000000c
  402b60:	00b71b00 	.word	0x00b71b00
  402b64:	003d0900 	.word	0x003d0900
  402b68:	007a1200 	.word	0x007a1200
  402b6c:	aaaaaaab 	.word	0xaaaaaaab

00402b70 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402b70:	b480      	push	{r7}
  402b72:	b083      	sub	sp, #12
  402b74:	af00      	add	r7, sp, #0
  402b76:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402b78:	687b      	ldr	r3, [r7, #4]
  402b7a:	4a18      	ldr	r2, [pc, #96]	; (402bdc <system_init_flash+0x6c>)
  402b7c:	4293      	cmp	r3, r2
  402b7e:	d804      	bhi.n	402b8a <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402b80:	4b17      	ldr	r3, [pc, #92]	; (402be0 <system_init_flash+0x70>)
  402b82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402b86:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402b88:	e023      	b.n	402bd2 <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402b8a:	687b      	ldr	r3, [r7, #4]
  402b8c:	4a15      	ldr	r2, [pc, #84]	; (402be4 <system_init_flash+0x74>)
  402b8e:	4293      	cmp	r3, r2
  402b90:	d803      	bhi.n	402b9a <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402b92:	4b13      	ldr	r3, [pc, #76]	; (402be0 <system_init_flash+0x70>)
  402b94:	4a14      	ldr	r2, [pc, #80]	; (402be8 <system_init_flash+0x78>)
  402b96:	601a      	str	r2, [r3, #0]
}
  402b98:	e01b      	b.n	402bd2 <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402b9a:	687b      	ldr	r3, [r7, #4]
  402b9c:	4a13      	ldr	r2, [pc, #76]	; (402bec <system_init_flash+0x7c>)
  402b9e:	4293      	cmp	r3, r2
  402ba0:	d803      	bhi.n	402baa <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402ba2:	4b0f      	ldr	r3, [pc, #60]	; (402be0 <system_init_flash+0x70>)
  402ba4:	4a12      	ldr	r2, [pc, #72]	; (402bf0 <system_init_flash+0x80>)
  402ba6:	601a      	str	r2, [r3, #0]
}
  402ba8:	e013      	b.n	402bd2 <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402baa:	687b      	ldr	r3, [r7, #4]
  402bac:	4a11      	ldr	r2, [pc, #68]	; (402bf4 <system_init_flash+0x84>)
  402bae:	4293      	cmp	r3, r2
  402bb0:	d803      	bhi.n	402bba <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402bb2:	4b0b      	ldr	r3, [pc, #44]	; (402be0 <system_init_flash+0x70>)
  402bb4:	4a10      	ldr	r2, [pc, #64]	; (402bf8 <system_init_flash+0x88>)
  402bb6:	601a      	str	r2, [r3, #0]
}
  402bb8:	e00b      	b.n	402bd2 <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402bba:	687b      	ldr	r3, [r7, #4]
  402bbc:	4a0f      	ldr	r2, [pc, #60]	; (402bfc <system_init_flash+0x8c>)
  402bbe:	4293      	cmp	r3, r2
  402bc0:	d804      	bhi.n	402bcc <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402bc2:	4b07      	ldr	r3, [pc, #28]	; (402be0 <system_init_flash+0x70>)
  402bc4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402bc8:	601a      	str	r2, [r3, #0]
}
  402bca:	e002      	b.n	402bd2 <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402bcc:	4b04      	ldr	r3, [pc, #16]	; (402be0 <system_init_flash+0x70>)
  402bce:	4a0c      	ldr	r2, [pc, #48]	; (402c00 <system_init_flash+0x90>)
  402bd0:	601a      	str	r2, [r3, #0]
}
  402bd2:	bf00      	nop
  402bd4:	370c      	adds	r7, #12
  402bd6:	46bd      	mov	sp, r7
  402bd8:	bc80      	pop	{r7}
  402bda:	4770      	bx	lr
  402bdc:	01312cff 	.word	0x01312cff
  402be0:	400e0a00 	.word	0x400e0a00
  402be4:	026259ff 	.word	0x026259ff
  402be8:	04000100 	.word	0x04000100
  402bec:	039386ff 	.word	0x039386ff
  402bf0:	04000200 	.word	0x04000200
  402bf4:	04c4b3ff 	.word	0x04c4b3ff
  402bf8:	04000300 	.word	0x04000300
  402bfc:	05f5e0ff 	.word	0x05f5e0ff
  402c00:	04000500 	.word	0x04000500

00402c04 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  402c04:	b480      	push	{r7}
  402c06:	b085      	sub	sp, #20
  402c08:	af00      	add	r7, sp, #0
  402c0a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  402c0c:	4b10      	ldr	r3, [pc, #64]	; (402c50 <_sbrk+0x4c>)
  402c0e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  402c10:	4b10      	ldr	r3, [pc, #64]	; (402c54 <_sbrk+0x50>)
  402c12:	681b      	ldr	r3, [r3, #0]
  402c14:	2b00      	cmp	r3, #0
  402c16:	d102      	bne.n	402c1e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402c18:	4b0e      	ldr	r3, [pc, #56]	; (402c54 <_sbrk+0x50>)
  402c1a:	4a0f      	ldr	r2, [pc, #60]	; (402c58 <_sbrk+0x54>)
  402c1c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402c1e:	4b0d      	ldr	r3, [pc, #52]	; (402c54 <_sbrk+0x50>)
  402c20:	681b      	ldr	r3, [r3, #0]
  402c22:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  402c24:	68ba      	ldr	r2, [r7, #8]
  402c26:	687b      	ldr	r3, [r7, #4]
  402c28:	441a      	add	r2, r3
  402c2a:	68fb      	ldr	r3, [r7, #12]
  402c2c:	429a      	cmp	r2, r3
  402c2e:	dd02      	ble.n	402c36 <_sbrk+0x32>
		return (caddr_t) -1;	
  402c30:	f04f 33ff 	mov.w	r3, #4294967295
  402c34:	e006      	b.n	402c44 <_sbrk+0x40>
	}

	heap += incr;
  402c36:	4b07      	ldr	r3, [pc, #28]	; (402c54 <_sbrk+0x50>)
  402c38:	681a      	ldr	r2, [r3, #0]
  402c3a:	687b      	ldr	r3, [r7, #4]
  402c3c:	4413      	add	r3, r2
  402c3e:	4a05      	ldr	r2, [pc, #20]	; (402c54 <_sbrk+0x50>)
  402c40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402c42:	68bb      	ldr	r3, [r7, #8]
}
  402c44:	4618      	mov	r0, r3
  402c46:	3714      	adds	r7, #20
  402c48:	46bd      	mov	sp, r7
  402c4a:	bc80      	pop	{r7}
  402c4c:	4770      	bx	lr
  402c4e:	bf00      	nop
  402c50:	2001fffc 	.word	0x2001fffc
  402c54:	20000a7c 	.word	0x20000a7c
  402c58:	20010228 	.word	0x20010228

00402c5c <osc_get_rate>:
{
  402c5c:	b480      	push	{r7}
  402c5e:	b083      	sub	sp, #12
  402c60:	af00      	add	r7, sp, #0
  402c62:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402c64:	687b      	ldr	r3, [r7, #4]
  402c66:	2b07      	cmp	r3, #7
  402c68:	d825      	bhi.n	402cb6 <osc_get_rate+0x5a>
  402c6a:	a201      	add	r2, pc, #4	; (adr r2, 402c70 <osc_get_rate+0x14>)
  402c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402c70:	00402c91 	.word	0x00402c91
  402c74:	00402c97 	.word	0x00402c97
  402c78:	00402c9d 	.word	0x00402c9d
  402c7c:	00402ca3 	.word	0x00402ca3
  402c80:	00402ca7 	.word	0x00402ca7
  402c84:	00402cab 	.word	0x00402cab
  402c88:	00402caf 	.word	0x00402caf
  402c8c:	00402cb3 	.word	0x00402cb3
		return OSC_SLCK_32K_RC_HZ;
  402c90:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402c94:	e010      	b.n	402cb8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402c9a:	e00d      	b.n	402cb8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402c9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402ca0:	e00a      	b.n	402cb8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402ca2:	4b08      	ldr	r3, [pc, #32]	; (402cc4 <osc_get_rate+0x68>)
  402ca4:	e008      	b.n	402cb8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402ca6:	4b08      	ldr	r3, [pc, #32]	; (402cc8 <osc_get_rate+0x6c>)
  402ca8:	e006      	b.n	402cb8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402caa:	4b08      	ldr	r3, [pc, #32]	; (402ccc <osc_get_rate+0x70>)
  402cac:	e004      	b.n	402cb8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402cae:	4b07      	ldr	r3, [pc, #28]	; (402ccc <osc_get_rate+0x70>)
  402cb0:	e002      	b.n	402cb8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402cb2:	4b06      	ldr	r3, [pc, #24]	; (402ccc <osc_get_rate+0x70>)
  402cb4:	e000      	b.n	402cb8 <osc_get_rate+0x5c>
	return 0;
  402cb6:	2300      	movs	r3, #0
}
  402cb8:	4618      	mov	r0, r3
  402cba:	370c      	adds	r7, #12
  402cbc:	46bd      	mov	sp, r7
  402cbe:	bc80      	pop	{r7}
  402cc0:	4770      	bx	lr
  402cc2:	bf00      	nop
  402cc4:	003d0900 	.word	0x003d0900
  402cc8:	007a1200 	.word	0x007a1200
  402ccc:	00b71b00 	.word	0x00b71b00

00402cd0 <sysclk_get_main_hz>:
{
  402cd0:	b580      	push	{r7, lr}
  402cd2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402cd4:	2006      	movs	r0, #6
  402cd6:	4b04      	ldr	r3, [pc, #16]	; (402ce8 <sysclk_get_main_hz+0x18>)
  402cd8:	4798      	blx	r3
  402cda:	4602      	mov	r2, r0
  402cdc:	4613      	mov	r3, r2
  402cde:	009b      	lsls	r3, r3, #2
  402ce0:	4413      	add	r3, r2
  402ce2:	009b      	lsls	r3, r3, #2
}
  402ce4:	4618      	mov	r0, r3
  402ce6:	bd80      	pop	{r7, pc}
  402ce8:	00402c5d 	.word	0x00402c5d

00402cec <sysclk_get_cpu_hz>:
{
  402cec:	b580      	push	{r7, lr}
  402cee:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402cf0:	4b02      	ldr	r3, [pc, #8]	; (402cfc <sysclk_get_cpu_hz+0x10>)
  402cf2:	4798      	blx	r3
  402cf4:	4603      	mov	r3, r0
  402cf6:	085b      	lsrs	r3, r3, #1
}
  402cf8:	4618      	mov	r0, r3
  402cfa:	bd80      	pop	{r7, pc}
  402cfc:	00402cd1 	.word	0x00402cd1

00402d00 <ioport_set_pin_level>:
{
  402d00:	b480      	push	{r7}
  402d02:	b08b      	sub	sp, #44	; 0x2c
  402d04:	af00      	add	r7, sp, #0
  402d06:	6078      	str	r0, [r7, #4]
  402d08:	460b      	mov	r3, r1
  402d0a:	70fb      	strb	r3, [r7, #3]
  402d0c:	687b      	ldr	r3, [r7, #4]
  402d0e:	627b      	str	r3, [r7, #36]	; 0x24
  402d10:	78fb      	ldrb	r3, [r7, #3]
  402d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402d18:	61fb      	str	r3, [r7, #28]
  402d1a:	69fb      	ldr	r3, [r7, #28]
  402d1c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  402d1e:	69bb      	ldr	r3, [r7, #24]
  402d20:	095b      	lsrs	r3, r3, #5
  402d22:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402d24:	697b      	ldr	r3, [r7, #20]
  402d26:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402d2a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402d2e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  402d30:	613b      	str	r3, [r7, #16]
	if (level) {
  402d32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402d36:	2b00      	cmp	r3, #0
  402d38:	d009      	beq.n	402d4e <ioport_set_pin_level+0x4e>
  402d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402d3c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402d3e:	68fb      	ldr	r3, [r7, #12]
  402d40:	f003 031f 	and.w	r3, r3, #31
  402d44:	2201      	movs	r2, #1
  402d46:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402d48:	693b      	ldr	r3, [r7, #16]
  402d4a:	631a      	str	r2, [r3, #48]	; 0x30
}
  402d4c:	e008      	b.n	402d60 <ioport_set_pin_level+0x60>
  402d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402d50:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  402d52:	68bb      	ldr	r3, [r7, #8]
  402d54:	f003 031f 	and.w	r3, r3, #31
  402d58:	2201      	movs	r2, #1
  402d5a:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402d5c:	693b      	ldr	r3, [r7, #16]
  402d5e:	635a      	str	r2, [r3, #52]	; 0x34
  402d60:	bf00      	nop
  402d62:	372c      	adds	r7, #44	; 0x2c
  402d64:	46bd      	mov	sp, r7
  402d66:	bc80      	pop	{r7}
  402d68:	4770      	bx	lr

00402d6a <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  402d6a:	b480      	push	{r7}
  402d6c:	b089      	sub	sp, #36	; 0x24
  402d6e:	af00      	add	r7, sp, #0
  402d70:	6078      	str	r0, [r7, #4]
  402d72:	687b      	ldr	r3, [r7, #4]
  402d74:	61fb      	str	r3, [r7, #28]
  402d76:	69fb      	ldr	r3, [r7, #28]
  402d78:	61bb      	str	r3, [r7, #24]
  402d7a:	69bb      	ldr	r3, [r7, #24]
  402d7c:	617b      	str	r3, [r7, #20]
	return pin >> 5;
  402d7e:	697b      	ldr	r3, [r7, #20]
  402d80:	095b      	lsrs	r3, r3, #5
  402d82:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402d84:	693b      	ldr	r3, [r7, #16]
  402d86:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402d8a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402d8e:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  402d92:	69fb      	ldr	r3, [r7, #28]
  402d94:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402d96:	68fb      	ldr	r3, [r7, #12]
  402d98:	f003 031f 	and.w	r3, r3, #31
  402d9c:	2101      	movs	r1, #1
  402d9e:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402da2:	4013      	ands	r3, r2
  402da4:	2b00      	cmp	r3, #0
  402da6:	bf14      	ite	ne
  402da8:	2301      	movne	r3, #1
  402daa:	2300      	moveq	r3, #0
  402dac:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  402dae:	4618      	mov	r0, r3
  402db0:	3724      	adds	r7, #36	; 0x24
  402db2:	46bd      	mov	sp, r7
  402db4:	bc80      	pop	{r7}
  402db6:	4770      	bx	lr

00402db8 <main>:
#include "conf_board.h"
#include "conf_clock.h"
#include "timer_interface.h"

int main (void)
{
  402db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402dbc:	b093      	sub	sp, #76	; 0x4c
  402dbe:	af00      	add	r7, sp, #0
	//Initialize clock and board definitions
	sysclk_init();
  402dc0:	4b9b      	ldr	r3, [pc, #620]	; (403030 <main+0x278>)
  402dc2:	4798      	blx	r3
	wdt_disable(WDT);
  402dc4:	489b      	ldr	r0, [pc, #620]	; (403034 <main+0x27c>)
  402dc6:	4b9c      	ldr	r3, [pc, #624]	; (403038 <main+0x280>)
  402dc8:	4798      	blx	r3
	board_init();
  402dca:	4b9c      	ldr	r3, [pc, #624]	; (40303c <main+0x284>)
  402dcc:	4798      	blx	r3

	//Configure and start the Timer
	configure_tc();
  402dce:	4b9c      	ldr	r3, [pc, #624]	; (403040 <main+0x288>)
  402dd0:	4798      	blx	r3
	
	//Configure the WiFi USART, Command pin, and Web Setup pin
	configure_usart_wifi();
  402dd2:	4b9c      	ldr	r3, [pc, #624]	; (403044 <main+0x28c>)
  402dd4:	4798      	blx	r3
	configure_wifi_command_pin();
  402dd6:	4b9c      	ldr	r3, [pc, #624]	; (403048 <main+0x290>)
  402dd8:	4798      	blx	r3
	configure_wifi_web_setup_pin();
  402dda:	4b9c      	ldr	r3, [pc, #624]	; (40304c <main+0x294>)
  402ddc:	4798      	blx	r3
	
	//Reset wiFi module
	ioport_set_pin_level(WIFI_RESET_PIN, 0);
  402dde:	2100      	movs	r1, #0
  402de0:	2000      	movs	r0, #0
  402de2:	4b9b      	ldr	r3, [pc, #620]	; (403050 <main+0x298>)
  402de4:	4798      	blx	r3
	delay_ms(100);
  402de6:	4b9b      	ldr	r3, [pc, #620]	; (403054 <main+0x29c>)
  402de8:	4798      	blx	r3
  402dea:	4603      	mov	r3, r0
  402dec:	4619      	mov	r1, r3
  402dee:	f04f 0200 	mov.w	r2, #0
  402df2:	460b      	mov	r3, r1
  402df4:	4614      	mov	r4, r2
  402df6:	18db      	adds	r3, r3, r3
  402df8:	eb44 0404 	adc.w	r4, r4, r4
  402dfc:	185b      	adds	r3, r3, r1
  402dfe:	eb44 0402 	adc.w	r4, r4, r2
  402e02:	0166      	lsls	r6, r4, #5
  402e04:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  402e08:	015d      	lsls	r5, r3, #5
  402e0a:	195b      	adds	r3, r3, r5
  402e0c:	eb44 0406 	adc.w	r4, r4, r6
  402e10:	185b      	adds	r3, r3, r1
  402e12:	eb44 0402 	adc.w	r4, r4, r2
  402e16:	f243 61af 	movw	r1, #13999	; 0x36af
  402e1a:	f04f 0200 	mov.w	r2, #0
  402e1e:	185d      	adds	r5, r3, r1
  402e20:	eb44 0602 	adc.w	r6, r4, r2
  402e24:	4628      	mov	r0, r5
  402e26:	4631      	mov	r1, r6
  402e28:	4c8b      	ldr	r4, [pc, #556]	; (403058 <main+0x2a0>)
  402e2a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402e2e:	f04f 0300 	mov.w	r3, #0
  402e32:	47a0      	blx	r4
  402e34:	4603      	mov	r3, r0
  402e36:	460c      	mov	r4, r1
  402e38:	4618      	mov	r0, r3
  402e3a:	4b88      	ldr	r3, [pc, #544]	; (40305c <main+0x2a4>)
  402e3c:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET_PIN, 1);
  402e3e:	2101      	movs	r1, #1
  402e40:	2000      	movs	r0, #0
  402e42:	4b83      	ldr	r3, [pc, #524]	; (403050 <main+0x298>)
  402e44:	4798      	blx	r3
	
	//Initialize and configure the camera
	init_camera();
  402e46:	4b86      	ldr	r3, [pc, #536]	; (403060 <main+0x2a8>)
  402e48:	4798      	blx	r3
	configure_camera();
  402e4a:	4b86      	ldr	r3, [pc, #536]	; (403064 <main+0x2ac>)
  402e4c:	4798      	blx	r3


	write_wifi_command("set uart.flow 0 on \r\n", 5);
  402e4e:	2105      	movs	r1, #5
  402e50:	4885      	ldr	r0, [pc, #532]	; (403068 <main+0x2b0>)
  402e52:	4b86      	ldr	r3, [pc, #536]	; (40306c <main+0x2b4>)
  402e54:	4798      	blx	r3
	write_wifi_command("set bus.command.rx_bufsize 5000\r\n", 5);
  402e56:	2105      	movs	r1, #5
  402e58:	4885      	ldr	r0, [pc, #532]	; (403070 <main+0x2b8>)
  402e5a:	4b84      	ldr	r3, [pc, #528]	; (40306c <main+0x2b4>)
  402e5c:	4798      	blx	r3
	write_wifi_command("set sy i g wlan 20\r\n", 1);
  402e5e:	2101      	movs	r1, #1
  402e60:	4884      	ldr	r0, [pc, #528]	; (403074 <main+0x2bc>)
  402e62:	4b82      	ldr	r3, [pc, #520]	; (40306c <main+0x2b4>)
  402e64:	4798      	blx	r3
	write_wifi_command("set sy i g network 19\r\n", 1);
  402e66:	2101      	movs	r1, #1
  402e68:	4883      	ldr	r0, [pc, #524]	; (403078 <main+0x2c0>)
  402e6a:	4b80      	ldr	r3, [pc, #512]	; (40306c <main+0x2b4>)
  402e6c:	4798      	blx	r3
	write_wifi_command("set sy i g softap 21\r\n" ,5);
  402e6e:	2105      	movs	r1, #5
  402e70:	4882      	ldr	r0, [pc, #520]	; (40307c <main+0x2c4>)
  402e72:	4b7e      	ldr	r3, [pc, #504]	; (40306c <main+0x2b4>)
  402e74:	4798      	blx	r3
	write_wifi_command("set system.cmd.gpio 13\r\n", 5);
  402e76:	2105      	movs	r1, #5
  402e78:	4881      	ldr	r0, [pc, #516]	; (403080 <main+0x2c8>)
  402e7a:	4b7c      	ldr	r3, [pc, #496]	; (40306c <main+0x2b4>)
  402e7c:	4798      	blx	r3
	write_wifi_command("set wl n o 14\r\n", 5);
  402e7e:	2105      	movs	r1, #5
  402e80:	4880      	ldr	r0, [pc, #512]	; (403084 <main+0x2cc>)
  402e82:	4b7a      	ldr	r3, [pc, #488]	; (40306c <main+0x2b4>)
  402e84:	4798      	blx	r3
	write_wifi_command("save\r\n", 5);
  402e86:	2105      	movs	r1, #5
  402e88:	487f      	ldr	r0, [pc, #508]	; (403088 <main+0x2d0>)
  402e8a:	4b78      	ldr	r3, [pc, #480]	; (40306c <main+0x2b4>)
  402e8c:	4798      	blx	r3
	write_wifi_command("reboot\r\n", 5);
  402e8e:	2105      	movs	r1, #5
  402e90:	487e      	ldr	r0, [pc, #504]	; (40308c <main+0x2d4>)
  402e92:	4b76      	ldr	r3, [pc, #472]	; (40306c <main+0x2b4>)
  402e94:	4798      	blx	r3
	
	while (ioport_get_pin_level(WIFI_STATUS)==0) { //wait for network connection
  402e96:	e039      	b.n	402f0c <main+0x154>
		if (wifi_setup_button_flag){
  402e98:	4b7d      	ldr	r3, [pc, #500]	; (403090 <main+0x2d8>)
  402e9a:	681b      	ldr	r3, [r3, #0]
  402e9c:	2b00      	cmp	r3, #0
  402e9e:	d035      	beq.n	402f0c <main+0x154>
			write_wifi_command("setup web\r\n", 20);
  402ea0:	2114      	movs	r1, #20
  402ea2:	487c      	ldr	r0, [pc, #496]	; (403094 <main+0x2dc>)
  402ea4:	4b71      	ldr	r3, [pc, #452]	; (40306c <main+0x2b4>)
  402ea6:	4798      	blx	r3
			delay_ms(100);
  402ea8:	4b6a      	ldr	r3, [pc, #424]	; (403054 <main+0x29c>)
  402eaa:	4798      	blx	r3
  402eac:	4603      	mov	r3, r0
  402eae:	4619      	mov	r1, r3
  402eb0:	f04f 0200 	mov.w	r2, #0
  402eb4:	460b      	mov	r3, r1
  402eb6:	4614      	mov	r4, r2
  402eb8:	18db      	adds	r3, r3, r3
  402eba:	eb44 0404 	adc.w	r4, r4, r4
  402ebe:	185b      	adds	r3, r3, r1
  402ec0:	eb44 0402 	adc.w	r4, r4, r2
  402ec4:	ea4f 1944 	mov.w	r9, r4, lsl #5
  402ec8:	ea49 69d3 	orr.w	r9, r9, r3, lsr #27
  402ecc:	ea4f 1843 	mov.w	r8, r3, lsl #5
  402ed0:	eb13 0308 	adds.w	r3, r3, r8
  402ed4:	eb44 0409 	adc.w	r4, r4, r9
  402ed8:	185b      	adds	r3, r3, r1
  402eda:	eb44 0402 	adc.w	r4, r4, r2
  402ede:	f243 61af 	movw	r1, #13999	; 0x36af
  402ee2:	f04f 0200 	mov.w	r2, #0
  402ee6:	185d      	adds	r5, r3, r1
  402ee8:	eb44 0602 	adc.w	r6, r4, r2
  402eec:	4628      	mov	r0, r5
  402eee:	4631      	mov	r1, r6
  402ef0:	4c59      	ldr	r4, [pc, #356]	; (403058 <main+0x2a0>)
  402ef2:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402ef6:	f04f 0300 	mov.w	r3, #0
  402efa:	47a0      	blx	r4
  402efc:	4603      	mov	r3, r0
  402efe:	460c      	mov	r4, r1
  402f00:	4618      	mov	r0, r3
  402f02:	4b56      	ldr	r3, [pc, #344]	; (40305c <main+0x2a4>)
  402f04:	4798      	blx	r3
			wifi_setup_button_flag = 0;
  402f06:	4a62      	ldr	r2, [pc, #392]	; (403090 <main+0x2d8>)
  402f08:	2300      	movs	r3, #0
  402f0a:	6013      	str	r3, [r2, #0]
	while (ioport_get_pin_level(WIFI_STATUS)==0) { //wait for network connection
  402f0c:	202e      	movs	r0, #46	; 0x2e
  402f0e:	4b62      	ldr	r3, [pc, #392]	; (403098 <main+0x2e0>)
  402f10:	4798      	blx	r3
  402f12:	4603      	mov	r3, r0
  402f14:	f083 0301 	eor.w	r3, r3, #1
  402f18:	b2db      	uxtb	r3, r3
  402f1a:	2b00      	cmp	r3, #0
  402f1c:	d1bc      	bne.n	402e98 <main+0xe0>

	// tell wifi to turn off command prompt and echo
	
	
	
	write_wifi_command("set sy c p off\r\n", 2);
  402f1e:	2102      	movs	r1, #2
  402f20:	485e      	ldr	r0, [pc, #376]	; (40309c <main+0x2e4>)
  402f22:	4b52      	ldr	r3, [pc, #328]	; (40306c <main+0x2b4>)
  402f24:	4798      	blx	r3
	
	
	// tell Wifi to turn off command prompt and echo

	while(1) {
		if(wifi_setup_button_flag){
  402f26:	4b5a      	ldr	r3, [pc, #360]	; (403090 <main+0x2d8>)
  402f28:	681b      	ldr	r3, [r3, #0]
  402f2a:	2b00      	cmp	r3, #0
  402f2c:	f000 8136 	beq.w	40319c <main+0x3e4>
			write_wifi_command("setup web\r\n", 5);
  402f30:	2105      	movs	r1, #5
  402f32:	4858      	ldr	r0, [pc, #352]	; (403094 <main+0x2dc>)
  402f34:	4b4d      	ldr	r3, [pc, #308]	; (40306c <main+0x2b4>)
  402f36:	4798      	blx	r3
			delay_ms(100);
  402f38:	4b46      	ldr	r3, [pc, #280]	; (403054 <main+0x29c>)
  402f3a:	4798      	blx	r3
  402f3c:	4603      	mov	r3, r0
  402f3e:	4619      	mov	r1, r3
  402f40:	f04f 0200 	mov.w	r2, #0
  402f44:	460b      	mov	r3, r1
  402f46:	4614      	mov	r4, r2
  402f48:	18db      	adds	r3, r3, r3
  402f4a:	eb44 0404 	adc.w	r4, r4, r4
  402f4e:	185b      	adds	r3, r3, r1
  402f50:	eb44 0402 	adc.w	r4, r4, r2
  402f54:	0160      	lsls	r0, r4, #5
  402f56:	63f8      	str	r0, [r7, #60]	; 0x3c
  402f58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
  402f5a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  402f5e:	63f8      	str	r0, [r7, #60]	; 0x3c
  402f60:	0158      	lsls	r0, r3, #5
  402f62:	63b8      	str	r0, [r7, #56]	; 0x38
  402f64:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
  402f68:	18ed      	adds	r5, r5, r3
  402f6a:	eb46 0604 	adc.w	r6, r6, r4
  402f6e:	462b      	mov	r3, r5
  402f70:	4634      	mov	r4, r6
  402f72:	185b      	adds	r3, r3, r1
  402f74:	eb44 0402 	adc.w	r4, r4, r2
  402f78:	f243 61af 	movw	r1, #13999	; 0x36af
  402f7c:	f04f 0200 	mov.w	r2, #0
  402f80:	185d      	adds	r5, r3, r1
  402f82:	eb44 0602 	adc.w	r6, r4, r2
  402f86:	4628      	mov	r0, r5
  402f88:	4631      	mov	r1, r6
  402f8a:	4c33      	ldr	r4, [pc, #204]	; (403058 <main+0x2a0>)
  402f8c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402f90:	f04f 0300 	mov.w	r3, #0
  402f94:	47a0      	blx	r4
  402f96:	4603      	mov	r3, r0
  402f98:	460c      	mov	r4, r1
  402f9a:	4618      	mov	r0, r3
  402f9c:	4b2f      	ldr	r3, [pc, #188]	; (40305c <main+0x2a4>)
  402f9e:	4798      	blx	r3
			wifi_setup_button_flag=0;
  402fa0:	4a3b      	ldr	r2, [pc, #236]	; (403090 <main+0x2d8>)
  402fa2:	2300      	movs	r3, #0
  402fa4:	6013      	str	r3, [r2, #0]
			while (ioport_get_pin_level(WIFI_STATUS)==0) { //wait for network connection
  402fa6:	e039      	b.n	40301c <main+0x264>
				if (wifi_setup_button_flag){
  402fa8:	4b39      	ldr	r3, [pc, #228]	; (403090 <main+0x2d8>)
  402faa:	681b      	ldr	r3, [r3, #0]
  402fac:	2b00      	cmp	r3, #0
  402fae:	d035      	beq.n	40301c <main+0x264>
					write_wifi_command("setup web\r\n", 5);
  402fb0:	2105      	movs	r1, #5
  402fb2:	4838      	ldr	r0, [pc, #224]	; (403094 <main+0x2dc>)
  402fb4:	4b2d      	ldr	r3, [pc, #180]	; (40306c <main+0x2b4>)
  402fb6:	4798      	blx	r3
					delay_ms(100);
  402fb8:	4b26      	ldr	r3, [pc, #152]	; (403054 <main+0x29c>)
  402fba:	4798      	blx	r3
  402fbc:	4603      	mov	r3, r0
  402fbe:	4619      	mov	r1, r3
  402fc0:	f04f 0200 	mov.w	r2, #0
  402fc4:	460b      	mov	r3, r1
  402fc6:	4614      	mov	r4, r2
  402fc8:	18db      	adds	r3, r3, r3
  402fca:	eb44 0404 	adc.w	r4, r4, r4
  402fce:	185b      	adds	r3, r3, r1
  402fd0:	eb44 0402 	adc.w	r4, r4, r2
  402fd4:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  402fd8:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
  402fdc:	ea4f 1a43 	mov.w	sl, r3, lsl #5
  402fe0:	eb13 030a 	adds.w	r3, r3, sl
  402fe4:	eb44 040b 	adc.w	r4, r4, fp
  402fe8:	185b      	adds	r3, r3, r1
  402fea:	eb44 0402 	adc.w	r4, r4, r2
  402fee:	f243 61af 	movw	r1, #13999	; 0x36af
  402ff2:	f04f 0200 	mov.w	r2, #0
  402ff6:	185d      	adds	r5, r3, r1
  402ff8:	eb44 0602 	adc.w	r6, r4, r2
  402ffc:	4628      	mov	r0, r5
  402ffe:	4631      	mov	r1, r6
  403000:	4c15      	ldr	r4, [pc, #84]	; (403058 <main+0x2a0>)
  403002:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403006:	f04f 0300 	mov.w	r3, #0
  40300a:	47a0      	blx	r4
  40300c:	4603      	mov	r3, r0
  40300e:	460c      	mov	r4, r1
  403010:	4618      	mov	r0, r3
  403012:	4b12      	ldr	r3, [pc, #72]	; (40305c <main+0x2a4>)
  403014:	4798      	blx	r3
					wifi_setup_button_flag = 0;
  403016:	4a1e      	ldr	r2, [pc, #120]	; (403090 <main+0x2d8>)
  403018:	2300      	movs	r3, #0
  40301a:	6013      	str	r3, [r2, #0]
			while (ioport_get_pin_level(WIFI_STATUS)==0) { //wait for network connection
  40301c:	202e      	movs	r0, #46	; 0x2e
  40301e:	4b1e      	ldr	r3, [pc, #120]	; (403098 <main+0x2e0>)
  403020:	4798      	blx	r3
  403022:	4603      	mov	r3, r0
  403024:	f083 0301 	eor.w	r3, r3, #1
  403028:	b2db      	uxtb	r3, r3
  40302a:	2b00      	cmp	r3, #0
  40302c:	d1bc      	bne.n	402fa8 <main+0x1f0>
				}
				
			}
		}
		while(ioport_get_pin_level(WIFI_STATUS)==0){
  40302e:	e0b5      	b.n	40319c <main+0x3e4>
  403030:	00400421 	.word	0x00400421
  403034:	400e1450 	.word	0x400e1450
  403038:	004016ed 	.word	0x004016ed
  40303c:	004028a9 	.word	0x004028a9
  403040:	00402231 	.word	0x00402231
  403044:	00402439 	.word	0x00402439
  403048:	004024e9 	.word	0x004024e9
  40304c:	00402549 	.word	0x00402549
  403050:	00402d01 	.word	0x00402d01
  403054:	00402ced 	.word	0x00402ced
  403058:	00403285 	.word	0x00403285
  40305c:	20000001 	.word	0x20000001
  403060:	00401a81 	.word	0x00401a81
  403064:	00401b45 	.word	0x00401b45
  403068:	00408e04 	.word	0x00408e04
  40306c:	004025a9 	.word	0x004025a9
  403070:	00408e1c 	.word	0x00408e1c
  403074:	00408e40 	.word	0x00408e40
  403078:	00408e58 	.word	0x00408e58
  40307c:	00408e70 	.word	0x00408e70
  403080:	00408e88 	.word	0x00408e88
  403084:	00408ea4 	.word	0x00408ea4
  403088:	00408eb4 	.word	0x00408eb4
  40308c:	00408ebc 	.word	0x00408ebc
  403090:	20000a60 	.word	0x20000a60
  403094:	00408ec8 	.word	0x00408ec8
  403098:	00402d6b 	.word	0x00402d6b
  40309c:	00408ed4 	.word	0x00408ed4
			ioport_set_pin_level(WIFI_RESET_PIN, 0);
  4030a0:	2100      	movs	r1, #0
  4030a2:	2000      	movs	r0, #0
  4030a4:	4b6d      	ldr	r3, [pc, #436]	; (40325c <main+0x4a4>)
  4030a6:	4798      	blx	r3
			delay_ms(100);
  4030a8:	4b6d      	ldr	r3, [pc, #436]	; (403260 <main+0x4a8>)
  4030aa:	4798      	blx	r3
  4030ac:	4603      	mov	r3, r0
  4030ae:	4619      	mov	r1, r3
  4030b0:	f04f 0200 	mov.w	r2, #0
  4030b4:	460b      	mov	r3, r1
  4030b6:	4614      	mov	r4, r2
  4030b8:	18db      	adds	r3, r3, r3
  4030ba:	eb44 0404 	adc.w	r4, r4, r4
  4030be:	185b      	adds	r3, r3, r1
  4030c0:	eb44 0402 	adc.w	r4, r4, r2
  4030c4:	0160      	lsls	r0, r4, #5
  4030c6:	6378      	str	r0, [r7, #52]	; 0x34
  4030c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
  4030ca:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  4030ce:	6378      	str	r0, [r7, #52]	; 0x34
  4030d0:	0158      	lsls	r0, r3, #5
  4030d2:	6338      	str	r0, [r7, #48]	; 0x30
  4030d4:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
  4030d8:	18ed      	adds	r5, r5, r3
  4030da:	eb46 0604 	adc.w	r6, r6, r4
  4030de:	462b      	mov	r3, r5
  4030e0:	4634      	mov	r4, r6
  4030e2:	185b      	adds	r3, r3, r1
  4030e4:	eb44 0402 	adc.w	r4, r4, r2
  4030e8:	f243 61af 	movw	r1, #13999	; 0x36af
  4030ec:	f04f 0200 	mov.w	r2, #0
  4030f0:	185d      	adds	r5, r3, r1
  4030f2:	eb44 0602 	adc.w	r6, r4, r2
  4030f6:	4628      	mov	r0, r5
  4030f8:	4631      	mov	r1, r6
  4030fa:	4c5a      	ldr	r4, [pc, #360]	; (403264 <main+0x4ac>)
  4030fc:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403100:	f04f 0300 	mov.w	r3, #0
  403104:	47a0      	blx	r4
  403106:	4603      	mov	r3, r0
  403108:	460c      	mov	r4, r1
  40310a:	4618      	mov	r0, r3
  40310c:	4b56      	ldr	r3, [pc, #344]	; (403268 <main+0x4b0>)
  40310e:	4798      	blx	r3
			ioport_set_pin_level(WIFI_RESET_PIN, 1);
  403110:	2101      	movs	r1, #1
  403112:	2000      	movs	r0, #0
  403114:	4b51      	ldr	r3, [pc, #324]	; (40325c <main+0x4a4>)
  403116:	4798      	blx	r3
			delay_ms(500);
  403118:	4b51      	ldr	r3, [pc, #324]	; (403260 <main+0x4a8>)
  40311a:	4798      	blx	r3
  40311c:	4603      	mov	r3, r0
  40311e:	4619      	mov	r1, r3
  403120:	f04f 0200 	mov.w	r2, #0
  403124:	460b      	mov	r3, r1
  403126:	4614      	mov	r4, r2
  403128:	0160      	lsls	r0, r4, #5
  40312a:	62f8      	str	r0, [r7, #44]	; 0x2c
  40312c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  40312e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  403132:	62f8      	str	r0, [r7, #44]	; 0x2c
  403134:	015b      	lsls	r3, r3, #5
  403136:	62bb      	str	r3, [r7, #40]	; 0x28
  403138:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
  40313c:	1a5b      	subs	r3, r3, r1
  40313e:	eb64 0402 	sbc.w	r4, r4, r2
  403142:	00a0      	lsls	r0, r4, #2
  403144:	6278      	str	r0, [r7, #36]	; 0x24
  403146:	6a78      	ldr	r0, [r7, #36]	; 0x24
  403148:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  40314c:	6278      	str	r0, [r7, #36]	; 0x24
  40314e:	009b      	lsls	r3, r3, #2
  403150:	623b      	str	r3, [r7, #32]
  403152:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
  403156:	185b      	adds	r3, r3, r1
  403158:	eb44 0402 	adc.w	r4, r4, r2
  40315c:	00a2      	lsls	r2, r4, #2
  40315e:	61fa      	str	r2, [r7, #28]
  403160:	69fa      	ldr	r2, [r7, #28]
  403162:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
  403166:	61fa      	str	r2, [r7, #28]
  403168:	009b      	lsls	r3, r3, #2
  40316a:	61bb      	str	r3, [r7, #24]
  40316c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  403170:	4619      	mov	r1, r3
  403172:	4622      	mov	r2, r4
  403174:	f243 63af 	movw	r3, #13999	; 0x36af
  403178:	f04f 0400 	mov.w	r4, #0
  40317c:	18cd      	adds	r5, r1, r3
  40317e:	eb42 0604 	adc.w	r6, r2, r4
  403182:	4628      	mov	r0, r5
  403184:	4631      	mov	r1, r6
  403186:	4c37      	ldr	r4, [pc, #220]	; (403264 <main+0x4ac>)
  403188:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40318c:	f04f 0300 	mov.w	r3, #0
  403190:	47a0      	blx	r4
  403192:	4603      	mov	r3, r0
  403194:	460c      	mov	r4, r1
  403196:	4618      	mov	r0, r3
  403198:	4b33      	ldr	r3, [pc, #204]	; (403268 <main+0x4b0>)
  40319a:	4798      	blx	r3
		while(ioport_get_pin_level(WIFI_STATUS)==0){
  40319c:	202e      	movs	r0, #46	; 0x2e
  40319e:	4b33      	ldr	r3, [pc, #204]	; (40326c <main+0x4b4>)
  4031a0:	4798      	blx	r3
  4031a2:	4603      	mov	r3, r0
  4031a4:	f083 0301 	eor.w	r3, r3, #1
  4031a8:	b2db      	uxtb	r3, r3
  4031aa:	2b00      	cmp	r3, #0
  4031ac:	f47f af78 	bne.w	4030a0 <main+0x2e8>
		}
		write_wifi_command("poll all\r\n", 5);
  4031b0:	2105      	movs	r1, #5
  4031b2:	482f      	ldr	r0, [pc, #188]	; (403270 <main+0x4b8>)
  4031b4:	4b2f      	ldr	r3, [pc, #188]	; (403274 <main+0x4bc>)
  4031b6:	4798      	blx	r3
		if(wait_flag){
  4031b8:	4b2f      	ldr	r3, [pc, #188]	; (403278 <main+0x4c0>)
  4031ba:	681b      	ldr	r3, [r3, #0]
  4031bc:	2b00      	cmp	r3, #0
  4031be:	d045      	beq.n	40324c <main+0x494>
			delay_ms(1000);
  4031c0:	4b27      	ldr	r3, [pc, #156]	; (403260 <main+0x4a8>)
  4031c2:	4798      	blx	r3
  4031c4:	4603      	mov	r3, r0
  4031c6:	4619      	mov	r1, r3
  4031c8:	f04f 0200 	mov.w	r2, #0
  4031cc:	460b      	mov	r3, r1
  4031ce:	4614      	mov	r4, r2
  4031d0:	0160      	lsls	r0, r4, #5
  4031d2:	6178      	str	r0, [r7, #20]
  4031d4:	6978      	ldr	r0, [r7, #20]
  4031d6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  4031da:	6178      	str	r0, [r7, #20]
  4031dc:	015b      	lsls	r3, r3, #5
  4031de:	613b      	str	r3, [r7, #16]
  4031e0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  4031e4:	1a5b      	subs	r3, r3, r1
  4031e6:	eb64 0402 	sbc.w	r4, r4, r2
  4031ea:	00a0      	lsls	r0, r4, #2
  4031ec:	60f8      	str	r0, [r7, #12]
  4031ee:	68f8      	ldr	r0, [r7, #12]
  4031f0:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  4031f4:	60f8      	str	r0, [r7, #12]
  4031f6:	009b      	lsls	r3, r3, #2
  4031f8:	60bb      	str	r3, [r7, #8]
  4031fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  4031fe:	185b      	adds	r3, r3, r1
  403200:	eb44 0402 	adc.w	r4, r4, r2
  403204:	00e2      	lsls	r2, r4, #3
  403206:	607a      	str	r2, [r7, #4]
  403208:	687a      	ldr	r2, [r7, #4]
  40320a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  40320e:	607a      	str	r2, [r7, #4]
  403210:	00db      	lsls	r3, r3, #3
  403212:	603b      	str	r3, [r7, #0]
  403214:	e9d7 3400 	ldrd	r3, r4, [r7]
  403218:	4619      	mov	r1, r3
  40321a:	4622      	mov	r2, r4
  40321c:	f243 63af 	movw	r3, #13999	; 0x36af
  403220:	f04f 0400 	mov.w	r4, #0
  403224:	18cd      	adds	r5, r1, r3
  403226:	eb42 0604 	adc.w	r6, r2, r4
  40322a:	4628      	mov	r0, r5
  40322c:	4631      	mov	r1, r6
  40322e:	4c0d      	ldr	r4, [pc, #52]	; (403264 <main+0x4ac>)
  403230:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403234:	f04f 0300 	mov.w	r3, #0
  403238:	47a0      	blx	r4
  40323a:	4603      	mov	r3, r0
  40323c:	460c      	mov	r4, r1
  40323e:	4618      	mov	r0, r3
  403240:	4b09      	ldr	r3, [pc, #36]	; (403268 <main+0x4b0>)
  403242:	4798      	blx	r3
			wait_flag=0;
  403244:	4a0c      	ldr	r2, [pc, #48]	; (403278 <main+0x4c0>)
  403246:	2300      	movs	r3, #0
  403248:	6013      	str	r3, [r2, #0]
  40324a:	e66c      	b.n	402f26 <main+0x16e>
			} else {
			uint8_t get_image = start_capture();
  40324c:	4b0b      	ldr	r3, [pc, #44]	; (40327c <main+0x4c4>)
  40324e:	4798      	blx	r3
  403250:	4603      	mov	r3, r0
  403252:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			write_image_to_file();
  403256:	4b0a      	ldr	r3, [pc, #40]	; (403280 <main+0x4c8>)
  403258:	4798      	blx	r3
		if(wifi_setup_button_flag){
  40325a:	e664      	b.n	402f26 <main+0x16e>
  40325c:	00402d01 	.word	0x00402d01
  403260:	00402ced 	.word	0x00402ced
  403264:	00403285 	.word	0x00403285
  403268:	20000001 	.word	0x20000001
  40326c:	00402d6b 	.word	0x00402d6b
  403270:	00408ee8 	.word	0x00408ee8
  403274:	004025a9 	.word	0x004025a9
  403278:	20000a70 	.word	0x20000a70
  40327c:	00401c19 	.word	0x00401c19
  403280:	004025f9 	.word	0x004025f9

00403284 <__aeabi_uldivmod>:
  403284:	b953      	cbnz	r3, 40329c <__aeabi_uldivmod+0x18>
  403286:	b94a      	cbnz	r2, 40329c <__aeabi_uldivmod+0x18>
  403288:	2900      	cmp	r1, #0
  40328a:	bf08      	it	eq
  40328c:	2800      	cmpeq	r0, #0
  40328e:	bf1c      	itt	ne
  403290:	f04f 31ff 	movne.w	r1, #4294967295
  403294:	f04f 30ff 	movne.w	r0, #4294967295
  403298:	f000 b97a 	b.w	403590 <__aeabi_idiv0>
  40329c:	f1ad 0c08 	sub.w	ip, sp, #8
  4032a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4032a4:	f000 f806 	bl	4032b4 <__udivmoddi4>
  4032a8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4032ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4032b0:	b004      	add	sp, #16
  4032b2:	4770      	bx	lr

004032b4 <__udivmoddi4>:
  4032b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4032b8:	468c      	mov	ip, r1
  4032ba:	460d      	mov	r5, r1
  4032bc:	4604      	mov	r4, r0
  4032be:	9e08      	ldr	r6, [sp, #32]
  4032c0:	2b00      	cmp	r3, #0
  4032c2:	d151      	bne.n	403368 <__udivmoddi4+0xb4>
  4032c4:	428a      	cmp	r2, r1
  4032c6:	4617      	mov	r7, r2
  4032c8:	d96d      	bls.n	4033a6 <__udivmoddi4+0xf2>
  4032ca:	fab2 fe82 	clz	lr, r2
  4032ce:	f1be 0f00 	cmp.w	lr, #0
  4032d2:	d00b      	beq.n	4032ec <__udivmoddi4+0x38>
  4032d4:	f1ce 0c20 	rsb	ip, lr, #32
  4032d8:	fa01 f50e 	lsl.w	r5, r1, lr
  4032dc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4032e0:	fa02 f70e 	lsl.w	r7, r2, lr
  4032e4:	ea4c 0c05 	orr.w	ip, ip, r5
  4032e8:	fa00 f40e 	lsl.w	r4, r0, lr
  4032ec:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4032f0:	0c25      	lsrs	r5, r4, #16
  4032f2:	fbbc f8fa 	udiv	r8, ip, sl
  4032f6:	fa1f f987 	uxth.w	r9, r7
  4032fa:	fb0a cc18 	mls	ip, sl, r8, ip
  4032fe:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403302:	fb08 f309 	mul.w	r3, r8, r9
  403306:	42ab      	cmp	r3, r5
  403308:	d90a      	bls.n	403320 <__udivmoddi4+0x6c>
  40330a:	19ed      	adds	r5, r5, r7
  40330c:	f108 32ff 	add.w	r2, r8, #4294967295
  403310:	f080 8123 	bcs.w	40355a <__udivmoddi4+0x2a6>
  403314:	42ab      	cmp	r3, r5
  403316:	f240 8120 	bls.w	40355a <__udivmoddi4+0x2a6>
  40331a:	f1a8 0802 	sub.w	r8, r8, #2
  40331e:	443d      	add	r5, r7
  403320:	1aed      	subs	r5, r5, r3
  403322:	b2a4      	uxth	r4, r4
  403324:	fbb5 f0fa 	udiv	r0, r5, sl
  403328:	fb0a 5510 	mls	r5, sl, r0, r5
  40332c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403330:	fb00 f909 	mul.w	r9, r0, r9
  403334:	45a1      	cmp	r9, r4
  403336:	d909      	bls.n	40334c <__udivmoddi4+0x98>
  403338:	19e4      	adds	r4, r4, r7
  40333a:	f100 33ff 	add.w	r3, r0, #4294967295
  40333e:	f080 810a 	bcs.w	403556 <__udivmoddi4+0x2a2>
  403342:	45a1      	cmp	r9, r4
  403344:	f240 8107 	bls.w	403556 <__udivmoddi4+0x2a2>
  403348:	3802      	subs	r0, #2
  40334a:	443c      	add	r4, r7
  40334c:	eba4 0409 	sub.w	r4, r4, r9
  403350:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403354:	2100      	movs	r1, #0
  403356:	2e00      	cmp	r6, #0
  403358:	d061      	beq.n	40341e <__udivmoddi4+0x16a>
  40335a:	fa24 f40e 	lsr.w	r4, r4, lr
  40335e:	2300      	movs	r3, #0
  403360:	6034      	str	r4, [r6, #0]
  403362:	6073      	str	r3, [r6, #4]
  403364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403368:	428b      	cmp	r3, r1
  40336a:	d907      	bls.n	40337c <__udivmoddi4+0xc8>
  40336c:	2e00      	cmp	r6, #0
  40336e:	d054      	beq.n	40341a <__udivmoddi4+0x166>
  403370:	2100      	movs	r1, #0
  403372:	e886 0021 	stmia.w	r6, {r0, r5}
  403376:	4608      	mov	r0, r1
  403378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40337c:	fab3 f183 	clz	r1, r3
  403380:	2900      	cmp	r1, #0
  403382:	f040 808e 	bne.w	4034a2 <__udivmoddi4+0x1ee>
  403386:	42ab      	cmp	r3, r5
  403388:	d302      	bcc.n	403390 <__udivmoddi4+0xdc>
  40338a:	4282      	cmp	r2, r0
  40338c:	f200 80fa 	bhi.w	403584 <__udivmoddi4+0x2d0>
  403390:	1a84      	subs	r4, r0, r2
  403392:	eb65 0503 	sbc.w	r5, r5, r3
  403396:	2001      	movs	r0, #1
  403398:	46ac      	mov	ip, r5
  40339a:	2e00      	cmp	r6, #0
  40339c:	d03f      	beq.n	40341e <__udivmoddi4+0x16a>
  40339e:	e886 1010 	stmia.w	r6, {r4, ip}
  4033a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4033a6:	b912      	cbnz	r2, 4033ae <__udivmoddi4+0xfa>
  4033a8:	2701      	movs	r7, #1
  4033aa:	fbb7 f7f2 	udiv	r7, r7, r2
  4033ae:	fab7 fe87 	clz	lr, r7
  4033b2:	f1be 0f00 	cmp.w	lr, #0
  4033b6:	d134      	bne.n	403422 <__udivmoddi4+0x16e>
  4033b8:	1beb      	subs	r3, r5, r7
  4033ba:	0c3a      	lsrs	r2, r7, #16
  4033bc:	fa1f fc87 	uxth.w	ip, r7
  4033c0:	2101      	movs	r1, #1
  4033c2:	fbb3 f8f2 	udiv	r8, r3, r2
  4033c6:	0c25      	lsrs	r5, r4, #16
  4033c8:	fb02 3318 	mls	r3, r2, r8, r3
  4033cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4033d0:	fb0c f308 	mul.w	r3, ip, r8
  4033d4:	42ab      	cmp	r3, r5
  4033d6:	d907      	bls.n	4033e8 <__udivmoddi4+0x134>
  4033d8:	19ed      	adds	r5, r5, r7
  4033da:	f108 30ff 	add.w	r0, r8, #4294967295
  4033de:	d202      	bcs.n	4033e6 <__udivmoddi4+0x132>
  4033e0:	42ab      	cmp	r3, r5
  4033e2:	f200 80d1 	bhi.w	403588 <__udivmoddi4+0x2d4>
  4033e6:	4680      	mov	r8, r0
  4033e8:	1aed      	subs	r5, r5, r3
  4033ea:	b2a3      	uxth	r3, r4
  4033ec:	fbb5 f0f2 	udiv	r0, r5, r2
  4033f0:	fb02 5510 	mls	r5, r2, r0, r5
  4033f4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4033f8:	fb0c fc00 	mul.w	ip, ip, r0
  4033fc:	45a4      	cmp	ip, r4
  4033fe:	d907      	bls.n	403410 <__udivmoddi4+0x15c>
  403400:	19e4      	adds	r4, r4, r7
  403402:	f100 33ff 	add.w	r3, r0, #4294967295
  403406:	d202      	bcs.n	40340e <__udivmoddi4+0x15a>
  403408:	45a4      	cmp	ip, r4
  40340a:	f200 80b8 	bhi.w	40357e <__udivmoddi4+0x2ca>
  40340e:	4618      	mov	r0, r3
  403410:	eba4 040c 	sub.w	r4, r4, ip
  403414:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403418:	e79d      	b.n	403356 <__udivmoddi4+0xa2>
  40341a:	4631      	mov	r1, r6
  40341c:	4630      	mov	r0, r6
  40341e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403422:	f1ce 0420 	rsb	r4, lr, #32
  403426:	fa05 f30e 	lsl.w	r3, r5, lr
  40342a:	fa07 f70e 	lsl.w	r7, r7, lr
  40342e:	fa20 f804 	lsr.w	r8, r0, r4
  403432:	0c3a      	lsrs	r2, r7, #16
  403434:	fa25 f404 	lsr.w	r4, r5, r4
  403438:	ea48 0803 	orr.w	r8, r8, r3
  40343c:	fbb4 f1f2 	udiv	r1, r4, r2
  403440:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403444:	fb02 4411 	mls	r4, r2, r1, r4
  403448:	fa1f fc87 	uxth.w	ip, r7
  40344c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403450:	fb01 f30c 	mul.w	r3, r1, ip
  403454:	42ab      	cmp	r3, r5
  403456:	fa00 f40e 	lsl.w	r4, r0, lr
  40345a:	d909      	bls.n	403470 <__udivmoddi4+0x1bc>
  40345c:	19ed      	adds	r5, r5, r7
  40345e:	f101 30ff 	add.w	r0, r1, #4294967295
  403462:	f080 808a 	bcs.w	40357a <__udivmoddi4+0x2c6>
  403466:	42ab      	cmp	r3, r5
  403468:	f240 8087 	bls.w	40357a <__udivmoddi4+0x2c6>
  40346c:	3902      	subs	r1, #2
  40346e:	443d      	add	r5, r7
  403470:	1aeb      	subs	r3, r5, r3
  403472:	fa1f f588 	uxth.w	r5, r8
  403476:	fbb3 f0f2 	udiv	r0, r3, r2
  40347a:	fb02 3310 	mls	r3, r2, r0, r3
  40347e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403482:	fb00 f30c 	mul.w	r3, r0, ip
  403486:	42ab      	cmp	r3, r5
  403488:	d907      	bls.n	40349a <__udivmoddi4+0x1e6>
  40348a:	19ed      	adds	r5, r5, r7
  40348c:	f100 38ff 	add.w	r8, r0, #4294967295
  403490:	d26f      	bcs.n	403572 <__udivmoddi4+0x2be>
  403492:	42ab      	cmp	r3, r5
  403494:	d96d      	bls.n	403572 <__udivmoddi4+0x2be>
  403496:	3802      	subs	r0, #2
  403498:	443d      	add	r5, r7
  40349a:	1aeb      	subs	r3, r5, r3
  40349c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4034a0:	e78f      	b.n	4033c2 <__udivmoddi4+0x10e>
  4034a2:	f1c1 0720 	rsb	r7, r1, #32
  4034a6:	fa22 f807 	lsr.w	r8, r2, r7
  4034aa:	408b      	lsls	r3, r1
  4034ac:	fa05 f401 	lsl.w	r4, r5, r1
  4034b0:	ea48 0303 	orr.w	r3, r8, r3
  4034b4:	fa20 fe07 	lsr.w	lr, r0, r7
  4034b8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4034bc:	40fd      	lsrs	r5, r7
  4034be:	ea4e 0e04 	orr.w	lr, lr, r4
  4034c2:	fbb5 f9fc 	udiv	r9, r5, ip
  4034c6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4034ca:	fb0c 5519 	mls	r5, ip, r9, r5
  4034ce:	fa1f f883 	uxth.w	r8, r3
  4034d2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4034d6:	fb09 f408 	mul.w	r4, r9, r8
  4034da:	42ac      	cmp	r4, r5
  4034dc:	fa02 f201 	lsl.w	r2, r2, r1
  4034e0:	fa00 fa01 	lsl.w	sl, r0, r1
  4034e4:	d908      	bls.n	4034f8 <__udivmoddi4+0x244>
  4034e6:	18ed      	adds	r5, r5, r3
  4034e8:	f109 30ff 	add.w	r0, r9, #4294967295
  4034ec:	d243      	bcs.n	403576 <__udivmoddi4+0x2c2>
  4034ee:	42ac      	cmp	r4, r5
  4034f0:	d941      	bls.n	403576 <__udivmoddi4+0x2c2>
  4034f2:	f1a9 0902 	sub.w	r9, r9, #2
  4034f6:	441d      	add	r5, r3
  4034f8:	1b2d      	subs	r5, r5, r4
  4034fa:	fa1f fe8e 	uxth.w	lr, lr
  4034fe:	fbb5 f0fc 	udiv	r0, r5, ip
  403502:	fb0c 5510 	mls	r5, ip, r0, r5
  403506:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40350a:	fb00 f808 	mul.w	r8, r0, r8
  40350e:	45a0      	cmp	r8, r4
  403510:	d907      	bls.n	403522 <__udivmoddi4+0x26e>
  403512:	18e4      	adds	r4, r4, r3
  403514:	f100 35ff 	add.w	r5, r0, #4294967295
  403518:	d229      	bcs.n	40356e <__udivmoddi4+0x2ba>
  40351a:	45a0      	cmp	r8, r4
  40351c:	d927      	bls.n	40356e <__udivmoddi4+0x2ba>
  40351e:	3802      	subs	r0, #2
  403520:	441c      	add	r4, r3
  403522:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403526:	eba4 0408 	sub.w	r4, r4, r8
  40352a:	fba0 8902 	umull	r8, r9, r0, r2
  40352e:	454c      	cmp	r4, r9
  403530:	46c6      	mov	lr, r8
  403532:	464d      	mov	r5, r9
  403534:	d315      	bcc.n	403562 <__udivmoddi4+0x2ae>
  403536:	d012      	beq.n	40355e <__udivmoddi4+0x2aa>
  403538:	b156      	cbz	r6, 403550 <__udivmoddi4+0x29c>
  40353a:	ebba 030e 	subs.w	r3, sl, lr
  40353e:	eb64 0405 	sbc.w	r4, r4, r5
  403542:	fa04 f707 	lsl.w	r7, r4, r7
  403546:	40cb      	lsrs	r3, r1
  403548:	431f      	orrs	r7, r3
  40354a:	40cc      	lsrs	r4, r1
  40354c:	6037      	str	r7, [r6, #0]
  40354e:	6074      	str	r4, [r6, #4]
  403550:	2100      	movs	r1, #0
  403552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403556:	4618      	mov	r0, r3
  403558:	e6f8      	b.n	40334c <__udivmoddi4+0x98>
  40355a:	4690      	mov	r8, r2
  40355c:	e6e0      	b.n	403320 <__udivmoddi4+0x6c>
  40355e:	45c2      	cmp	sl, r8
  403560:	d2ea      	bcs.n	403538 <__udivmoddi4+0x284>
  403562:	ebb8 0e02 	subs.w	lr, r8, r2
  403566:	eb69 0503 	sbc.w	r5, r9, r3
  40356a:	3801      	subs	r0, #1
  40356c:	e7e4      	b.n	403538 <__udivmoddi4+0x284>
  40356e:	4628      	mov	r0, r5
  403570:	e7d7      	b.n	403522 <__udivmoddi4+0x26e>
  403572:	4640      	mov	r0, r8
  403574:	e791      	b.n	40349a <__udivmoddi4+0x1e6>
  403576:	4681      	mov	r9, r0
  403578:	e7be      	b.n	4034f8 <__udivmoddi4+0x244>
  40357a:	4601      	mov	r1, r0
  40357c:	e778      	b.n	403470 <__udivmoddi4+0x1bc>
  40357e:	3802      	subs	r0, #2
  403580:	443c      	add	r4, r7
  403582:	e745      	b.n	403410 <__udivmoddi4+0x15c>
  403584:	4608      	mov	r0, r1
  403586:	e708      	b.n	40339a <__udivmoddi4+0xe6>
  403588:	f1a8 0802 	sub.w	r8, r8, #2
  40358c:	443d      	add	r5, r7
  40358e:	e72b      	b.n	4033e8 <__udivmoddi4+0x134>

00403590 <__aeabi_idiv0>:
  403590:	4770      	bx	lr
  403592:	bf00      	nop

00403594 <__libc_init_array>:
  403594:	b570      	push	{r4, r5, r6, lr}
  403596:	4e0f      	ldr	r6, [pc, #60]	; (4035d4 <__libc_init_array+0x40>)
  403598:	4d0f      	ldr	r5, [pc, #60]	; (4035d8 <__libc_init_array+0x44>)
  40359a:	1b76      	subs	r6, r6, r5
  40359c:	10b6      	asrs	r6, r6, #2
  40359e:	bf18      	it	ne
  4035a0:	2400      	movne	r4, #0
  4035a2:	d005      	beq.n	4035b0 <__libc_init_array+0x1c>
  4035a4:	3401      	adds	r4, #1
  4035a6:	f855 3b04 	ldr.w	r3, [r5], #4
  4035aa:	4798      	blx	r3
  4035ac:	42a6      	cmp	r6, r4
  4035ae:	d1f9      	bne.n	4035a4 <__libc_init_array+0x10>
  4035b0:	4e0a      	ldr	r6, [pc, #40]	; (4035dc <__libc_init_array+0x48>)
  4035b2:	4d0b      	ldr	r5, [pc, #44]	; (4035e0 <__libc_init_array+0x4c>)
  4035b4:	1b76      	subs	r6, r6, r5
  4035b6:	f005 fde3 	bl	409180 <_init>
  4035ba:	10b6      	asrs	r6, r6, #2
  4035bc:	bf18      	it	ne
  4035be:	2400      	movne	r4, #0
  4035c0:	d006      	beq.n	4035d0 <__libc_init_array+0x3c>
  4035c2:	3401      	adds	r4, #1
  4035c4:	f855 3b04 	ldr.w	r3, [r5], #4
  4035c8:	4798      	blx	r3
  4035ca:	42a6      	cmp	r6, r4
  4035cc:	d1f9      	bne.n	4035c2 <__libc_init_array+0x2e>
  4035ce:	bd70      	pop	{r4, r5, r6, pc}
  4035d0:	bd70      	pop	{r4, r5, r6, pc}
  4035d2:	bf00      	nop
  4035d4:	0040918c 	.word	0x0040918c
  4035d8:	0040918c 	.word	0x0040918c
  4035dc:	00409194 	.word	0x00409194
  4035e0:	0040918c 	.word	0x0040918c

004035e4 <memset>:
  4035e4:	b470      	push	{r4, r5, r6}
  4035e6:	0786      	lsls	r6, r0, #30
  4035e8:	d046      	beq.n	403678 <memset+0x94>
  4035ea:	1e54      	subs	r4, r2, #1
  4035ec:	2a00      	cmp	r2, #0
  4035ee:	d041      	beq.n	403674 <memset+0x90>
  4035f0:	b2ca      	uxtb	r2, r1
  4035f2:	4603      	mov	r3, r0
  4035f4:	e002      	b.n	4035fc <memset+0x18>
  4035f6:	f114 34ff 	adds.w	r4, r4, #4294967295
  4035fa:	d33b      	bcc.n	403674 <memset+0x90>
  4035fc:	f803 2b01 	strb.w	r2, [r3], #1
  403600:	079d      	lsls	r5, r3, #30
  403602:	d1f8      	bne.n	4035f6 <memset+0x12>
  403604:	2c03      	cmp	r4, #3
  403606:	d92e      	bls.n	403666 <memset+0x82>
  403608:	b2cd      	uxtb	r5, r1
  40360a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40360e:	2c0f      	cmp	r4, #15
  403610:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403614:	d919      	bls.n	40364a <memset+0x66>
  403616:	f103 0210 	add.w	r2, r3, #16
  40361a:	4626      	mov	r6, r4
  40361c:	3e10      	subs	r6, #16
  40361e:	2e0f      	cmp	r6, #15
  403620:	f842 5c10 	str.w	r5, [r2, #-16]
  403624:	f842 5c0c 	str.w	r5, [r2, #-12]
  403628:	f842 5c08 	str.w	r5, [r2, #-8]
  40362c:	f842 5c04 	str.w	r5, [r2, #-4]
  403630:	f102 0210 	add.w	r2, r2, #16
  403634:	d8f2      	bhi.n	40361c <memset+0x38>
  403636:	f1a4 0210 	sub.w	r2, r4, #16
  40363a:	f022 020f 	bic.w	r2, r2, #15
  40363e:	f004 040f 	and.w	r4, r4, #15
  403642:	3210      	adds	r2, #16
  403644:	2c03      	cmp	r4, #3
  403646:	4413      	add	r3, r2
  403648:	d90d      	bls.n	403666 <memset+0x82>
  40364a:	461e      	mov	r6, r3
  40364c:	4622      	mov	r2, r4
  40364e:	3a04      	subs	r2, #4
  403650:	2a03      	cmp	r2, #3
  403652:	f846 5b04 	str.w	r5, [r6], #4
  403656:	d8fa      	bhi.n	40364e <memset+0x6a>
  403658:	1f22      	subs	r2, r4, #4
  40365a:	f022 0203 	bic.w	r2, r2, #3
  40365e:	3204      	adds	r2, #4
  403660:	4413      	add	r3, r2
  403662:	f004 0403 	and.w	r4, r4, #3
  403666:	b12c      	cbz	r4, 403674 <memset+0x90>
  403668:	b2c9      	uxtb	r1, r1
  40366a:	441c      	add	r4, r3
  40366c:	f803 1b01 	strb.w	r1, [r3], #1
  403670:	429c      	cmp	r4, r3
  403672:	d1fb      	bne.n	40366c <memset+0x88>
  403674:	bc70      	pop	{r4, r5, r6}
  403676:	4770      	bx	lr
  403678:	4614      	mov	r4, r2
  40367a:	4603      	mov	r3, r0
  40367c:	e7c2      	b.n	403604 <memset+0x20>
  40367e:	bf00      	nop

00403680 <sprintf>:
  403680:	b40e      	push	{r1, r2, r3}
  403682:	b5f0      	push	{r4, r5, r6, r7, lr}
  403684:	b09c      	sub	sp, #112	; 0x70
  403686:	ab21      	add	r3, sp, #132	; 0x84
  403688:	490f      	ldr	r1, [pc, #60]	; (4036c8 <sprintf+0x48>)
  40368a:	f853 2b04 	ldr.w	r2, [r3], #4
  40368e:	9301      	str	r3, [sp, #4]
  403690:	4605      	mov	r5, r0
  403692:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403696:	6808      	ldr	r0, [r1, #0]
  403698:	9502      	str	r5, [sp, #8]
  40369a:	f44f 7702 	mov.w	r7, #520	; 0x208
  40369e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4036a2:	a902      	add	r1, sp, #8
  4036a4:	9506      	str	r5, [sp, #24]
  4036a6:	f8ad 7014 	strh.w	r7, [sp, #20]
  4036aa:	9404      	str	r4, [sp, #16]
  4036ac:	9407      	str	r4, [sp, #28]
  4036ae:	f8ad 6016 	strh.w	r6, [sp, #22]
  4036b2:	f000 fa6f 	bl	403b94 <_svfprintf_r>
  4036b6:	9b02      	ldr	r3, [sp, #8]
  4036b8:	2200      	movs	r2, #0
  4036ba:	701a      	strb	r2, [r3, #0]
  4036bc:	b01c      	add	sp, #112	; 0x70
  4036be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4036c2:	b003      	add	sp, #12
  4036c4:	4770      	bx	lr
  4036c6:	bf00      	nop
  4036c8:	20000010 	.word	0x20000010

004036cc <critical_factorization>:
  4036cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4036d0:	f04f 0e01 	mov.w	lr, #1
  4036d4:	4674      	mov	r4, lr
  4036d6:	2500      	movs	r5, #0
  4036d8:	f04f 36ff 	mov.w	r6, #4294967295
  4036dc:	192b      	adds	r3, r5, r4
  4036de:	428b      	cmp	r3, r1
  4036e0:	eb00 0706 	add.w	r7, r0, r6
  4036e4:	d20d      	bcs.n	403702 <critical_factorization+0x36>
  4036e6:	5d3f      	ldrb	r7, [r7, r4]
  4036e8:	f810 c003 	ldrb.w	ip, [r0, r3]
  4036ec:	45bc      	cmp	ip, r7
  4036ee:	d22d      	bcs.n	40374c <critical_factorization+0x80>
  4036f0:	461d      	mov	r5, r3
  4036f2:	2401      	movs	r4, #1
  4036f4:	eba3 0e06 	sub.w	lr, r3, r6
  4036f8:	192b      	adds	r3, r5, r4
  4036fa:	428b      	cmp	r3, r1
  4036fc:	eb00 0706 	add.w	r7, r0, r6
  403700:	d3f1      	bcc.n	4036e6 <critical_factorization+0x1a>
  403702:	f04f 0801 	mov.w	r8, #1
  403706:	f8c2 e000 	str.w	lr, [r2]
  40370a:	4644      	mov	r4, r8
  40370c:	2500      	movs	r5, #0
  40370e:	f04f 37ff 	mov.w	r7, #4294967295
  403712:	192b      	adds	r3, r5, r4
  403714:	4299      	cmp	r1, r3
  403716:	eb00 0e07 	add.w	lr, r0, r7
  40371a:	d90e      	bls.n	40373a <critical_factorization+0x6e>
  40371c:	f81e e004 	ldrb.w	lr, [lr, r4]
  403720:	f810 c003 	ldrb.w	ip, [r0, r3]
  403724:	45f4      	cmp	ip, lr
  403726:	d918      	bls.n	40375a <critical_factorization+0x8e>
  403728:	461d      	mov	r5, r3
  40372a:	2401      	movs	r4, #1
  40372c:	eba3 0807 	sub.w	r8, r3, r7
  403730:	192b      	adds	r3, r5, r4
  403732:	4299      	cmp	r1, r3
  403734:	eb00 0e07 	add.w	lr, r0, r7
  403738:	d8f0      	bhi.n	40371c <critical_factorization+0x50>
  40373a:	3701      	adds	r7, #1
  40373c:	1c70      	adds	r0, r6, #1
  40373e:	4287      	cmp	r7, r0
  403740:	bf24      	itt	cs
  403742:	f8c2 8000 	strcs.w	r8, [r2]
  403746:	4638      	movcs	r0, r7
  403748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40374c:	d00c      	beq.n	403768 <critical_factorization+0x9c>
  40374e:	f04f 0e01 	mov.w	lr, #1
  403752:	462e      	mov	r6, r5
  403754:	4674      	mov	r4, lr
  403756:	4475      	add	r5, lr
  403758:	e7c0      	b.n	4036dc <critical_factorization+0x10>
  40375a:	d00b      	beq.n	403774 <critical_factorization+0xa8>
  40375c:	f04f 0801 	mov.w	r8, #1
  403760:	462f      	mov	r7, r5
  403762:	4644      	mov	r4, r8
  403764:	4445      	add	r5, r8
  403766:	e7d4      	b.n	403712 <critical_factorization+0x46>
  403768:	4574      	cmp	r4, lr
  40376a:	bf12      	itee	ne
  40376c:	3401      	addne	r4, #1
  40376e:	461d      	moveq	r5, r3
  403770:	2401      	moveq	r4, #1
  403772:	e7b3      	b.n	4036dc <critical_factorization+0x10>
  403774:	4544      	cmp	r4, r8
  403776:	bf12      	itee	ne
  403778:	3401      	addne	r4, #1
  40377a:	461d      	moveq	r5, r3
  40377c:	2401      	moveq	r4, #1
  40377e:	e7c8      	b.n	403712 <critical_factorization+0x46>

00403780 <two_way_long_needle>:
  403780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403784:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  403788:	4616      	mov	r6, r2
  40378a:	4605      	mov	r5, r0
  40378c:	468b      	mov	fp, r1
  40378e:	4610      	mov	r0, r2
  403790:	4619      	mov	r1, r3
  403792:	aa03      	add	r2, sp, #12
  403794:	461c      	mov	r4, r3
  403796:	f7ff ff99 	bl	4036cc <critical_factorization>
  40379a:	ab03      	add	r3, sp, #12
  40379c:	4681      	mov	r9, r0
  40379e:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  4037a2:	f843 4f04 	str.w	r4, [r3, #4]!
  4037a6:	4293      	cmp	r3, r2
  4037a8:	d1fb      	bne.n	4037a2 <two_way_long_needle+0x22>
  4037aa:	b14c      	cbz	r4, 4037c0 <two_way_long_needle+0x40>
  4037ac:	1e63      	subs	r3, r4, #1
  4037ae:	1e72      	subs	r2, r6, #1
  4037b0:	a804      	add	r0, sp, #16
  4037b2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4037b6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4037ba:	f113 33ff 	adds.w	r3, r3, #4294967295
  4037be:	d2f8      	bcs.n	4037b2 <two_way_long_needle+0x32>
  4037c0:	9903      	ldr	r1, [sp, #12]
  4037c2:	464a      	mov	r2, r9
  4037c4:	4431      	add	r1, r6
  4037c6:	4630      	mov	r0, r6
  4037c8:	f002 ff12 	bl	4065f0 <memcmp>
  4037cc:	2800      	cmp	r0, #0
  4037ce:	d16f      	bne.n	4038b0 <two_way_long_needle+0x130>
  4037d0:	f109 33ff 	add.w	r3, r9, #4294967295
  4037d4:	9300      	str	r3, [sp, #0]
  4037d6:	18f3      	adds	r3, r6, r3
  4037d8:	4682      	mov	sl, r0
  4037da:	9301      	str	r3, [sp, #4]
  4037dc:	4623      	mov	r3, r4
  4037de:	4680      	mov	r8, r0
  4037e0:	4654      	mov	r4, sl
  4037e2:	4658      	mov	r0, fp
  4037e4:	469a      	mov	sl, r3
  4037e6:	eb08 070a 	add.w	r7, r8, sl
  4037ea:	1a3a      	subs	r2, r7, r0
  4037ec:	2100      	movs	r1, #0
  4037ee:	4428      	add	r0, r5
  4037f0:	f002 feae 	bl	406550 <memchr>
  4037f4:	2800      	cmp	r0, #0
  4037f6:	d156      	bne.n	4038a6 <two_way_long_needle+0x126>
  4037f8:	2f00      	cmp	r7, #0
  4037fa:	d054      	beq.n	4038a6 <two_way_long_needle+0x126>
  4037fc:	19eb      	adds	r3, r5, r7
  4037fe:	aa04      	add	r2, sp, #16
  403800:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403808:	b14b      	cbz	r3, 40381e <two_way_long_needle+0x9e>
  40380a:	b124      	cbz	r4, 403816 <two_way_long_needle+0x96>
  40380c:	9a03      	ldr	r2, [sp, #12]
  40380e:	4293      	cmp	r3, r2
  403810:	d201      	bcs.n	403816 <two_way_long_needle+0x96>
  403812:	ebaa 0302 	sub.w	r3, sl, r2
  403816:	4498      	add	r8, r3
  403818:	2400      	movs	r4, #0
  40381a:	4638      	mov	r0, r7
  40381c:	e7e3      	b.n	4037e6 <two_way_long_needle+0x66>
  40381e:	454c      	cmp	r4, r9
  403820:	4623      	mov	r3, r4
  403822:	f10a 3eff 	add.w	lr, sl, #4294967295
  403826:	bf38      	it	cc
  403828:	464b      	movcc	r3, r9
  40382a:	4573      	cmp	r3, lr
  40382c:	d213      	bcs.n	403856 <two_way_long_needle+0xd6>
  40382e:	eb08 0203 	add.w	r2, r8, r3
  403832:	f816 c003 	ldrb.w	ip, [r6, r3]
  403836:	5ca8      	ldrb	r0, [r5, r2]
  403838:	4584      	cmp	ip, r0
  40383a:	442a      	add	r2, r5
  40383c:	eb06 0103 	add.w	r1, r6, r3
  403840:	d006      	beq.n	403850 <two_way_long_needle+0xd0>
  403842:	e02c      	b.n	40389e <two_way_long_needle+0x11e>
  403844:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  403848:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40384c:	4584      	cmp	ip, r0
  40384e:	d126      	bne.n	40389e <two_way_long_needle+0x11e>
  403850:	3301      	adds	r3, #1
  403852:	4573      	cmp	r3, lr
  403854:	d3f6      	bcc.n	403844 <two_way_long_needle+0xc4>
  403856:	454c      	cmp	r4, r9
  403858:	9900      	ldr	r1, [sp, #0]
  40385a:	f080 8089 	bcs.w	403970 <two_way_long_needle+0x1f0>
  40385e:	9b00      	ldr	r3, [sp, #0]
  403860:	eb08 0203 	add.w	r2, r8, r3
  403864:	9b01      	ldr	r3, [sp, #4]
  403866:	5ca8      	ldrb	r0, [r5, r2]
  403868:	781b      	ldrb	r3, [r3, #0]
  40386a:	4298      	cmp	r0, r3
  40386c:	442a      	add	r2, r5
  40386e:	d17f      	bne.n	403970 <two_way_long_needle+0x1f0>
  403870:	9801      	ldr	r0, [sp, #4]
  403872:	f104 3bff 	add.w	fp, r4, #4294967295
  403876:	e006      	b.n	403886 <two_way_long_needle+0x106>
  403878:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40387c:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  403880:	45f4      	cmp	ip, lr
  403882:	d103      	bne.n	40388c <two_way_long_needle+0x10c>
  403884:	4619      	mov	r1, r3
  403886:	1e4b      	subs	r3, r1, #1
  403888:	459b      	cmp	fp, r3
  40388a:	d1f5      	bne.n	403878 <two_way_long_needle+0xf8>
  40388c:	3401      	adds	r4, #1
  40388e:	428c      	cmp	r4, r1
  403890:	d870      	bhi.n	403974 <two_way_long_needle+0x1f4>
  403892:	9c03      	ldr	r4, [sp, #12]
  403894:	4638      	mov	r0, r7
  403896:	44a0      	add	r8, r4
  403898:	ebaa 0404 	sub.w	r4, sl, r4
  40389c:	e7a3      	b.n	4037e6 <two_way_long_needle+0x66>
  40389e:	f1c9 0201 	rsb	r2, r9, #1
  4038a2:	4490      	add	r8, r2
  4038a4:	e7b7      	b.n	403816 <two_way_long_needle+0x96>
  4038a6:	2000      	movs	r0, #0
  4038a8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4038ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038b0:	eba4 0309 	sub.w	r3, r4, r9
  4038b4:	454b      	cmp	r3, r9
  4038b6:	bf38      	it	cc
  4038b8:	464b      	movcc	r3, r9
  4038ba:	3301      	adds	r3, #1
  4038bc:	f109 38ff 	add.w	r8, r9, #4294967295
  4038c0:	9303      	str	r3, [sp, #12]
  4038c2:	eb06 0308 	add.w	r3, r6, r8
  4038c6:	4658      	mov	r0, fp
  4038c8:	f04f 0a00 	mov.w	sl, #0
  4038cc:	46cb      	mov	fp, r9
  4038ce:	4699      	mov	r9, r3
  4038d0:	eb0a 0704 	add.w	r7, sl, r4
  4038d4:	1a3a      	subs	r2, r7, r0
  4038d6:	2100      	movs	r1, #0
  4038d8:	4428      	add	r0, r5
  4038da:	f002 fe39 	bl	406550 <memchr>
  4038de:	2800      	cmp	r0, #0
  4038e0:	d1e1      	bne.n	4038a6 <two_way_long_needle+0x126>
  4038e2:	2f00      	cmp	r7, #0
  4038e4:	d0df      	beq.n	4038a6 <two_way_long_needle+0x126>
  4038e6:	19eb      	adds	r3, r5, r7
  4038e8:	aa04      	add	r2, sp, #16
  4038ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4038ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4038f2:	bba3      	cbnz	r3, 40395e <two_way_long_needle+0x1de>
  4038f4:	1e61      	subs	r1, r4, #1
  4038f6:	458b      	cmp	fp, r1
  4038f8:	d215      	bcs.n	403926 <two_way_long_needle+0x1a6>
  4038fa:	eb0a 020b 	add.w	r2, sl, fp
  4038fe:	f816 300b 	ldrb.w	r3, [r6, fp]
  403902:	f815 e002 	ldrb.w	lr, [r5, r2]
  403906:	459e      	cmp	lr, r3
  403908:	442a      	add	r2, r5
  40390a:	eb06 000b 	add.w	r0, r6, fp
  40390e:	465b      	mov	r3, fp
  403910:	d006      	beq.n	403920 <two_way_long_needle+0x1a0>
  403912:	e027      	b.n	403964 <two_way_long_needle+0x1e4>
  403914:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  403918:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  40391c:	45f4      	cmp	ip, lr
  40391e:	d121      	bne.n	403964 <two_way_long_needle+0x1e4>
  403920:	3301      	adds	r3, #1
  403922:	428b      	cmp	r3, r1
  403924:	d3f6      	bcc.n	403914 <two_way_long_needle+0x194>
  403926:	f1b8 3fff 	cmp.w	r8, #4294967295
  40392a:	d011      	beq.n	403950 <two_way_long_needle+0x1d0>
  40392c:	eb0a 0208 	add.w	r2, sl, r8
  403930:	f899 1000 	ldrb.w	r1, [r9]
  403934:	5cab      	ldrb	r3, [r5, r2]
  403936:	4299      	cmp	r1, r3
  403938:	442a      	add	r2, r5
  40393a:	d10f      	bne.n	40395c <two_way_long_needle+0x1dc>
  40393c:	464b      	mov	r3, r9
  40393e:	e005      	b.n	40394c <two_way_long_needle+0x1cc>
  403940:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403944:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403948:	4288      	cmp	r0, r1
  40394a:	d107      	bne.n	40395c <two_way_long_needle+0x1dc>
  40394c:	42b3      	cmp	r3, r6
  40394e:	d1f7      	bne.n	403940 <two_way_long_needle+0x1c0>
  403950:	eb05 000a 	add.w	r0, r5, sl
  403954:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40395c:	9b03      	ldr	r3, [sp, #12]
  40395e:	449a      	add	sl, r3
  403960:	4638      	mov	r0, r7
  403962:	e7b5      	b.n	4038d0 <two_way_long_needle+0x150>
  403964:	f1cb 0201 	rsb	r2, fp, #1
  403968:	4492      	add	sl, r2
  40396a:	449a      	add	sl, r3
  40396c:	4638      	mov	r0, r7
  40396e:	e7af      	b.n	4038d0 <two_way_long_needle+0x150>
  403970:	4649      	mov	r1, r9
  403972:	e78b      	b.n	40388c <two_way_long_needle+0x10c>
  403974:	eb05 0008 	add.w	r0, r5, r8
  403978:	e796      	b.n	4038a8 <two_way_long_needle+0x128>
  40397a:	bf00      	nop

0040397c <strstr>:
  40397c:	7802      	ldrb	r2, [r0, #0]
  40397e:	2a00      	cmp	r2, #0
  403980:	f000 8101 	beq.w	403b86 <strstr+0x20a>
  403984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403988:	f891 8000 	ldrb.w	r8, [r1]
  40398c:	b085      	sub	sp, #20
  40398e:	4644      	mov	r4, r8
  403990:	f1b8 0f00 	cmp.w	r8, #0
  403994:	d016      	beq.n	4039c4 <strstr+0x48>
  403996:	4686      	mov	lr, r0
  403998:	f101 0c01 	add.w	ip, r1, #1
  40399c:	2701      	movs	r7, #1
  40399e:	e003      	b.n	4039a8 <strstr+0x2c>
  4039a0:	f813 4b01 	ldrb.w	r4, [r3], #1
  4039a4:	b16c      	cbz	r4, 4039c2 <strstr+0x46>
  4039a6:	469c      	mov	ip, r3
  4039a8:	42a2      	cmp	r2, r4
  4039aa:	bf14      	ite	ne
  4039ac:	2700      	movne	r7, #0
  4039ae:	f007 0701 	andeq.w	r7, r7, #1
  4039b2:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  4039b6:	4663      	mov	r3, ip
  4039b8:	2a00      	cmp	r2, #0
  4039ba:	d1f1      	bne.n	4039a0 <strstr+0x24>
  4039bc:	f89c 3000 	ldrb.w	r3, [ip]
  4039c0:	b9fb      	cbnz	r3, 403a02 <strstr+0x86>
  4039c2:	b117      	cbz	r7, 4039ca <strstr+0x4e>
  4039c4:	b005      	add	sp, #20
  4039c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039ca:	460e      	mov	r6, r1
  4039cc:	4605      	mov	r5, r0
  4039ce:	4641      	mov	r1, r8
  4039d0:	3001      	adds	r0, #1
  4039d2:	ebac 0406 	sub.w	r4, ip, r6
  4039d6:	f003 f9ed 	bl	406db4 <strchr>
  4039da:	4607      	mov	r7, r0
  4039dc:	b188      	cbz	r0, 403a02 <strstr+0x86>
  4039de:	2c01      	cmp	r4, #1
  4039e0:	d0f0      	beq.n	4039c4 <strstr+0x48>
  4039e2:	1928      	adds	r0, r5, r4
  4039e4:	4287      	cmp	r7, r0
  4039e6:	bf94      	ite	ls
  4039e8:	1bc1      	subls	r1, r0, r7
  4039ea:	2101      	movhi	r1, #1
  4039ec:	2c1f      	cmp	r4, #31
  4039ee:	468b      	mov	fp, r1
  4039f0:	d90b      	bls.n	403a0a <strstr+0x8e>
  4039f2:	4623      	mov	r3, r4
  4039f4:	4632      	mov	r2, r6
  4039f6:	4638      	mov	r0, r7
  4039f8:	f7ff fec2 	bl	403780 <two_way_long_needle>
  4039fc:	b005      	add	sp, #20
  4039fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a02:	2000      	movs	r0, #0
  403a04:	b005      	add	sp, #20
  403a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a0a:	aa03      	add	r2, sp, #12
  403a0c:	4621      	mov	r1, r4
  403a0e:	4630      	mov	r0, r6
  403a10:	f7ff fe5c 	bl	4036cc <critical_factorization>
  403a14:	9903      	ldr	r1, [sp, #12]
  403a16:	4680      	mov	r8, r0
  403a18:	4602      	mov	r2, r0
  403a1a:	4431      	add	r1, r6
  403a1c:	4630      	mov	r0, r6
  403a1e:	f002 fde7 	bl	4065f0 <memcmp>
  403a22:	2800      	cmp	r0, #0
  403a24:	d157      	bne.n	403ad6 <strstr+0x15a>
  403a26:	f108 33ff 	add.w	r3, r8, #4294967295
  403a2a:	9300      	str	r3, [sp, #0]
  403a2c:	18f3      	adds	r3, r6, r3
  403a2e:	4681      	mov	r9, r0
  403a30:	4605      	mov	r5, r0
  403a32:	9301      	str	r3, [sp, #4]
  403a34:	4658      	mov	r0, fp
  403a36:	46b2      	mov	sl, r6
  403a38:	1966      	adds	r6, r4, r5
  403a3a:	1a32      	subs	r2, r6, r0
  403a3c:	2100      	movs	r1, #0
  403a3e:	4438      	add	r0, r7
  403a40:	f002 fd86 	bl	406550 <memchr>
  403a44:	2800      	cmp	r0, #0
  403a46:	d1dc      	bne.n	403a02 <strstr+0x86>
  403a48:	2e00      	cmp	r6, #0
  403a4a:	d0da      	beq.n	403a02 <strstr+0x86>
  403a4c:	45c8      	cmp	r8, r9
  403a4e:	4643      	mov	r3, r8
  403a50:	bf38      	it	cc
  403a52:	464b      	movcc	r3, r9
  403a54:	429c      	cmp	r4, r3
  403a56:	d912      	bls.n	403a7e <strstr+0x102>
  403a58:	195a      	adds	r2, r3, r5
  403a5a:	f81a 1003 	ldrb.w	r1, [sl, r3]
  403a5e:	5cb8      	ldrb	r0, [r7, r2]
  403a60:	4281      	cmp	r1, r0
  403a62:	443a      	add	r2, r7
  403a64:	eb0a 0e03 	add.w	lr, sl, r3
  403a68:	d006      	beq.n	403a78 <strstr+0xfc>
  403a6a:	e02c      	b.n	403ac6 <strstr+0x14a>
  403a6c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  403a70:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403a74:	4288      	cmp	r0, r1
  403a76:	d126      	bne.n	403ac6 <strstr+0x14a>
  403a78:	3301      	adds	r3, #1
  403a7a:	429c      	cmp	r4, r3
  403a7c:	d1f6      	bne.n	403a6c <strstr+0xf0>
  403a7e:	45c8      	cmp	r8, r9
  403a80:	9900      	ldr	r1, [sp, #0]
  403a82:	f240 8083 	bls.w	403b8c <strstr+0x210>
  403a86:	9b00      	ldr	r3, [sp, #0]
  403a88:	18ea      	adds	r2, r5, r3
  403a8a:	9b01      	ldr	r3, [sp, #4]
  403a8c:	5cb8      	ldrb	r0, [r7, r2]
  403a8e:	781b      	ldrb	r3, [r3, #0]
  403a90:	4298      	cmp	r0, r3
  403a92:	443a      	add	r2, r7
  403a94:	d17a      	bne.n	403b8c <strstr+0x210>
  403a96:	9801      	ldr	r0, [sp, #4]
  403a98:	f109 3bff 	add.w	fp, r9, #4294967295
  403a9c:	e006      	b.n	403aac <strstr+0x130>
  403a9e:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  403aa2:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  403aa6:	45f4      	cmp	ip, lr
  403aa8:	d103      	bne.n	403ab2 <strstr+0x136>
  403aaa:	4619      	mov	r1, r3
  403aac:	1e4b      	subs	r3, r1, #1
  403aae:	455b      	cmp	r3, fp
  403ab0:	d1f5      	bne.n	403a9e <strstr+0x122>
  403ab2:	f109 0901 	add.w	r9, r9, #1
  403ab6:	4589      	cmp	r9, r1
  403ab8:	d857      	bhi.n	403b6a <strstr+0x1ee>
  403aba:	9b03      	ldr	r3, [sp, #12]
  403abc:	4630      	mov	r0, r6
  403abe:	441d      	add	r5, r3
  403ac0:	eba4 0903 	sub.w	r9, r4, r3
  403ac4:	e7b8      	b.n	403a38 <strstr+0xbc>
  403ac6:	f1c8 0201 	rsb	r2, r8, #1
  403aca:	4415      	add	r5, r2
  403acc:	441d      	add	r5, r3
  403ace:	f04f 0900 	mov.w	r9, #0
  403ad2:	4630      	mov	r0, r6
  403ad4:	e7b0      	b.n	403a38 <strstr+0xbc>
  403ad6:	eba4 0308 	sub.w	r3, r4, r8
  403ada:	4543      	cmp	r3, r8
  403adc:	bf38      	it	cc
  403ade:	4643      	movcc	r3, r8
  403ae0:	3301      	adds	r3, #1
  403ae2:	f108 39ff 	add.w	r9, r8, #4294967295
  403ae6:	9303      	str	r3, [sp, #12]
  403ae8:	eb06 0309 	add.w	r3, r6, r9
  403aec:	4658      	mov	r0, fp
  403aee:	2500      	movs	r5, #0
  403af0:	46bb      	mov	fp, r7
  403af2:	469a      	mov	sl, r3
  403af4:	1967      	adds	r7, r4, r5
  403af6:	1a3a      	subs	r2, r7, r0
  403af8:	2100      	movs	r1, #0
  403afa:	4458      	add	r0, fp
  403afc:	f002 fd28 	bl	406550 <memchr>
  403b00:	2800      	cmp	r0, #0
  403b02:	f47f af7e 	bne.w	403a02 <strstr+0x86>
  403b06:	2f00      	cmp	r7, #0
  403b08:	f43f af7b 	beq.w	403a02 <strstr+0x86>
  403b0c:	4544      	cmp	r4, r8
  403b0e:	d915      	bls.n	403b3c <strstr+0x1c0>
  403b10:	eb08 0205 	add.w	r2, r8, r5
  403b14:	f816 3008 	ldrb.w	r3, [r6, r8]
  403b18:	f81b 0002 	ldrb.w	r0, [fp, r2]
  403b1c:	4298      	cmp	r0, r3
  403b1e:	445a      	add	r2, fp
  403b20:	eb06 0108 	add.w	r1, r6, r8
  403b24:	4643      	mov	r3, r8
  403b26:	d006      	beq.n	403b36 <strstr+0x1ba>
  403b28:	e023      	b.n	403b72 <strstr+0x1f6>
  403b2a:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  403b2e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403b32:	4586      	cmp	lr, r0
  403b34:	d11d      	bne.n	403b72 <strstr+0x1f6>
  403b36:	3301      	adds	r3, #1
  403b38:	429c      	cmp	r4, r3
  403b3a:	d1f6      	bne.n	403b2a <strstr+0x1ae>
  403b3c:	f1b9 3fff 	cmp.w	r9, #4294967295
  403b40:	d012      	beq.n	403b68 <strstr+0x1ec>
  403b42:	eb05 0209 	add.w	r2, r5, r9
  403b46:	f89a 3000 	ldrb.w	r3, [sl]
  403b4a:	f81b 1002 	ldrb.w	r1, [fp, r2]
  403b4e:	4299      	cmp	r1, r3
  403b50:	445a      	add	r2, fp
  403b52:	d114      	bne.n	403b7e <strstr+0x202>
  403b54:	4653      	mov	r3, sl
  403b56:	e005      	b.n	403b64 <strstr+0x1e8>
  403b58:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403b5c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403b60:	4288      	cmp	r0, r1
  403b62:	d10c      	bne.n	403b7e <strstr+0x202>
  403b64:	42b3      	cmp	r3, r6
  403b66:	d1f7      	bne.n	403b58 <strstr+0x1dc>
  403b68:	465f      	mov	r7, fp
  403b6a:	1978      	adds	r0, r7, r5
  403b6c:	b005      	add	sp, #20
  403b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b72:	f1c8 0201 	rsb	r2, r8, #1
  403b76:	4415      	add	r5, r2
  403b78:	441d      	add	r5, r3
  403b7a:	4638      	mov	r0, r7
  403b7c:	e7ba      	b.n	403af4 <strstr+0x178>
  403b7e:	9b03      	ldr	r3, [sp, #12]
  403b80:	4638      	mov	r0, r7
  403b82:	441d      	add	r5, r3
  403b84:	e7b6      	b.n	403af4 <strstr+0x178>
  403b86:	780b      	ldrb	r3, [r1, #0]
  403b88:	b913      	cbnz	r3, 403b90 <strstr+0x214>
  403b8a:	4770      	bx	lr
  403b8c:	4641      	mov	r1, r8
  403b8e:	e790      	b.n	403ab2 <strstr+0x136>
  403b90:	2000      	movs	r0, #0
  403b92:	4770      	bx	lr

00403b94 <_svfprintf_r>:
  403b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b98:	b0c3      	sub	sp, #268	; 0x10c
  403b9a:	460c      	mov	r4, r1
  403b9c:	910b      	str	r1, [sp, #44]	; 0x2c
  403b9e:	4692      	mov	sl, r2
  403ba0:	930f      	str	r3, [sp, #60]	; 0x3c
  403ba2:	900c      	str	r0, [sp, #48]	; 0x30
  403ba4:	f002 fa0c 	bl	405fc0 <_localeconv_r>
  403ba8:	6803      	ldr	r3, [r0, #0]
  403baa:	931a      	str	r3, [sp, #104]	; 0x68
  403bac:	4618      	mov	r0, r3
  403bae:	f003 f987 	bl	406ec0 <strlen>
  403bb2:	89a3      	ldrh	r3, [r4, #12]
  403bb4:	9019      	str	r0, [sp, #100]	; 0x64
  403bb6:	0619      	lsls	r1, r3, #24
  403bb8:	d503      	bpl.n	403bc2 <_svfprintf_r+0x2e>
  403bba:	6923      	ldr	r3, [r4, #16]
  403bbc:	2b00      	cmp	r3, #0
  403bbe:	f001 8003 	beq.w	404bc8 <_svfprintf_r+0x1034>
  403bc2:	2300      	movs	r3, #0
  403bc4:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403bc8:	9313      	str	r3, [sp, #76]	; 0x4c
  403bca:	9315      	str	r3, [sp, #84]	; 0x54
  403bcc:	9314      	str	r3, [sp, #80]	; 0x50
  403bce:	9327      	str	r3, [sp, #156]	; 0x9c
  403bd0:	9326      	str	r3, [sp, #152]	; 0x98
  403bd2:	9318      	str	r3, [sp, #96]	; 0x60
  403bd4:	931b      	str	r3, [sp, #108]	; 0x6c
  403bd6:	9309      	str	r3, [sp, #36]	; 0x24
  403bd8:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403bdc:	46c8      	mov	r8, r9
  403bde:	9316      	str	r3, [sp, #88]	; 0x58
  403be0:	9317      	str	r3, [sp, #92]	; 0x5c
  403be2:	f89a 3000 	ldrb.w	r3, [sl]
  403be6:	4654      	mov	r4, sl
  403be8:	b1e3      	cbz	r3, 403c24 <_svfprintf_r+0x90>
  403bea:	2b25      	cmp	r3, #37	; 0x25
  403bec:	d102      	bne.n	403bf4 <_svfprintf_r+0x60>
  403bee:	e019      	b.n	403c24 <_svfprintf_r+0x90>
  403bf0:	2b25      	cmp	r3, #37	; 0x25
  403bf2:	d003      	beq.n	403bfc <_svfprintf_r+0x68>
  403bf4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403bf8:	2b00      	cmp	r3, #0
  403bfa:	d1f9      	bne.n	403bf0 <_svfprintf_r+0x5c>
  403bfc:	eba4 050a 	sub.w	r5, r4, sl
  403c00:	b185      	cbz	r5, 403c24 <_svfprintf_r+0x90>
  403c02:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403c04:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403c06:	f8c8 a000 	str.w	sl, [r8]
  403c0a:	3301      	adds	r3, #1
  403c0c:	442a      	add	r2, r5
  403c0e:	2b07      	cmp	r3, #7
  403c10:	f8c8 5004 	str.w	r5, [r8, #4]
  403c14:	9227      	str	r2, [sp, #156]	; 0x9c
  403c16:	9326      	str	r3, [sp, #152]	; 0x98
  403c18:	dc7f      	bgt.n	403d1a <_svfprintf_r+0x186>
  403c1a:	f108 0808 	add.w	r8, r8, #8
  403c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403c20:	442b      	add	r3, r5
  403c22:	9309      	str	r3, [sp, #36]	; 0x24
  403c24:	7823      	ldrb	r3, [r4, #0]
  403c26:	2b00      	cmp	r3, #0
  403c28:	d07f      	beq.n	403d2a <_svfprintf_r+0x196>
  403c2a:	2300      	movs	r3, #0
  403c2c:	461a      	mov	r2, r3
  403c2e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403c32:	4619      	mov	r1, r3
  403c34:	930d      	str	r3, [sp, #52]	; 0x34
  403c36:	469b      	mov	fp, r3
  403c38:	f04f 30ff 	mov.w	r0, #4294967295
  403c3c:	7863      	ldrb	r3, [r4, #1]
  403c3e:	900a      	str	r0, [sp, #40]	; 0x28
  403c40:	f104 0a01 	add.w	sl, r4, #1
  403c44:	f10a 0a01 	add.w	sl, sl, #1
  403c48:	f1a3 0020 	sub.w	r0, r3, #32
  403c4c:	2858      	cmp	r0, #88	; 0x58
  403c4e:	f200 83c1 	bhi.w	4043d4 <_svfprintf_r+0x840>
  403c52:	e8df f010 	tbh	[pc, r0, lsl #1]
  403c56:	0238      	.short	0x0238
  403c58:	03bf03bf 	.word	0x03bf03bf
  403c5c:	03bf0240 	.word	0x03bf0240
  403c60:	03bf03bf 	.word	0x03bf03bf
  403c64:	03bf03bf 	.word	0x03bf03bf
  403c68:	024503bf 	.word	0x024503bf
  403c6c:	03bf0203 	.word	0x03bf0203
  403c70:	026b005d 	.word	0x026b005d
  403c74:	028603bf 	.word	0x028603bf
  403c78:	039d039d 	.word	0x039d039d
  403c7c:	039d039d 	.word	0x039d039d
  403c80:	039d039d 	.word	0x039d039d
  403c84:	039d039d 	.word	0x039d039d
  403c88:	03bf039d 	.word	0x03bf039d
  403c8c:	03bf03bf 	.word	0x03bf03bf
  403c90:	03bf03bf 	.word	0x03bf03bf
  403c94:	03bf03bf 	.word	0x03bf03bf
  403c98:	03bf03bf 	.word	0x03bf03bf
  403c9c:	033703bf 	.word	0x033703bf
  403ca0:	03bf0357 	.word	0x03bf0357
  403ca4:	03bf0357 	.word	0x03bf0357
  403ca8:	03bf03bf 	.word	0x03bf03bf
  403cac:	039803bf 	.word	0x039803bf
  403cb0:	03bf03bf 	.word	0x03bf03bf
  403cb4:	03bf03ad 	.word	0x03bf03ad
  403cb8:	03bf03bf 	.word	0x03bf03bf
  403cbc:	03bf03bf 	.word	0x03bf03bf
  403cc0:	03bf0259 	.word	0x03bf0259
  403cc4:	031e03bf 	.word	0x031e03bf
  403cc8:	03bf03bf 	.word	0x03bf03bf
  403ccc:	03bf03bf 	.word	0x03bf03bf
  403cd0:	03bf03bf 	.word	0x03bf03bf
  403cd4:	03bf03bf 	.word	0x03bf03bf
  403cd8:	03bf03bf 	.word	0x03bf03bf
  403cdc:	02db02c6 	.word	0x02db02c6
  403ce0:	03570357 	.word	0x03570357
  403ce4:	028b0357 	.word	0x028b0357
  403ce8:	03bf02db 	.word	0x03bf02db
  403cec:	029003bf 	.word	0x029003bf
  403cf0:	029d03bf 	.word	0x029d03bf
  403cf4:	02b401cc 	.word	0x02b401cc
  403cf8:	03bf0208 	.word	0x03bf0208
  403cfc:	03bf01e1 	.word	0x03bf01e1
  403d00:	03bf007e 	.word	0x03bf007e
  403d04:	020d03bf 	.word	0x020d03bf
  403d08:	980d      	ldr	r0, [sp, #52]	; 0x34
  403d0a:	930f      	str	r3, [sp, #60]	; 0x3c
  403d0c:	4240      	negs	r0, r0
  403d0e:	900d      	str	r0, [sp, #52]	; 0x34
  403d10:	f04b 0b04 	orr.w	fp, fp, #4
  403d14:	f89a 3000 	ldrb.w	r3, [sl]
  403d18:	e794      	b.n	403c44 <_svfprintf_r+0xb0>
  403d1a:	aa25      	add	r2, sp, #148	; 0x94
  403d1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403d1e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403d20:	f003 f93c 	bl	406f9c <__ssprint_r>
  403d24:	b940      	cbnz	r0, 403d38 <_svfprintf_r+0x1a4>
  403d26:	46c8      	mov	r8, r9
  403d28:	e779      	b.n	403c1e <_svfprintf_r+0x8a>
  403d2a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403d2c:	b123      	cbz	r3, 403d38 <_svfprintf_r+0x1a4>
  403d2e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403d30:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403d32:	aa25      	add	r2, sp, #148	; 0x94
  403d34:	f003 f932 	bl	406f9c <__ssprint_r>
  403d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403d3a:	899b      	ldrh	r3, [r3, #12]
  403d3c:	f013 0f40 	tst.w	r3, #64	; 0x40
  403d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403d42:	bf18      	it	ne
  403d44:	f04f 33ff 	movne.w	r3, #4294967295
  403d48:	9309      	str	r3, [sp, #36]	; 0x24
  403d4a:	9809      	ldr	r0, [sp, #36]	; 0x24
  403d4c:	b043      	add	sp, #268	; 0x10c
  403d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d52:	f01b 0f20 	tst.w	fp, #32
  403d56:	9311      	str	r3, [sp, #68]	; 0x44
  403d58:	f040 81dd 	bne.w	404116 <_svfprintf_r+0x582>
  403d5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403d5e:	f01b 0f10 	tst.w	fp, #16
  403d62:	4613      	mov	r3, r2
  403d64:	f040 856e 	bne.w	404844 <_svfprintf_r+0xcb0>
  403d68:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403d6c:	f000 856a 	beq.w	404844 <_svfprintf_r+0xcb0>
  403d70:	8814      	ldrh	r4, [r2, #0]
  403d72:	3204      	adds	r2, #4
  403d74:	2500      	movs	r5, #0
  403d76:	2301      	movs	r3, #1
  403d78:	920f      	str	r2, [sp, #60]	; 0x3c
  403d7a:	2700      	movs	r7, #0
  403d7c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403d80:	990a      	ldr	r1, [sp, #40]	; 0x28
  403d82:	1c4a      	adds	r2, r1, #1
  403d84:	f000 8265 	beq.w	404252 <_svfprintf_r+0x6be>
  403d88:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403d8c:	9207      	str	r2, [sp, #28]
  403d8e:	ea54 0205 	orrs.w	r2, r4, r5
  403d92:	f040 8264 	bne.w	40425e <_svfprintf_r+0x6ca>
  403d96:	2900      	cmp	r1, #0
  403d98:	f040 843c 	bne.w	404614 <_svfprintf_r+0xa80>
  403d9c:	2b00      	cmp	r3, #0
  403d9e:	f040 84d7 	bne.w	404750 <_svfprintf_r+0xbbc>
  403da2:	f01b 0301 	ands.w	r3, fp, #1
  403da6:	930e      	str	r3, [sp, #56]	; 0x38
  403da8:	f000 8604 	beq.w	4049b4 <_svfprintf_r+0xe20>
  403dac:	ae42      	add	r6, sp, #264	; 0x108
  403dae:	2330      	movs	r3, #48	; 0x30
  403db0:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403db6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403db8:	4293      	cmp	r3, r2
  403dba:	bfb8      	it	lt
  403dbc:	4613      	movlt	r3, r2
  403dbe:	9308      	str	r3, [sp, #32]
  403dc0:	2300      	movs	r3, #0
  403dc2:	9312      	str	r3, [sp, #72]	; 0x48
  403dc4:	b117      	cbz	r7, 403dcc <_svfprintf_r+0x238>
  403dc6:	9b08      	ldr	r3, [sp, #32]
  403dc8:	3301      	adds	r3, #1
  403dca:	9308      	str	r3, [sp, #32]
  403dcc:	9b07      	ldr	r3, [sp, #28]
  403dce:	f013 0302 	ands.w	r3, r3, #2
  403dd2:	9310      	str	r3, [sp, #64]	; 0x40
  403dd4:	d002      	beq.n	403ddc <_svfprintf_r+0x248>
  403dd6:	9b08      	ldr	r3, [sp, #32]
  403dd8:	3302      	adds	r3, #2
  403dda:	9308      	str	r3, [sp, #32]
  403ddc:	9b07      	ldr	r3, [sp, #28]
  403dde:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  403de2:	f040 830e 	bne.w	404402 <_svfprintf_r+0x86e>
  403de6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403de8:	9a08      	ldr	r2, [sp, #32]
  403dea:	eba3 0b02 	sub.w	fp, r3, r2
  403dee:	f1bb 0f00 	cmp.w	fp, #0
  403df2:	f340 8306 	ble.w	404402 <_svfprintf_r+0x86e>
  403df6:	f1bb 0f10 	cmp.w	fp, #16
  403dfa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403dfc:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403dfe:	dd29      	ble.n	403e54 <_svfprintf_r+0x2c0>
  403e00:	4643      	mov	r3, r8
  403e02:	4621      	mov	r1, r4
  403e04:	46a8      	mov	r8, r5
  403e06:	2710      	movs	r7, #16
  403e08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403e0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403e0c:	e006      	b.n	403e1c <_svfprintf_r+0x288>
  403e0e:	f1ab 0b10 	sub.w	fp, fp, #16
  403e12:	f1bb 0f10 	cmp.w	fp, #16
  403e16:	f103 0308 	add.w	r3, r3, #8
  403e1a:	dd18      	ble.n	403e4e <_svfprintf_r+0x2ba>
  403e1c:	3201      	adds	r2, #1
  403e1e:	48b7      	ldr	r0, [pc, #732]	; (4040fc <_svfprintf_r+0x568>)
  403e20:	9226      	str	r2, [sp, #152]	; 0x98
  403e22:	3110      	adds	r1, #16
  403e24:	2a07      	cmp	r2, #7
  403e26:	9127      	str	r1, [sp, #156]	; 0x9c
  403e28:	e883 0081 	stmia.w	r3, {r0, r7}
  403e2c:	ddef      	ble.n	403e0e <_svfprintf_r+0x27a>
  403e2e:	aa25      	add	r2, sp, #148	; 0x94
  403e30:	4629      	mov	r1, r5
  403e32:	4620      	mov	r0, r4
  403e34:	f003 f8b2 	bl	406f9c <__ssprint_r>
  403e38:	2800      	cmp	r0, #0
  403e3a:	f47f af7d 	bne.w	403d38 <_svfprintf_r+0x1a4>
  403e3e:	f1ab 0b10 	sub.w	fp, fp, #16
  403e42:	f1bb 0f10 	cmp.w	fp, #16
  403e46:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403e48:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403e4a:	464b      	mov	r3, r9
  403e4c:	dce6      	bgt.n	403e1c <_svfprintf_r+0x288>
  403e4e:	4645      	mov	r5, r8
  403e50:	460c      	mov	r4, r1
  403e52:	4698      	mov	r8, r3
  403e54:	3201      	adds	r2, #1
  403e56:	4ba9      	ldr	r3, [pc, #676]	; (4040fc <_svfprintf_r+0x568>)
  403e58:	9226      	str	r2, [sp, #152]	; 0x98
  403e5a:	445c      	add	r4, fp
  403e5c:	2a07      	cmp	r2, #7
  403e5e:	9427      	str	r4, [sp, #156]	; 0x9c
  403e60:	e888 0808 	stmia.w	r8, {r3, fp}
  403e64:	f300 8498 	bgt.w	404798 <_svfprintf_r+0xc04>
  403e68:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403e6c:	f108 0808 	add.w	r8, r8, #8
  403e70:	b177      	cbz	r7, 403e90 <_svfprintf_r+0x2fc>
  403e72:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e74:	3301      	adds	r3, #1
  403e76:	3401      	adds	r4, #1
  403e78:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  403e7c:	2201      	movs	r2, #1
  403e7e:	2b07      	cmp	r3, #7
  403e80:	9427      	str	r4, [sp, #156]	; 0x9c
  403e82:	9326      	str	r3, [sp, #152]	; 0x98
  403e84:	e888 0006 	stmia.w	r8, {r1, r2}
  403e88:	f300 83db 	bgt.w	404642 <_svfprintf_r+0xaae>
  403e8c:	f108 0808 	add.w	r8, r8, #8
  403e90:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403e92:	b16b      	cbz	r3, 403eb0 <_svfprintf_r+0x31c>
  403e94:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e96:	3301      	adds	r3, #1
  403e98:	3402      	adds	r4, #2
  403e9a:	a91e      	add	r1, sp, #120	; 0x78
  403e9c:	2202      	movs	r2, #2
  403e9e:	2b07      	cmp	r3, #7
  403ea0:	9427      	str	r4, [sp, #156]	; 0x9c
  403ea2:	9326      	str	r3, [sp, #152]	; 0x98
  403ea4:	e888 0006 	stmia.w	r8, {r1, r2}
  403ea8:	f300 83d6 	bgt.w	404658 <_svfprintf_r+0xac4>
  403eac:	f108 0808 	add.w	r8, r8, #8
  403eb0:	2d80      	cmp	r5, #128	; 0x80
  403eb2:	f000 8315 	beq.w	4044e0 <_svfprintf_r+0x94c>
  403eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403eb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403eba:	1a9f      	subs	r7, r3, r2
  403ebc:	2f00      	cmp	r7, #0
  403ebe:	dd36      	ble.n	403f2e <_svfprintf_r+0x39a>
  403ec0:	2f10      	cmp	r7, #16
  403ec2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ec4:	4d8e      	ldr	r5, [pc, #568]	; (404100 <_svfprintf_r+0x56c>)
  403ec6:	dd27      	ble.n	403f18 <_svfprintf_r+0x384>
  403ec8:	4642      	mov	r2, r8
  403eca:	4621      	mov	r1, r4
  403ecc:	46b0      	mov	r8, r6
  403ece:	f04f 0b10 	mov.w	fp, #16
  403ed2:	462e      	mov	r6, r5
  403ed4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403ed6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403ed8:	e004      	b.n	403ee4 <_svfprintf_r+0x350>
  403eda:	3f10      	subs	r7, #16
  403edc:	2f10      	cmp	r7, #16
  403ede:	f102 0208 	add.w	r2, r2, #8
  403ee2:	dd15      	ble.n	403f10 <_svfprintf_r+0x37c>
  403ee4:	3301      	adds	r3, #1
  403ee6:	3110      	adds	r1, #16
  403ee8:	2b07      	cmp	r3, #7
  403eea:	9127      	str	r1, [sp, #156]	; 0x9c
  403eec:	9326      	str	r3, [sp, #152]	; 0x98
  403eee:	e882 0840 	stmia.w	r2, {r6, fp}
  403ef2:	ddf2      	ble.n	403eda <_svfprintf_r+0x346>
  403ef4:	aa25      	add	r2, sp, #148	; 0x94
  403ef6:	4629      	mov	r1, r5
  403ef8:	4620      	mov	r0, r4
  403efa:	f003 f84f 	bl	406f9c <__ssprint_r>
  403efe:	2800      	cmp	r0, #0
  403f00:	f47f af1a 	bne.w	403d38 <_svfprintf_r+0x1a4>
  403f04:	3f10      	subs	r7, #16
  403f06:	2f10      	cmp	r7, #16
  403f08:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403f0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f0c:	464a      	mov	r2, r9
  403f0e:	dce9      	bgt.n	403ee4 <_svfprintf_r+0x350>
  403f10:	4635      	mov	r5, r6
  403f12:	460c      	mov	r4, r1
  403f14:	4646      	mov	r6, r8
  403f16:	4690      	mov	r8, r2
  403f18:	3301      	adds	r3, #1
  403f1a:	443c      	add	r4, r7
  403f1c:	2b07      	cmp	r3, #7
  403f1e:	9427      	str	r4, [sp, #156]	; 0x9c
  403f20:	9326      	str	r3, [sp, #152]	; 0x98
  403f22:	e888 00a0 	stmia.w	r8, {r5, r7}
  403f26:	f300 8381 	bgt.w	40462c <_svfprintf_r+0xa98>
  403f2a:	f108 0808 	add.w	r8, r8, #8
  403f2e:	9b07      	ldr	r3, [sp, #28]
  403f30:	05df      	lsls	r7, r3, #23
  403f32:	f100 8268 	bmi.w	404406 <_svfprintf_r+0x872>
  403f36:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f38:	990e      	ldr	r1, [sp, #56]	; 0x38
  403f3a:	f8c8 6000 	str.w	r6, [r8]
  403f3e:	3301      	adds	r3, #1
  403f40:	440c      	add	r4, r1
  403f42:	2b07      	cmp	r3, #7
  403f44:	9427      	str	r4, [sp, #156]	; 0x9c
  403f46:	f8c8 1004 	str.w	r1, [r8, #4]
  403f4a:	9326      	str	r3, [sp, #152]	; 0x98
  403f4c:	f300 834d 	bgt.w	4045ea <_svfprintf_r+0xa56>
  403f50:	f108 0808 	add.w	r8, r8, #8
  403f54:	9b07      	ldr	r3, [sp, #28]
  403f56:	075b      	lsls	r3, r3, #29
  403f58:	d53a      	bpl.n	403fd0 <_svfprintf_r+0x43c>
  403f5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403f5c:	9a08      	ldr	r2, [sp, #32]
  403f5e:	1a9d      	subs	r5, r3, r2
  403f60:	2d00      	cmp	r5, #0
  403f62:	dd35      	ble.n	403fd0 <_svfprintf_r+0x43c>
  403f64:	2d10      	cmp	r5, #16
  403f66:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f68:	dd20      	ble.n	403fac <_svfprintf_r+0x418>
  403f6a:	2610      	movs	r6, #16
  403f6c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403f6e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  403f72:	e004      	b.n	403f7e <_svfprintf_r+0x3ea>
  403f74:	3d10      	subs	r5, #16
  403f76:	2d10      	cmp	r5, #16
  403f78:	f108 0808 	add.w	r8, r8, #8
  403f7c:	dd16      	ble.n	403fac <_svfprintf_r+0x418>
  403f7e:	3301      	adds	r3, #1
  403f80:	4a5e      	ldr	r2, [pc, #376]	; (4040fc <_svfprintf_r+0x568>)
  403f82:	9326      	str	r3, [sp, #152]	; 0x98
  403f84:	3410      	adds	r4, #16
  403f86:	2b07      	cmp	r3, #7
  403f88:	9427      	str	r4, [sp, #156]	; 0x9c
  403f8a:	e888 0044 	stmia.w	r8, {r2, r6}
  403f8e:	ddf1      	ble.n	403f74 <_svfprintf_r+0x3e0>
  403f90:	aa25      	add	r2, sp, #148	; 0x94
  403f92:	4659      	mov	r1, fp
  403f94:	4638      	mov	r0, r7
  403f96:	f003 f801 	bl	406f9c <__ssprint_r>
  403f9a:	2800      	cmp	r0, #0
  403f9c:	f47f aecc 	bne.w	403d38 <_svfprintf_r+0x1a4>
  403fa0:	3d10      	subs	r5, #16
  403fa2:	2d10      	cmp	r5, #16
  403fa4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403fa6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fa8:	46c8      	mov	r8, r9
  403faa:	dce8      	bgt.n	403f7e <_svfprintf_r+0x3ea>
  403fac:	3301      	adds	r3, #1
  403fae:	4a53      	ldr	r2, [pc, #332]	; (4040fc <_svfprintf_r+0x568>)
  403fb0:	9326      	str	r3, [sp, #152]	; 0x98
  403fb2:	442c      	add	r4, r5
  403fb4:	2b07      	cmp	r3, #7
  403fb6:	9427      	str	r4, [sp, #156]	; 0x9c
  403fb8:	e888 0024 	stmia.w	r8, {r2, r5}
  403fbc:	dd08      	ble.n	403fd0 <_svfprintf_r+0x43c>
  403fbe:	aa25      	add	r2, sp, #148	; 0x94
  403fc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403fc2:	980c      	ldr	r0, [sp, #48]	; 0x30
  403fc4:	f002 ffea 	bl	406f9c <__ssprint_r>
  403fc8:	2800      	cmp	r0, #0
  403fca:	f47f aeb5 	bne.w	403d38 <_svfprintf_r+0x1a4>
  403fce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403fd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403fd4:	9908      	ldr	r1, [sp, #32]
  403fd6:	428a      	cmp	r2, r1
  403fd8:	bfac      	ite	ge
  403fda:	189b      	addge	r3, r3, r2
  403fdc:	185b      	addlt	r3, r3, r1
  403fde:	9309      	str	r3, [sp, #36]	; 0x24
  403fe0:	2c00      	cmp	r4, #0
  403fe2:	f040 830d 	bne.w	404600 <_svfprintf_r+0xa6c>
  403fe6:	2300      	movs	r3, #0
  403fe8:	9326      	str	r3, [sp, #152]	; 0x98
  403fea:	46c8      	mov	r8, r9
  403fec:	e5f9      	b.n	403be2 <_svfprintf_r+0x4e>
  403fee:	9311      	str	r3, [sp, #68]	; 0x44
  403ff0:	f01b 0320 	ands.w	r3, fp, #32
  403ff4:	f040 81e3 	bne.w	4043be <_svfprintf_r+0x82a>
  403ff8:	f01b 0210 	ands.w	r2, fp, #16
  403ffc:	f040 842e 	bne.w	40485c <_svfprintf_r+0xcc8>
  404000:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404004:	f000 842a 	beq.w	40485c <_svfprintf_r+0xcc8>
  404008:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40400a:	4613      	mov	r3, r2
  40400c:	460a      	mov	r2, r1
  40400e:	3204      	adds	r2, #4
  404010:	880c      	ldrh	r4, [r1, #0]
  404012:	920f      	str	r2, [sp, #60]	; 0x3c
  404014:	2500      	movs	r5, #0
  404016:	e6b0      	b.n	403d7a <_svfprintf_r+0x1e6>
  404018:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40401a:	9311      	str	r3, [sp, #68]	; 0x44
  40401c:	6816      	ldr	r6, [r2, #0]
  40401e:	2400      	movs	r4, #0
  404020:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  404024:	1d15      	adds	r5, r2, #4
  404026:	2e00      	cmp	r6, #0
  404028:	f000 86a7 	beq.w	404d7a <_svfprintf_r+0x11e6>
  40402c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40402e:	1c53      	adds	r3, r2, #1
  404030:	f000 8609 	beq.w	404c46 <_svfprintf_r+0x10b2>
  404034:	4621      	mov	r1, r4
  404036:	4630      	mov	r0, r6
  404038:	f002 fa8a 	bl	406550 <memchr>
  40403c:	2800      	cmp	r0, #0
  40403e:	f000 86e1 	beq.w	404e04 <_svfprintf_r+0x1270>
  404042:	1b83      	subs	r3, r0, r6
  404044:	930e      	str	r3, [sp, #56]	; 0x38
  404046:	940a      	str	r4, [sp, #40]	; 0x28
  404048:	950f      	str	r5, [sp, #60]	; 0x3c
  40404a:	f8cd b01c 	str.w	fp, [sp, #28]
  40404e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404052:	9308      	str	r3, [sp, #32]
  404054:	9412      	str	r4, [sp, #72]	; 0x48
  404056:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40405a:	e6b3      	b.n	403dc4 <_svfprintf_r+0x230>
  40405c:	f89a 3000 	ldrb.w	r3, [sl]
  404060:	2201      	movs	r2, #1
  404062:	212b      	movs	r1, #43	; 0x2b
  404064:	e5ee      	b.n	403c44 <_svfprintf_r+0xb0>
  404066:	f04b 0b20 	orr.w	fp, fp, #32
  40406a:	f89a 3000 	ldrb.w	r3, [sl]
  40406e:	e5e9      	b.n	403c44 <_svfprintf_r+0xb0>
  404070:	9311      	str	r3, [sp, #68]	; 0x44
  404072:	2a00      	cmp	r2, #0
  404074:	f040 8795 	bne.w	404fa2 <_svfprintf_r+0x140e>
  404078:	4b22      	ldr	r3, [pc, #136]	; (404104 <_svfprintf_r+0x570>)
  40407a:	9318      	str	r3, [sp, #96]	; 0x60
  40407c:	f01b 0f20 	tst.w	fp, #32
  404080:	f040 8111 	bne.w	4042a6 <_svfprintf_r+0x712>
  404084:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404086:	f01b 0f10 	tst.w	fp, #16
  40408a:	4613      	mov	r3, r2
  40408c:	f040 83e1 	bne.w	404852 <_svfprintf_r+0xcbe>
  404090:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404094:	f000 83dd 	beq.w	404852 <_svfprintf_r+0xcbe>
  404098:	3304      	adds	r3, #4
  40409a:	8814      	ldrh	r4, [r2, #0]
  40409c:	930f      	str	r3, [sp, #60]	; 0x3c
  40409e:	2500      	movs	r5, #0
  4040a0:	f01b 0f01 	tst.w	fp, #1
  4040a4:	f000 810c 	beq.w	4042c0 <_svfprintf_r+0x72c>
  4040a8:	ea54 0305 	orrs.w	r3, r4, r5
  4040ac:	f000 8108 	beq.w	4042c0 <_svfprintf_r+0x72c>
  4040b0:	2330      	movs	r3, #48	; 0x30
  4040b2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4040b6:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4040ba:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4040be:	f04b 0b02 	orr.w	fp, fp, #2
  4040c2:	2302      	movs	r3, #2
  4040c4:	e659      	b.n	403d7a <_svfprintf_r+0x1e6>
  4040c6:	f89a 3000 	ldrb.w	r3, [sl]
  4040ca:	2900      	cmp	r1, #0
  4040cc:	f47f adba 	bne.w	403c44 <_svfprintf_r+0xb0>
  4040d0:	2201      	movs	r2, #1
  4040d2:	2120      	movs	r1, #32
  4040d4:	e5b6      	b.n	403c44 <_svfprintf_r+0xb0>
  4040d6:	f04b 0b01 	orr.w	fp, fp, #1
  4040da:	f89a 3000 	ldrb.w	r3, [sl]
  4040de:	e5b1      	b.n	403c44 <_svfprintf_r+0xb0>
  4040e0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4040e2:	6823      	ldr	r3, [r4, #0]
  4040e4:	930d      	str	r3, [sp, #52]	; 0x34
  4040e6:	4618      	mov	r0, r3
  4040e8:	2800      	cmp	r0, #0
  4040ea:	4623      	mov	r3, r4
  4040ec:	f103 0304 	add.w	r3, r3, #4
  4040f0:	f6ff ae0a 	blt.w	403d08 <_svfprintf_r+0x174>
  4040f4:	930f      	str	r3, [sp, #60]	; 0x3c
  4040f6:	f89a 3000 	ldrb.w	r3, [sl]
  4040fa:	e5a3      	b.n	403c44 <_svfprintf_r+0xb0>
  4040fc:	00408f3c 	.word	0x00408f3c
  404100:	00408f4c 	.word	0x00408f4c
  404104:	00408f1c 	.word	0x00408f1c
  404108:	f04b 0b10 	orr.w	fp, fp, #16
  40410c:	f01b 0f20 	tst.w	fp, #32
  404110:	9311      	str	r3, [sp, #68]	; 0x44
  404112:	f43f ae23 	beq.w	403d5c <_svfprintf_r+0x1c8>
  404116:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404118:	3507      	adds	r5, #7
  40411a:	f025 0307 	bic.w	r3, r5, #7
  40411e:	f103 0208 	add.w	r2, r3, #8
  404122:	e9d3 4500 	ldrd	r4, r5, [r3]
  404126:	920f      	str	r2, [sp, #60]	; 0x3c
  404128:	2301      	movs	r3, #1
  40412a:	e626      	b.n	403d7a <_svfprintf_r+0x1e6>
  40412c:	f89a 3000 	ldrb.w	r3, [sl]
  404130:	2b2a      	cmp	r3, #42	; 0x2a
  404132:	f10a 0401 	add.w	r4, sl, #1
  404136:	f000 8727 	beq.w	404f88 <_svfprintf_r+0x13f4>
  40413a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40413e:	2809      	cmp	r0, #9
  404140:	46a2      	mov	sl, r4
  404142:	f200 86ad 	bhi.w	404ea0 <_svfprintf_r+0x130c>
  404146:	2300      	movs	r3, #0
  404148:	461c      	mov	r4, r3
  40414a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40414e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404152:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404156:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40415a:	2809      	cmp	r0, #9
  40415c:	d9f5      	bls.n	40414a <_svfprintf_r+0x5b6>
  40415e:	940a      	str	r4, [sp, #40]	; 0x28
  404160:	e572      	b.n	403c48 <_svfprintf_r+0xb4>
  404162:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  404166:	f89a 3000 	ldrb.w	r3, [sl]
  40416a:	e56b      	b.n	403c44 <_svfprintf_r+0xb0>
  40416c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404170:	f89a 3000 	ldrb.w	r3, [sl]
  404174:	e566      	b.n	403c44 <_svfprintf_r+0xb0>
  404176:	f89a 3000 	ldrb.w	r3, [sl]
  40417a:	2b6c      	cmp	r3, #108	; 0x6c
  40417c:	bf03      	ittte	eq
  40417e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404182:	f04b 0b20 	orreq.w	fp, fp, #32
  404186:	f10a 0a01 	addeq.w	sl, sl, #1
  40418a:	f04b 0b10 	orrne.w	fp, fp, #16
  40418e:	e559      	b.n	403c44 <_svfprintf_r+0xb0>
  404190:	2a00      	cmp	r2, #0
  404192:	f040 8711 	bne.w	404fb8 <_svfprintf_r+0x1424>
  404196:	f01b 0f20 	tst.w	fp, #32
  40419a:	f040 84f9 	bne.w	404b90 <_svfprintf_r+0xffc>
  40419e:	f01b 0f10 	tst.w	fp, #16
  4041a2:	f040 84ac 	bne.w	404afe <_svfprintf_r+0xf6a>
  4041a6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4041aa:	f000 84a8 	beq.w	404afe <_svfprintf_r+0xf6a>
  4041ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4041b0:	6813      	ldr	r3, [r2, #0]
  4041b2:	3204      	adds	r2, #4
  4041b4:	920f      	str	r2, [sp, #60]	; 0x3c
  4041b6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4041ba:	801a      	strh	r2, [r3, #0]
  4041bc:	e511      	b.n	403be2 <_svfprintf_r+0x4e>
  4041be:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4041c0:	4bb3      	ldr	r3, [pc, #716]	; (404490 <_svfprintf_r+0x8fc>)
  4041c2:	680c      	ldr	r4, [r1, #0]
  4041c4:	9318      	str	r3, [sp, #96]	; 0x60
  4041c6:	2230      	movs	r2, #48	; 0x30
  4041c8:	2378      	movs	r3, #120	; 0x78
  4041ca:	3104      	adds	r1, #4
  4041cc:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4041d0:	9311      	str	r3, [sp, #68]	; 0x44
  4041d2:	f04b 0b02 	orr.w	fp, fp, #2
  4041d6:	910f      	str	r1, [sp, #60]	; 0x3c
  4041d8:	2500      	movs	r5, #0
  4041da:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4041de:	2302      	movs	r3, #2
  4041e0:	e5cb      	b.n	403d7a <_svfprintf_r+0x1e6>
  4041e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4041e4:	9311      	str	r3, [sp, #68]	; 0x44
  4041e6:	680a      	ldr	r2, [r1, #0]
  4041e8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4041ec:	2300      	movs	r3, #0
  4041ee:	460a      	mov	r2, r1
  4041f0:	461f      	mov	r7, r3
  4041f2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4041f6:	3204      	adds	r2, #4
  4041f8:	2301      	movs	r3, #1
  4041fa:	9308      	str	r3, [sp, #32]
  4041fc:	f8cd b01c 	str.w	fp, [sp, #28]
  404200:	970a      	str	r7, [sp, #40]	; 0x28
  404202:	9712      	str	r7, [sp, #72]	; 0x48
  404204:	920f      	str	r2, [sp, #60]	; 0x3c
  404206:	930e      	str	r3, [sp, #56]	; 0x38
  404208:	ae28      	add	r6, sp, #160	; 0xa0
  40420a:	e5df      	b.n	403dcc <_svfprintf_r+0x238>
  40420c:	9311      	str	r3, [sp, #68]	; 0x44
  40420e:	2a00      	cmp	r2, #0
  404210:	f040 86ea 	bne.w	404fe8 <_svfprintf_r+0x1454>
  404214:	f01b 0f20 	tst.w	fp, #32
  404218:	d15d      	bne.n	4042d6 <_svfprintf_r+0x742>
  40421a:	f01b 0f10 	tst.w	fp, #16
  40421e:	f040 8308 	bne.w	404832 <_svfprintf_r+0xc9e>
  404222:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404226:	f000 8304 	beq.w	404832 <_svfprintf_r+0xc9e>
  40422a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40422c:	f9b1 4000 	ldrsh.w	r4, [r1]
  404230:	3104      	adds	r1, #4
  404232:	17e5      	asrs	r5, r4, #31
  404234:	4622      	mov	r2, r4
  404236:	462b      	mov	r3, r5
  404238:	910f      	str	r1, [sp, #60]	; 0x3c
  40423a:	2a00      	cmp	r2, #0
  40423c:	f173 0300 	sbcs.w	r3, r3, #0
  404240:	db58      	blt.n	4042f4 <_svfprintf_r+0x760>
  404242:	990a      	ldr	r1, [sp, #40]	; 0x28
  404244:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404248:	1c4a      	adds	r2, r1, #1
  40424a:	f04f 0301 	mov.w	r3, #1
  40424e:	f47f ad9b 	bne.w	403d88 <_svfprintf_r+0x1f4>
  404252:	ea54 0205 	orrs.w	r2, r4, r5
  404256:	f000 81df 	beq.w	404618 <_svfprintf_r+0xa84>
  40425a:	f8cd b01c 	str.w	fp, [sp, #28]
  40425e:	2b01      	cmp	r3, #1
  404260:	f000 827b 	beq.w	40475a <_svfprintf_r+0xbc6>
  404264:	2b02      	cmp	r3, #2
  404266:	f040 8206 	bne.w	404676 <_svfprintf_r+0xae2>
  40426a:	9818      	ldr	r0, [sp, #96]	; 0x60
  40426c:	464e      	mov	r6, r9
  40426e:	0923      	lsrs	r3, r4, #4
  404270:	f004 010f 	and.w	r1, r4, #15
  404274:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404278:	092a      	lsrs	r2, r5, #4
  40427a:	461c      	mov	r4, r3
  40427c:	4615      	mov	r5, r2
  40427e:	5c43      	ldrb	r3, [r0, r1]
  404280:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404284:	ea54 0305 	orrs.w	r3, r4, r5
  404288:	d1f1      	bne.n	40426e <_svfprintf_r+0x6da>
  40428a:	eba9 0306 	sub.w	r3, r9, r6
  40428e:	930e      	str	r3, [sp, #56]	; 0x38
  404290:	e590      	b.n	403db4 <_svfprintf_r+0x220>
  404292:	9311      	str	r3, [sp, #68]	; 0x44
  404294:	2a00      	cmp	r2, #0
  404296:	f040 86a3 	bne.w	404fe0 <_svfprintf_r+0x144c>
  40429a:	4b7e      	ldr	r3, [pc, #504]	; (404494 <_svfprintf_r+0x900>)
  40429c:	9318      	str	r3, [sp, #96]	; 0x60
  40429e:	f01b 0f20 	tst.w	fp, #32
  4042a2:	f43f aeef 	beq.w	404084 <_svfprintf_r+0x4f0>
  4042a6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4042a8:	3507      	adds	r5, #7
  4042aa:	f025 0307 	bic.w	r3, r5, #7
  4042ae:	f103 0208 	add.w	r2, r3, #8
  4042b2:	f01b 0f01 	tst.w	fp, #1
  4042b6:	920f      	str	r2, [sp, #60]	; 0x3c
  4042b8:	e9d3 4500 	ldrd	r4, r5, [r3]
  4042bc:	f47f aef4 	bne.w	4040a8 <_svfprintf_r+0x514>
  4042c0:	2302      	movs	r3, #2
  4042c2:	e55a      	b.n	403d7a <_svfprintf_r+0x1e6>
  4042c4:	9311      	str	r3, [sp, #68]	; 0x44
  4042c6:	2a00      	cmp	r2, #0
  4042c8:	f040 8686 	bne.w	404fd8 <_svfprintf_r+0x1444>
  4042cc:	f04b 0b10 	orr.w	fp, fp, #16
  4042d0:	f01b 0f20 	tst.w	fp, #32
  4042d4:	d0a1      	beq.n	40421a <_svfprintf_r+0x686>
  4042d6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4042d8:	3507      	adds	r5, #7
  4042da:	f025 0507 	bic.w	r5, r5, #7
  4042de:	e9d5 2300 	ldrd	r2, r3, [r5]
  4042e2:	2a00      	cmp	r2, #0
  4042e4:	f105 0108 	add.w	r1, r5, #8
  4042e8:	461d      	mov	r5, r3
  4042ea:	f173 0300 	sbcs.w	r3, r3, #0
  4042ee:	910f      	str	r1, [sp, #60]	; 0x3c
  4042f0:	4614      	mov	r4, r2
  4042f2:	daa6      	bge.n	404242 <_svfprintf_r+0x6ae>
  4042f4:	272d      	movs	r7, #45	; 0x2d
  4042f6:	4264      	negs	r4, r4
  4042f8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4042fc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404300:	2301      	movs	r3, #1
  404302:	e53d      	b.n	403d80 <_svfprintf_r+0x1ec>
  404304:	9311      	str	r3, [sp, #68]	; 0x44
  404306:	2a00      	cmp	r2, #0
  404308:	f040 8662 	bne.w	404fd0 <_svfprintf_r+0x143c>
  40430c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40430e:	3507      	adds	r5, #7
  404310:	f025 0307 	bic.w	r3, r5, #7
  404314:	f103 0208 	add.w	r2, r3, #8
  404318:	920f      	str	r2, [sp, #60]	; 0x3c
  40431a:	681a      	ldr	r2, [r3, #0]
  40431c:	9215      	str	r2, [sp, #84]	; 0x54
  40431e:	685b      	ldr	r3, [r3, #4]
  404320:	9314      	str	r3, [sp, #80]	; 0x50
  404322:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404324:	9d15      	ldr	r5, [sp, #84]	; 0x54
  404326:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40432a:	4628      	mov	r0, r5
  40432c:	4621      	mov	r1, r4
  40432e:	f04f 32ff 	mov.w	r2, #4294967295
  404332:	4b59      	ldr	r3, [pc, #356]	; (404498 <_svfprintf_r+0x904>)
  404334:	f003 fef8 	bl	408128 <__aeabi_dcmpun>
  404338:	2800      	cmp	r0, #0
  40433a:	f040 834a 	bne.w	4049d2 <_svfprintf_r+0xe3e>
  40433e:	4628      	mov	r0, r5
  404340:	4621      	mov	r1, r4
  404342:	f04f 32ff 	mov.w	r2, #4294967295
  404346:	4b54      	ldr	r3, [pc, #336]	; (404498 <_svfprintf_r+0x904>)
  404348:	f003 fed0 	bl	4080ec <__aeabi_dcmple>
  40434c:	2800      	cmp	r0, #0
  40434e:	f040 8340 	bne.w	4049d2 <_svfprintf_r+0xe3e>
  404352:	a815      	add	r0, sp, #84	; 0x54
  404354:	c80d      	ldmia	r0, {r0, r2, r3}
  404356:	9914      	ldr	r1, [sp, #80]	; 0x50
  404358:	f003 febe 	bl	4080d8 <__aeabi_dcmplt>
  40435c:	2800      	cmp	r0, #0
  40435e:	f040 8530 	bne.w	404dc2 <_svfprintf_r+0x122e>
  404362:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404366:	4e4d      	ldr	r6, [pc, #308]	; (40449c <_svfprintf_r+0x908>)
  404368:	4b4d      	ldr	r3, [pc, #308]	; (4044a0 <_svfprintf_r+0x90c>)
  40436a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40436e:	9007      	str	r0, [sp, #28]
  404370:	9811      	ldr	r0, [sp, #68]	; 0x44
  404372:	2203      	movs	r2, #3
  404374:	2100      	movs	r1, #0
  404376:	9208      	str	r2, [sp, #32]
  404378:	910a      	str	r1, [sp, #40]	; 0x28
  40437a:	2847      	cmp	r0, #71	; 0x47
  40437c:	bfd8      	it	le
  40437e:	461e      	movle	r6, r3
  404380:	920e      	str	r2, [sp, #56]	; 0x38
  404382:	9112      	str	r1, [sp, #72]	; 0x48
  404384:	e51e      	b.n	403dc4 <_svfprintf_r+0x230>
  404386:	f04b 0b08 	orr.w	fp, fp, #8
  40438a:	f89a 3000 	ldrb.w	r3, [sl]
  40438e:	e459      	b.n	403c44 <_svfprintf_r+0xb0>
  404390:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404394:	2300      	movs	r3, #0
  404396:	461c      	mov	r4, r3
  404398:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40439c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4043a0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4043a4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4043a8:	2809      	cmp	r0, #9
  4043aa:	d9f5      	bls.n	404398 <_svfprintf_r+0x804>
  4043ac:	940d      	str	r4, [sp, #52]	; 0x34
  4043ae:	e44b      	b.n	403c48 <_svfprintf_r+0xb4>
  4043b0:	f04b 0b10 	orr.w	fp, fp, #16
  4043b4:	9311      	str	r3, [sp, #68]	; 0x44
  4043b6:	f01b 0320 	ands.w	r3, fp, #32
  4043ba:	f43f ae1d 	beq.w	403ff8 <_svfprintf_r+0x464>
  4043be:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4043c0:	3507      	adds	r5, #7
  4043c2:	f025 0307 	bic.w	r3, r5, #7
  4043c6:	f103 0208 	add.w	r2, r3, #8
  4043ca:	e9d3 4500 	ldrd	r4, r5, [r3]
  4043ce:	920f      	str	r2, [sp, #60]	; 0x3c
  4043d0:	2300      	movs	r3, #0
  4043d2:	e4d2      	b.n	403d7a <_svfprintf_r+0x1e6>
  4043d4:	9311      	str	r3, [sp, #68]	; 0x44
  4043d6:	2a00      	cmp	r2, #0
  4043d8:	f040 85e7 	bne.w	404faa <_svfprintf_r+0x1416>
  4043dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4043de:	2a00      	cmp	r2, #0
  4043e0:	f43f aca3 	beq.w	403d2a <_svfprintf_r+0x196>
  4043e4:	2300      	movs	r3, #0
  4043e6:	2101      	movs	r1, #1
  4043e8:	461f      	mov	r7, r3
  4043ea:	9108      	str	r1, [sp, #32]
  4043ec:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4043f0:	f8cd b01c 	str.w	fp, [sp, #28]
  4043f4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4043f8:	930a      	str	r3, [sp, #40]	; 0x28
  4043fa:	9312      	str	r3, [sp, #72]	; 0x48
  4043fc:	910e      	str	r1, [sp, #56]	; 0x38
  4043fe:	ae28      	add	r6, sp, #160	; 0xa0
  404400:	e4e4      	b.n	403dcc <_svfprintf_r+0x238>
  404402:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404404:	e534      	b.n	403e70 <_svfprintf_r+0x2dc>
  404406:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404408:	2b65      	cmp	r3, #101	; 0x65
  40440a:	f340 80a7 	ble.w	40455c <_svfprintf_r+0x9c8>
  40440e:	a815      	add	r0, sp, #84	; 0x54
  404410:	c80d      	ldmia	r0, {r0, r2, r3}
  404412:	9914      	ldr	r1, [sp, #80]	; 0x50
  404414:	f003 fe56 	bl	4080c4 <__aeabi_dcmpeq>
  404418:	2800      	cmp	r0, #0
  40441a:	f000 8150 	beq.w	4046be <_svfprintf_r+0xb2a>
  40441e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404420:	4a20      	ldr	r2, [pc, #128]	; (4044a4 <_svfprintf_r+0x910>)
  404422:	f8c8 2000 	str.w	r2, [r8]
  404426:	3301      	adds	r3, #1
  404428:	3401      	adds	r4, #1
  40442a:	2201      	movs	r2, #1
  40442c:	2b07      	cmp	r3, #7
  40442e:	9427      	str	r4, [sp, #156]	; 0x9c
  404430:	9326      	str	r3, [sp, #152]	; 0x98
  404432:	f8c8 2004 	str.w	r2, [r8, #4]
  404436:	f300 836a 	bgt.w	404b0e <_svfprintf_r+0xf7a>
  40443a:	f108 0808 	add.w	r8, r8, #8
  40443e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404440:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404442:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404444:	4293      	cmp	r3, r2
  404446:	db03      	blt.n	404450 <_svfprintf_r+0x8bc>
  404448:	9b07      	ldr	r3, [sp, #28]
  40444a:	07dd      	lsls	r5, r3, #31
  40444c:	f57f ad82 	bpl.w	403f54 <_svfprintf_r+0x3c0>
  404450:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404452:	9919      	ldr	r1, [sp, #100]	; 0x64
  404454:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404456:	f8c8 2000 	str.w	r2, [r8]
  40445a:	3301      	adds	r3, #1
  40445c:	440c      	add	r4, r1
  40445e:	2b07      	cmp	r3, #7
  404460:	f8c8 1004 	str.w	r1, [r8, #4]
  404464:	9427      	str	r4, [sp, #156]	; 0x9c
  404466:	9326      	str	r3, [sp, #152]	; 0x98
  404468:	f300 839e 	bgt.w	404ba8 <_svfprintf_r+0x1014>
  40446c:	f108 0808 	add.w	r8, r8, #8
  404470:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404472:	1e5e      	subs	r6, r3, #1
  404474:	2e00      	cmp	r6, #0
  404476:	f77f ad6d 	ble.w	403f54 <_svfprintf_r+0x3c0>
  40447a:	2e10      	cmp	r6, #16
  40447c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40447e:	4d0a      	ldr	r5, [pc, #40]	; (4044a8 <_svfprintf_r+0x914>)
  404480:	f340 81f5 	ble.w	40486e <_svfprintf_r+0xcda>
  404484:	4622      	mov	r2, r4
  404486:	2710      	movs	r7, #16
  404488:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40448c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40448e:	e013      	b.n	4044b8 <_svfprintf_r+0x924>
  404490:	00408f1c 	.word	0x00408f1c
  404494:	00408f08 	.word	0x00408f08
  404498:	7fefffff 	.word	0x7fefffff
  40449c:	00408efc 	.word	0x00408efc
  4044a0:	00408ef8 	.word	0x00408ef8
  4044a4:	00408f38 	.word	0x00408f38
  4044a8:	00408f4c 	.word	0x00408f4c
  4044ac:	f108 0808 	add.w	r8, r8, #8
  4044b0:	3e10      	subs	r6, #16
  4044b2:	2e10      	cmp	r6, #16
  4044b4:	f340 81da 	ble.w	40486c <_svfprintf_r+0xcd8>
  4044b8:	3301      	adds	r3, #1
  4044ba:	3210      	adds	r2, #16
  4044bc:	2b07      	cmp	r3, #7
  4044be:	9227      	str	r2, [sp, #156]	; 0x9c
  4044c0:	9326      	str	r3, [sp, #152]	; 0x98
  4044c2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4044c6:	ddf1      	ble.n	4044ac <_svfprintf_r+0x918>
  4044c8:	aa25      	add	r2, sp, #148	; 0x94
  4044ca:	4621      	mov	r1, r4
  4044cc:	4658      	mov	r0, fp
  4044ce:	f002 fd65 	bl	406f9c <__ssprint_r>
  4044d2:	2800      	cmp	r0, #0
  4044d4:	f47f ac30 	bne.w	403d38 <_svfprintf_r+0x1a4>
  4044d8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4044da:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4044dc:	46c8      	mov	r8, r9
  4044de:	e7e7      	b.n	4044b0 <_svfprintf_r+0x91c>
  4044e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4044e2:	9a08      	ldr	r2, [sp, #32]
  4044e4:	1a9f      	subs	r7, r3, r2
  4044e6:	2f00      	cmp	r7, #0
  4044e8:	f77f ace5 	ble.w	403eb6 <_svfprintf_r+0x322>
  4044ec:	2f10      	cmp	r7, #16
  4044ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4044f0:	4db6      	ldr	r5, [pc, #728]	; (4047cc <_svfprintf_r+0xc38>)
  4044f2:	dd27      	ble.n	404544 <_svfprintf_r+0x9b0>
  4044f4:	4642      	mov	r2, r8
  4044f6:	4621      	mov	r1, r4
  4044f8:	46b0      	mov	r8, r6
  4044fa:	f04f 0b10 	mov.w	fp, #16
  4044fe:	462e      	mov	r6, r5
  404500:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404502:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404504:	e004      	b.n	404510 <_svfprintf_r+0x97c>
  404506:	3f10      	subs	r7, #16
  404508:	2f10      	cmp	r7, #16
  40450a:	f102 0208 	add.w	r2, r2, #8
  40450e:	dd15      	ble.n	40453c <_svfprintf_r+0x9a8>
  404510:	3301      	adds	r3, #1
  404512:	3110      	adds	r1, #16
  404514:	2b07      	cmp	r3, #7
  404516:	9127      	str	r1, [sp, #156]	; 0x9c
  404518:	9326      	str	r3, [sp, #152]	; 0x98
  40451a:	e882 0840 	stmia.w	r2, {r6, fp}
  40451e:	ddf2      	ble.n	404506 <_svfprintf_r+0x972>
  404520:	aa25      	add	r2, sp, #148	; 0x94
  404522:	4629      	mov	r1, r5
  404524:	4620      	mov	r0, r4
  404526:	f002 fd39 	bl	406f9c <__ssprint_r>
  40452a:	2800      	cmp	r0, #0
  40452c:	f47f ac04 	bne.w	403d38 <_svfprintf_r+0x1a4>
  404530:	3f10      	subs	r7, #16
  404532:	2f10      	cmp	r7, #16
  404534:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404536:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404538:	464a      	mov	r2, r9
  40453a:	dce9      	bgt.n	404510 <_svfprintf_r+0x97c>
  40453c:	4635      	mov	r5, r6
  40453e:	460c      	mov	r4, r1
  404540:	4646      	mov	r6, r8
  404542:	4690      	mov	r8, r2
  404544:	3301      	adds	r3, #1
  404546:	443c      	add	r4, r7
  404548:	2b07      	cmp	r3, #7
  40454a:	9427      	str	r4, [sp, #156]	; 0x9c
  40454c:	9326      	str	r3, [sp, #152]	; 0x98
  40454e:	e888 00a0 	stmia.w	r8, {r5, r7}
  404552:	f300 8232 	bgt.w	4049ba <_svfprintf_r+0xe26>
  404556:	f108 0808 	add.w	r8, r8, #8
  40455a:	e4ac      	b.n	403eb6 <_svfprintf_r+0x322>
  40455c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40455e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404560:	2b01      	cmp	r3, #1
  404562:	f340 81fe 	ble.w	404962 <_svfprintf_r+0xdce>
  404566:	3701      	adds	r7, #1
  404568:	3401      	adds	r4, #1
  40456a:	2301      	movs	r3, #1
  40456c:	2f07      	cmp	r7, #7
  40456e:	9427      	str	r4, [sp, #156]	; 0x9c
  404570:	9726      	str	r7, [sp, #152]	; 0x98
  404572:	f8c8 6000 	str.w	r6, [r8]
  404576:	f8c8 3004 	str.w	r3, [r8, #4]
  40457a:	f300 8203 	bgt.w	404984 <_svfprintf_r+0xdf0>
  40457e:	f108 0808 	add.w	r8, r8, #8
  404582:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404584:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  404586:	f8c8 3000 	str.w	r3, [r8]
  40458a:	3701      	adds	r7, #1
  40458c:	4414      	add	r4, r2
  40458e:	2f07      	cmp	r7, #7
  404590:	9427      	str	r4, [sp, #156]	; 0x9c
  404592:	9726      	str	r7, [sp, #152]	; 0x98
  404594:	f8c8 2004 	str.w	r2, [r8, #4]
  404598:	f300 8200 	bgt.w	40499c <_svfprintf_r+0xe08>
  40459c:	f108 0808 	add.w	r8, r8, #8
  4045a0:	a815      	add	r0, sp, #84	; 0x54
  4045a2:	c80d      	ldmia	r0, {r0, r2, r3}
  4045a4:	9914      	ldr	r1, [sp, #80]	; 0x50
  4045a6:	f003 fd8d 	bl	4080c4 <__aeabi_dcmpeq>
  4045aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4045ac:	2800      	cmp	r0, #0
  4045ae:	f040 8101 	bne.w	4047b4 <_svfprintf_r+0xc20>
  4045b2:	3b01      	subs	r3, #1
  4045b4:	3701      	adds	r7, #1
  4045b6:	3601      	adds	r6, #1
  4045b8:	441c      	add	r4, r3
  4045ba:	2f07      	cmp	r7, #7
  4045bc:	9726      	str	r7, [sp, #152]	; 0x98
  4045be:	9427      	str	r4, [sp, #156]	; 0x9c
  4045c0:	f8c8 6000 	str.w	r6, [r8]
  4045c4:	f8c8 3004 	str.w	r3, [r8, #4]
  4045c8:	f300 8127 	bgt.w	40481a <_svfprintf_r+0xc86>
  4045cc:	f108 0808 	add.w	r8, r8, #8
  4045d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4045d2:	f8c8 2004 	str.w	r2, [r8, #4]
  4045d6:	3701      	adds	r7, #1
  4045d8:	4414      	add	r4, r2
  4045da:	ab21      	add	r3, sp, #132	; 0x84
  4045dc:	2f07      	cmp	r7, #7
  4045de:	9427      	str	r4, [sp, #156]	; 0x9c
  4045e0:	9726      	str	r7, [sp, #152]	; 0x98
  4045e2:	f8c8 3000 	str.w	r3, [r8]
  4045e6:	f77f acb3 	ble.w	403f50 <_svfprintf_r+0x3bc>
  4045ea:	aa25      	add	r2, sp, #148	; 0x94
  4045ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4045ee:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045f0:	f002 fcd4 	bl	406f9c <__ssprint_r>
  4045f4:	2800      	cmp	r0, #0
  4045f6:	f47f ab9f 	bne.w	403d38 <_svfprintf_r+0x1a4>
  4045fa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4045fc:	46c8      	mov	r8, r9
  4045fe:	e4a9      	b.n	403f54 <_svfprintf_r+0x3c0>
  404600:	aa25      	add	r2, sp, #148	; 0x94
  404602:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404604:	980c      	ldr	r0, [sp, #48]	; 0x30
  404606:	f002 fcc9 	bl	406f9c <__ssprint_r>
  40460a:	2800      	cmp	r0, #0
  40460c:	f43f aceb 	beq.w	403fe6 <_svfprintf_r+0x452>
  404610:	f7ff bb92 	b.w	403d38 <_svfprintf_r+0x1a4>
  404614:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404618:	2b01      	cmp	r3, #1
  40461a:	f000 8134 	beq.w	404886 <_svfprintf_r+0xcf2>
  40461e:	2b02      	cmp	r3, #2
  404620:	d125      	bne.n	40466e <_svfprintf_r+0xada>
  404622:	f8cd b01c 	str.w	fp, [sp, #28]
  404626:	2400      	movs	r4, #0
  404628:	2500      	movs	r5, #0
  40462a:	e61e      	b.n	40426a <_svfprintf_r+0x6d6>
  40462c:	aa25      	add	r2, sp, #148	; 0x94
  40462e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404630:	980c      	ldr	r0, [sp, #48]	; 0x30
  404632:	f002 fcb3 	bl	406f9c <__ssprint_r>
  404636:	2800      	cmp	r0, #0
  404638:	f47f ab7e 	bne.w	403d38 <_svfprintf_r+0x1a4>
  40463c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40463e:	46c8      	mov	r8, r9
  404640:	e475      	b.n	403f2e <_svfprintf_r+0x39a>
  404642:	aa25      	add	r2, sp, #148	; 0x94
  404644:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404646:	980c      	ldr	r0, [sp, #48]	; 0x30
  404648:	f002 fca8 	bl	406f9c <__ssprint_r>
  40464c:	2800      	cmp	r0, #0
  40464e:	f47f ab73 	bne.w	403d38 <_svfprintf_r+0x1a4>
  404652:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404654:	46c8      	mov	r8, r9
  404656:	e41b      	b.n	403e90 <_svfprintf_r+0x2fc>
  404658:	aa25      	add	r2, sp, #148	; 0x94
  40465a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40465c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40465e:	f002 fc9d 	bl	406f9c <__ssprint_r>
  404662:	2800      	cmp	r0, #0
  404664:	f47f ab68 	bne.w	403d38 <_svfprintf_r+0x1a4>
  404668:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40466a:	46c8      	mov	r8, r9
  40466c:	e420      	b.n	403eb0 <_svfprintf_r+0x31c>
  40466e:	f8cd b01c 	str.w	fp, [sp, #28]
  404672:	2400      	movs	r4, #0
  404674:	2500      	movs	r5, #0
  404676:	4649      	mov	r1, r9
  404678:	e000      	b.n	40467c <_svfprintf_r+0xae8>
  40467a:	4631      	mov	r1, r6
  40467c:	08e2      	lsrs	r2, r4, #3
  40467e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404682:	08e8      	lsrs	r0, r5, #3
  404684:	f004 0307 	and.w	r3, r4, #7
  404688:	4605      	mov	r5, r0
  40468a:	4614      	mov	r4, r2
  40468c:	3330      	adds	r3, #48	; 0x30
  40468e:	ea54 0205 	orrs.w	r2, r4, r5
  404692:	f801 3c01 	strb.w	r3, [r1, #-1]
  404696:	f101 36ff 	add.w	r6, r1, #4294967295
  40469a:	d1ee      	bne.n	40467a <_svfprintf_r+0xae6>
  40469c:	9a07      	ldr	r2, [sp, #28]
  40469e:	07d2      	lsls	r2, r2, #31
  4046a0:	f57f adf3 	bpl.w	40428a <_svfprintf_r+0x6f6>
  4046a4:	2b30      	cmp	r3, #48	; 0x30
  4046a6:	f43f adf0 	beq.w	40428a <_svfprintf_r+0x6f6>
  4046aa:	3902      	subs	r1, #2
  4046ac:	2330      	movs	r3, #48	; 0x30
  4046ae:	f806 3c01 	strb.w	r3, [r6, #-1]
  4046b2:	eba9 0301 	sub.w	r3, r9, r1
  4046b6:	930e      	str	r3, [sp, #56]	; 0x38
  4046b8:	460e      	mov	r6, r1
  4046ba:	f7ff bb7b 	b.w	403db4 <_svfprintf_r+0x220>
  4046be:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4046c0:	2900      	cmp	r1, #0
  4046c2:	f340 822e 	ble.w	404b22 <_svfprintf_r+0xf8e>
  4046c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4046c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4046ca:	4293      	cmp	r3, r2
  4046cc:	bfa8      	it	ge
  4046ce:	4613      	movge	r3, r2
  4046d0:	2b00      	cmp	r3, #0
  4046d2:	461f      	mov	r7, r3
  4046d4:	dd0d      	ble.n	4046f2 <_svfprintf_r+0xb5e>
  4046d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4046d8:	f8c8 6000 	str.w	r6, [r8]
  4046dc:	3301      	adds	r3, #1
  4046de:	443c      	add	r4, r7
  4046e0:	2b07      	cmp	r3, #7
  4046e2:	9427      	str	r4, [sp, #156]	; 0x9c
  4046e4:	f8c8 7004 	str.w	r7, [r8, #4]
  4046e8:	9326      	str	r3, [sp, #152]	; 0x98
  4046ea:	f300 831f 	bgt.w	404d2c <_svfprintf_r+0x1198>
  4046ee:	f108 0808 	add.w	r8, r8, #8
  4046f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4046f4:	2f00      	cmp	r7, #0
  4046f6:	bfa8      	it	ge
  4046f8:	1bdb      	subge	r3, r3, r7
  4046fa:	2b00      	cmp	r3, #0
  4046fc:	461f      	mov	r7, r3
  4046fe:	f340 80d6 	ble.w	4048ae <_svfprintf_r+0xd1a>
  404702:	2f10      	cmp	r7, #16
  404704:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404706:	4d31      	ldr	r5, [pc, #196]	; (4047cc <_svfprintf_r+0xc38>)
  404708:	f340 81ed 	ble.w	404ae6 <_svfprintf_r+0xf52>
  40470c:	4642      	mov	r2, r8
  40470e:	4621      	mov	r1, r4
  404710:	46b0      	mov	r8, r6
  404712:	f04f 0b10 	mov.w	fp, #16
  404716:	462e      	mov	r6, r5
  404718:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40471a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40471c:	e004      	b.n	404728 <_svfprintf_r+0xb94>
  40471e:	3208      	adds	r2, #8
  404720:	3f10      	subs	r7, #16
  404722:	2f10      	cmp	r7, #16
  404724:	f340 81db 	ble.w	404ade <_svfprintf_r+0xf4a>
  404728:	3301      	adds	r3, #1
  40472a:	3110      	adds	r1, #16
  40472c:	2b07      	cmp	r3, #7
  40472e:	9127      	str	r1, [sp, #156]	; 0x9c
  404730:	9326      	str	r3, [sp, #152]	; 0x98
  404732:	e882 0840 	stmia.w	r2, {r6, fp}
  404736:	ddf2      	ble.n	40471e <_svfprintf_r+0xb8a>
  404738:	aa25      	add	r2, sp, #148	; 0x94
  40473a:	4629      	mov	r1, r5
  40473c:	4620      	mov	r0, r4
  40473e:	f002 fc2d 	bl	406f9c <__ssprint_r>
  404742:	2800      	cmp	r0, #0
  404744:	f47f aaf8 	bne.w	403d38 <_svfprintf_r+0x1a4>
  404748:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40474a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40474c:	464a      	mov	r2, r9
  40474e:	e7e7      	b.n	404720 <_svfprintf_r+0xb8c>
  404750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404752:	930e      	str	r3, [sp, #56]	; 0x38
  404754:	464e      	mov	r6, r9
  404756:	f7ff bb2d 	b.w	403db4 <_svfprintf_r+0x220>
  40475a:	2d00      	cmp	r5, #0
  40475c:	bf08      	it	eq
  40475e:	2c0a      	cmpeq	r4, #10
  404760:	f0c0 808f 	bcc.w	404882 <_svfprintf_r+0xcee>
  404764:	464e      	mov	r6, r9
  404766:	4620      	mov	r0, r4
  404768:	4629      	mov	r1, r5
  40476a:	220a      	movs	r2, #10
  40476c:	2300      	movs	r3, #0
  40476e:	f7fe fd89 	bl	403284 <__aeabi_uldivmod>
  404772:	3230      	adds	r2, #48	; 0x30
  404774:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404778:	4620      	mov	r0, r4
  40477a:	4629      	mov	r1, r5
  40477c:	2300      	movs	r3, #0
  40477e:	220a      	movs	r2, #10
  404780:	f7fe fd80 	bl	403284 <__aeabi_uldivmod>
  404784:	4604      	mov	r4, r0
  404786:	460d      	mov	r5, r1
  404788:	ea54 0305 	orrs.w	r3, r4, r5
  40478c:	d1eb      	bne.n	404766 <_svfprintf_r+0xbd2>
  40478e:	eba9 0306 	sub.w	r3, r9, r6
  404792:	930e      	str	r3, [sp, #56]	; 0x38
  404794:	f7ff bb0e 	b.w	403db4 <_svfprintf_r+0x220>
  404798:	aa25      	add	r2, sp, #148	; 0x94
  40479a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40479c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40479e:	f002 fbfd 	bl	406f9c <__ssprint_r>
  4047a2:	2800      	cmp	r0, #0
  4047a4:	f47f aac8 	bne.w	403d38 <_svfprintf_r+0x1a4>
  4047a8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4047ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047ae:	46c8      	mov	r8, r9
  4047b0:	f7ff bb5e 	b.w	403e70 <_svfprintf_r+0x2dc>
  4047b4:	1e5e      	subs	r6, r3, #1
  4047b6:	2e00      	cmp	r6, #0
  4047b8:	f77f af0a 	ble.w	4045d0 <_svfprintf_r+0xa3c>
  4047bc:	2e10      	cmp	r6, #16
  4047be:	4d03      	ldr	r5, [pc, #12]	; (4047cc <_svfprintf_r+0xc38>)
  4047c0:	dd22      	ble.n	404808 <_svfprintf_r+0xc74>
  4047c2:	4622      	mov	r2, r4
  4047c4:	f04f 0b10 	mov.w	fp, #16
  4047c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4047ca:	e006      	b.n	4047da <_svfprintf_r+0xc46>
  4047cc:	00408f4c 	.word	0x00408f4c
  4047d0:	3e10      	subs	r6, #16
  4047d2:	2e10      	cmp	r6, #16
  4047d4:	f108 0808 	add.w	r8, r8, #8
  4047d8:	dd15      	ble.n	404806 <_svfprintf_r+0xc72>
  4047da:	3701      	adds	r7, #1
  4047dc:	3210      	adds	r2, #16
  4047de:	2f07      	cmp	r7, #7
  4047e0:	9227      	str	r2, [sp, #156]	; 0x9c
  4047e2:	9726      	str	r7, [sp, #152]	; 0x98
  4047e4:	e888 0820 	stmia.w	r8, {r5, fp}
  4047e8:	ddf2      	ble.n	4047d0 <_svfprintf_r+0xc3c>
  4047ea:	aa25      	add	r2, sp, #148	; 0x94
  4047ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4047ee:	4620      	mov	r0, r4
  4047f0:	f002 fbd4 	bl	406f9c <__ssprint_r>
  4047f4:	2800      	cmp	r0, #0
  4047f6:	f47f aa9f 	bne.w	403d38 <_svfprintf_r+0x1a4>
  4047fa:	3e10      	subs	r6, #16
  4047fc:	2e10      	cmp	r6, #16
  4047fe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404800:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404802:	46c8      	mov	r8, r9
  404804:	dce9      	bgt.n	4047da <_svfprintf_r+0xc46>
  404806:	4614      	mov	r4, r2
  404808:	3701      	adds	r7, #1
  40480a:	4434      	add	r4, r6
  40480c:	2f07      	cmp	r7, #7
  40480e:	9427      	str	r4, [sp, #156]	; 0x9c
  404810:	9726      	str	r7, [sp, #152]	; 0x98
  404812:	e888 0060 	stmia.w	r8, {r5, r6}
  404816:	f77f aed9 	ble.w	4045cc <_svfprintf_r+0xa38>
  40481a:	aa25      	add	r2, sp, #148	; 0x94
  40481c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40481e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404820:	f002 fbbc 	bl	406f9c <__ssprint_r>
  404824:	2800      	cmp	r0, #0
  404826:	f47f aa87 	bne.w	403d38 <_svfprintf_r+0x1a4>
  40482a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40482c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40482e:	46c8      	mov	r8, r9
  404830:	e6ce      	b.n	4045d0 <_svfprintf_r+0xa3c>
  404832:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404834:	6814      	ldr	r4, [r2, #0]
  404836:	4613      	mov	r3, r2
  404838:	3304      	adds	r3, #4
  40483a:	17e5      	asrs	r5, r4, #31
  40483c:	930f      	str	r3, [sp, #60]	; 0x3c
  40483e:	4622      	mov	r2, r4
  404840:	462b      	mov	r3, r5
  404842:	e4fa      	b.n	40423a <_svfprintf_r+0x6a6>
  404844:	3204      	adds	r2, #4
  404846:	681c      	ldr	r4, [r3, #0]
  404848:	920f      	str	r2, [sp, #60]	; 0x3c
  40484a:	2301      	movs	r3, #1
  40484c:	2500      	movs	r5, #0
  40484e:	f7ff ba94 	b.w	403d7a <_svfprintf_r+0x1e6>
  404852:	681c      	ldr	r4, [r3, #0]
  404854:	3304      	adds	r3, #4
  404856:	930f      	str	r3, [sp, #60]	; 0x3c
  404858:	2500      	movs	r5, #0
  40485a:	e421      	b.n	4040a0 <_svfprintf_r+0x50c>
  40485c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40485e:	460a      	mov	r2, r1
  404860:	3204      	adds	r2, #4
  404862:	680c      	ldr	r4, [r1, #0]
  404864:	920f      	str	r2, [sp, #60]	; 0x3c
  404866:	2500      	movs	r5, #0
  404868:	f7ff ba87 	b.w	403d7a <_svfprintf_r+0x1e6>
  40486c:	4614      	mov	r4, r2
  40486e:	3301      	adds	r3, #1
  404870:	4434      	add	r4, r6
  404872:	2b07      	cmp	r3, #7
  404874:	9427      	str	r4, [sp, #156]	; 0x9c
  404876:	9326      	str	r3, [sp, #152]	; 0x98
  404878:	e888 0060 	stmia.w	r8, {r5, r6}
  40487c:	f77f ab68 	ble.w	403f50 <_svfprintf_r+0x3bc>
  404880:	e6b3      	b.n	4045ea <_svfprintf_r+0xa56>
  404882:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404886:	f8cd b01c 	str.w	fp, [sp, #28]
  40488a:	ae42      	add	r6, sp, #264	; 0x108
  40488c:	3430      	adds	r4, #48	; 0x30
  40488e:	2301      	movs	r3, #1
  404890:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404894:	930e      	str	r3, [sp, #56]	; 0x38
  404896:	f7ff ba8d 	b.w	403db4 <_svfprintf_r+0x220>
  40489a:	aa25      	add	r2, sp, #148	; 0x94
  40489c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40489e:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048a0:	f002 fb7c 	bl	406f9c <__ssprint_r>
  4048a4:	2800      	cmp	r0, #0
  4048a6:	f47f aa47 	bne.w	403d38 <_svfprintf_r+0x1a4>
  4048aa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4048ac:	46c8      	mov	r8, r9
  4048ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4048b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4048b2:	429a      	cmp	r2, r3
  4048b4:	db44      	blt.n	404940 <_svfprintf_r+0xdac>
  4048b6:	9b07      	ldr	r3, [sp, #28]
  4048b8:	07d9      	lsls	r1, r3, #31
  4048ba:	d441      	bmi.n	404940 <_svfprintf_r+0xdac>
  4048bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4048be:	9812      	ldr	r0, [sp, #72]	; 0x48
  4048c0:	1a9a      	subs	r2, r3, r2
  4048c2:	1a1d      	subs	r5, r3, r0
  4048c4:	4295      	cmp	r5, r2
  4048c6:	bfa8      	it	ge
  4048c8:	4615      	movge	r5, r2
  4048ca:	2d00      	cmp	r5, #0
  4048cc:	dd0e      	ble.n	4048ec <_svfprintf_r+0xd58>
  4048ce:	9926      	ldr	r1, [sp, #152]	; 0x98
  4048d0:	f8c8 5004 	str.w	r5, [r8, #4]
  4048d4:	3101      	adds	r1, #1
  4048d6:	4406      	add	r6, r0
  4048d8:	442c      	add	r4, r5
  4048da:	2907      	cmp	r1, #7
  4048dc:	f8c8 6000 	str.w	r6, [r8]
  4048e0:	9427      	str	r4, [sp, #156]	; 0x9c
  4048e2:	9126      	str	r1, [sp, #152]	; 0x98
  4048e4:	f300 823b 	bgt.w	404d5e <_svfprintf_r+0x11ca>
  4048e8:	f108 0808 	add.w	r8, r8, #8
  4048ec:	2d00      	cmp	r5, #0
  4048ee:	bfac      	ite	ge
  4048f0:	1b56      	subge	r6, r2, r5
  4048f2:	4616      	movlt	r6, r2
  4048f4:	2e00      	cmp	r6, #0
  4048f6:	f77f ab2d 	ble.w	403f54 <_svfprintf_r+0x3c0>
  4048fa:	2e10      	cmp	r6, #16
  4048fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048fe:	4db0      	ldr	r5, [pc, #704]	; (404bc0 <_svfprintf_r+0x102c>)
  404900:	ddb5      	ble.n	40486e <_svfprintf_r+0xcda>
  404902:	4622      	mov	r2, r4
  404904:	2710      	movs	r7, #16
  404906:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40490a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40490c:	e004      	b.n	404918 <_svfprintf_r+0xd84>
  40490e:	f108 0808 	add.w	r8, r8, #8
  404912:	3e10      	subs	r6, #16
  404914:	2e10      	cmp	r6, #16
  404916:	dda9      	ble.n	40486c <_svfprintf_r+0xcd8>
  404918:	3301      	adds	r3, #1
  40491a:	3210      	adds	r2, #16
  40491c:	2b07      	cmp	r3, #7
  40491e:	9227      	str	r2, [sp, #156]	; 0x9c
  404920:	9326      	str	r3, [sp, #152]	; 0x98
  404922:	e888 00a0 	stmia.w	r8, {r5, r7}
  404926:	ddf2      	ble.n	40490e <_svfprintf_r+0xd7a>
  404928:	aa25      	add	r2, sp, #148	; 0x94
  40492a:	4621      	mov	r1, r4
  40492c:	4658      	mov	r0, fp
  40492e:	f002 fb35 	bl	406f9c <__ssprint_r>
  404932:	2800      	cmp	r0, #0
  404934:	f47f aa00 	bne.w	403d38 <_svfprintf_r+0x1a4>
  404938:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40493a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40493c:	46c8      	mov	r8, r9
  40493e:	e7e8      	b.n	404912 <_svfprintf_r+0xd7e>
  404940:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404942:	9819      	ldr	r0, [sp, #100]	; 0x64
  404944:	991a      	ldr	r1, [sp, #104]	; 0x68
  404946:	f8c8 1000 	str.w	r1, [r8]
  40494a:	3301      	adds	r3, #1
  40494c:	4404      	add	r4, r0
  40494e:	2b07      	cmp	r3, #7
  404950:	9427      	str	r4, [sp, #156]	; 0x9c
  404952:	f8c8 0004 	str.w	r0, [r8, #4]
  404956:	9326      	str	r3, [sp, #152]	; 0x98
  404958:	f300 81f5 	bgt.w	404d46 <_svfprintf_r+0x11b2>
  40495c:	f108 0808 	add.w	r8, r8, #8
  404960:	e7ac      	b.n	4048bc <_svfprintf_r+0xd28>
  404962:	9b07      	ldr	r3, [sp, #28]
  404964:	07da      	lsls	r2, r3, #31
  404966:	f53f adfe 	bmi.w	404566 <_svfprintf_r+0x9d2>
  40496a:	3701      	adds	r7, #1
  40496c:	3401      	adds	r4, #1
  40496e:	2301      	movs	r3, #1
  404970:	2f07      	cmp	r7, #7
  404972:	9427      	str	r4, [sp, #156]	; 0x9c
  404974:	9726      	str	r7, [sp, #152]	; 0x98
  404976:	f8c8 6000 	str.w	r6, [r8]
  40497a:	f8c8 3004 	str.w	r3, [r8, #4]
  40497e:	f77f ae25 	ble.w	4045cc <_svfprintf_r+0xa38>
  404982:	e74a      	b.n	40481a <_svfprintf_r+0xc86>
  404984:	aa25      	add	r2, sp, #148	; 0x94
  404986:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404988:	980c      	ldr	r0, [sp, #48]	; 0x30
  40498a:	f002 fb07 	bl	406f9c <__ssprint_r>
  40498e:	2800      	cmp	r0, #0
  404990:	f47f a9d2 	bne.w	403d38 <_svfprintf_r+0x1a4>
  404994:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404996:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404998:	46c8      	mov	r8, r9
  40499a:	e5f2      	b.n	404582 <_svfprintf_r+0x9ee>
  40499c:	aa25      	add	r2, sp, #148	; 0x94
  40499e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4049a0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049a2:	f002 fafb 	bl	406f9c <__ssprint_r>
  4049a6:	2800      	cmp	r0, #0
  4049a8:	f47f a9c6 	bne.w	403d38 <_svfprintf_r+0x1a4>
  4049ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4049ae:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4049b0:	46c8      	mov	r8, r9
  4049b2:	e5f5      	b.n	4045a0 <_svfprintf_r+0xa0c>
  4049b4:	464e      	mov	r6, r9
  4049b6:	f7ff b9fd 	b.w	403db4 <_svfprintf_r+0x220>
  4049ba:	aa25      	add	r2, sp, #148	; 0x94
  4049bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4049be:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049c0:	f002 faec 	bl	406f9c <__ssprint_r>
  4049c4:	2800      	cmp	r0, #0
  4049c6:	f47f a9b7 	bne.w	403d38 <_svfprintf_r+0x1a4>
  4049ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4049cc:	46c8      	mov	r8, r9
  4049ce:	f7ff ba72 	b.w	403eb6 <_svfprintf_r+0x322>
  4049d2:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4049d4:	4622      	mov	r2, r4
  4049d6:	4620      	mov	r0, r4
  4049d8:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4049da:	4623      	mov	r3, r4
  4049dc:	4621      	mov	r1, r4
  4049de:	f003 fba3 	bl	408128 <__aeabi_dcmpun>
  4049e2:	2800      	cmp	r0, #0
  4049e4:	f040 8286 	bne.w	404ef4 <_svfprintf_r+0x1360>
  4049e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4049ea:	3301      	adds	r3, #1
  4049ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4049ee:	f023 0320 	bic.w	r3, r3, #32
  4049f2:	930e      	str	r3, [sp, #56]	; 0x38
  4049f4:	f000 81e2 	beq.w	404dbc <_svfprintf_r+0x1228>
  4049f8:	2b47      	cmp	r3, #71	; 0x47
  4049fa:	f000 811e 	beq.w	404c3a <_svfprintf_r+0x10a6>
  4049fe:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  404a02:	9307      	str	r3, [sp, #28]
  404a04:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404a06:	1e1f      	subs	r7, r3, #0
  404a08:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404a0a:	9308      	str	r3, [sp, #32]
  404a0c:	bfbb      	ittet	lt
  404a0e:	463b      	movlt	r3, r7
  404a10:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404a14:	2300      	movge	r3, #0
  404a16:	232d      	movlt	r3, #45	; 0x2d
  404a18:	9310      	str	r3, [sp, #64]	; 0x40
  404a1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404a1c:	2b66      	cmp	r3, #102	; 0x66
  404a1e:	f000 81bb 	beq.w	404d98 <_svfprintf_r+0x1204>
  404a22:	2b46      	cmp	r3, #70	; 0x46
  404a24:	f000 80df 	beq.w	404be6 <_svfprintf_r+0x1052>
  404a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404a2a:	9a08      	ldr	r2, [sp, #32]
  404a2c:	2b45      	cmp	r3, #69	; 0x45
  404a2e:	bf0c      	ite	eq
  404a30:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  404a32:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404a34:	a823      	add	r0, sp, #140	; 0x8c
  404a36:	a920      	add	r1, sp, #128	; 0x80
  404a38:	bf08      	it	eq
  404a3a:	1c5d      	addeq	r5, r3, #1
  404a3c:	9004      	str	r0, [sp, #16]
  404a3e:	9103      	str	r1, [sp, #12]
  404a40:	a81f      	add	r0, sp, #124	; 0x7c
  404a42:	2102      	movs	r1, #2
  404a44:	463b      	mov	r3, r7
  404a46:	9002      	str	r0, [sp, #8]
  404a48:	9501      	str	r5, [sp, #4]
  404a4a:	9100      	str	r1, [sp, #0]
  404a4c:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a4e:	f000 fb73 	bl	405138 <_dtoa_r>
  404a52:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404a54:	2b67      	cmp	r3, #103	; 0x67
  404a56:	4606      	mov	r6, r0
  404a58:	f040 81e0 	bne.w	404e1c <_svfprintf_r+0x1288>
  404a5c:	f01b 0f01 	tst.w	fp, #1
  404a60:	f000 8246 	beq.w	404ef0 <_svfprintf_r+0x135c>
  404a64:	1974      	adds	r4, r6, r5
  404a66:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404a68:	9808      	ldr	r0, [sp, #32]
  404a6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404a6c:	4639      	mov	r1, r7
  404a6e:	f003 fb29 	bl	4080c4 <__aeabi_dcmpeq>
  404a72:	2800      	cmp	r0, #0
  404a74:	f040 8165 	bne.w	404d42 <_svfprintf_r+0x11ae>
  404a78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404a7a:	42a3      	cmp	r3, r4
  404a7c:	d206      	bcs.n	404a8c <_svfprintf_r+0xef8>
  404a7e:	2130      	movs	r1, #48	; 0x30
  404a80:	1c5a      	adds	r2, r3, #1
  404a82:	9223      	str	r2, [sp, #140]	; 0x8c
  404a84:	7019      	strb	r1, [r3, #0]
  404a86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404a88:	429c      	cmp	r4, r3
  404a8a:	d8f9      	bhi.n	404a80 <_svfprintf_r+0xeec>
  404a8c:	1b9b      	subs	r3, r3, r6
  404a8e:	9313      	str	r3, [sp, #76]	; 0x4c
  404a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404a92:	2b47      	cmp	r3, #71	; 0x47
  404a94:	f000 80e9 	beq.w	404c6a <_svfprintf_r+0x10d6>
  404a98:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404a9a:	2b65      	cmp	r3, #101	; 0x65
  404a9c:	f340 81cd 	ble.w	404e3a <_svfprintf_r+0x12a6>
  404aa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404aa2:	2b66      	cmp	r3, #102	; 0x66
  404aa4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404aa6:	9312      	str	r3, [sp, #72]	; 0x48
  404aa8:	f000 819e 	beq.w	404de8 <_svfprintf_r+0x1254>
  404aac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404aae:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404ab0:	4619      	mov	r1, r3
  404ab2:	4291      	cmp	r1, r2
  404ab4:	f300 818a 	bgt.w	404dcc <_svfprintf_r+0x1238>
  404ab8:	f01b 0f01 	tst.w	fp, #1
  404abc:	f040 8213 	bne.w	404ee6 <_svfprintf_r+0x1352>
  404ac0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404ac4:	9308      	str	r3, [sp, #32]
  404ac6:	2367      	movs	r3, #103	; 0x67
  404ac8:	920e      	str	r2, [sp, #56]	; 0x38
  404aca:	9311      	str	r3, [sp, #68]	; 0x44
  404acc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404ace:	2b00      	cmp	r3, #0
  404ad0:	f040 80c4 	bne.w	404c5c <_svfprintf_r+0x10c8>
  404ad4:	930a      	str	r3, [sp, #40]	; 0x28
  404ad6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404ada:	f7ff b973 	b.w	403dc4 <_svfprintf_r+0x230>
  404ade:	4635      	mov	r5, r6
  404ae0:	460c      	mov	r4, r1
  404ae2:	4646      	mov	r6, r8
  404ae4:	4690      	mov	r8, r2
  404ae6:	3301      	adds	r3, #1
  404ae8:	443c      	add	r4, r7
  404aea:	2b07      	cmp	r3, #7
  404aec:	9427      	str	r4, [sp, #156]	; 0x9c
  404aee:	9326      	str	r3, [sp, #152]	; 0x98
  404af0:	e888 00a0 	stmia.w	r8, {r5, r7}
  404af4:	f73f aed1 	bgt.w	40489a <_svfprintf_r+0xd06>
  404af8:	f108 0808 	add.w	r8, r8, #8
  404afc:	e6d7      	b.n	4048ae <_svfprintf_r+0xd1a>
  404afe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404b00:	6813      	ldr	r3, [r2, #0]
  404b02:	3204      	adds	r2, #4
  404b04:	920f      	str	r2, [sp, #60]	; 0x3c
  404b06:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404b08:	601a      	str	r2, [r3, #0]
  404b0a:	f7ff b86a 	b.w	403be2 <_svfprintf_r+0x4e>
  404b0e:	aa25      	add	r2, sp, #148	; 0x94
  404b10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b12:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b14:	f002 fa42 	bl	406f9c <__ssprint_r>
  404b18:	2800      	cmp	r0, #0
  404b1a:	f47f a90d 	bne.w	403d38 <_svfprintf_r+0x1a4>
  404b1e:	46c8      	mov	r8, r9
  404b20:	e48d      	b.n	40443e <_svfprintf_r+0x8aa>
  404b22:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b24:	4a27      	ldr	r2, [pc, #156]	; (404bc4 <_svfprintf_r+0x1030>)
  404b26:	f8c8 2000 	str.w	r2, [r8]
  404b2a:	3301      	adds	r3, #1
  404b2c:	3401      	adds	r4, #1
  404b2e:	2201      	movs	r2, #1
  404b30:	2b07      	cmp	r3, #7
  404b32:	9427      	str	r4, [sp, #156]	; 0x9c
  404b34:	9326      	str	r3, [sp, #152]	; 0x98
  404b36:	f8c8 2004 	str.w	r2, [r8, #4]
  404b3a:	dc72      	bgt.n	404c22 <_svfprintf_r+0x108e>
  404b3c:	f108 0808 	add.w	r8, r8, #8
  404b40:	b929      	cbnz	r1, 404b4e <_svfprintf_r+0xfba>
  404b42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404b44:	b91b      	cbnz	r3, 404b4e <_svfprintf_r+0xfba>
  404b46:	9b07      	ldr	r3, [sp, #28]
  404b48:	07d8      	lsls	r0, r3, #31
  404b4a:	f57f aa03 	bpl.w	403f54 <_svfprintf_r+0x3c0>
  404b4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b50:	9819      	ldr	r0, [sp, #100]	; 0x64
  404b52:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404b54:	f8c8 2000 	str.w	r2, [r8]
  404b58:	3301      	adds	r3, #1
  404b5a:	4602      	mov	r2, r0
  404b5c:	4422      	add	r2, r4
  404b5e:	2b07      	cmp	r3, #7
  404b60:	9227      	str	r2, [sp, #156]	; 0x9c
  404b62:	f8c8 0004 	str.w	r0, [r8, #4]
  404b66:	9326      	str	r3, [sp, #152]	; 0x98
  404b68:	f300 818d 	bgt.w	404e86 <_svfprintf_r+0x12f2>
  404b6c:	f108 0808 	add.w	r8, r8, #8
  404b70:	2900      	cmp	r1, #0
  404b72:	f2c0 8165 	blt.w	404e40 <_svfprintf_r+0x12ac>
  404b76:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404b78:	f8c8 6000 	str.w	r6, [r8]
  404b7c:	3301      	adds	r3, #1
  404b7e:	188c      	adds	r4, r1, r2
  404b80:	2b07      	cmp	r3, #7
  404b82:	9427      	str	r4, [sp, #156]	; 0x9c
  404b84:	9326      	str	r3, [sp, #152]	; 0x98
  404b86:	f8c8 1004 	str.w	r1, [r8, #4]
  404b8a:	f77f a9e1 	ble.w	403f50 <_svfprintf_r+0x3bc>
  404b8e:	e52c      	b.n	4045ea <_svfprintf_r+0xa56>
  404b90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404b92:	9909      	ldr	r1, [sp, #36]	; 0x24
  404b94:	6813      	ldr	r3, [r2, #0]
  404b96:	17cd      	asrs	r5, r1, #31
  404b98:	4608      	mov	r0, r1
  404b9a:	3204      	adds	r2, #4
  404b9c:	4629      	mov	r1, r5
  404b9e:	920f      	str	r2, [sp, #60]	; 0x3c
  404ba0:	e9c3 0100 	strd	r0, r1, [r3]
  404ba4:	f7ff b81d 	b.w	403be2 <_svfprintf_r+0x4e>
  404ba8:	aa25      	add	r2, sp, #148	; 0x94
  404baa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404bac:	980c      	ldr	r0, [sp, #48]	; 0x30
  404bae:	f002 f9f5 	bl	406f9c <__ssprint_r>
  404bb2:	2800      	cmp	r0, #0
  404bb4:	f47f a8c0 	bne.w	403d38 <_svfprintf_r+0x1a4>
  404bb8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404bba:	46c8      	mov	r8, r9
  404bbc:	e458      	b.n	404470 <_svfprintf_r+0x8dc>
  404bbe:	bf00      	nop
  404bc0:	00408f4c 	.word	0x00408f4c
  404bc4:	00408f38 	.word	0x00408f38
  404bc8:	2140      	movs	r1, #64	; 0x40
  404bca:	980c      	ldr	r0, [sp, #48]	; 0x30
  404bcc:	f001 fa0a 	bl	405fe4 <_malloc_r>
  404bd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404bd2:	6010      	str	r0, [r2, #0]
  404bd4:	6110      	str	r0, [r2, #16]
  404bd6:	2800      	cmp	r0, #0
  404bd8:	f000 81f2 	beq.w	404fc0 <_svfprintf_r+0x142c>
  404bdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404bde:	2340      	movs	r3, #64	; 0x40
  404be0:	6153      	str	r3, [r2, #20]
  404be2:	f7fe bfee 	b.w	403bc2 <_svfprintf_r+0x2e>
  404be6:	a823      	add	r0, sp, #140	; 0x8c
  404be8:	a920      	add	r1, sp, #128	; 0x80
  404bea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404bec:	9004      	str	r0, [sp, #16]
  404bee:	9103      	str	r1, [sp, #12]
  404bf0:	a81f      	add	r0, sp, #124	; 0x7c
  404bf2:	2103      	movs	r1, #3
  404bf4:	9002      	str	r0, [sp, #8]
  404bf6:	9a08      	ldr	r2, [sp, #32]
  404bf8:	9401      	str	r4, [sp, #4]
  404bfa:	463b      	mov	r3, r7
  404bfc:	9100      	str	r1, [sp, #0]
  404bfe:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c00:	f000 fa9a 	bl	405138 <_dtoa_r>
  404c04:	4625      	mov	r5, r4
  404c06:	4606      	mov	r6, r0
  404c08:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404c0a:	2b46      	cmp	r3, #70	; 0x46
  404c0c:	eb06 0405 	add.w	r4, r6, r5
  404c10:	f47f af29 	bne.w	404a66 <_svfprintf_r+0xed2>
  404c14:	7833      	ldrb	r3, [r6, #0]
  404c16:	2b30      	cmp	r3, #48	; 0x30
  404c18:	f000 8178 	beq.w	404f0c <_svfprintf_r+0x1378>
  404c1c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  404c1e:	442c      	add	r4, r5
  404c20:	e721      	b.n	404a66 <_svfprintf_r+0xed2>
  404c22:	aa25      	add	r2, sp, #148	; 0x94
  404c24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c26:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c28:	f002 f9b8 	bl	406f9c <__ssprint_r>
  404c2c:	2800      	cmp	r0, #0
  404c2e:	f47f a883 	bne.w	403d38 <_svfprintf_r+0x1a4>
  404c32:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404c34:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404c36:	46c8      	mov	r8, r9
  404c38:	e782      	b.n	404b40 <_svfprintf_r+0xfac>
  404c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404c3c:	2b00      	cmp	r3, #0
  404c3e:	bf08      	it	eq
  404c40:	2301      	moveq	r3, #1
  404c42:	930a      	str	r3, [sp, #40]	; 0x28
  404c44:	e6db      	b.n	4049fe <_svfprintf_r+0xe6a>
  404c46:	4630      	mov	r0, r6
  404c48:	940a      	str	r4, [sp, #40]	; 0x28
  404c4a:	f002 f939 	bl	406ec0 <strlen>
  404c4e:	950f      	str	r5, [sp, #60]	; 0x3c
  404c50:	900e      	str	r0, [sp, #56]	; 0x38
  404c52:	f8cd b01c 	str.w	fp, [sp, #28]
  404c56:	4603      	mov	r3, r0
  404c58:	f7ff b9f9 	b.w	40404e <_svfprintf_r+0x4ba>
  404c5c:	272d      	movs	r7, #45	; 0x2d
  404c5e:	2300      	movs	r3, #0
  404c60:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404c64:	930a      	str	r3, [sp, #40]	; 0x28
  404c66:	f7ff b8ae 	b.w	403dc6 <_svfprintf_r+0x232>
  404c6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404c6c:	9312      	str	r3, [sp, #72]	; 0x48
  404c6e:	461a      	mov	r2, r3
  404c70:	3303      	adds	r3, #3
  404c72:	db04      	blt.n	404c7e <_svfprintf_r+0x10ea>
  404c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404c76:	4619      	mov	r1, r3
  404c78:	4291      	cmp	r1, r2
  404c7a:	f6bf af17 	bge.w	404aac <_svfprintf_r+0xf18>
  404c7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404c80:	3b02      	subs	r3, #2
  404c82:	9311      	str	r3, [sp, #68]	; 0x44
  404c84:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404c88:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404c8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404c8e:	3b01      	subs	r3, #1
  404c90:	2b00      	cmp	r3, #0
  404c92:	931f      	str	r3, [sp, #124]	; 0x7c
  404c94:	bfbd      	ittte	lt
  404c96:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  404c98:	f1c3 0301 	rsblt	r3, r3, #1
  404c9c:	222d      	movlt	r2, #45	; 0x2d
  404c9e:	222b      	movge	r2, #43	; 0x2b
  404ca0:	2b09      	cmp	r3, #9
  404ca2:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  404ca6:	f340 8116 	ble.w	404ed6 <_svfprintf_r+0x1342>
  404caa:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  404cae:	4620      	mov	r0, r4
  404cb0:	4dab      	ldr	r5, [pc, #684]	; (404f60 <_svfprintf_r+0x13cc>)
  404cb2:	e000      	b.n	404cb6 <_svfprintf_r+0x1122>
  404cb4:	4610      	mov	r0, r2
  404cb6:	fb85 1203 	smull	r1, r2, r5, r3
  404cba:	17d9      	asrs	r1, r3, #31
  404cbc:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404cc0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404cc4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404cc8:	3230      	adds	r2, #48	; 0x30
  404cca:	2909      	cmp	r1, #9
  404ccc:	f800 2c01 	strb.w	r2, [r0, #-1]
  404cd0:	460b      	mov	r3, r1
  404cd2:	f100 32ff 	add.w	r2, r0, #4294967295
  404cd6:	dced      	bgt.n	404cb4 <_svfprintf_r+0x1120>
  404cd8:	3330      	adds	r3, #48	; 0x30
  404cda:	3802      	subs	r0, #2
  404cdc:	b2d9      	uxtb	r1, r3
  404cde:	4284      	cmp	r4, r0
  404ce0:	f802 1c01 	strb.w	r1, [r2, #-1]
  404ce4:	f240 8165 	bls.w	404fb2 <_svfprintf_r+0x141e>
  404ce8:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  404cec:	4613      	mov	r3, r2
  404cee:	e001      	b.n	404cf4 <_svfprintf_r+0x1160>
  404cf0:	f813 1b01 	ldrb.w	r1, [r3], #1
  404cf4:	f800 1b01 	strb.w	r1, [r0], #1
  404cf8:	42a3      	cmp	r3, r4
  404cfa:	d1f9      	bne.n	404cf0 <_svfprintf_r+0x115c>
  404cfc:	3301      	adds	r3, #1
  404cfe:	1a9b      	subs	r3, r3, r2
  404d00:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404d04:	4413      	add	r3, r2
  404d06:	aa21      	add	r2, sp, #132	; 0x84
  404d08:	1a9b      	subs	r3, r3, r2
  404d0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404d0c:	931b      	str	r3, [sp, #108]	; 0x6c
  404d0e:	2a01      	cmp	r2, #1
  404d10:	4413      	add	r3, r2
  404d12:	930e      	str	r3, [sp, #56]	; 0x38
  404d14:	f340 8119 	ble.w	404f4a <_svfprintf_r+0x13b6>
  404d18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404d1a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404d1c:	4413      	add	r3, r2
  404d1e:	930e      	str	r3, [sp, #56]	; 0x38
  404d20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404d24:	9308      	str	r3, [sp, #32]
  404d26:	2300      	movs	r3, #0
  404d28:	9312      	str	r3, [sp, #72]	; 0x48
  404d2a:	e6cf      	b.n	404acc <_svfprintf_r+0xf38>
  404d2c:	aa25      	add	r2, sp, #148	; 0x94
  404d2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d30:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d32:	f002 f933 	bl	406f9c <__ssprint_r>
  404d36:	2800      	cmp	r0, #0
  404d38:	f47e affe 	bne.w	403d38 <_svfprintf_r+0x1a4>
  404d3c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d3e:	46c8      	mov	r8, r9
  404d40:	e4d7      	b.n	4046f2 <_svfprintf_r+0xb5e>
  404d42:	4623      	mov	r3, r4
  404d44:	e6a2      	b.n	404a8c <_svfprintf_r+0xef8>
  404d46:	aa25      	add	r2, sp, #148	; 0x94
  404d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d4c:	f002 f926 	bl	406f9c <__ssprint_r>
  404d50:	2800      	cmp	r0, #0
  404d52:	f47e aff1 	bne.w	403d38 <_svfprintf_r+0x1a4>
  404d56:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404d58:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d5a:	46c8      	mov	r8, r9
  404d5c:	e5ae      	b.n	4048bc <_svfprintf_r+0xd28>
  404d5e:	aa25      	add	r2, sp, #148	; 0x94
  404d60:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d62:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d64:	f002 f91a 	bl	406f9c <__ssprint_r>
  404d68:	2800      	cmp	r0, #0
  404d6a:	f47e afe5 	bne.w	403d38 <_svfprintf_r+0x1a4>
  404d6e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404d70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404d72:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d74:	1a9a      	subs	r2, r3, r2
  404d76:	46c8      	mov	r8, r9
  404d78:	e5b8      	b.n	4048ec <_svfprintf_r+0xd58>
  404d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d7c:	9612      	str	r6, [sp, #72]	; 0x48
  404d7e:	2b06      	cmp	r3, #6
  404d80:	bf28      	it	cs
  404d82:	2306      	movcs	r3, #6
  404d84:	960a      	str	r6, [sp, #40]	; 0x28
  404d86:	4637      	mov	r7, r6
  404d88:	9308      	str	r3, [sp, #32]
  404d8a:	950f      	str	r5, [sp, #60]	; 0x3c
  404d8c:	f8cd b01c 	str.w	fp, [sp, #28]
  404d90:	930e      	str	r3, [sp, #56]	; 0x38
  404d92:	4e74      	ldr	r6, [pc, #464]	; (404f64 <_svfprintf_r+0x13d0>)
  404d94:	f7ff b816 	b.w	403dc4 <_svfprintf_r+0x230>
  404d98:	a823      	add	r0, sp, #140	; 0x8c
  404d9a:	a920      	add	r1, sp, #128	; 0x80
  404d9c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404d9e:	9004      	str	r0, [sp, #16]
  404da0:	9103      	str	r1, [sp, #12]
  404da2:	a81f      	add	r0, sp, #124	; 0x7c
  404da4:	2103      	movs	r1, #3
  404da6:	9002      	str	r0, [sp, #8]
  404da8:	9a08      	ldr	r2, [sp, #32]
  404daa:	9501      	str	r5, [sp, #4]
  404dac:	463b      	mov	r3, r7
  404dae:	9100      	str	r1, [sp, #0]
  404db0:	980c      	ldr	r0, [sp, #48]	; 0x30
  404db2:	f000 f9c1 	bl	405138 <_dtoa_r>
  404db6:	4606      	mov	r6, r0
  404db8:	1944      	adds	r4, r0, r5
  404dba:	e72b      	b.n	404c14 <_svfprintf_r+0x1080>
  404dbc:	2306      	movs	r3, #6
  404dbe:	930a      	str	r3, [sp, #40]	; 0x28
  404dc0:	e61d      	b.n	4049fe <_svfprintf_r+0xe6a>
  404dc2:	272d      	movs	r7, #45	; 0x2d
  404dc4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404dc8:	f7ff bacd 	b.w	404366 <_svfprintf_r+0x7d2>
  404dcc:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404dce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404dd0:	4413      	add	r3, r2
  404dd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404dd4:	930e      	str	r3, [sp, #56]	; 0x38
  404dd6:	2a00      	cmp	r2, #0
  404dd8:	f340 80b0 	ble.w	404f3c <_svfprintf_r+0x13a8>
  404ddc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404de0:	9308      	str	r3, [sp, #32]
  404de2:	2367      	movs	r3, #103	; 0x67
  404de4:	9311      	str	r3, [sp, #68]	; 0x44
  404de6:	e671      	b.n	404acc <_svfprintf_r+0xf38>
  404de8:	2b00      	cmp	r3, #0
  404dea:	f340 80c3 	ble.w	404f74 <_svfprintf_r+0x13e0>
  404dee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404df0:	2a00      	cmp	r2, #0
  404df2:	f040 8099 	bne.w	404f28 <_svfprintf_r+0x1394>
  404df6:	f01b 0f01 	tst.w	fp, #1
  404dfa:	f040 8095 	bne.w	404f28 <_svfprintf_r+0x1394>
  404dfe:	9308      	str	r3, [sp, #32]
  404e00:	930e      	str	r3, [sp, #56]	; 0x38
  404e02:	e663      	b.n	404acc <_svfprintf_r+0xf38>
  404e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e06:	9308      	str	r3, [sp, #32]
  404e08:	930e      	str	r3, [sp, #56]	; 0x38
  404e0a:	900a      	str	r0, [sp, #40]	; 0x28
  404e0c:	950f      	str	r5, [sp, #60]	; 0x3c
  404e0e:	f8cd b01c 	str.w	fp, [sp, #28]
  404e12:	9012      	str	r0, [sp, #72]	; 0x48
  404e14:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404e18:	f7fe bfd4 	b.w	403dc4 <_svfprintf_r+0x230>
  404e1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e1e:	2b47      	cmp	r3, #71	; 0x47
  404e20:	f47f ae20 	bne.w	404a64 <_svfprintf_r+0xed0>
  404e24:	f01b 0f01 	tst.w	fp, #1
  404e28:	f47f aeee 	bne.w	404c08 <_svfprintf_r+0x1074>
  404e2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404e2e:	1b9b      	subs	r3, r3, r6
  404e30:	9313      	str	r3, [sp, #76]	; 0x4c
  404e32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404e34:	2b47      	cmp	r3, #71	; 0x47
  404e36:	f43f af18 	beq.w	404c6a <_svfprintf_r+0x10d6>
  404e3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404e3c:	9312      	str	r3, [sp, #72]	; 0x48
  404e3e:	e721      	b.n	404c84 <_svfprintf_r+0x10f0>
  404e40:	424f      	negs	r7, r1
  404e42:	3110      	adds	r1, #16
  404e44:	4d48      	ldr	r5, [pc, #288]	; (404f68 <_svfprintf_r+0x13d4>)
  404e46:	da2f      	bge.n	404ea8 <_svfprintf_r+0x1314>
  404e48:	2410      	movs	r4, #16
  404e4a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404e4e:	e004      	b.n	404e5a <_svfprintf_r+0x12c6>
  404e50:	f108 0808 	add.w	r8, r8, #8
  404e54:	3f10      	subs	r7, #16
  404e56:	2f10      	cmp	r7, #16
  404e58:	dd26      	ble.n	404ea8 <_svfprintf_r+0x1314>
  404e5a:	3301      	adds	r3, #1
  404e5c:	3210      	adds	r2, #16
  404e5e:	2b07      	cmp	r3, #7
  404e60:	9227      	str	r2, [sp, #156]	; 0x9c
  404e62:	9326      	str	r3, [sp, #152]	; 0x98
  404e64:	f8c8 5000 	str.w	r5, [r8]
  404e68:	f8c8 4004 	str.w	r4, [r8, #4]
  404e6c:	ddf0      	ble.n	404e50 <_svfprintf_r+0x12bc>
  404e6e:	aa25      	add	r2, sp, #148	; 0x94
  404e70:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e72:	4658      	mov	r0, fp
  404e74:	f002 f892 	bl	406f9c <__ssprint_r>
  404e78:	2800      	cmp	r0, #0
  404e7a:	f47e af5d 	bne.w	403d38 <_svfprintf_r+0x1a4>
  404e7e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404e80:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e82:	46c8      	mov	r8, r9
  404e84:	e7e6      	b.n	404e54 <_svfprintf_r+0x12c0>
  404e86:	aa25      	add	r2, sp, #148	; 0x94
  404e88:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e8a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e8c:	f002 f886 	bl	406f9c <__ssprint_r>
  404e90:	2800      	cmp	r0, #0
  404e92:	f47e af51 	bne.w	403d38 <_svfprintf_r+0x1a4>
  404e96:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404e98:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404e9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e9c:	46c8      	mov	r8, r9
  404e9e:	e667      	b.n	404b70 <_svfprintf_r+0xfdc>
  404ea0:	2000      	movs	r0, #0
  404ea2:	900a      	str	r0, [sp, #40]	; 0x28
  404ea4:	f7fe bed0 	b.w	403c48 <_svfprintf_r+0xb4>
  404ea8:	3301      	adds	r3, #1
  404eaa:	443a      	add	r2, r7
  404eac:	2b07      	cmp	r3, #7
  404eae:	e888 00a0 	stmia.w	r8, {r5, r7}
  404eb2:	9227      	str	r2, [sp, #156]	; 0x9c
  404eb4:	9326      	str	r3, [sp, #152]	; 0x98
  404eb6:	f108 0808 	add.w	r8, r8, #8
  404eba:	f77f ae5c 	ble.w	404b76 <_svfprintf_r+0xfe2>
  404ebe:	aa25      	add	r2, sp, #148	; 0x94
  404ec0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404ec2:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ec4:	f002 f86a 	bl	406f9c <__ssprint_r>
  404ec8:	2800      	cmp	r0, #0
  404eca:	f47e af35 	bne.w	403d38 <_svfprintf_r+0x1a4>
  404ece:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404ed0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ed2:	46c8      	mov	r8, r9
  404ed4:	e64f      	b.n	404b76 <_svfprintf_r+0xfe2>
  404ed6:	3330      	adds	r3, #48	; 0x30
  404ed8:	2230      	movs	r2, #48	; 0x30
  404eda:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  404ede:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  404ee2:	ab22      	add	r3, sp, #136	; 0x88
  404ee4:	e70f      	b.n	404d06 <_svfprintf_r+0x1172>
  404ee6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404ee8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404eea:	4413      	add	r3, r2
  404eec:	930e      	str	r3, [sp, #56]	; 0x38
  404eee:	e775      	b.n	404ddc <_svfprintf_r+0x1248>
  404ef0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404ef2:	e5cb      	b.n	404a8c <_svfprintf_r+0xef8>
  404ef4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404ef6:	4e1d      	ldr	r6, [pc, #116]	; (404f6c <_svfprintf_r+0x13d8>)
  404ef8:	2b00      	cmp	r3, #0
  404efa:	bfb6      	itet	lt
  404efc:	272d      	movlt	r7, #45	; 0x2d
  404efe:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  404f02:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  404f06:	4b1a      	ldr	r3, [pc, #104]	; (404f70 <_svfprintf_r+0x13dc>)
  404f08:	f7ff ba2f 	b.w	40436a <_svfprintf_r+0x7d6>
  404f0c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404f0e:	9808      	ldr	r0, [sp, #32]
  404f10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404f12:	4639      	mov	r1, r7
  404f14:	f003 f8d6 	bl	4080c4 <__aeabi_dcmpeq>
  404f18:	2800      	cmp	r0, #0
  404f1a:	f47f ae7f 	bne.w	404c1c <_svfprintf_r+0x1088>
  404f1e:	f1c5 0501 	rsb	r5, r5, #1
  404f22:	951f      	str	r5, [sp, #124]	; 0x7c
  404f24:	442c      	add	r4, r5
  404f26:	e59e      	b.n	404a66 <_svfprintf_r+0xed2>
  404f28:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404f2a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404f2c:	4413      	add	r3, r2
  404f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404f30:	441a      	add	r2, r3
  404f32:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404f36:	920e      	str	r2, [sp, #56]	; 0x38
  404f38:	9308      	str	r3, [sp, #32]
  404f3a:	e5c7      	b.n	404acc <_svfprintf_r+0xf38>
  404f3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404f3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404f40:	f1c3 0301 	rsb	r3, r3, #1
  404f44:	441a      	add	r2, r3
  404f46:	4613      	mov	r3, r2
  404f48:	e7d0      	b.n	404eec <_svfprintf_r+0x1358>
  404f4a:	f01b 0301 	ands.w	r3, fp, #1
  404f4e:	9312      	str	r3, [sp, #72]	; 0x48
  404f50:	f47f aee2 	bne.w	404d18 <_svfprintf_r+0x1184>
  404f54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404f56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404f5a:	9308      	str	r3, [sp, #32]
  404f5c:	e5b6      	b.n	404acc <_svfprintf_r+0xf38>
  404f5e:	bf00      	nop
  404f60:	66666667 	.word	0x66666667
  404f64:	00408f30 	.word	0x00408f30
  404f68:	00408f4c 	.word	0x00408f4c
  404f6c:	00408f04 	.word	0x00408f04
  404f70:	00408f00 	.word	0x00408f00
  404f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f76:	b913      	cbnz	r3, 404f7e <_svfprintf_r+0x13ea>
  404f78:	f01b 0f01 	tst.w	fp, #1
  404f7c:	d002      	beq.n	404f84 <_svfprintf_r+0x13f0>
  404f7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404f80:	3301      	adds	r3, #1
  404f82:	e7d4      	b.n	404f2e <_svfprintf_r+0x139a>
  404f84:	2301      	movs	r3, #1
  404f86:	e73a      	b.n	404dfe <_svfprintf_r+0x126a>
  404f88:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404f8a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  404f8e:	6828      	ldr	r0, [r5, #0]
  404f90:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  404f94:	900a      	str	r0, [sp, #40]	; 0x28
  404f96:	4628      	mov	r0, r5
  404f98:	3004      	adds	r0, #4
  404f9a:	46a2      	mov	sl, r4
  404f9c:	900f      	str	r0, [sp, #60]	; 0x3c
  404f9e:	f7fe be51 	b.w	403c44 <_svfprintf_r+0xb0>
  404fa2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404fa6:	f7ff b867 	b.w	404078 <_svfprintf_r+0x4e4>
  404faa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404fae:	f7ff ba15 	b.w	4043dc <_svfprintf_r+0x848>
  404fb2:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  404fb6:	e6a6      	b.n	404d06 <_svfprintf_r+0x1172>
  404fb8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404fbc:	f7ff b8eb 	b.w	404196 <_svfprintf_r+0x602>
  404fc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404fc2:	230c      	movs	r3, #12
  404fc4:	6013      	str	r3, [r2, #0]
  404fc6:	f04f 33ff 	mov.w	r3, #4294967295
  404fca:	9309      	str	r3, [sp, #36]	; 0x24
  404fcc:	f7fe bebd 	b.w	403d4a <_svfprintf_r+0x1b6>
  404fd0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404fd4:	f7ff b99a 	b.w	40430c <_svfprintf_r+0x778>
  404fd8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404fdc:	f7ff b976 	b.w	4042cc <_svfprintf_r+0x738>
  404fe0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404fe4:	f7ff b959 	b.w	40429a <_svfprintf_r+0x706>
  404fe8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404fec:	f7ff b912 	b.w	404214 <_svfprintf_r+0x680>

00404ff0 <register_fini>:
  404ff0:	4b02      	ldr	r3, [pc, #8]	; (404ffc <register_fini+0xc>)
  404ff2:	b113      	cbz	r3, 404ffa <register_fini+0xa>
  404ff4:	4802      	ldr	r0, [pc, #8]	; (405000 <register_fini+0x10>)
  404ff6:	f000 b805 	b.w	405004 <atexit>
  404ffa:	4770      	bx	lr
  404ffc:	00000000 	.word	0x00000000
  405000:	00405f8d 	.word	0x00405f8d

00405004 <atexit>:
  405004:	2300      	movs	r3, #0
  405006:	4601      	mov	r1, r0
  405008:	461a      	mov	r2, r3
  40500a:	4618      	mov	r0, r3
  40500c:	f002 b844 	b.w	407098 <__register_exitproc>

00405010 <quorem>:
  405010:	6902      	ldr	r2, [r0, #16]
  405012:	690b      	ldr	r3, [r1, #16]
  405014:	4293      	cmp	r3, r2
  405016:	f300 808d 	bgt.w	405134 <quorem+0x124>
  40501a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40501e:	f103 38ff 	add.w	r8, r3, #4294967295
  405022:	f101 0714 	add.w	r7, r1, #20
  405026:	f100 0b14 	add.w	fp, r0, #20
  40502a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40502e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405032:	ea4f 0488 	mov.w	r4, r8, lsl #2
  405036:	b083      	sub	sp, #12
  405038:	3201      	adds	r2, #1
  40503a:	fbb3 f9f2 	udiv	r9, r3, r2
  40503e:	eb0b 0304 	add.w	r3, fp, r4
  405042:	9400      	str	r4, [sp, #0]
  405044:	eb07 0a04 	add.w	sl, r7, r4
  405048:	9301      	str	r3, [sp, #4]
  40504a:	f1b9 0f00 	cmp.w	r9, #0
  40504e:	d039      	beq.n	4050c4 <quorem+0xb4>
  405050:	2500      	movs	r5, #0
  405052:	462e      	mov	r6, r5
  405054:	46bc      	mov	ip, r7
  405056:	46de      	mov	lr, fp
  405058:	f85c 4b04 	ldr.w	r4, [ip], #4
  40505c:	f8de 3000 	ldr.w	r3, [lr]
  405060:	b2a2      	uxth	r2, r4
  405062:	fb09 5502 	mla	r5, r9, r2, r5
  405066:	0c22      	lsrs	r2, r4, #16
  405068:	0c2c      	lsrs	r4, r5, #16
  40506a:	fb09 4202 	mla	r2, r9, r2, r4
  40506e:	b2ad      	uxth	r5, r5
  405070:	1b75      	subs	r5, r6, r5
  405072:	b296      	uxth	r6, r2
  405074:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  405078:	fa15 f383 	uxtah	r3, r5, r3
  40507c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405080:	b29b      	uxth	r3, r3
  405082:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  405086:	45e2      	cmp	sl, ip
  405088:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40508c:	f84e 3b04 	str.w	r3, [lr], #4
  405090:	ea4f 4626 	mov.w	r6, r6, asr #16
  405094:	d2e0      	bcs.n	405058 <quorem+0x48>
  405096:	9b00      	ldr	r3, [sp, #0]
  405098:	f85b 3003 	ldr.w	r3, [fp, r3]
  40509c:	b993      	cbnz	r3, 4050c4 <quorem+0xb4>
  40509e:	9c01      	ldr	r4, [sp, #4]
  4050a0:	1f23      	subs	r3, r4, #4
  4050a2:	459b      	cmp	fp, r3
  4050a4:	d20c      	bcs.n	4050c0 <quorem+0xb0>
  4050a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4050aa:	b94b      	cbnz	r3, 4050c0 <quorem+0xb0>
  4050ac:	f1a4 0308 	sub.w	r3, r4, #8
  4050b0:	e002      	b.n	4050b8 <quorem+0xa8>
  4050b2:	681a      	ldr	r2, [r3, #0]
  4050b4:	3b04      	subs	r3, #4
  4050b6:	b91a      	cbnz	r2, 4050c0 <quorem+0xb0>
  4050b8:	459b      	cmp	fp, r3
  4050ba:	f108 38ff 	add.w	r8, r8, #4294967295
  4050be:	d3f8      	bcc.n	4050b2 <quorem+0xa2>
  4050c0:	f8c0 8010 	str.w	r8, [r0, #16]
  4050c4:	4604      	mov	r4, r0
  4050c6:	f001 fd67 	bl	406b98 <__mcmp>
  4050ca:	2800      	cmp	r0, #0
  4050cc:	db2e      	blt.n	40512c <quorem+0x11c>
  4050ce:	f109 0901 	add.w	r9, r9, #1
  4050d2:	465d      	mov	r5, fp
  4050d4:	2300      	movs	r3, #0
  4050d6:	f857 1b04 	ldr.w	r1, [r7], #4
  4050da:	6828      	ldr	r0, [r5, #0]
  4050dc:	b28a      	uxth	r2, r1
  4050de:	1a9a      	subs	r2, r3, r2
  4050e0:	0c0b      	lsrs	r3, r1, #16
  4050e2:	fa12 f280 	uxtah	r2, r2, r0
  4050e6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4050ea:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4050ee:	b292      	uxth	r2, r2
  4050f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4050f4:	45ba      	cmp	sl, r7
  4050f6:	f845 2b04 	str.w	r2, [r5], #4
  4050fa:	ea4f 4323 	mov.w	r3, r3, asr #16
  4050fe:	d2ea      	bcs.n	4050d6 <quorem+0xc6>
  405100:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405104:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405108:	b982      	cbnz	r2, 40512c <quorem+0x11c>
  40510a:	1f1a      	subs	r2, r3, #4
  40510c:	4593      	cmp	fp, r2
  40510e:	d20b      	bcs.n	405128 <quorem+0x118>
  405110:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405114:	b942      	cbnz	r2, 405128 <quorem+0x118>
  405116:	3b08      	subs	r3, #8
  405118:	e002      	b.n	405120 <quorem+0x110>
  40511a:	681a      	ldr	r2, [r3, #0]
  40511c:	3b04      	subs	r3, #4
  40511e:	b91a      	cbnz	r2, 405128 <quorem+0x118>
  405120:	459b      	cmp	fp, r3
  405122:	f108 38ff 	add.w	r8, r8, #4294967295
  405126:	d3f8      	bcc.n	40511a <quorem+0x10a>
  405128:	f8c4 8010 	str.w	r8, [r4, #16]
  40512c:	4648      	mov	r0, r9
  40512e:	b003      	add	sp, #12
  405130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405134:	2000      	movs	r0, #0
  405136:	4770      	bx	lr

00405138 <_dtoa_r>:
  405138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40513c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40513e:	b09b      	sub	sp, #108	; 0x6c
  405140:	4604      	mov	r4, r0
  405142:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  405144:	4692      	mov	sl, r2
  405146:	469b      	mov	fp, r3
  405148:	b141      	cbz	r1, 40515c <_dtoa_r+0x24>
  40514a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40514c:	604a      	str	r2, [r1, #4]
  40514e:	2301      	movs	r3, #1
  405150:	4093      	lsls	r3, r2
  405152:	608b      	str	r3, [r1, #8]
  405154:	f001 fb48 	bl	4067e8 <_Bfree>
  405158:	2300      	movs	r3, #0
  40515a:	6423      	str	r3, [r4, #64]	; 0x40
  40515c:	f1bb 0f00 	cmp.w	fp, #0
  405160:	465d      	mov	r5, fp
  405162:	db35      	blt.n	4051d0 <_dtoa_r+0x98>
  405164:	2300      	movs	r3, #0
  405166:	6033      	str	r3, [r6, #0]
  405168:	4b9d      	ldr	r3, [pc, #628]	; (4053e0 <_dtoa_r+0x2a8>)
  40516a:	43ab      	bics	r3, r5
  40516c:	d015      	beq.n	40519a <_dtoa_r+0x62>
  40516e:	4650      	mov	r0, sl
  405170:	4659      	mov	r1, fp
  405172:	2200      	movs	r2, #0
  405174:	2300      	movs	r3, #0
  405176:	f002 ffa5 	bl	4080c4 <__aeabi_dcmpeq>
  40517a:	4680      	mov	r8, r0
  40517c:	2800      	cmp	r0, #0
  40517e:	d02d      	beq.n	4051dc <_dtoa_r+0xa4>
  405180:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405182:	2301      	movs	r3, #1
  405184:	6013      	str	r3, [r2, #0]
  405186:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405188:	2b00      	cmp	r3, #0
  40518a:	f000 80bd 	beq.w	405308 <_dtoa_r+0x1d0>
  40518e:	4895      	ldr	r0, [pc, #596]	; (4053e4 <_dtoa_r+0x2ac>)
  405190:	6018      	str	r0, [r3, #0]
  405192:	3801      	subs	r0, #1
  405194:	b01b      	add	sp, #108	; 0x6c
  405196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40519a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40519c:	f242 730f 	movw	r3, #9999	; 0x270f
  4051a0:	6013      	str	r3, [r2, #0]
  4051a2:	f1ba 0f00 	cmp.w	sl, #0
  4051a6:	d10d      	bne.n	4051c4 <_dtoa_r+0x8c>
  4051a8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4051ac:	b955      	cbnz	r5, 4051c4 <_dtoa_r+0x8c>
  4051ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4051b0:	488d      	ldr	r0, [pc, #564]	; (4053e8 <_dtoa_r+0x2b0>)
  4051b2:	2b00      	cmp	r3, #0
  4051b4:	d0ee      	beq.n	405194 <_dtoa_r+0x5c>
  4051b6:	f100 0308 	add.w	r3, r0, #8
  4051ba:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4051bc:	6013      	str	r3, [r2, #0]
  4051be:	b01b      	add	sp, #108	; 0x6c
  4051c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4051c6:	4889      	ldr	r0, [pc, #548]	; (4053ec <_dtoa_r+0x2b4>)
  4051c8:	2b00      	cmp	r3, #0
  4051ca:	d0e3      	beq.n	405194 <_dtoa_r+0x5c>
  4051cc:	1cc3      	adds	r3, r0, #3
  4051ce:	e7f4      	b.n	4051ba <_dtoa_r+0x82>
  4051d0:	2301      	movs	r3, #1
  4051d2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4051d6:	6033      	str	r3, [r6, #0]
  4051d8:	46ab      	mov	fp, r5
  4051da:	e7c5      	b.n	405168 <_dtoa_r+0x30>
  4051dc:	aa18      	add	r2, sp, #96	; 0x60
  4051de:	ab19      	add	r3, sp, #100	; 0x64
  4051e0:	9201      	str	r2, [sp, #4]
  4051e2:	9300      	str	r3, [sp, #0]
  4051e4:	4652      	mov	r2, sl
  4051e6:	465b      	mov	r3, fp
  4051e8:	4620      	mov	r0, r4
  4051ea:	f001 fd75 	bl	406cd8 <__d2b>
  4051ee:	0d2b      	lsrs	r3, r5, #20
  4051f0:	4681      	mov	r9, r0
  4051f2:	d071      	beq.n	4052d8 <_dtoa_r+0x1a0>
  4051f4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4051f8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4051fc:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4051fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405202:	4650      	mov	r0, sl
  405204:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405208:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40520c:	2200      	movs	r2, #0
  40520e:	4b78      	ldr	r3, [pc, #480]	; (4053f0 <_dtoa_r+0x2b8>)
  405210:	f002 fb3c 	bl	40788c <__aeabi_dsub>
  405214:	a36c      	add	r3, pc, #432	; (adr r3, 4053c8 <_dtoa_r+0x290>)
  405216:	e9d3 2300 	ldrd	r2, r3, [r3]
  40521a:	f002 fceb 	bl	407bf4 <__aeabi_dmul>
  40521e:	a36c      	add	r3, pc, #432	; (adr r3, 4053d0 <_dtoa_r+0x298>)
  405220:	e9d3 2300 	ldrd	r2, r3, [r3]
  405224:	f002 fb34 	bl	407890 <__adddf3>
  405228:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40522c:	4630      	mov	r0, r6
  40522e:	f002 fc7b 	bl	407b28 <__aeabi_i2d>
  405232:	a369      	add	r3, pc, #420	; (adr r3, 4053d8 <_dtoa_r+0x2a0>)
  405234:	e9d3 2300 	ldrd	r2, r3, [r3]
  405238:	f002 fcdc 	bl	407bf4 <__aeabi_dmul>
  40523c:	4602      	mov	r2, r0
  40523e:	460b      	mov	r3, r1
  405240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405244:	f002 fb24 	bl	407890 <__adddf3>
  405248:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40524c:	f002 ff82 	bl	408154 <__aeabi_d2iz>
  405250:	2200      	movs	r2, #0
  405252:	9002      	str	r0, [sp, #8]
  405254:	2300      	movs	r3, #0
  405256:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40525a:	f002 ff3d 	bl	4080d8 <__aeabi_dcmplt>
  40525e:	2800      	cmp	r0, #0
  405260:	f040 8173 	bne.w	40554a <_dtoa_r+0x412>
  405264:	9d02      	ldr	r5, [sp, #8]
  405266:	2d16      	cmp	r5, #22
  405268:	f200 815d 	bhi.w	405526 <_dtoa_r+0x3ee>
  40526c:	4b61      	ldr	r3, [pc, #388]	; (4053f4 <_dtoa_r+0x2bc>)
  40526e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405272:	e9d3 0100 	ldrd	r0, r1, [r3]
  405276:	4652      	mov	r2, sl
  405278:	465b      	mov	r3, fp
  40527a:	f002 ff4b 	bl	408114 <__aeabi_dcmpgt>
  40527e:	2800      	cmp	r0, #0
  405280:	f000 81c5 	beq.w	40560e <_dtoa_r+0x4d6>
  405284:	1e6b      	subs	r3, r5, #1
  405286:	9302      	str	r3, [sp, #8]
  405288:	2300      	movs	r3, #0
  40528a:	930e      	str	r3, [sp, #56]	; 0x38
  40528c:	1bbf      	subs	r7, r7, r6
  40528e:	1e7b      	subs	r3, r7, #1
  405290:	9306      	str	r3, [sp, #24]
  405292:	f100 8154 	bmi.w	40553e <_dtoa_r+0x406>
  405296:	2300      	movs	r3, #0
  405298:	9308      	str	r3, [sp, #32]
  40529a:	9b02      	ldr	r3, [sp, #8]
  40529c:	2b00      	cmp	r3, #0
  40529e:	f2c0 8145 	blt.w	40552c <_dtoa_r+0x3f4>
  4052a2:	9a06      	ldr	r2, [sp, #24]
  4052a4:	930d      	str	r3, [sp, #52]	; 0x34
  4052a6:	4611      	mov	r1, r2
  4052a8:	4419      	add	r1, r3
  4052aa:	2300      	movs	r3, #0
  4052ac:	9106      	str	r1, [sp, #24]
  4052ae:	930c      	str	r3, [sp, #48]	; 0x30
  4052b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4052b2:	2b09      	cmp	r3, #9
  4052b4:	d82a      	bhi.n	40530c <_dtoa_r+0x1d4>
  4052b6:	2b05      	cmp	r3, #5
  4052b8:	f340 865b 	ble.w	405f72 <_dtoa_r+0xe3a>
  4052bc:	3b04      	subs	r3, #4
  4052be:	9324      	str	r3, [sp, #144]	; 0x90
  4052c0:	2500      	movs	r5, #0
  4052c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4052c4:	3b02      	subs	r3, #2
  4052c6:	2b03      	cmp	r3, #3
  4052c8:	f200 8642 	bhi.w	405f50 <_dtoa_r+0xe18>
  4052cc:	e8df f013 	tbh	[pc, r3, lsl #1]
  4052d0:	02c903d4 	.word	0x02c903d4
  4052d4:	046103df 	.word	0x046103df
  4052d8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4052da:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4052dc:	443e      	add	r6, r7
  4052de:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4052e2:	2b20      	cmp	r3, #32
  4052e4:	f340 818e 	ble.w	405604 <_dtoa_r+0x4cc>
  4052e8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4052ec:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4052f0:	409d      	lsls	r5, r3
  4052f2:	fa2a f000 	lsr.w	r0, sl, r0
  4052f6:	4328      	orrs	r0, r5
  4052f8:	f002 fc06 	bl	407b08 <__aeabi_ui2d>
  4052fc:	2301      	movs	r3, #1
  4052fe:	3e01      	subs	r6, #1
  405300:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405304:	9314      	str	r3, [sp, #80]	; 0x50
  405306:	e781      	b.n	40520c <_dtoa_r+0xd4>
  405308:	483b      	ldr	r0, [pc, #236]	; (4053f8 <_dtoa_r+0x2c0>)
  40530a:	e743      	b.n	405194 <_dtoa_r+0x5c>
  40530c:	2100      	movs	r1, #0
  40530e:	6461      	str	r1, [r4, #68]	; 0x44
  405310:	4620      	mov	r0, r4
  405312:	9125      	str	r1, [sp, #148]	; 0x94
  405314:	f001 fa42 	bl	40679c <_Balloc>
  405318:	f04f 33ff 	mov.w	r3, #4294967295
  40531c:	930a      	str	r3, [sp, #40]	; 0x28
  40531e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405320:	930f      	str	r3, [sp, #60]	; 0x3c
  405322:	2301      	movs	r3, #1
  405324:	9004      	str	r0, [sp, #16]
  405326:	6420      	str	r0, [r4, #64]	; 0x40
  405328:	9224      	str	r2, [sp, #144]	; 0x90
  40532a:	930b      	str	r3, [sp, #44]	; 0x2c
  40532c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40532e:	2b00      	cmp	r3, #0
  405330:	f2c0 80d9 	blt.w	4054e6 <_dtoa_r+0x3ae>
  405334:	9a02      	ldr	r2, [sp, #8]
  405336:	2a0e      	cmp	r2, #14
  405338:	f300 80d5 	bgt.w	4054e6 <_dtoa_r+0x3ae>
  40533c:	4b2d      	ldr	r3, [pc, #180]	; (4053f4 <_dtoa_r+0x2bc>)
  40533e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405342:	e9d3 2300 	ldrd	r2, r3, [r3]
  405346:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40534a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40534c:	2b00      	cmp	r3, #0
  40534e:	f2c0 83ba 	blt.w	405ac6 <_dtoa_r+0x98e>
  405352:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  405356:	4650      	mov	r0, sl
  405358:	462a      	mov	r2, r5
  40535a:	4633      	mov	r3, r6
  40535c:	4659      	mov	r1, fp
  40535e:	f002 fd73 	bl	407e48 <__aeabi_ddiv>
  405362:	f002 fef7 	bl	408154 <__aeabi_d2iz>
  405366:	4680      	mov	r8, r0
  405368:	f002 fbde 	bl	407b28 <__aeabi_i2d>
  40536c:	462a      	mov	r2, r5
  40536e:	4633      	mov	r3, r6
  405370:	f002 fc40 	bl	407bf4 <__aeabi_dmul>
  405374:	460b      	mov	r3, r1
  405376:	4602      	mov	r2, r0
  405378:	4659      	mov	r1, fp
  40537a:	4650      	mov	r0, sl
  40537c:	f002 fa86 	bl	40788c <__aeabi_dsub>
  405380:	9d04      	ldr	r5, [sp, #16]
  405382:	f108 0330 	add.w	r3, r8, #48	; 0x30
  405386:	702b      	strb	r3, [r5, #0]
  405388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40538a:	2b01      	cmp	r3, #1
  40538c:	4606      	mov	r6, r0
  40538e:	460f      	mov	r7, r1
  405390:	f105 0501 	add.w	r5, r5, #1
  405394:	d068      	beq.n	405468 <_dtoa_r+0x330>
  405396:	2200      	movs	r2, #0
  405398:	4b18      	ldr	r3, [pc, #96]	; (4053fc <_dtoa_r+0x2c4>)
  40539a:	f002 fc2b 	bl	407bf4 <__aeabi_dmul>
  40539e:	2200      	movs	r2, #0
  4053a0:	2300      	movs	r3, #0
  4053a2:	4606      	mov	r6, r0
  4053a4:	460f      	mov	r7, r1
  4053a6:	f002 fe8d 	bl	4080c4 <__aeabi_dcmpeq>
  4053aa:	2800      	cmp	r0, #0
  4053ac:	f040 8088 	bne.w	4054c0 <_dtoa_r+0x388>
  4053b0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  4053b4:	f04f 0a00 	mov.w	sl, #0
  4053b8:	f8df b040 	ldr.w	fp, [pc, #64]	; 4053fc <_dtoa_r+0x2c4>
  4053bc:	940c      	str	r4, [sp, #48]	; 0x30
  4053be:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4053c2:	e028      	b.n	405416 <_dtoa_r+0x2de>
  4053c4:	f3af 8000 	nop.w
  4053c8:	636f4361 	.word	0x636f4361
  4053cc:	3fd287a7 	.word	0x3fd287a7
  4053d0:	8b60c8b3 	.word	0x8b60c8b3
  4053d4:	3fc68a28 	.word	0x3fc68a28
  4053d8:	509f79fb 	.word	0x509f79fb
  4053dc:	3fd34413 	.word	0x3fd34413
  4053e0:	7ff00000 	.word	0x7ff00000
  4053e4:	00408f39 	.word	0x00408f39
  4053e8:	00408f5c 	.word	0x00408f5c
  4053ec:	00408f68 	.word	0x00408f68
  4053f0:	3ff80000 	.word	0x3ff80000
  4053f4:	00408f98 	.word	0x00408f98
  4053f8:	00408f38 	.word	0x00408f38
  4053fc:	40240000 	.word	0x40240000
  405400:	f002 fbf8 	bl	407bf4 <__aeabi_dmul>
  405404:	2200      	movs	r2, #0
  405406:	2300      	movs	r3, #0
  405408:	4606      	mov	r6, r0
  40540a:	460f      	mov	r7, r1
  40540c:	f002 fe5a 	bl	4080c4 <__aeabi_dcmpeq>
  405410:	2800      	cmp	r0, #0
  405412:	f040 83c1 	bne.w	405b98 <_dtoa_r+0xa60>
  405416:	4642      	mov	r2, r8
  405418:	464b      	mov	r3, r9
  40541a:	4630      	mov	r0, r6
  40541c:	4639      	mov	r1, r7
  40541e:	f002 fd13 	bl	407e48 <__aeabi_ddiv>
  405422:	f002 fe97 	bl	408154 <__aeabi_d2iz>
  405426:	4604      	mov	r4, r0
  405428:	f002 fb7e 	bl	407b28 <__aeabi_i2d>
  40542c:	4642      	mov	r2, r8
  40542e:	464b      	mov	r3, r9
  405430:	f002 fbe0 	bl	407bf4 <__aeabi_dmul>
  405434:	4602      	mov	r2, r0
  405436:	460b      	mov	r3, r1
  405438:	4630      	mov	r0, r6
  40543a:	4639      	mov	r1, r7
  40543c:	f002 fa26 	bl	40788c <__aeabi_dsub>
  405440:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  405444:	9e04      	ldr	r6, [sp, #16]
  405446:	f805 eb01 	strb.w	lr, [r5], #1
  40544a:	eba5 0e06 	sub.w	lr, r5, r6
  40544e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405450:	45b6      	cmp	lr, r6
  405452:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405456:	4652      	mov	r2, sl
  405458:	465b      	mov	r3, fp
  40545a:	d1d1      	bne.n	405400 <_dtoa_r+0x2c8>
  40545c:	46a0      	mov	r8, r4
  40545e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405462:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405464:	4606      	mov	r6, r0
  405466:	460f      	mov	r7, r1
  405468:	4632      	mov	r2, r6
  40546a:	463b      	mov	r3, r7
  40546c:	4630      	mov	r0, r6
  40546e:	4639      	mov	r1, r7
  405470:	f002 fa0e 	bl	407890 <__adddf3>
  405474:	4606      	mov	r6, r0
  405476:	460f      	mov	r7, r1
  405478:	4602      	mov	r2, r0
  40547a:	460b      	mov	r3, r1
  40547c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405480:	f002 fe2a 	bl	4080d8 <__aeabi_dcmplt>
  405484:	b948      	cbnz	r0, 40549a <_dtoa_r+0x362>
  405486:	4632      	mov	r2, r6
  405488:	463b      	mov	r3, r7
  40548a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40548e:	f002 fe19 	bl	4080c4 <__aeabi_dcmpeq>
  405492:	b1a8      	cbz	r0, 4054c0 <_dtoa_r+0x388>
  405494:	f018 0f01 	tst.w	r8, #1
  405498:	d012      	beq.n	4054c0 <_dtoa_r+0x388>
  40549a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40549e:	9a04      	ldr	r2, [sp, #16]
  4054a0:	1e6b      	subs	r3, r5, #1
  4054a2:	e004      	b.n	4054ae <_dtoa_r+0x376>
  4054a4:	429a      	cmp	r2, r3
  4054a6:	f000 8401 	beq.w	405cac <_dtoa_r+0xb74>
  4054aa:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  4054ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4054b2:	f103 0501 	add.w	r5, r3, #1
  4054b6:	d0f5      	beq.n	4054a4 <_dtoa_r+0x36c>
  4054b8:	f108 0801 	add.w	r8, r8, #1
  4054bc:	f883 8000 	strb.w	r8, [r3]
  4054c0:	4649      	mov	r1, r9
  4054c2:	4620      	mov	r0, r4
  4054c4:	f001 f990 	bl	4067e8 <_Bfree>
  4054c8:	2200      	movs	r2, #0
  4054ca:	9b02      	ldr	r3, [sp, #8]
  4054cc:	702a      	strb	r2, [r5, #0]
  4054ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4054d0:	3301      	adds	r3, #1
  4054d2:	6013      	str	r3, [r2, #0]
  4054d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4054d6:	2b00      	cmp	r3, #0
  4054d8:	f000 839e 	beq.w	405c18 <_dtoa_r+0xae0>
  4054dc:	9804      	ldr	r0, [sp, #16]
  4054de:	601d      	str	r5, [r3, #0]
  4054e0:	b01b      	add	sp, #108	; 0x6c
  4054e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4054e8:	2a00      	cmp	r2, #0
  4054ea:	d03e      	beq.n	40556a <_dtoa_r+0x432>
  4054ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4054ee:	2a01      	cmp	r2, #1
  4054f0:	f340 8311 	ble.w	405b16 <_dtoa_r+0x9de>
  4054f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4054f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4054f8:	1e5f      	subs	r7, r3, #1
  4054fa:	42ba      	cmp	r2, r7
  4054fc:	f2c0 838f 	blt.w	405c1e <_dtoa_r+0xae6>
  405500:	1bd7      	subs	r7, r2, r7
  405502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405504:	2b00      	cmp	r3, #0
  405506:	f2c0 848b 	blt.w	405e20 <_dtoa_r+0xce8>
  40550a:	9d08      	ldr	r5, [sp, #32]
  40550c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40550e:	9a08      	ldr	r2, [sp, #32]
  405510:	441a      	add	r2, r3
  405512:	9208      	str	r2, [sp, #32]
  405514:	9a06      	ldr	r2, [sp, #24]
  405516:	2101      	movs	r1, #1
  405518:	441a      	add	r2, r3
  40551a:	4620      	mov	r0, r4
  40551c:	9206      	str	r2, [sp, #24]
  40551e:	f001 f9fd 	bl	40691c <__i2b>
  405522:	4606      	mov	r6, r0
  405524:	e024      	b.n	405570 <_dtoa_r+0x438>
  405526:	2301      	movs	r3, #1
  405528:	930e      	str	r3, [sp, #56]	; 0x38
  40552a:	e6af      	b.n	40528c <_dtoa_r+0x154>
  40552c:	9a08      	ldr	r2, [sp, #32]
  40552e:	9b02      	ldr	r3, [sp, #8]
  405530:	1ad2      	subs	r2, r2, r3
  405532:	425b      	negs	r3, r3
  405534:	930c      	str	r3, [sp, #48]	; 0x30
  405536:	2300      	movs	r3, #0
  405538:	9208      	str	r2, [sp, #32]
  40553a:	930d      	str	r3, [sp, #52]	; 0x34
  40553c:	e6b8      	b.n	4052b0 <_dtoa_r+0x178>
  40553e:	f1c7 0301 	rsb	r3, r7, #1
  405542:	9308      	str	r3, [sp, #32]
  405544:	2300      	movs	r3, #0
  405546:	9306      	str	r3, [sp, #24]
  405548:	e6a7      	b.n	40529a <_dtoa_r+0x162>
  40554a:	9d02      	ldr	r5, [sp, #8]
  40554c:	4628      	mov	r0, r5
  40554e:	f002 faeb 	bl	407b28 <__aeabi_i2d>
  405552:	4602      	mov	r2, r0
  405554:	460b      	mov	r3, r1
  405556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40555a:	f002 fdb3 	bl	4080c4 <__aeabi_dcmpeq>
  40555e:	2800      	cmp	r0, #0
  405560:	f47f ae80 	bne.w	405264 <_dtoa_r+0x12c>
  405564:	1e6b      	subs	r3, r5, #1
  405566:	9302      	str	r3, [sp, #8]
  405568:	e67c      	b.n	405264 <_dtoa_r+0x12c>
  40556a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40556c:	9d08      	ldr	r5, [sp, #32]
  40556e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405570:	2d00      	cmp	r5, #0
  405572:	dd0c      	ble.n	40558e <_dtoa_r+0x456>
  405574:	9906      	ldr	r1, [sp, #24]
  405576:	2900      	cmp	r1, #0
  405578:	460b      	mov	r3, r1
  40557a:	dd08      	ble.n	40558e <_dtoa_r+0x456>
  40557c:	42a9      	cmp	r1, r5
  40557e:	9a08      	ldr	r2, [sp, #32]
  405580:	bfa8      	it	ge
  405582:	462b      	movge	r3, r5
  405584:	1ad2      	subs	r2, r2, r3
  405586:	1aed      	subs	r5, r5, r3
  405588:	1acb      	subs	r3, r1, r3
  40558a:	9208      	str	r2, [sp, #32]
  40558c:	9306      	str	r3, [sp, #24]
  40558e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405590:	b1d3      	cbz	r3, 4055c8 <_dtoa_r+0x490>
  405592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405594:	2b00      	cmp	r3, #0
  405596:	f000 82b7 	beq.w	405b08 <_dtoa_r+0x9d0>
  40559a:	2f00      	cmp	r7, #0
  40559c:	dd10      	ble.n	4055c0 <_dtoa_r+0x488>
  40559e:	4631      	mov	r1, r6
  4055a0:	463a      	mov	r2, r7
  4055a2:	4620      	mov	r0, r4
  4055a4:	f001 fa56 	bl	406a54 <__pow5mult>
  4055a8:	464a      	mov	r2, r9
  4055aa:	4601      	mov	r1, r0
  4055ac:	4606      	mov	r6, r0
  4055ae:	4620      	mov	r0, r4
  4055b0:	f001 f9be 	bl	406930 <__multiply>
  4055b4:	4649      	mov	r1, r9
  4055b6:	4680      	mov	r8, r0
  4055b8:	4620      	mov	r0, r4
  4055ba:	f001 f915 	bl	4067e8 <_Bfree>
  4055be:	46c1      	mov	r9, r8
  4055c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4055c2:	1bda      	subs	r2, r3, r7
  4055c4:	f040 82a1 	bne.w	405b0a <_dtoa_r+0x9d2>
  4055c8:	2101      	movs	r1, #1
  4055ca:	4620      	mov	r0, r4
  4055cc:	f001 f9a6 	bl	40691c <__i2b>
  4055d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4055d2:	2b00      	cmp	r3, #0
  4055d4:	4680      	mov	r8, r0
  4055d6:	dd1c      	ble.n	405612 <_dtoa_r+0x4da>
  4055d8:	4601      	mov	r1, r0
  4055da:	461a      	mov	r2, r3
  4055dc:	4620      	mov	r0, r4
  4055de:	f001 fa39 	bl	406a54 <__pow5mult>
  4055e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4055e4:	2b01      	cmp	r3, #1
  4055e6:	4680      	mov	r8, r0
  4055e8:	f340 8254 	ble.w	405a94 <_dtoa_r+0x95c>
  4055ec:	2300      	movs	r3, #0
  4055ee:	930c      	str	r3, [sp, #48]	; 0x30
  4055f0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4055f4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4055f8:	6918      	ldr	r0, [r3, #16]
  4055fa:	f001 f93f 	bl	40687c <__hi0bits>
  4055fe:	f1c0 0020 	rsb	r0, r0, #32
  405602:	e010      	b.n	405626 <_dtoa_r+0x4ee>
  405604:	f1c3 0520 	rsb	r5, r3, #32
  405608:	fa0a f005 	lsl.w	r0, sl, r5
  40560c:	e674      	b.n	4052f8 <_dtoa_r+0x1c0>
  40560e:	900e      	str	r0, [sp, #56]	; 0x38
  405610:	e63c      	b.n	40528c <_dtoa_r+0x154>
  405612:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405614:	2b01      	cmp	r3, #1
  405616:	f340 8287 	ble.w	405b28 <_dtoa_r+0x9f0>
  40561a:	2300      	movs	r3, #0
  40561c:	930c      	str	r3, [sp, #48]	; 0x30
  40561e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405620:	2001      	movs	r0, #1
  405622:	2b00      	cmp	r3, #0
  405624:	d1e4      	bne.n	4055f0 <_dtoa_r+0x4b8>
  405626:	9a06      	ldr	r2, [sp, #24]
  405628:	4410      	add	r0, r2
  40562a:	f010 001f 	ands.w	r0, r0, #31
  40562e:	f000 80a1 	beq.w	405774 <_dtoa_r+0x63c>
  405632:	f1c0 0320 	rsb	r3, r0, #32
  405636:	2b04      	cmp	r3, #4
  405638:	f340 849e 	ble.w	405f78 <_dtoa_r+0xe40>
  40563c:	9b08      	ldr	r3, [sp, #32]
  40563e:	f1c0 001c 	rsb	r0, r0, #28
  405642:	4403      	add	r3, r0
  405644:	9308      	str	r3, [sp, #32]
  405646:	4613      	mov	r3, r2
  405648:	4403      	add	r3, r0
  40564a:	4405      	add	r5, r0
  40564c:	9306      	str	r3, [sp, #24]
  40564e:	9b08      	ldr	r3, [sp, #32]
  405650:	2b00      	cmp	r3, #0
  405652:	dd05      	ble.n	405660 <_dtoa_r+0x528>
  405654:	4649      	mov	r1, r9
  405656:	461a      	mov	r2, r3
  405658:	4620      	mov	r0, r4
  40565a:	f001 fa4b 	bl	406af4 <__lshift>
  40565e:	4681      	mov	r9, r0
  405660:	9b06      	ldr	r3, [sp, #24]
  405662:	2b00      	cmp	r3, #0
  405664:	dd05      	ble.n	405672 <_dtoa_r+0x53a>
  405666:	4641      	mov	r1, r8
  405668:	461a      	mov	r2, r3
  40566a:	4620      	mov	r0, r4
  40566c:	f001 fa42 	bl	406af4 <__lshift>
  405670:	4680      	mov	r8, r0
  405672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405674:	2b00      	cmp	r3, #0
  405676:	f040 8086 	bne.w	405786 <_dtoa_r+0x64e>
  40567a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40567c:	2b00      	cmp	r3, #0
  40567e:	f340 8266 	ble.w	405b4e <_dtoa_r+0xa16>
  405682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405684:	2b00      	cmp	r3, #0
  405686:	f000 8098 	beq.w	4057ba <_dtoa_r+0x682>
  40568a:	2d00      	cmp	r5, #0
  40568c:	dd05      	ble.n	40569a <_dtoa_r+0x562>
  40568e:	4631      	mov	r1, r6
  405690:	462a      	mov	r2, r5
  405692:	4620      	mov	r0, r4
  405694:	f001 fa2e 	bl	406af4 <__lshift>
  405698:	4606      	mov	r6, r0
  40569a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40569c:	2b00      	cmp	r3, #0
  40569e:	f040 8337 	bne.w	405d10 <_dtoa_r+0xbd8>
  4056a2:	9606      	str	r6, [sp, #24]
  4056a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4056a6:	9a04      	ldr	r2, [sp, #16]
  4056a8:	f8dd b018 	ldr.w	fp, [sp, #24]
  4056ac:	3b01      	subs	r3, #1
  4056ae:	18d3      	adds	r3, r2, r3
  4056b0:	930b      	str	r3, [sp, #44]	; 0x2c
  4056b2:	f00a 0301 	and.w	r3, sl, #1
  4056b6:	930c      	str	r3, [sp, #48]	; 0x30
  4056b8:	4617      	mov	r7, r2
  4056ba:	46c2      	mov	sl, r8
  4056bc:	4651      	mov	r1, sl
  4056be:	4648      	mov	r0, r9
  4056c0:	f7ff fca6 	bl	405010 <quorem>
  4056c4:	4631      	mov	r1, r6
  4056c6:	4605      	mov	r5, r0
  4056c8:	4648      	mov	r0, r9
  4056ca:	f001 fa65 	bl	406b98 <__mcmp>
  4056ce:	465a      	mov	r2, fp
  4056d0:	900a      	str	r0, [sp, #40]	; 0x28
  4056d2:	4651      	mov	r1, sl
  4056d4:	4620      	mov	r0, r4
  4056d6:	f001 fa7b 	bl	406bd0 <__mdiff>
  4056da:	68c2      	ldr	r2, [r0, #12]
  4056dc:	4680      	mov	r8, r0
  4056de:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4056e2:	2a00      	cmp	r2, #0
  4056e4:	f040 822b 	bne.w	405b3e <_dtoa_r+0xa06>
  4056e8:	4601      	mov	r1, r0
  4056ea:	4648      	mov	r0, r9
  4056ec:	9308      	str	r3, [sp, #32]
  4056ee:	f001 fa53 	bl	406b98 <__mcmp>
  4056f2:	4641      	mov	r1, r8
  4056f4:	9006      	str	r0, [sp, #24]
  4056f6:	4620      	mov	r0, r4
  4056f8:	f001 f876 	bl	4067e8 <_Bfree>
  4056fc:	9a06      	ldr	r2, [sp, #24]
  4056fe:	9b08      	ldr	r3, [sp, #32]
  405700:	b932      	cbnz	r2, 405710 <_dtoa_r+0x5d8>
  405702:	9924      	ldr	r1, [sp, #144]	; 0x90
  405704:	b921      	cbnz	r1, 405710 <_dtoa_r+0x5d8>
  405706:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405708:	2a00      	cmp	r2, #0
  40570a:	f000 83ef 	beq.w	405eec <_dtoa_r+0xdb4>
  40570e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405710:	990a      	ldr	r1, [sp, #40]	; 0x28
  405712:	2900      	cmp	r1, #0
  405714:	f2c0 829f 	blt.w	405c56 <_dtoa_r+0xb1e>
  405718:	d105      	bne.n	405726 <_dtoa_r+0x5ee>
  40571a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40571c:	b919      	cbnz	r1, 405726 <_dtoa_r+0x5ee>
  40571e:	990c      	ldr	r1, [sp, #48]	; 0x30
  405720:	2900      	cmp	r1, #0
  405722:	f000 8298 	beq.w	405c56 <_dtoa_r+0xb1e>
  405726:	2a00      	cmp	r2, #0
  405728:	f300 8306 	bgt.w	405d38 <_dtoa_r+0xc00>
  40572c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40572e:	703b      	strb	r3, [r7, #0]
  405730:	f107 0801 	add.w	r8, r7, #1
  405734:	4297      	cmp	r7, r2
  405736:	4645      	mov	r5, r8
  405738:	f000 830c 	beq.w	405d54 <_dtoa_r+0xc1c>
  40573c:	4649      	mov	r1, r9
  40573e:	2300      	movs	r3, #0
  405740:	220a      	movs	r2, #10
  405742:	4620      	mov	r0, r4
  405744:	f001 f85a 	bl	4067fc <__multadd>
  405748:	455e      	cmp	r6, fp
  40574a:	4681      	mov	r9, r0
  40574c:	4631      	mov	r1, r6
  40574e:	f04f 0300 	mov.w	r3, #0
  405752:	f04f 020a 	mov.w	r2, #10
  405756:	4620      	mov	r0, r4
  405758:	f000 81eb 	beq.w	405b32 <_dtoa_r+0x9fa>
  40575c:	f001 f84e 	bl	4067fc <__multadd>
  405760:	4659      	mov	r1, fp
  405762:	4606      	mov	r6, r0
  405764:	2300      	movs	r3, #0
  405766:	220a      	movs	r2, #10
  405768:	4620      	mov	r0, r4
  40576a:	f001 f847 	bl	4067fc <__multadd>
  40576e:	4647      	mov	r7, r8
  405770:	4683      	mov	fp, r0
  405772:	e7a3      	b.n	4056bc <_dtoa_r+0x584>
  405774:	201c      	movs	r0, #28
  405776:	9b08      	ldr	r3, [sp, #32]
  405778:	4403      	add	r3, r0
  40577a:	9308      	str	r3, [sp, #32]
  40577c:	9b06      	ldr	r3, [sp, #24]
  40577e:	4403      	add	r3, r0
  405780:	4405      	add	r5, r0
  405782:	9306      	str	r3, [sp, #24]
  405784:	e763      	b.n	40564e <_dtoa_r+0x516>
  405786:	4641      	mov	r1, r8
  405788:	4648      	mov	r0, r9
  40578a:	f001 fa05 	bl	406b98 <__mcmp>
  40578e:	2800      	cmp	r0, #0
  405790:	f6bf af73 	bge.w	40567a <_dtoa_r+0x542>
  405794:	9f02      	ldr	r7, [sp, #8]
  405796:	4649      	mov	r1, r9
  405798:	2300      	movs	r3, #0
  40579a:	220a      	movs	r2, #10
  40579c:	4620      	mov	r0, r4
  40579e:	3f01      	subs	r7, #1
  4057a0:	9702      	str	r7, [sp, #8]
  4057a2:	f001 f82b 	bl	4067fc <__multadd>
  4057a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4057a8:	4681      	mov	r9, r0
  4057aa:	2b00      	cmp	r3, #0
  4057ac:	f040 83b6 	bne.w	405f1c <_dtoa_r+0xde4>
  4057b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4057b2:	2b00      	cmp	r3, #0
  4057b4:	f340 83bf 	ble.w	405f36 <_dtoa_r+0xdfe>
  4057b8:	930a      	str	r3, [sp, #40]	; 0x28
  4057ba:	f8dd b010 	ldr.w	fp, [sp, #16]
  4057be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4057c0:	465d      	mov	r5, fp
  4057c2:	e002      	b.n	4057ca <_dtoa_r+0x692>
  4057c4:	f001 f81a 	bl	4067fc <__multadd>
  4057c8:	4681      	mov	r9, r0
  4057ca:	4641      	mov	r1, r8
  4057cc:	4648      	mov	r0, r9
  4057ce:	f7ff fc1f 	bl	405010 <quorem>
  4057d2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4057d6:	f805 ab01 	strb.w	sl, [r5], #1
  4057da:	eba5 030b 	sub.w	r3, r5, fp
  4057de:	42bb      	cmp	r3, r7
  4057e0:	f04f 020a 	mov.w	r2, #10
  4057e4:	f04f 0300 	mov.w	r3, #0
  4057e8:	4649      	mov	r1, r9
  4057ea:	4620      	mov	r0, r4
  4057ec:	dbea      	blt.n	4057c4 <_dtoa_r+0x68c>
  4057ee:	9b04      	ldr	r3, [sp, #16]
  4057f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4057f2:	2a01      	cmp	r2, #1
  4057f4:	bfac      	ite	ge
  4057f6:	189b      	addge	r3, r3, r2
  4057f8:	3301      	addlt	r3, #1
  4057fa:	461d      	mov	r5, r3
  4057fc:	f04f 0b00 	mov.w	fp, #0
  405800:	4649      	mov	r1, r9
  405802:	2201      	movs	r2, #1
  405804:	4620      	mov	r0, r4
  405806:	f001 f975 	bl	406af4 <__lshift>
  40580a:	4641      	mov	r1, r8
  40580c:	4681      	mov	r9, r0
  40580e:	f001 f9c3 	bl	406b98 <__mcmp>
  405812:	2800      	cmp	r0, #0
  405814:	f340 823d 	ble.w	405c92 <_dtoa_r+0xb5a>
  405818:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40581c:	9904      	ldr	r1, [sp, #16]
  40581e:	1e6b      	subs	r3, r5, #1
  405820:	e004      	b.n	40582c <_dtoa_r+0x6f4>
  405822:	428b      	cmp	r3, r1
  405824:	f000 81ae 	beq.w	405b84 <_dtoa_r+0xa4c>
  405828:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40582c:	2a39      	cmp	r2, #57	; 0x39
  40582e:	f103 0501 	add.w	r5, r3, #1
  405832:	d0f6      	beq.n	405822 <_dtoa_r+0x6ea>
  405834:	3201      	adds	r2, #1
  405836:	701a      	strb	r2, [r3, #0]
  405838:	4641      	mov	r1, r8
  40583a:	4620      	mov	r0, r4
  40583c:	f000 ffd4 	bl	4067e8 <_Bfree>
  405840:	2e00      	cmp	r6, #0
  405842:	f43f ae3d 	beq.w	4054c0 <_dtoa_r+0x388>
  405846:	f1bb 0f00 	cmp.w	fp, #0
  40584a:	d005      	beq.n	405858 <_dtoa_r+0x720>
  40584c:	45b3      	cmp	fp, r6
  40584e:	d003      	beq.n	405858 <_dtoa_r+0x720>
  405850:	4659      	mov	r1, fp
  405852:	4620      	mov	r0, r4
  405854:	f000 ffc8 	bl	4067e8 <_Bfree>
  405858:	4631      	mov	r1, r6
  40585a:	4620      	mov	r0, r4
  40585c:	f000 ffc4 	bl	4067e8 <_Bfree>
  405860:	e62e      	b.n	4054c0 <_dtoa_r+0x388>
  405862:	2300      	movs	r3, #0
  405864:	930b      	str	r3, [sp, #44]	; 0x2c
  405866:	9b02      	ldr	r3, [sp, #8]
  405868:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40586a:	4413      	add	r3, r2
  40586c:	930f      	str	r3, [sp, #60]	; 0x3c
  40586e:	3301      	adds	r3, #1
  405870:	2b01      	cmp	r3, #1
  405872:	461f      	mov	r7, r3
  405874:	461e      	mov	r6, r3
  405876:	930a      	str	r3, [sp, #40]	; 0x28
  405878:	bfb8      	it	lt
  40587a:	2701      	movlt	r7, #1
  40587c:	2100      	movs	r1, #0
  40587e:	2f17      	cmp	r7, #23
  405880:	6461      	str	r1, [r4, #68]	; 0x44
  405882:	d90a      	bls.n	40589a <_dtoa_r+0x762>
  405884:	2201      	movs	r2, #1
  405886:	2304      	movs	r3, #4
  405888:	005b      	lsls	r3, r3, #1
  40588a:	f103 0014 	add.w	r0, r3, #20
  40588e:	4287      	cmp	r7, r0
  405890:	4611      	mov	r1, r2
  405892:	f102 0201 	add.w	r2, r2, #1
  405896:	d2f7      	bcs.n	405888 <_dtoa_r+0x750>
  405898:	6461      	str	r1, [r4, #68]	; 0x44
  40589a:	4620      	mov	r0, r4
  40589c:	f000 ff7e 	bl	40679c <_Balloc>
  4058a0:	2e0e      	cmp	r6, #14
  4058a2:	9004      	str	r0, [sp, #16]
  4058a4:	6420      	str	r0, [r4, #64]	; 0x40
  4058a6:	f63f ad41 	bhi.w	40532c <_dtoa_r+0x1f4>
  4058aa:	2d00      	cmp	r5, #0
  4058ac:	f43f ad3e 	beq.w	40532c <_dtoa_r+0x1f4>
  4058b0:	9902      	ldr	r1, [sp, #8]
  4058b2:	2900      	cmp	r1, #0
  4058b4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4058b8:	f340 8202 	ble.w	405cc0 <_dtoa_r+0xb88>
  4058bc:	4bb8      	ldr	r3, [pc, #736]	; (405ba0 <_dtoa_r+0xa68>)
  4058be:	f001 020f 	and.w	r2, r1, #15
  4058c2:	110d      	asrs	r5, r1, #4
  4058c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4058c8:	06e9      	lsls	r1, r5, #27
  4058ca:	e9d3 6700 	ldrd	r6, r7, [r3]
  4058ce:	f140 81ae 	bpl.w	405c2e <_dtoa_r+0xaf6>
  4058d2:	4bb4      	ldr	r3, [pc, #720]	; (405ba4 <_dtoa_r+0xa6c>)
  4058d4:	4650      	mov	r0, sl
  4058d6:	4659      	mov	r1, fp
  4058d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4058dc:	f002 fab4 	bl	407e48 <__aeabi_ddiv>
  4058e0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4058e4:	f005 050f 	and.w	r5, r5, #15
  4058e8:	f04f 0a03 	mov.w	sl, #3
  4058ec:	b18d      	cbz	r5, 405912 <_dtoa_r+0x7da>
  4058ee:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 405ba4 <_dtoa_r+0xa6c>
  4058f2:	07ea      	lsls	r2, r5, #31
  4058f4:	d509      	bpl.n	40590a <_dtoa_r+0x7d2>
  4058f6:	4630      	mov	r0, r6
  4058f8:	4639      	mov	r1, r7
  4058fa:	e9d8 2300 	ldrd	r2, r3, [r8]
  4058fe:	f002 f979 	bl	407bf4 <__aeabi_dmul>
  405902:	f10a 0a01 	add.w	sl, sl, #1
  405906:	4606      	mov	r6, r0
  405908:	460f      	mov	r7, r1
  40590a:	106d      	asrs	r5, r5, #1
  40590c:	f108 0808 	add.w	r8, r8, #8
  405910:	d1ef      	bne.n	4058f2 <_dtoa_r+0x7ba>
  405912:	463b      	mov	r3, r7
  405914:	4632      	mov	r2, r6
  405916:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40591a:	f002 fa95 	bl	407e48 <__aeabi_ddiv>
  40591e:	4607      	mov	r7, r0
  405920:	4688      	mov	r8, r1
  405922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405924:	b143      	cbz	r3, 405938 <_dtoa_r+0x800>
  405926:	2200      	movs	r2, #0
  405928:	4b9f      	ldr	r3, [pc, #636]	; (405ba8 <_dtoa_r+0xa70>)
  40592a:	4638      	mov	r0, r7
  40592c:	4641      	mov	r1, r8
  40592e:	f002 fbd3 	bl	4080d8 <__aeabi_dcmplt>
  405932:	2800      	cmp	r0, #0
  405934:	f040 8286 	bne.w	405e44 <_dtoa_r+0xd0c>
  405938:	4650      	mov	r0, sl
  40593a:	f002 f8f5 	bl	407b28 <__aeabi_i2d>
  40593e:	463a      	mov	r2, r7
  405940:	4643      	mov	r3, r8
  405942:	f002 f957 	bl	407bf4 <__aeabi_dmul>
  405946:	4b99      	ldr	r3, [pc, #612]	; (405bac <_dtoa_r+0xa74>)
  405948:	2200      	movs	r2, #0
  40594a:	f001 ffa1 	bl	407890 <__adddf3>
  40594e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405950:	4605      	mov	r5, r0
  405952:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405956:	2b00      	cmp	r3, #0
  405958:	f000 813e 	beq.w	405bd8 <_dtoa_r+0xaa0>
  40595c:	9b02      	ldr	r3, [sp, #8]
  40595e:	9315      	str	r3, [sp, #84]	; 0x54
  405960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405962:	9312      	str	r3, [sp, #72]	; 0x48
  405964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405966:	2b00      	cmp	r3, #0
  405968:	f000 81fa 	beq.w	405d60 <_dtoa_r+0xc28>
  40596c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40596e:	4b8c      	ldr	r3, [pc, #560]	; (405ba0 <_dtoa_r+0xa68>)
  405970:	498f      	ldr	r1, [pc, #572]	; (405bb0 <_dtoa_r+0xa78>)
  405972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405976:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40597a:	2000      	movs	r0, #0
  40597c:	f002 fa64 	bl	407e48 <__aeabi_ddiv>
  405980:	462a      	mov	r2, r5
  405982:	4633      	mov	r3, r6
  405984:	f001 ff82 	bl	40788c <__aeabi_dsub>
  405988:	4682      	mov	sl, r0
  40598a:	468b      	mov	fp, r1
  40598c:	4638      	mov	r0, r7
  40598e:	4641      	mov	r1, r8
  405990:	f002 fbe0 	bl	408154 <__aeabi_d2iz>
  405994:	4605      	mov	r5, r0
  405996:	f002 f8c7 	bl	407b28 <__aeabi_i2d>
  40599a:	4602      	mov	r2, r0
  40599c:	460b      	mov	r3, r1
  40599e:	4638      	mov	r0, r7
  4059a0:	4641      	mov	r1, r8
  4059a2:	f001 ff73 	bl	40788c <__aeabi_dsub>
  4059a6:	3530      	adds	r5, #48	; 0x30
  4059a8:	fa5f f885 	uxtb.w	r8, r5
  4059ac:	9d04      	ldr	r5, [sp, #16]
  4059ae:	4606      	mov	r6, r0
  4059b0:	460f      	mov	r7, r1
  4059b2:	f885 8000 	strb.w	r8, [r5]
  4059b6:	4602      	mov	r2, r0
  4059b8:	460b      	mov	r3, r1
  4059ba:	4650      	mov	r0, sl
  4059bc:	4659      	mov	r1, fp
  4059be:	3501      	adds	r5, #1
  4059c0:	f002 fba8 	bl	408114 <__aeabi_dcmpgt>
  4059c4:	2800      	cmp	r0, #0
  4059c6:	d154      	bne.n	405a72 <_dtoa_r+0x93a>
  4059c8:	4632      	mov	r2, r6
  4059ca:	463b      	mov	r3, r7
  4059cc:	2000      	movs	r0, #0
  4059ce:	4976      	ldr	r1, [pc, #472]	; (405ba8 <_dtoa_r+0xa70>)
  4059d0:	f001 ff5c 	bl	40788c <__aeabi_dsub>
  4059d4:	4602      	mov	r2, r0
  4059d6:	460b      	mov	r3, r1
  4059d8:	4650      	mov	r0, sl
  4059da:	4659      	mov	r1, fp
  4059dc:	f002 fb9a 	bl	408114 <__aeabi_dcmpgt>
  4059e0:	2800      	cmp	r0, #0
  4059e2:	f040 8270 	bne.w	405ec6 <_dtoa_r+0xd8e>
  4059e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4059e8:	2a01      	cmp	r2, #1
  4059ea:	f000 8111 	beq.w	405c10 <_dtoa_r+0xad8>
  4059ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4059f0:	9a04      	ldr	r2, [sp, #16]
  4059f2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4059f6:	4413      	add	r3, r2
  4059f8:	4699      	mov	r9, r3
  4059fa:	e00d      	b.n	405a18 <_dtoa_r+0x8e0>
  4059fc:	2000      	movs	r0, #0
  4059fe:	496a      	ldr	r1, [pc, #424]	; (405ba8 <_dtoa_r+0xa70>)
  405a00:	f001 ff44 	bl	40788c <__aeabi_dsub>
  405a04:	4652      	mov	r2, sl
  405a06:	465b      	mov	r3, fp
  405a08:	f002 fb66 	bl	4080d8 <__aeabi_dcmplt>
  405a0c:	2800      	cmp	r0, #0
  405a0e:	f040 8258 	bne.w	405ec2 <_dtoa_r+0xd8a>
  405a12:	454d      	cmp	r5, r9
  405a14:	f000 80fa 	beq.w	405c0c <_dtoa_r+0xad4>
  405a18:	4650      	mov	r0, sl
  405a1a:	4659      	mov	r1, fp
  405a1c:	2200      	movs	r2, #0
  405a1e:	4b65      	ldr	r3, [pc, #404]	; (405bb4 <_dtoa_r+0xa7c>)
  405a20:	f002 f8e8 	bl	407bf4 <__aeabi_dmul>
  405a24:	2200      	movs	r2, #0
  405a26:	4b63      	ldr	r3, [pc, #396]	; (405bb4 <_dtoa_r+0xa7c>)
  405a28:	4682      	mov	sl, r0
  405a2a:	468b      	mov	fp, r1
  405a2c:	4630      	mov	r0, r6
  405a2e:	4639      	mov	r1, r7
  405a30:	f002 f8e0 	bl	407bf4 <__aeabi_dmul>
  405a34:	460f      	mov	r7, r1
  405a36:	4606      	mov	r6, r0
  405a38:	f002 fb8c 	bl	408154 <__aeabi_d2iz>
  405a3c:	4680      	mov	r8, r0
  405a3e:	f002 f873 	bl	407b28 <__aeabi_i2d>
  405a42:	4602      	mov	r2, r0
  405a44:	460b      	mov	r3, r1
  405a46:	4630      	mov	r0, r6
  405a48:	4639      	mov	r1, r7
  405a4a:	f001 ff1f 	bl	40788c <__aeabi_dsub>
  405a4e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405a52:	fa5f f888 	uxtb.w	r8, r8
  405a56:	4652      	mov	r2, sl
  405a58:	465b      	mov	r3, fp
  405a5a:	f805 8b01 	strb.w	r8, [r5], #1
  405a5e:	4606      	mov	r6, r0
  405a60:	460f      	mov	r7, r1
  405a62:	f002 fb39 	bl	4080d8 <__aeabi_dcmplt>
  405a66:	4632      	mov	r2, r6
  405a68:	463b      	mov	r3, r7
  405a6a:	2800      	cmp	r0, #0
  405a6c:	d0c6      	beq.n	4059fc <_dtoa_r+0x8c4>
  405a6e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405a72:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405a74:	9302      	str	r3, [sp, #8]
  405a76:	e523      	b.n	4054c0 <_dtoa_r+0x388>
  405a78:	2300      	movs	r3, #0
  405a7a:	930b      	str	r3, [sp, #44]	; 0x2c
  405a7c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405a7e:	2b00      	cmp	r3, #0
  405a80:	f340 80dc 	ble.w	405c3c <_dtoa_r+0xb04>
  405a84:	461f      	mov	r7, r3
  405a86:	461e      	mov	r6, r3
  405a88:	930f      	str	r3, [sp, #60]	; 0x3c
  405a8a:	930a      	str	r3, [sp, #40]	; 0x28
  405a8c:	e6f6      	b.n	40587c <_dtoa_r+0x744>
  405a8e:	2301      	movs	r3, #1
  405a90:	930b      	str	r3, [sp, #44]	; 0x2c
  405a92:	e7f3      	b.n	405a7c <_dtoa_r+0x944>
  405a94:	f1ba 0f00 	cmp.w	sl, #0
  405a98:	f47f ada8 	bne.w	4055ec <_dtoa_r+0x4b4>
  405a9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405aa0:	2b00      	cmp	r3, #0
  405aa2:	f47f adba 	bne.w	40561a <_dtoa_r+0x4e2>
  405aa6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405aaa:	0d3f      	lsrs	r7, r7, #20
  405aac:	053f      	lsls	r7, r7, #20
  405aae:	2f00      	cmp	r7, #0
  405ab0:	f000 820d 	beq.w	405ece <_dtoa_r+0xd96>
  405ab4:	9b08      	ldr	r3, [sp, #32]
  405ab6:	3301      	adds	r3, #1
  405ab8:	9308      	str	r3, [sp, #32]
  405aba:	9b06      	ldr	r3, [sp, #24]
  405abc:	3301      	adds	r3, #1
  405abe:	9306      	str	r3, [sp, #24]
  405ac0:	2301      	movs	r3, #1
  405ac2:	930c      	str	r3, [sp, #48]	; 0x30
  405ac4:	e5ab      	b.n	40561e <_dtoa_r+0x4e6>
  405ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405ac8:	2b00      	cmp	r3, #0
  405aca:	f73f ac42 	bgt.w	405352 <_dtoa_r+0x21a>
  405ace:	f040 8221 	bne.w	405f14 <_dtoa_r+0xddc>
  405ad2:	2200      	movs	r2, #0
  405ad4:	4b38      	ldr	r3, [pc, #224]	; (405bb8 <_dtoa_r+0xa80>)
  405ad6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405ada:	f002 f88b 	bl	407bf4 <__aeabi_dmul>
  405ade:	4652      	mov	r2, sl
  405ae0:	465b      	mov	r3, fp
  405ae2:	f002 fb0d 	bl	408100 <__aeabi_dcmpge>
  405ae6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  405aea:	4646      	mov	r6, r8
  405aec:	2800      	cmp	r0, #0
  405aee:	d041      	beq.n	405b74 <_dtoa_r+0xa3c>
  405af0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405af2:	9d04      	ldr	r5, [sp, #16]
  405af4:	43db      	mvns	r3, r3
  405af6:	9302      	str	r3, [sp, #8]
  405af8:	4641      	mov	r1, r8
  405afa:	4620      	mov	r0, r4
  405afc:	f000 fe74 	bl	4067e8 <_Bfree>
  405b00:	2e00      	cmp	r6, #0
  405b02:	f43f acdd 	beq.w	4054c0 <_dtoa_r+0x388>
  405b06:	e6a7      	b.n	405858 <_dtoa_r+0x720>
  405b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405b0a:	4649      	mov	r1, r9
  405b0c:	4620      	mov	r0, r4
  405b0e:	f000 ffa1 	bl	406a54 <__pow5mult>
  405b12:	4681      	mov	r9, r0
  405b14:	e558      	b.n	4055c8 <_dtoa_r+0x490>
  405b16:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405b18:	2a00      	cmp	r2, #0
  405b1a:	f000 8187 	beq.w	405e2c <_dtoa_r+0xcf4>
  405b1e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405b22:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405b24:	9d08      	ldr	r5, [sp, #32]
  405b26:	e4f2      	b.n	40550e <_dtoa_r+0x3d6>
  405b28:	f1ba 0f00 	cmp.w	sl, #0
  405b2c:	f47f ad75 	bne.w	40561a <_dtoa_r+0x4e2>
  405b30:	e7b4      	b.n	405a9c <_dtoa_r+0x964>
  405b32:	f000 fe63 	bl	4067fc <__multadd>
  405b36:	4647      	mov	r7, r8
  405b38:	4606      	mov	r6, r0
  405b3a:	4683      	mov	fp, r0
  405b3c:	e5be      	b.n	4056bc <_dtoa_r+0x584>
  405b3e:	4601      	mov	r1, r0
  405b40:	4620      	mov	r0, r4
  405b42:	9306      	str	r3, [sp, #24]
  405b44:	f000 fe50 	bl	4067e8 <_Bfree>
  405b48:	2201      	movs	r2, #1
  405b4a:	9b06      	ldr	r3, [sp, #24]
  405b4c:	e5e0      	b.n	405710 <_dtoa_r+0x5d8>
  405b4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405b50:	2b02      	cmp	r3, #2
  405b52:	f77f ad96 	ble.w	405682 <_dtoa_r+0x54a>
  405b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405b58:	2b00      	cmp	r3, #0
  405b5a:	d1c9      	bne.n	405af0 <_dtoa_r+0x9b8>
  405b5c:	4641      	mov	r1, r8
  405b5e:	2205      	movs	r2, #5
  405b60:	4620      	mov	r0, r4
  405b62:	f000 fe4b 	bl	4067fc <__multadd>
  405b66:	4601      	mov	r1, r0
  405b68:	4680      	mov	r8, r0
  405b6a:	4648      	mov	r0, r9
  405b6c:	f001 f814 	bl	406b98 <__mcmp>
  405b70:	2800      	cmp	r0, #0
  405b72:	ddbd      	ble.n	405af0 <_dtoa_r+0x9b8>
  405b74:	9a02      	ldr	r2, [sp, #8]
  405b76:	9904      	ldr	r1, [sp, #16]
  405b78:	2331      	movs	r3, #49	; 0x31
  405b7a:	3201      	adds	r2, #1
  405b7c:	9202      	str	r2, [sp, #8]
  405b7e:	700b      	strb	r3, [r1, #0]
  405b80:	1c4d      	adds	r5, r1, #1
  405b82:	e7b9      	b.n	405af8 <_dtoa_r+0x9c0>
  405b84:	9a02      	ldr	r2, [sp, #8]
  405b86:	3201      	adds	r2, #1
  405b88:	9202      	str	r2, [sp, #8]
  405b8a:	9a04      	ldr	r2, [sp, #16]
  405b8c:	2331      	movs	r3, #49	; 0x31
  405b8e:	7013      	strb	r3, [r2, #0]
  405b90:	e652      	b.n	405838 <_dtoa_r+0x700>
  405b92:	2301      	movs	r3, #1
  405b94:	930b      	str	r3, [sp, #44]	; 0x2c
  405b96:	e666      	b.n	405866 <_dtoa_r+0x72e>
  405b98:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405b9c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405b9e:	e48f      	b.n	4054c0 <_dtoa_r+0x388>
  405ba0:	00408f98 	.word	0x00408f98
  405ba4:	00408f70 	.word	0x00408f70
  405ba8:	3ff00000 	.word	0x3ff00000
  405bac:	401c0000 	.word	0x401c0000
  405bb0:	3fe00000 	.word	0x3fe00000
  405bb4:	40240000 	.word	0x40240000
  405bb8:	40140000 	.word	0x40140000
  405bbc:	4650      	mov	r0, sl
  405bbe:	f001 ffb3 	bl	407b28 <__aeabi_i2d>
  405bc2:	463a      	mov	r2, r7
  405bc4:	4643      	mov	r3, r8
  405bc6:	f002 f815 	bl	407bf4 <__aeabi_dmul>
  405bca:	2200      	movs	r2, #0
  405bcc:	4bc1      	ldr	r3, [pc, #772]	; (405ed4 <_dtoa_r+0xd9c>)
  405bce:	f001 fe5f 	bl	407890 <__adddf3>
  405bd2:	4605      	mov	r5, r0
  405bd4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405bd8:	4641      	mov	r1, r8
  405bda:	2200      	movs	r2, #0
  405bdc:	4bbe      	ldr	r3, [pc, #760]	; (405ed8 <_dtoa_r+0xda0>)
  405bde:	4638      	mov	r0, r7
  405be0:	f001 fe54 	bl	40788c <__aeabi_dsub>
  405be4:	462a      	mov	r2, r5
  405be6:	4633      	mov	r3, r6
  405be8:	4682      	mov	sl, r0
  405bea:	468b      	mov	fp, r1
  405bec:	f002 fa92 	bl	408114 <__aeabi_dcmpgt>
  405bf0:	4680      	mov	r8, r0
  405bf2:	2800      	cmp	r0, #0
  405bf4:	f040 8110 	bne.w	405e18 <_dtoa_r+0xce0>
  405bf8:	462a      	mov	r2, r5
  405bfa:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  405bfe:	4650      	mov	r0, sl
  405c00:	4659      	mov	r1, fp
  405c02:	f002 fa69 	bl	4080d8 <__aeabi_dcmplt>
  405c06:	b118      	cbz	r0, 405c10 <_dtoa_r+0xad8>
  405c08:	4646      	mov	r6, r8
  405c0a:	e771      	b.n	405af0 <_dtoa_r+0x9b8>
  405c0c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405c10:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405c14:	f7ff bb8a 	b.w	40532c <_dtoa_r+0x1f4>
  405c18:	9804      	ldr	r0, [sp, #16]
  405c1a:	f7ff babb 	b.w	405194 <_dtoa_r+0x5c>
  405c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405c20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405c22:	970c      	str	r7, [sp, #48]	; 0x30
  405c24:	1afb      	subs	r3, r7, r3
  405c26:	441a      	add	r2, r3
  405c28:	920d      	str	r2, [sp, #52]	; 0x34
  405c2a:	2700      	movs	r7, #0
  405c2c:	e469      	b.n	405502 <_dtoa_r+0x3ca>
  405c2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405c32:	f04f 0a02 	mov.w	sl, #2
  405c36:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  405c3a:	e657      	b.n	4058ec <_dtoa_r+0x7b4>
  405c3c:	2100      	movs	r1, #0
  405c3e:	2301      	movs	r3, #1
  405c40:	6461      	str	r1, [r4, #68]	; 0x44
  405c42:	4620      	mov	r0, r4
  405c44:	9325      	str	r3, [sp, #148]	; 0x94
  405c46:	f000 fda9 	bl	40679c <_Balloc>
  405c4a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405c4c:	9004      	str	r0, [sp, #16]
  405c4e:	6420      	str	r0, [r4, #64]	; 0x40
  405c50:	930a      	str	r3, [sp, #40]	; 0x28
  405c52:	930f      	str	r3, [sp, #60]	; 0x3c
  405c54:	e629      	b.n	4058aa <_dtoa_r+0x772>
  405c56:	2a00      	cmp	r2, #0
  405c58:	46d0      	mov	r8, sl
  405c5a:	f8cd b018 	str.w	fp, [sp, #24]
  405c5e:	469a      	mov	sl, r3
  405c60:	dd11      	ble.n	405c86 <_dtoa_r+0xb4e>
  405c62:	4649      	mov	r1, r9
  405c64:	2201      	movs	r2, #1
  405c66:	4620      	mov	r0, r4
  405c68:	f000 ff44 	bl	406af4 <__lshift>
  405c6c:	4641      	mov	r1, r8
  405c6e:	4681      	mov	r9, r0
  405c70:	f000 ff92 	bl	406b98 <__mcmp>
  405c74:	2800      	cmp	r0, #0
  405c76:	f340 8146 	ble.w	405f06 <_dtoa_r+0xdce>
  405c7a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405c7e:	f000 8106 	beq.w	405e8e <_dtoa_r+0xd56>
  405c82:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  405c86:	46b3      	mov	fp, r6
  405c88:	f887 a000 	strb.w	sl, [r7]
  405c8c:	1c7d      	adds	r5, r7, #1
  405c8e:	9e06      	ldr	r6, [sp, #24]
  405c90:	e5d2      	b.n	405838 <_dtoa_r+0x700>
  405c92:	d104      	bne.n	405c9e <_dtoa_r+0xb66>
  405c94:	f01a 0f01 	tst.w	sl, #1
  405c98:	d001      	beq.n	405c9e <_dtoa_r+0xb66>
  405c9a:	e5bd      	b.n	405818 <_dtoa_r+0x6e0>
  405c9c:	4615      	mov	r5, r2
  405c9e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405ca2:	2b30      	cmp	r3, #48	; 0x30
  405ca4:	f105 32ff 	add.w	r2, r5, #4294967295
  405ca8:	d0f8      	beq.n	405c9c <_dtoa_r+0xb64>
  405caa:	e5c5      	b.n	405838 <_dtoa_r+0x700>
  405cac:	9904      	ldr	r1, [sp, #16]
  405cae:	2230      	movs	r2, #48	; 0x30
  405cb0:	700a      	strb	r2, [r1, #0]
  405cb2:	9a02      	ldr	r2, [sp, #8]
  405cb4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405cb8:	3201      	adds	r2, #1
  405cba:	9202      	str	r2, [sp, #8]
  405cbc:	f7ff bbfc 	b.w	4054b8 <_dtoa_r+0x380>
  405cc0:	f000 80bb 	beq.w	405e3a <_dtoa_r+0xd02>
  405cc4:	9b02      	ldr	r3, [sp, #8]
  405cc6:	425d      	negs	r5, r3
  405cc8:	4b84      	ldr	r3, [pc, #528]	; (405edc <_dtoa_r+0xda4>)
  405cca:	f005 020f 	and.w	r2, r5, #15
  405cce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  405cd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  405cda:	f001 ff8b 	bl	407bf4 <__aeabi_dmul>
  405cde:	112d      	asrs	r5, r5, #4
  405ce0:	4607      	mov	r7, r0
  405ce2:	4688      	mov	r8, r1
  405ce4:	f000 812c 	beq.w	405f40 <_dtoa_r+0xe08>
  405ce8:	4e7d      	ldr	r6, [pc, #500]	; (405ee0 <_dtoa_r+0xda8>)
  405cea:	f04f 0a02 	mov.w	sl, #2
  405cee:	07eb      	lsls	r3, r5, #31
  405cf0:	d509      	bpl.n	405d06 <_dtoa_r+0xbce>
  405cf2:	4638      	mov	r0, r7
  405cf4:	4641      	mov	r1, r8
  405cf6:	e9d6 2300 	ldrd	r2, r3, [r6]
  405cfa:	f001 ff7b 	bl	407bf4 <__aeabi_dmul>
  405cfe:	f10a 0a01 	add.w	sl, sl, #1
  405d02:	4607      	mov	r7, r0
  405d04:	4688      	mov	r8, r1
  405d06:	106d      	asrs	r5, r5, #1
  405d08:	f106 0608 	add.w	r6, r6, #8
  405d0c:	d1ef      	bne.n	405cee <_dtoa_r+0xbb6>
  405d0e:	e608      	b.n	405922 <_dtoa_r+0x7ea>
  405d10:	6871      	ldr	r1, [r6, #4]
  405d12:	4620      	mov	r0, r4
  405d14:	f000 fd42 	bl	40679c <_Balloc>
  405d18:	6933      	ldr	r3, [r6, #16]
  405d1a:	3302      	adds	r3, #2
  405d1c:	009a      	lsls	r2, r3, #2
  405d1e:	4605      	mov	r5, r0
  405d20:	f106 010c 	add.w	r1, r6, #12
  405d24:	300c      	adds	r0, #12
  405d26:	f000 fc93 	bl	406650 <memcpy>
  405d2a:	4629      	mov	r1, r5
  405d2c:	2201      	movs	r2, #1
  405d2e:	4620      	mov	r0, r4
  405d30:	f000 fee0 	bl	406af4 <__lshift>
  405d34:	9006      	str	r0, [sp, #24]
  405d36:	e4b5      	b.n	4056a4 <_dtoa_r+0x56c>
  405d38:	2b39      	cmp	r3, #57	; 0x39
  405d3a:	f8cd b018 	str.w	fp, [sp, #24]
  405d3e:	46d0      	mov	r8, sl
  405d40:	f000 80a5 	beq.w	405e8e <_dtoa_r+0xd56>
  405d44:	f103 0a01 	add.w	sl, r3, #1
  405d48:	46b3      	mov	fp, r6
  405d4a:	f887 a000 	strb.w	sl, [r7]
  405d4e:	1c7d      	adds	r5, r7, #1
  405d50:	9e06      	ldr	r6, [sp, #24]
  405d52:	e571      	b.n	405838 <_dtoa_r+0x700>
  405d54:	465a      	mov	r2, fp
  405d56:	46d0      	mov	r8, sl
  405d58:	46b3      	mov	fp, r6
  405d5a:	469a      	mov	sl, r3
  405d5c:	4616      	mov	r6, r2
  405d5e:	e54f      	b.n	405800 <_dtoa_r+0x6c8>
  405d60:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405d62:	495e      	ldr	r1, [pc, #376]	; (405edc <_dtoa_r+0xda4>)
  405d64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405d68:	462a      	mov	r2, r5
  405d6a:	4633      	mov	r3, r6
  405d6c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405d70:	f001 ff40 	bl	407bf4 <__aeabi_dmul>
  405d74:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405d78:	4638      	mov	r0, r7
  405d7a:	4641      	mov	r1, r8
  405d7c:	f002 f9ea 	bl	408154 <__aeabi_d2iz>
  405d80:	4605      	mov	r5, r0
  405d82:	f001 fed1 	bl	407b28 <__aeabi_i2d>
  405d86:	460b      	mov	r3, r1
  405d88:	4602      	mov	r2, r0
  405d8a:	4641      	mov	r1, r8
  405d8c:	4638      	mov	r0, r7
  405d8e:	f001 fd7d 	bl	40788c <__aeabi_dsub>
  405d92:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405d94:	460f      	mov	r7, r1
  405d96:	9904      	ldr	r1, [sp, #16]
  405d98:	3530      	adds	r5, #48	; 0x30
  405d9a:	2b01      	cmp	r3, #1
  405d9c:	700d      	strb	r5, [r1, #0]
  405d9e:	4606      	mov	r6, r0
  405da0:	f101 0501 	add.w	r5, r1, #1
  405da4:	d026      	beq.n	405df4 <_dtoa_r+0xcbc>
  405da6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405da8:	9a04      	ldr	r2, [sp, #16]
  405daa:	f8df b13c 	ldr.w	fp, [pc, #316]	; 405ee8 <_dtoa_r+0xdb0>
  405dae:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405db2:	4413      	add	r3, r2
  405db4:	f04f 0a00 	mov.w	sl, #0
  405db8:	4699      	mov	r9, r3
  405dba:	4652      	mov	r2, sl
  405dbc:	465b      	mov	r3, fp
  405dbe:	4630      	mov	r0, r6
  405dc0:	4639      	mov	r1, r7
  405dc2:	f001 ff17 	bl	407bf4 <__aeabi_dmul>
  405dc6:	460f      	mov	r7, r1
  405dc8:	4606      	mov	r6, r0
  405dca:	f002 f9c3 	bl	408154 <__aeabi_d2iz>
  405dce:	4680      	mov	r8, r0
  405dd0:	f001 feaa 	bl	407b28 <__aeabi_i2d>
  405dd4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405dd8:	4602      	mov	r2, r0
  405dda:	460b      	mov	r3, r1
  405ddc:	4630      	mov	r0, r6
  405dde:	4639      	mov	r1, r7
  405de0:	f001 fd54 	bl	40788c <__aeabi_dsub>
  405de4:	f805 8b01 	strb.w	r8, [r5], #1
  405de8:	454d      	cmp	r5, r9
  405dea:	4606      	mov	r6, r0
  405dec:	460f      	mov	r7, r1
  405dee:	d1e4      	bne.n	405dba <_dtoa_r+0xc82>
  405df0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405df4:	4b3b      	ldr	r3, [pc, #236]	; (405ee4 <_dtoa_r+0xdac>)
  405df6:	2200      	movs	r2, #0
  405df8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  405dfc:	f001 fd48 	bl	407890 <__adddf3>
  405e00:	4632      	mov	r2, r6
  405e02:	463b      	mov	r3, r7
  405e04:	f002 f968 	bl	4080d8 <__aeabi_dcmplt>
  405e08:	2800      	cmp	r0, #0
  405e0a:	d046      	beq.n	405e9a <_dtoa_r+0xd62>
  405e0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405e0e:	9302      	str	r3, [sp, #8]
  405e10:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405e14:	f7ff bb43 	b.w	40549e <_dtoa_r+0x366>
  405e18:	f04f 0800 	mov.w	r8, #0
  405e1c:	4646      	mov	r6, r8
  405e1e:	e6a9      	b.n	405b74 <_dtoa_r+0xa3c>
  405e20:	9b08      	ldr	r3, [sp, #32]
  405e22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405e24:	1a9d      	subs	r5, r3, r2
  405e26:	2300      	movs	r3, #0
  405e28:	f7ff bb71 	b.w	40550e <_dtoa_r+0x3d6>
  405e2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  405e2e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405e30:	9d08      	ldr	r5, [sp, #32]
  405e32:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405e36:	f7ff bb6a 	b.w	40550e <_dtoa_r+0x3d6>
  405e3a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  405e3e:	f04f 0a02 	mov.w	sl, #2
  405e42:	e56e      	b.n	405922 <_dtoa_r+0x7ea>
  405e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e46:	2b00      	cmp	r3, #0
  405e48:	f43f aeb8 	beq.w	405bbc <_dtoa_r+0xa84>
  405e4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405e4e:	2b00      	cmp	r3, #0
  405e50:	f77f aede 	ble.w	405c10 <_dtoa_r+0xad8>
  405e54:	2200      	movs	r2, #0
  405e56:	4b24      	ldr	r3, [pc, #144]	; (405ee8 <_dtoa_r+0xdb0>)
  405e58:	4638      	mov	r0, r7
  405e5a:	4641      	mov	r1, r8
  405e5c:	f001 feca 	bl	407bf4 <__aeabi_dmul>
  405e60:	4607      	mov	r7, r0
  405e62:	4688      	mov	r8, r1
  405e64:	f10a 0001 	add.w	r0, sl, #1
  405e68:	f001 fe5e 	bl	407b28 <__aeabi_i2d>
  405e6c:	463a      	mov	r2, r7
  405e6e:	4643      	mov	r3, r8
  405e70:	f001 fec0 	bl	407bf4 <__aeabi_dmul>
  405e74:	2200      	movs	r2, #0
  405e76:	4b17      	ldr	r3, [pc, #92]	; (405ed4 <_dtoa_r+0xd9c>)
  405e78:	f001 fd0a 	bl	407890 <__adddf3>
  405e7c:	9a02      	ldr	r2, [sp, #8]
  405e7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405e80:	9312      	str	r3, [sp, #72]	; 0x48
  405e82:	3a01      	subs	r2, #1
  405e84:	4605      	mov	r5, r0
  405e86:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405e8a:	9215      	str	r2, [sp, #84]	; 0x54
  405e8c:	e56a      	b.n	405964 <_dtoa_r+0x82c>
  405e8e:	2239      	movs	r2, #57	; 0x39
  405e90:	46b3      	mov	fp, r6
  405e92:	703a      	strb	r2, [r7, #0]
  405e94:	9e06      	ldr	r6, [sp, #24]
  405e96:	1c7d      	adds	r5, r7, #1
  405e98:	e4c0      	b.n	40581c <_dtoa_r+0x6e4>
  405e9a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  405e9e:	2000      	movs	r0, #0
  405ea0:	4910      	ldr	r1, [pc, #64]	; (405ee4 <_dtoa_r+0xdac>)
  405ea2:	f001 fcf3 	bl	40788c <__aeabi_dsub>
  405ea6:	4632      	mov	r2, r6
  405ea8:	463b      	mov	r3, r7
  405eaa:	f002 f933 	bl	408114 <__aeabi_dcmpgt>
  405eae:	b908      	cbnz	r0, 405eb4 <_dtoa_r+0xd7c>
  405eb0:	e6ae      	b.n	405c10 <_dtoa_r+0xad8>
  405eb2:	4615      	mov	r5, r2
  405eb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405eb8:	2b30      	cmp	r3, #48	; 0x30
  405eba:	f105 32ff 	add.w	r2, r5, #4294967295
  405ebe:	d0f8      	beq.n	405eb2 <_dtoa_r+0xd7a>
  405ec0:	e5d7      	b.n	405a72 <_dtoa_r+0x93a>
  405ec2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405ec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405ec8:	9302      	str	r3, [sp, #8]
  405eca:	f7ff bae8 	b.w	40549e <_dtoa_r+0x366>
  405ece:	970c      	str	r7, [sp, #48]	; 0x30
  405ed0:	f7ff bba5 	b.w	40561e <_dtoa_r+0x4e6>
  405ed4:	401c0000 	.word	0x401c0000
  405ed8:	40140000 	.word	0x40140000
  405edc:	00408f98 	.word	0x00408f98
  405ee0:	00408f70 	.word	0x00408f70
  405ee4:	3fe00000 	.word	0x3fe00000
  405ee8:	40240000 	.word	0x40240000
  405eec:	2b39      	cmp	r3, #57	; 0x39
  405eee:	f8cd b018 	str.w	fp, [sp, #24]
  405ef2:	46d0      	mov	r8, sl
  405ef4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405ef8:	469a      	mov	sl, r3
  405efa:	d0c8      	beq.n	405e8e <_dtoa_r+0xd56>
  405efc:	f1bb 0f00 	cmp.w	fp, #0
  405f00:	f73f aebf 	bgt.w	405c82 <_dtoa_r+0xb4a>
  405f04:	e6bf      	b.n	405c86 <_dtoa_r+0xb4e>
  405f06:	f47f aebe 	bne.w	405c86 <_dtoa_r+0xb4e>
  405f0a:	f01a 0f01 	tst.w	sl, #1
  405f0e:	f43f aeba 	beq.w	405c86 <_dtoa_r+0xb4e>
  405f12:	e6b2      	b.n	405c7a <_dtoa_r+0xb42>
  405f14:	f04f 0800 	mov.w	r8, #0
  405f18:	4646      	mov	r6, r8
  405f1a:	e5e9      	b.n	405af0 <_dtoa_r+0x9b8>
  405f1c:	4631      	mov	r1, r6
  405f1e:	2300      	movs	r3, #0
  405f20:	220a      	movs	r2, #10
  405f22:	4620      	mov	r0, r4
  405f24:	f000 fc6a 	bl	4067fc <__multadd>
  405f28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405f2a:	2b00      	cmp	r3, #0
  405f2c:	4606      	mov	r6, r0
  405f2e:	dd0a      	ble.n	405f46 <_dtoa_r+0xe0e>
  405f30:	930a      	str	r3, [sp, #40]	; 0x28
  405f32:	f7ff bbaa 	b.w	40568a <_dtoa_r+0x552>
  405f36:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f38:	2b02      	cmp	r3, #2
  405f3a:	dc23      	bgt.n	405f84 <_dtoa_r+0xe4c>
  405f3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405f3e:	e43b      	b.n	4057b8 <_dtoa_r+0x680>
  405f40:	f04f 0a02 	mov.w	sl, #2
  405f44:	e4ed      	b.n	405922 <_dtoa_r+0x7ea>
  405f46:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f48:	2b02      	cmp	r3, #2
  405f4a:	dc1b      	bgt.n	405f84 <_dtoa_r+0xe4c>
  405f4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405f4e:	e7ef      	b.n	405f30 <_dtoa_r+0xdf8>
  405f50:	2500      	movs	r5, #0
  405f52:	6465      	str	r5, [r4, #68]	; 0x44
  405f54:	4629      	mov	r1, r5
  405f56:	4620      	mov	r0, r4
  405f58:	f000 fc20 	bl	40679c <_Balloc>
  405f5c:	f04f 33ff 	mov.w	r3, #4294967295
  405f60:	930a      	str	r3, [sp, #40]	; 0x28
  405f62:	930f      	str	r3, [sp, #60]	; 0x3c
  405f64:	2301      	movs	r3, #1
  405f66:	9004      	str	r0, [sp, #16]
  405f68:	9525      	str	r5, [sp, #148]	; 0x94
  405f6a:	6420      	str	r0, [r4, #64]	; 0x40
  405f6c:	930b      	str	r3, [sp, #44]	; 0x2c
  405f6e:	f7ff b9dd 	b.w	40532c <_dtoa_r+0x1f4>
  405f72:	2501      	movs	r5, #1
  405f74:	f7ff b9a5 	b.w	4052c2 <_dtoa_r+0x18a>
  405f78:	f43f ab69 	beq.w	40564e <_dtoa_r+0x516>
  405f7c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  405f80:	f7ff bbf9 	b.w	405776 <_dtoa_r+0x63e>
  405f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405f86:	930a      	str	r3, [sp, #40]	; 0x28
  405f88:	e5e5      	b.n	405b56 <_dtoa_r+0xa1e>
  405f8a:	bf00      	nop

00405f8c <__libc_fini_array>:
  405f8c:	b538      	push	{r3, r4, r5, lr}
  405f8e:	4c0a      	ldr	r4, [pc, #40]	; (405fb8 <__libc_fini_array+0x2c>)
  405f90:	4d0a      	ldr	r5, [pc, #40]	; (405fbc <__libc_fini_array+0x30>)
  405f92:	1b64      	subs	r4, r4, r5
  405f94:	10a4      	asrs	r4, r4, #2
  405f96:	d00a      	beq.n	405fae <__libc_fini_array+0x22>
  405f98:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405f9c:	3b01      	subs	r3, #1
  405f9e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405fa2:	3c01      	subs	r4, #1
  405fa4:	f855 3904 	ldr.w	r3, [r5], #-4
  405fa8:	4798      	blx	r3
  405faa:	2c00      	cmp	r4, #0
  405fac:	d1f9      	bne.n	405fa2 <__libc_fini_array+0x16>
  405fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405fb2:	f003 b8ef 	b.w	409194 <_fini>
  405fb6:	bf00      	nop
  405fb8:	004091a4 	.word	0x004091a4
  405fbc:	004091a0 	.word	0x004091a0

00405fc0 <_localeconv_r>:
  405fc0:	4a04      	ldr	r2, [pc, #16]	; (405fd4 <_localeconv_r+0x14>)
  405fc2:	4b05      	ldr	r3, [pc, #20]	; (405fd8 <_localeconv_r+0x18>)
  405fc4:	6812      	ldr	r2, [r2, #0]
  405fc6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  405fc8:	2800      	cmp	r0, #0
  405fca:	bf08      	it	eq
  405fcc:	4618      	moveq	r0, r3
  405fce:	30f0      	adds	r0, #240	; 0xf0
  405fd0:	4770      	bx	lr
  405fd2:	bf00      	nop
  405fd4:	20000010 	.word	0x20000010
  405fd8:	20000854 	.word	0x20000854

00405fdc <__retarget_lock_acquire_recursive>:
  405fdc:	4770      	bx	lr
  405fde:	bf00      	nop

00405fe0 <__retarget_lock_release_recursive>:
  405fe0:	4770      	bx	lr
  405fe2:	bf00      	nop

00405fe4 <_malloc_r>:
  405fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405fe8:	f101 060b 	add.w	r6, r1, #11
  405fec:	2e16      	cmp	r6, #22
  405fee:	b083      	sub	sp, #12
  405ff0:	4605      	mov	r5, r0
  405ff2:	f240 809e 	bls.w	406132 <_malloc_r+0x14e>
  405ff6:	f036 0607 	bics.w	r6, r6, #7
  405ffa:	f100 80bd 	bmi.w	406178 <_malloc_r+0x194>
  405ffe:	42b1      	cmp	r1, r6
  406000:	f200 80ba 	bhi.w	406178 <_malloc_r+0x194>
  406004:	f000 fbbe 	bl	406784 <__malloc_lock>
  406008:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40600c:	f0c0 8293 	bcc.w	406536 <_malloc_r+0x552>
  406010:	0a73      	lsrs	r3, r6, #9
  406012:	f000 80b8 	beq.w	406186 <_malloc_r+0x1a2>
  406016:	2b04      	cmp	r3, #4
  406018:	f200 8179 	bhi.w	40630e <_malloc_r+0x32a>
  40601c:	09b3      	lsrs	r3, r6, #6
  40601e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  406022:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  406026:	00c3      	lsls	r3, r0, #3
  406028:	4fbf      	ldr	r7, [pc, #764]	; (406328 <_malloc_r+0x344>)
  40602a:	443b      	add	r3, r7
  40602c:	f1a3 0108 	sub.w	r1, r3, #8
  406030:	685c      	ldr	r4, [r3, #4]
  406032:	42a1      	cmp	r1, r4
  406034:	d106      	bne.n	406044 <_malloc_r+0x60>
  406036:	e00c      	b.n	406052 <_malloc_r+0x6e>
  406038:	2a00      	cmp	r2, #0
  40603a:	f280 80aa 	bge.w	406192 <_malloc_r+0x1ae>
  40603e:	68e4      	ldr	r4, [r4, #12]
  406040:	42a1      	cmp	r1, r4
  406042:	d006      	beq.n	406052 <_malloc_r+0x6e>
  406044:	6863      	ldr	r3, [r4, #4]
  406046:	f023 0303 	bic.w	r3, r3, #3
  40604a:	1b9a      	subs	r2, r3, r6
  40604c:	2a0f      	cmp	r2, #15
  40604e:	ddf3      	ble.n	406038 <_malloc_r+0x54>
  406050:	4670      	mov	r0, lr
  406052:	693c      	ldr	r4, [r7, #16]
  406054:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40633c <_malloc_r+0x358>
  406058:	4574      	cmp	r4, lr
  40605a:	f000 81ab 	beq.w	4063b4 <_malloc_r+0x3d0>
  40605e:	6863      	ldr	r3, [r4, #4]
  406060:	f023 0303 	bic.w	r3, r3, #3
  406064:	1b9a      	subs	r2, r3, r6
  406066:	2a0f      	cmp	r2, #15
  406068:	f300 8190 	bgt.w	40638c <_malloc_r+0x3a8>
  40606c:	2a00      	cmp	r2, #0
  40606e:	f8c7 e014 	str.w	lr, [r7, #20]
  406072:	f8c7 e010 	str.w	lr, [r7, #16]
  406076:	f280 809d 	bge.w	4061b4 <_malloc_r+0x1d0>
  40607a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40607e:	f080 8161 	bcs.w	406344 <_malloc_r+0x360>
  406082:	08db      	lsrs	r3, r3, #3
  406084:	f103 0c01 	add.w	ip, r3, #1
  406088:	1099      	asrs	r1, r3, #2
  40608a:	687a      	ldr	r2, [r7, #4]
  40608c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406090:	f8c4 8008 	str.w	r8, [r4, #8]
  406094:	2301      	movs	r3, #1
  406096:	408b      	lsls	r3, r1
  406098:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40609c:	4313      	orrs	r3, r2
  40609e:	3908      	subs	r1, #8
  4060a0:	60e1      	str	r1, [r4, #12]
  4060a2:	607b      	str	r3, [r7, #4]
  4060a4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4060a8:	f8c8 400c 	str.w	r4, [r8, #12]
  4060ac:	1082      	asrs	r2, r0, #2
  4060ae:	2401      	movs	r4, #1
  4060b0:	4094      	lsls	r4, r2
  4060b2:	429c      	cmp	r4, r3
  4060b4:	f200 808b 	bhi.w	4061ce <_malloc_r+0x1ea>
  4060b8:	421c      	tst	r4, r3
  4060ba:	d106      	bne.n	4060ca <_malloc_r+0xe6>
  4060bc:	f020 0003 	bic.w	r0, r0, #3
  4060c0:	0064      	lsls	r4, r4, #1
  4060c2:	421c      	tst	r4, r3
  4060c4:	f100 0004 	add.w	r0, r0, #4
  4060c8:	d0fa      	beq.n	4060c0 <_malloc_r+0xdc>
  4060ca:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4060ce:	46cc      	mov	ip, r9
  4060d0:	4680      	mov	r8, r0
  4060d2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4060d6:	459c      	cmp	ip, r3
  4060d8:	d107      	bne.n	4060ea <_malloc_r+0x106>
  4060da:	e16d      	b.n	4063b8 <_malloc_r+0x3d4>
  4060dc:	2a00      	cmp	r2, #0
  4060de:	f280 817b 	bge.w	4063d8 <_malloc_r+0x3f4>
  4060e2:	68db      	ldr	r3, [r3, #12]
  4060e4:	459c      	cmp	ip, r3
  4060e6:	f000 8167 	beq.w	4063b8 <_malloc_r+0x3d4>
  4060ea:	6859      	ldr	r1, [r3, #4]
  4060ec:	f021 0103 	bic.w	r1, r1, #3
  4060f0:	1b8a      	subs	r2, r1, r6
  4060f2:	2a0f      	cmp	r2, #15
  4060f4:	ddf2      	ble.n	4060dc <_malloc_r+0xf8>
  4060f6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4060fa:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4060fe:	9300      	str	r3, [sp, #0]
  406100:	199c      	adds	r4, r3, r6
  406102:	4628      	mov	r0, r5
  406104:	f046 0601 	orr.w	r6, r6, #1
  406108:	f042 0501 	orr.w	r5, r2, #1
  40610c:	605e      	str	r6, [r3, #4]
  40610e:	f8c8 c00c 	str.w	ip, [r8, #12]
  406112:	f8cc 8008 	str.w	r8, [ip, #8]
  406116:	617c      	str	r4, [r7, #20]
  406118:	613c      	str	r4, [r7, #16]
  40611a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40611e:	f8c4 e008 	str.w	lr, [r4, #8]
  406122:	6065      	str	r5, [r4, #4]
  406124:	505a      	str	r2, [r3, r1]
  406126:	f000 fb33 	bl	406790 <__malloc_unlock>
  40612a:	9b00      	ldr	r3, [sp, #0]
  40612c:	f103 0408 	add.w	r4, r3, #8
  406130:	e01e      	b.n	406170 <_malloc_r+0x18c>
  406132:	2910      	cmp	r1, #16
  406134:	d820      	bhi.n	406178 <_malloc_r+0x194>
  406136:	f000 fb25 	bl	406784 <__malloc_lock>
  40613a:	2610      	movs	r6, #16
  40613c:	2318      	movs	r3, #24
  40613e:	2002      	movs	r0, #2
  406140:	4f79      	ldr	r7, [pc, #484]	; (406328 <_malloc_r+0x344>)
  406142:	443b      	add	r3, r7
  406144:	f1a3 0208 	sub.w	r2, r3, #8
  406148:	685c      	ldr	r4, [r3, #4]
  40614a:	4294      	cmp	r4, r2
  40614c:	f000 813d 	beq.w	4063ca <_malloc_r+0x3e6>
  406150:	6863      	ldr	r3, [r4, #4]
  406152:	68e1      	ldr	r1, [r4, #12]
  406154:	68a6      	ldr	r6, [r4, #8]
  406156:	f023 0303 	bic.w	r3, r3, #3
  40615a:	4423      	add	r3, r4
  40615c:	4628      	mov	r0, r5
  40615e:	685a      	ldr	r2, [r3, #4]
  406160:	60f1      	str	r1, [r6, #12]
  406162:	f042 0201 	orr.w	r2, r2, #1
  406166:	608e      	str	r6, [r1, #8]
  406168:	605a      	str	r2, [r3, #4]
  40616a:	f000 fb11 	bl	406790 <__malloc_unlock>
  40616e:	3408      	adds	r4, #8
  406170:	4620      	mov	r0, r4
  406172:	b003      	add	sp, #12
  406174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406178:	2400      	movs	r4, #0
  40617a:	230c      	movs	r3, #12
  40617c:	4620      	mov	r0, r4
  40617e:	602b      	str	r3, [r5, #0]
  406180:	b003      	add	sp, #12
  406182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406186:	2040      	movs	r0, #64	; 0x40
  406188:	f44f 7300 	mov.w	r3, #512	; 0x200
  40618c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406190:	e74a      	b.n	406028 <_malloc_r+0x44>
  406192:	4423      	add	r3, r4
  406194:	68e1      	ldr	r1, [r4, #12]
  406196:	685a      	ldr	r2, [r3, #4]
  406198:	68a6      	ldr	r6, [r4, #8]
  40619a:	f042 0201 	orr.w	r2, r2, #1
  40619e:	60f1      	str	r1, [r6, #12]
  4061a0:	4628      	mov	r0, r5
  4061a2:	608e      	str	r6, [r1, #8]
  4061a4:	605a      	str	r2, [r3, #4]
  4061a6:	f000 faf3 	bl	406790 <__malloc_unlock>
  4061aa:	3408      	adds	r4, #8
  4061ac:	4620      	mov	r0, r4
  4061ae:	b003      	add	sp, #12
  4061b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4061b4:	4423      	add	r3, r4
  4061b6:	4628      	mov	r0, r5
  4061b8:	685a      	ldr	r2, [r3, #4]
  4061ba:	f042 0201 	orr.w	r2, r2, #1
  4061be:	605a      	str	r2, [r3, #4]
  4061c0:	f000 fae6 	bl	406790 <__malloc_unlock>
  4061c4:	3408      	adds	r4, #8
  4061c6:	4620      	mov	r0, r4
  4061c8:	b003      	add	sp, #12
  4061ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4061ce:	68bc      	ldr	r4, [r7, #8]
  4061d0:	6863      	ldr	r3, [r4, #4]
  4061d2:	f023 0803 	bic.w	r8, r3, #3
  4061d6:	45b0      	cmp	r8, r6
  4061d8:	d304      	bcc.n	4061e4 <_malloc_r+0x200>
  4061da:	eba8 0306 	sub.w	r3, r8, r6
  4061de:	2b0f      	cmp	r3, #15
  4061e0:	f300 8085 	bgt.w	4062ee <_malloc_r+0x30a>
  4061e4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406340 <_malloc_r+0x35c>
  4061e8:	4b50      	ldr	r3, [pc, #320]	; (40632c <_malloc_r+0x348>)
  4061ea:	f8d9 2000 	ldr.w	r2, [r9]
  4061ee:	681b      	ldr	r3, [r3, #0]
  4061f0:	3201      	adds	r2, #1
  4061f2:	4433      	add	r3, r6
  4061f4:	eb04 0a08 	add.w	sl, r4, r8
  4061f8:	f000 8155 	beq.w	4064a6 <_malloc_r+0x4c2>
  4061fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406200:	330f      	adds	r3, #15
  406202:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  406206:	f02b 0b0f 	bic.w	fp, fp, #15
  40620a:	4659      	mov	r1, fp
  40620c:	4628      	mov	r0, r5
  40620e:	f000 fdbf 	bl	406d90 <_sbrk_r>
  406212:	1c41      	adds	r1, r0, #1
  406214:	4602      	mov	r2, r0
  406216:	f000 80fc 	beq.w	406412 <_malloc_r+0x42e>
  40621a:	4582      	cmp	sl, r0
  40621c:	f200 80f7 	bhi.w	40640e <_malloc_r+0x42a>
  406220:	4b43      	ldr	r3, [pc, #268]	; (406330 <_malloc_r+0x34c>)
  406222:	6819      	ldr	r1, [r3, #0]
  406224:	4459      	add	r1, fp
  406226:	6019      	str	r1, [r3, #0]
  406228:	f000 814d 	beq.w	4064c6 <_malloc_r+0x4e2>
  40622c:	f8d9 0000 	ldr.w	r0, [r9]
  406230:	3001      	adds	r0, #1
  406232:	bf1b      	ittet	ne
  406234:	eba2 0a0a 	subne.w	sl, r2, sl
  406238:	4451      	addne	r1, sl
  40623a:	f8c9 2000 	streq.w	r2, [r9]
  40623e:	6019      	strne	r1, [r3, #0]
  406240:	f012 0107 	ands.w	r1, r2, #7
  406244:	f000 8115 	beq.w	406472 <_malloc_r+0x48e>
  406248:	f1c1 0008 	rsb	r0, r1, #8
  40624c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406250:	4402      	add	r2, r0
  406252:	3108      	adds	r1, #8
  406254:	eb02 090b 	add.w	r9, r2, fp
  406258:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40625c:	eba1 0909 	sub.w	r9, r1, r9
  406260:	4649      	mov	r1, r9
  406262:	4628      	mov	r0, r5
  406264:	9301      	str	r3, [sp, #4]
  406266:	9200      	str	r2, [sp, #0]
  406268:	f000 fd92 	bl	406d90 <_sbrk_r>
  40626c:	1c43      	adds	r3, r0, #1
  40626e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406272:	f000 8143 	beq.w	4064fc <_malloc_r+0x518>
  406276:	1a80      	subs	r0, r0, r2
  406278:	4448      	add	r0, r9
  40627a:	f040 0001 	orr.w	r0, r0, #1
  40627e:	6819      	ldr	r1, [r3, #0]
  406280:	60ba      	str	r2, [r7, #8]
  406282:	4449      	add	r1, r9
  406284:	42bc      	cmp	r4, r7
  406286:	6050      	str	r0, [r2, #4]
  406288:	6019      	str	r1, [r3, #0]
  40628a:	d017      	beq.n	4062bc <_malloc_r+0x2d8>
  40628c:	f1b8 0f0f 	cmp.w	r8, #15
  406290:	f240 80fb 	bls.w	40648a <_malloc_r+0x4a6>
  406294:	6860      	ldr	r0, [r4, #4]
  406296:	f1a8 020c 	sub.w	r2, r8, #12
  40629a:	f022 0207 	bic.w	r2, r2, #7
  40629e:	eb04 0e02 	add.w	lr, r4, r2
  4062a2:	f000 0001 	and.w	r0, r0, #1
  4062a6:	f04f 0c05 	mov.w	ip, #5
  4062aa:	4310      	orrs	r0, r2
  4062ac:	2a0f      	cmp	r2, #15
  4062ae:	6060      	str	r0, [r4, #4]
  4062b0:	f8ce c004 	str.w	ip, [lr, #4]
  4062b4:	f8ce c008 	str.w	ip, [lr, #8]
  4062b8:	f200 8117 	bhi.w	4064ea <_malloc_r+0x506>
  4062bc:	4b1d      	ldr	r3, [pc, #116]	; (406334 <_malloc_r+0x350>)
  4062be:	68bc      	ldr	r4, [r7, #8]
  4062c0:	681a      	ldr	r2, [r3, #0]
  4062c2:	4291      	cmp	r1, r2
  4062c4:	bf88      	it	hi
  4062c6:	6019      	strhi	r1, [r3, #0]
  4062c8:	4b1b      	ldr	r3, [pc, #108]	; (406338 <_malloc_r+0x354>)
  4062ca:	681a      	ldr	r2, [r3, #0]
  4062cc:	4291      	cmp	r1, r2
  4062ce:	6862      	ldr	r2, [r4, #4]
  4062d0:	bf88      	it	hi
  4062d2:	6019      	strhi	r1, [r3, #0]
  4062d4:	f022 0203 	bic.w	r2, r2, #3
  4062d8:	4296      	cmp	r6, r2
  4062da:	eba2 0306 	sub.w	r3, r2, r6
  4062de:	d801      	bhi.n	4062e4 <_malloc_r+0x300>
  4062e0:	2b0f      	cmp	r3, #15
  4062e2:	dc04      	bgt.n	4062ee <_malloc_r+0x30a>
  4062e4:	4628      	mov	r0, r5
  4062e6:	f000 fa53 	bl	406790 <__malloc_unlock>
  4062ea:	2400      	movs	r4, #0
  4062ec:	e740      	b.n	406170 <_malloc_r+0x18c>
  4062ee:	19a2      	adds	r2, r4, r6
  4062f0:	f043 0301 	orr.w	r3, r3, #1
  4062f4:	f046 0601 	orr.w	r6, r6, #1
  4062f8:	6066      	str	r6, [r4, #4]
  4062fa:	4628      	mov	r0, r5
  4062fc:	60ba      	str	r2, [r7, #8]
  4062fe:	6053      	str	r3, [r2, #4]
  406300:	f000 fa46 	bl	406790 <__malloc_unlock>
  406304:	3408      	adds	r4, #8
  406306:	4620      	mov	r0, r4
  406308:	b003      	add	sp, #12
  40630a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40630e:	2b14      	cmp	r3, #20
  406310:	d971      	bls.n	4063f6 <_malloc_r+0x412>
  406312:	2b54      	cmp	r3, #84	; 0x54
  406314:	f200 80a3 	bhi.w	40645e <_malloc_r+0x47a>
  406318:	0b33      	lsrs	r3, r6, #12
  40631a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40631e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  406322:	00c3      	lsls	r3, r0, #3
  406324:	e680      	b.n	406028 <_malloc_r+0x44>
  406326:	bf00      	nop
  406328:	20000444 	.word	0x20000444
  40632c:	20000ab0 	.word	0x20000ab0
  406330:	20000a80 	.word	0x20000a80
  406334:	20000aa8 	.word	0x20000aa8
  406338:	20000aac 	.word	0x20000aac
  40633c:	2000044c 	.word	0x2000044c
  406340:	2000084c 	.word	0x2000084c
  406344:	0a5a      	lsrs	r2, r3, #9
  406346:	2a04      	cmp	r2, #4
  406348:	d95b      	bls.n	406402 <_malloc_r+0x41e>
  40634a:	2a14      	cmp	r2, #20
  40634c:	f200 80ae 	bhi.w	4064ac <_malloc_r+0x4c8>
  406350:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  406354:	00c9      	lsls	r1, r1, #3
  406356:	325b      	adds	r2, #91	; 0x5b
  406358:	eb07 0c01 	add.w	ip, r7, r1
  40635c:	5879      	ldr	r1, [r7, r1]
  40635e:	f1ac 0c08 	sub.w	ip, ip, #8
  406362:	458c      	cmp	ip, r1
  406364:	f000 8088 	beq.w	406478 <_malloc_r+0x494>
  406368:	684a      	ldr	r2, [r1, #4]
  40636a:	f022 0203 	bic.w	r2, r2, #3
  40636e:	4293      	cmp	r3, r2
  406370:	d273      	bcs.n	40645a <_malloc_r+0x476>
  406372:	6889      	ldr	r1, [r1, #8]
  406374:	458c      	cmp	ip, r1
  406376:	d1f7      	bne.n	406368 <_malloc_r+0x384>
  406378:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40637c:	687b      	ldr	r3, [r7, #4]
  40637e:	60e2      	str	r2, [r4, #12]
  406380:	f8c4 c008 	str.w	ip, [r4, #8]
  406384:	6094      	str	r4, [r2, #8]
  406386:	f8cc 400c 	str.w	r4, [ip, #12]
  40638a:	e68f      	b.n	4060ac <_malloc_r+0xc8>
  40638c:	19a1      	adds	r1, r4, r6
  40638e:	f046 0c01 	orr.w	ip, r6, #1
  406392:	f042 0601 	orr.w	r6, r2, #1
  406396:	f8c4 c004 	str.w	ip, [r4, #4]
  40639a:	4628      	mov	r0, r5
  40639c:	6179      	str	r1, [r7, #20]
  40639e:	6139      	str	r1, [r7, #16]
  4063a0:	f8c1 e00c 	str.w	lr, [r1, #12]
  4063a4:	f8c1 e008 	str.w	lr, [r1, #8]
  4063a8:	604e      	str	r6, [r1, #4]
  4063aa:	50e2      	str	r2, [r4, r3]
  4063ac:	f000 f9f0 	bl	406790 <__malloc_unlock>
  4063b0:	3408      	adds	r4, #8
  4063b2:	e6dd      	b.n	406170 <_malloc_r+0x18c>
  4063b4:	687b      	ldr	r3, [r7, #4]
  4063b6:	e679      	b.n	4060ac <_malloc_r+0xc8>
  4063b8:	f108 0801 	add.w	r8, r8, #1
  4063bc:	f018 0f03 	tst.w	r8, #3
  4063c0:	f10c 0c08 	add.w	ip, ip, #8
  4063c4:	f47f ae85 	bne.w	4060d2 <_malloc_r+0xee>
  4063c8:	e02d      	b.n	406426 <_malloc_r+0x442>
  4063ca:	68dc      	ldr	r4, [r3, #12]
  4063cc:	42a3      	cmp	r3, r4
  4063ce:	bf08      	it	eq
  4063d0:	3002      	addeq	r0, #2
  4063d2:	f43f ae3e 	beq.w	406052 <_malloc_r+0x6e>
  4063d6:	e6bb      	b.n	406150 <_malloc_r+0x16c>
  4063d8:	4419      	add	r1, r3
  4063da:	461c      	mov	r4, r3
  4063dc:	684a      	ldr	r2, [r1, #4]
  4063de:	68db      	ldr	r3, [r3, #12]
  4063e0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4063e4:	f042 0201 	orr.w	r2, r2, #1
  4063e8:	604a      	str	r2, [r1, #4]
  4063ea:	4628      	mov	r0, r5
  4063ec:	60f3      	str	r3, [r6, #12]
  4063ee:	609e      	str	r6, [r3, #8]
  4063f0:	f000 f9ce 	bl	406790 <__malloc_unlock>
  4063f4:	e6bc      	b.n	406170 <_malloc_r+0x18c>
  4063f6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4063fa:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4063fe:	00c3      	lsls	r3, r0, #3
  406400:	e612      	b.n	406028 <_malloc_r+0x44>
  406402:	099a      	lsrs	r2, r3, #6
  406404:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406408:	00c9      	lsls	r1, r1, #3
  40640a:	3238      	adds	r2, #56	; 0x38
  40640c:	e7a4      	b.n	406358 <_malloc_r+0x374>
  40640e:	42bc      	cmp	r4, r7
  406410:	d054      	beq.n	4064bc <_malloc_r+0x4d8>
  406412:	68bc      	ldr	r4, [r7, #8]
  406414:	6862      	ldr	r2, [r4, #4]
  406416:	f022 0203 	bic.w	r2, r2, #3
  40641a:	e75d      	b.n	4062d8 <_malloc_r+0x2f4>
  40641c:	f859 3908 	ldr.w	r3, [r9], #-8
  406420:	4599      	cmp	r9, r3
  406422:	f040 8086 	bne.w	406532 <_malloc_r+0x54e>
  406426:	f010 0f03 	tst.w	r0, #3
  40642a:	f100 30ff 	add.w	r0, r0, #4294967295
  40642e:	d1f5      	bne.n	40641c <_malloc_r+0x438>
  406430:	687b      	ldr	r3, [r7, #4]
  406432:	ea23 0304 	bic.w	r3, r3, r4
  406436:	607b      	str	r3, [r7, #4]
  406438:	0064      	lsls	r4, r4, #1
  40643a:	429c      	cmp	r4, r3
  40643c:	f63f aec7 	bhi.w	4061ce <_malloc_r+0x1ea>
  406440:	2c00      	cmp	r4, #0
  406442:	f43f aec4 	beq.w	4061ce <_malloc_r+0x1ea>
  406446:	421c      	tst	r4, r3
  406448:	4640      	mov	r0, r8
  40644a:	f47f ae3e 	bne.w	4060ca <_malloc_r+0xe6>
  40644e:	0064      	lsls	r4, r4, #1
  406450:	421c      	tst	r4, r3
  406452:	f100 0004 	add.w	r0, r0, #4
  406456:	d0fa      	beq.n	40644e <_malloc_r+0x46a>
  406458:	e637      	b.n	4060ca <_malloc_r+0xe6>
  40645a:	468c      	mov	ip, r1
  40645c:	e78c      	b.n	406378 <_malloc_r+0x394>
  40645e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  406462:	d815      	bhi.n	406490 <_malloc_r+0x4ac>
  406464:	0bf3      	lsrs	r3, r6, #15
  406466:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40646a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40646e:	00c3      	lsls	r3, r0, #3
  406470:	e5da      	b.n	406028 <_malloc_r+0x44>
  406472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  406476:	e6ed      	b.n	406254 <_malloc_r+0x270>
  406478:	687b      	ldr	r3, [r7, #4]
  40647a:	1092      	asrs	r2, r2, #2
  40647c:	2101      	movs	r1, #1
  40647e:	fa01 f202 	lsl.w	r2, r1, r2
  406482:	4313      	orrs	r3, r2
  406484:	607b      	str	r3, [r7, #4]
  406486:	4662      	mov	r2, ip
  406488:	e779      	b.n	40637e <_malloc_r+0x39a>
  40648a:	2301      	movs	r3, #1
  40648c:	6053      	str	r3, [r2, #4]
  40648e:	e729      	b.n	4062e4 <_malloc_r+0x300>
  406490:	f240 5254 	movw	r2, #1364	; 0x554
  406494:	4293      	cmp	r3, r2
  406496:	d822      	bhi.n	4064de <_malloc_r+0x4fa>
  406498:	0cb3      	lsrs	r3, r6, #18
  40649a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40649e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4064a2:	00c3      	lsls	r3, r0, #3
  4064a4:	e5c0      	b.n	406028 <_malloc_r+0x44>
  4064a6:	f103 0b10 	add.w	fp, r3, #16
  4064aa:	e6ae      	b.n	40620a <_malloc_r+0x226>
  4064ac:	2a54      	cmp	r2, #84	; 0x54
  4064ae:	d829      	bhi.n	406504 <_malloc_r+0x520>
  4064b0:	0b1a      	lsrs	r2, r3, #12
  4064b2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4064b6:	00c9      	lsls	r1, r1, #3
  4064b8:	326e      	adds	r2, #110	; 0x6e
  4064ba:	e74d      	b.n	406358 <_malloc_r+0x374>
  4064bc:	4b20      	ldr	r3, [pc, #128]	; (406540 <_malloc_r+0x55c>)
  4064be:	6819      	ldr	r1, [r3, #0]
  4064c0:	4459      	add	r1, fp
  4064c2:	6019      	str	r1, [r3, #0]
  4064c4:	e6b2      	b.n	40622c <_malloc_r+0x248>
  4064c6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4064ca:	2800      	cmp	r0, #0
  4064cc:	f47f aeae 	bne.w	40622c <_malloc_r+0x248>
  4064d0:	eb08 030b 	add.w	r3, r8, fp
  4064d4:	68ba      	ldr	r2, [r7, #8]
  4064d6:	f043 0301 	orr.w	r3, r3, #1
  4064da:	6053      	str	r3, [r2, #4]
  4064dc:	e6ee      	b.n	4062bc <_malloc_r+0x2d8>
  4064de:	207f      	movs	r0, #127	; 0x7f
  4064e0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4064e4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4064e8:	e59e      	b.n	406028 <_malloc_r+0x44>
  4064ea:	f104 0108 	add.w	r1, r4, #8
  4064ee:	4628      	mov	r0, r5
  4064f0:	9300      	str	r3, [sp, #0]
  4064f2:	f000 feb3 	bl	40725c <_free_r>
  4064f6:	9b00      	ldr	r3, [sp, #0]
  4064f8:	6819      	ldr	r1, [r3, #0]
  4064fa:	e6df      	b.n	4062bc <_malloc_r+0x2d8>
  4064fc:	2001      	movs	r0, #1
  4064fe:	f04f 0900 	mov.w	r9, #0
  406502:	e6bc      	b.n	40627e <_malloc_r+0x29a>
  406504:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406508:	d805      	bhi.n	406516 <_malloc_r+0x532>
  40650a:	0bda      	lsrs	r2, r3, #15
  40650c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406510:	00c9      	lsls	r1, r1, #3
  406512:	3277      	adds	r2, #119	; 0x77
  406514:	e720      	b.n	406358 <_malloc_r+0x374>
  406516:	f240 5154 	movw	r1, #1364	; 0x554
  40651a:	428a      	cmp	r2, r1
  40651c:	d805      	bhi.n	40652a <_malloc_r+0x546>
  40651e:	0c9a      	lsrs	r2, r3, #18
  406520:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406524:	00c9      	lsls	r1, r1, #3
  406526:	327c      	adds	r2, #124	; 0x7c
  406528:	e716      	b.n	406358 <_malloc_r+0x374>
  40652a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40652e:	227e      	movs	r2, #126	; 0x7e
  406530:	e712      	b.n	406358 <_malloc_r+0x374>
  406532:	687b      	ldr	r3, [r7, #4]
  406534:	e780      	b.n	406438 <_malloc_r+0x454>
  406536:	08f0      	lsrs	r0, r6, #3
  406538:	f106 0308 	add.w	r3, r6, #8
  40653c:	e600      	b.n	406140 <_malloc_r+0x15c>
  40653e:	bf00      	nop
  406540:	20000a80 	.word	0x20000a80
	...

00406550 <memchr>:
  406550:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406554:	2a10      	cmp	r2, #16
  406556:	db2b      	blt.n	4065b0 <memchr+0x60>
  406558:	f010 0f07 	tst.w	r0, #7
  40655c:	d008      	beq.n	406570 <memchr+0x20>
  40655e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406562:	3a01      	subs	r2, #1
  406564:	428b      	cmp	r3, r1
  406566:	d02d      	beq.n	4065c4 <memchr+0x74>
  406568:	f010 0f07 	tst.w	r0, #7
  40656c:	b342      	cbz	r2, 4065c0 <memchr+0x70>
  40656e:	d1f6      	bne.n	40655e <memchr+0xe>
  406570:	b4f0      	push	{r4, r5, r6, r7}
  406572:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406576:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40657a:	f022 0407 	bic.w	r4, r2, #7
  40657e:	f07f 0700 	mvns.w	r7, #0
  406582:	2300      	movs	r3, #0
  406584:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406588:	3c08      	subs	r4, #8
  40658a:	ea85 0501 	eor.w	r5, r5, r1
  40658e:	ea86 0601 	eor.w	r6, r6, r1
  406592:	fa85 f547 	uadd8	r5, r5, r7
  406596:	faa3 f587 	sel	r5, r3, r7
  40659a:	fa86 f647 	uadd8	r6, r6, r7
  40659e:	faa5 f687 	sel	r6, r5, r7
  4065a2:	b98e      	cbnz	r6, 4065c8 <memchr+0x78>
  4065a4:	d1ee      	bne.n	406584 <memchr+0x34>
  4065a6:	bcf0      	pop	{r4, r5, r6, r7}
  4065a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4065ac:	f002 0207 	and.w	r2, r2, #7
  4065b0:	b132      	cbz	r2, 4065c0 <memchr+0x70>
  4065b2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4065b6:	3a01      	subs	r2, #1
  4065b8:	ea83 0301 	eor.w	r3, r3, r1
  4065bc:	b113      	cbz	r3, 4065c4 <memchr+0x74>
  4065be:	d1f8      	bne.n	4065b2 <memchr+0x62>
  4065c0:	2000      	movs	r0, #0
  4065c2:	4770      	bx	lr
  4065c4:	3801      	subs	r0, #1
  4065c6:	4770      	bx	lr
  4065c8:	2d00      	cmp	r5, #0
  4065ca:	bf06      	itte	eq
  4065cc:	4635      	moveq	r5, r6
  4065ce:	3803      	subeq	r0, #3
  4065d0:	3807      	subne	r0, #7
  4065d2:	f015 0f01 	tst.w	r5, #1
  4065d6:	d107      	bne.n	4065e8 <memchr+0x98>
  4065d8:	3001      	adds	r0, #1
  4065da:	f415 7f80 	tst.w	r5, #256	; 0x100
  4065de:	bf02      	ittt	eq
  4065e0:	3001      	addeq	r0, #1
  4065e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4065e6:	3001      	addeq	r0, #1
  4065e8:	bcf0      	pop	{r4, r5, r6, r7}
  4065ea:	3801      	subs	r0, #1
  4065ec:	4770      	bx	lr
  4065ee:	bf00      	nop

004065f0 <memcmp>:
  4065f0:	2a03      	cmp	r2, #3
  4065f2:	b470      	push	{r4, r5, r6}
  4065f4:	d922      	bls.n	40663c <memcmp+0x4c>
  4065f6:	ea40 0301 	orr.w	r3, r0, r1
  4065fa:	079b      	lsls	r3, r3, #30
  4065fc:	d011      	beq.n	406622 <memcmp+0x32>
  4065fe:	7803      	ldrb	r3, [r0, #0]
  406600:	780c      	ldrb	r4, [r1, #0]
  406602:	42a3      	cmp	r3, r4
  406604:	d11d      	bne.n	406642 <memcmp+0x52>
  406606:	440a      	add	r2, r1
  406608:	3101      	adds	r1, #1
  40660a:	e005      	b.n	406618 <memcmp+0x28>
  40660c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406610:	f811 4b01 	ldrb.w	r4, [r1], #1
  406614:	42a3      	cmp	r3, r4
  406616:	d114      	bne.n	406642 <memcmp+0x52>
  406618:	4291      	cmp	r1, r2
  40661a:	d1f7      	bne.n	40660c <memcmp+0x1c>
  40661c:	2000      	movs	r0, #0
  40661e:	bc70      	pop	{r4, r5, r6}
  406620:	4770      	bx	lr
  406622:	680d      	ldr	r5, [r1, #0]
  406624:	6806      	ldr	r6, [r0, #0]
  406626:	42ae      	cmp	r6, r5
  406628:	460c      	mov	r4, r1
  40662a:	4603      	mov	r3, r0
  40662c:	f101 0104 	add.w	r1, r1, #4
  406630:	f100 0004 	add.w	r0, r0, #4
  406634:	d108      	bne.n	406648 <memcmp+0x58>
  406636:	3a04      	subs	r2, #4
  406638:	2a03      	cmp	r2, #3
  40663a:	d8f2      	bhi.n	406622 <memcmp+0x32>
  40663c:	2a00      	cmp	r2, #0
  40663e:	d1de      	bne.n	4065fe <memcmp+0xe>
  406640:	e7ec      	b.n	40661c <memcmp+0x2c>
  406642:	1b18      	subs	r0, r3, r4
  406644:	bc70      	pop	{r4, r5, r6}
  406646:	4770      	bx	lr
  406648:	4621      	mov	r1, r4
  40664a:	4618      	mov	r0, r3
  40664c:	e7d7      	b.n	4065fe <memcmp+0xe>
  40664e:	bf00      	nop

00406650 <memcpy>:
  406650:	4684      	mov	ip, r0
  406652:	ea41 0300 	orr.w	r3, r1, r0
  406656:	f013 0303 	ands.w	r3, r3, #3
  40665a:	d16d      	bne.n	406738 <memcpy+0xe8>
  40665c:	3a40      	subs	r2, #64	; 0x40
  40665e:	d341      	bcc.n	4066e4 <memcpy+0x94>
  406660:	f851 3b04 	ldr.w	r3, [r1], #4
  406664:	f840 3b04 	str.w	r3, [r0], #4
  406668:	f851 3b04 	ldr.w	r3, [r1], #4
  40666c:	f840 3b04 	str.w	r3, [r0], #4
  406670:	f851 3b04 	ldr.w	r3, [r1], #4
  406674:	f840 3b04 	str.w	r3, [r0], #4
  406678:	f851 3b04 	ldr.w	r3, [r1], #4
  40667c:	f840 3b04 	str.w	r3, [r0], #4
  406680:	f851 3b04 	ldr.w	r3, [r1], #4
  406684:	f840 3b04 	str.w	r3, [r0], #4
  406688:	f851 3b04 	ldr.w	r3, [r1], #4
  40668c:	f840 3b04 	str.w	r3, [r0], #4
  406690:	f851 3b04 	ldr.w	r3, [r1], #4
  406694:	f840 3b04 	str.w	r3, [r0], #4
  406698:	f851 3b04 	ldr.w	r3, [r1], #4
  40669c:	f840 3b04 	str.w	r3, [r0], #4
  4066a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4066a4:	f840 3b04 	str.w	r3, [r0], #4
  4066a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4066ac:	f840 3b04 	str.w	r3, [r0], #4
  4066b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4066b4:	f840 3b04 	str.w	r3, [r0], #4
  4066b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4066bc:	f840 3b04 	str.w	r3, [r0], #4
  4066c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4066c4:	f840 3b04 	str.w	r3, [r0], #4
  4066c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4066cc:	f840 3b04 	str.w	r3, [r0], #4
  4066d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4066d4:	f840 3b04 	str.w	r3, [r0], #4
  4066d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4066dc:	f840 3b04 	str.w	r3, [r0], #4
  4066e0:	3a40      	subs	r2, #64	; 0x40
  4066e2:	d2bd      	bcs.n	406660 <memcpy+0x10>
  4066e4:	3230      	adds	r2, #48	; 0x30
  4066e6:	d311      	bcc.n	40670c <memcpy+0xbc>
  4066e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4066ec:	f840 3b04 	str.w	r3, [r0], #4
  4066f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4066f4:	f840 3b04 	str.w	r3, [r0], #4
  4066f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4066fc:	f840 3b04 	str.w	r3, [r0], #4
  406700:	f851 3b04 	ldr.w	r3, [r1], #4
  406704:	f840 3b04 	str.w	r3, [r0], #4
  406708:	3a10      	subs	r2, #16
  40670a:	d2ed      	bcs.n	4066e8 <memcpy+0x98>
  40670c:	320c      	adds	r2, #12
  40670e:	d305      	bcc.n	40671c <memcpy+0xcc>
  406710:	f851 3b04 	ldr.w	r3, [r1], #4
  406714:	f840 3b04 	str.w	r3, [r0], #4
  406718:	3a04      	subs	r2, #4
  40671a:	d2f9      	bcs.n	406710 <memcpy+0xc0>
  40671c:	3204      	adds	r2, #4
  40671e:	d008      	beq.n	406732 <memcpy+0xe2>
  406720:	07d2      	lsls	r2, r2, #31
  406722:	bf1c      	itt	ne
  406724:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406728:	f800 3b01 	strbne.w	r3, [r0], #1
  40672c:	d301      	bcc.n	406732 <memcpy+0xe2>
  40672e:	880b      	ldrh	r3, [r1, #0]
  406730:	8003      	strh	r3, [r0, #0]
  406732:	4660      	mov	r0, ip
  406734:	4770      	bx	lr
  406736:	bf00      	nop
  406738:	2a08      	cmp	r2, #8
  40673a:	d313      	bcc.n	406764 <memcpy+0x114>
  40673c:	078b      	lsls	r3, r1, #30
  40673e:	d08d      	beq.n	40665c <memcpy+0xc>
  406740:	f010 0303 	ands.w	r3, r0, #3
  406744:	d08a      	beq.n	40665c <memcpy+0xc>
  406746:	f1c3 0304 	rsb	r3, r3, #4
  40674a:	1ad2      	subs	r2, r2, r3
  40674c:	07db      	lsls	r3, r3, #31
  40674e:	bf1c      	itt	ne
  406750:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406754:	f800 3b01 	strbne.w	r3, [r0], #1
  406758:	d380      	bcc.n	40665c <memcpy+0xc>
  40675a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40675e:	f820 3b02 	strh.w	r3, [r0], #2
  406762:	e77b      	b.n	40665c <memcpy+0xc>
  406764:	3a04      	subs	r2, #4
  406766:	d3d9      	bcc.n	40671c <memcpy+0xcc>
  406768:	3a01      	subs	r2, #1
  40676a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40676e:	f800 3b01 	strb.w	r3, [r0], #1
  406772:	d2f9      	bcs.n	406768 <memcpy+0x118>
  406774:	780b      	ldrb	r3, [r1, #0]
  406776:	7003      	strb	r3, [r0, #0]
  406778:	784b      	ldrb	r3, [r1, #1]
  40677a:	7043      	strb	r3, [r0, #1]
  40677c:	788b      	ldrb	r3, [r1, #2]
  40677e:	7083      	strb	r3, [r0, #2]
  406780:	4660      	mov	r0, ip
  406782:	4770      	bx	lr

00406784 <__malloc_lock>:
  406784:	4801      	ldr	r0, [pc, #4]	; (40678c <__malloc_lock+0x8>)
  406786:	f7ff bc29 	b.w	405fdc <__retarget_lock_acquire_recursive>
  40678a:	bf00      	nop
  40678c:	2000d20c 	.word	0x2000d20c

00406790 <__malloc_unlock>:
  406790:	4801      	ldr	r0, [pc, #4]	; (406798 <__malloc_unlock+0x8>)
  406792:	f7ff bc25 	b.w	405fe0 <__retarget_lock_release_recursive>
  406796:	bf00      	nop
  406798:	2000d20c 	.word	0x2000d20c

0040679c <_Balloc>:
  40679c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40679e:	b570      	push	{r4, r5, r6, lr}
  4067a0:	4605      	mov	r5, r0
  4067a2:	460c      	mov	r4, r1
  4067a4:	b14b      	cbz	r3, 4067ba <_Balloc+0x1e>
  4067a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4067aa:	b180      	cbz	r0, 4067ce <_Balloc+0x32>
  4067ac:	6802      	ldr	r2, [r0, #0]
  4067ae:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4067b2:	2300      	movs	r3, #0
  4067b4:	6103      	str	r3, [r0, #16]
  4067b6:	60c3      	str	r3, [r0, #12]
  4067b8:	bd70      	pop	{r4, r5, r6, pc}
  4067ba:	2221      	movs	r2, #33	; 0x21
  4067bc:	2104      	movs	r1, #4
  4067be:	f000 fccd 	bl	40715c <_calloc_r>
  4067c2:	64e8      	str	r0, [r5, #76]	; 0x4c
  4067c4:	4603      	mov	r3, r0
  4067c6:	2800      	cmp	r0, #0
  4067c8:	d1ed      	bne.n	4067a6 <_Balloc+0xa>
  4067ca:	2000      	movs	r0, #0
  4067cc:	bd70      	pop	{r4, r5, r6, pc}
  4067ce:	2101      	movs	r1, #1
  4067d0:	fa01 f604 	lsl.w	r6, r1, r4
  4067d4:	1d72      	adds	r2, r6, #5
  4067d6:	4628      	mov	r0, r5
  4067d8:	0092      	lsls	r2, r2, #2
  4067da:	f000 fcbf 	bl	40715c <_calloc_r>
  4067de:	2800      	cmp	r0, #0
  4067e0:	d0f3      	beq.n	4067ca <_Balloc+0x2e>
  4067e2:	6044      	str	r4, [r0, #4]
  4067e4:	6086      	str	r6, [r0, #8]
  4067e6:	e7e4      	b.n	4067b2 <_Balloc+0x16>

004067e8 <_Bfree>:
  4067e8:	b131      	cbz	r1, 4067f8 <_Bfree+0x10>
  4067ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4067ec:	684a      	ldr	r2, [r1, #4]
  4067ee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4067f2:	6008      	str	r0, [r1, #0]
  4067f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4067f8:	4770      	bx	lr
  4067fa:	bf00      	nop

004067fc <__multadd>:
  4067fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4067fe:	690c      	ldr	r4, [r1, #16]
  406800:	b083      	sub	sp, #12
  406802:	460d      	mov	r5, r1
  406804:	4606      	mov	r6, r0
  406806:	f101 0e14 	add.w	lr, r1, #20
  40680a:	2700      	movs	r7, #0
  40680c:	f8de 0000 	ldr.w	r0, [lr]
  406810:	b281      	uxth	r1, r0
  406812:	fb02 3301 	mla	r3, r2, r1, r3
  406816:	0c01      	lsrs	r1, r0, #16
  406818:	0c18      	lsrs	r0, r3, #16
  40681a:	fb02 0101 	mla	r1, r2, r1, r0
  40681e:	b29b      	uxth	r3, r3
  406820:	3701      	adds	r7, #1
  406822:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406826:	42bc      	cmp	r4, r7
  406828:	f84e 3b04 	str.w	r3, [lr], #4
  40682c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406830:	dcec      	bgt.n	40680c <__multadd+0x10>
  406832:	b13b      	cbz	r3, 406844 <__multadd+0x48>
  406834:	68aa      	ldr	r2, [r5, #8]
  406836:	4294      	cmp	r4, r2
  406838:	da07      	bge.n	40684a <__multadd+0x4e>
  40683a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40683e:	3401      	adds	r4, #1
  406840:	6153      	str	r3, [r2, #20]
  406842:	612c      	str	r4, [r5, #16]
  406844:	4628      	mov	r0, r5
  406846:	b003      	add	sp, #12
  406848:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40684a:	6869      	ldr	r1, [r5, #4]
  40684c:	9301      	str	r3, [sp, #4]
  40684e:	3101      	adds	r1, #1
  406850:	4630      	mov	r0, r6
  406852:	f7ff ffa3 	bl	40679c <_Balloc>
  406856:	692a      	ldr	r2, [r5, #16]
  406858:	3202      	adds	r2, #2
  40685a:	f105 010c 	add.w	r1, r5, #12
  40685e:	4607      	mov	r7, r0
  406860:	0092      	lsls	r2, r2, #2
  406862:	300c      	adds	r0, #12
  406864:	f7ff fef4 	bl	406650 <memcpy>
  406868:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40686a:	6869      	ldr	r1, [r5, #4]
  40686c:	9b01      	ldr	r3, [sp, #4]
  40686e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406872:	6028      	str	r0, [r5, #0]
  406874:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406878:	463d      	mov	r5, r7
  40687a:	e7de      	b.n	40683a <__multadd+0x3e>

0040687c <__hi0bits>:
  40687c:	0c02      	lsrs	r2, r0, #16
  40687e:	0412      	lsls	r2, r2, #16
  406880:	4603      	mov	r3, r0
  406882:	b9b2      	cbnz	r2, 4068b2 <__hi0bits+0x36>
  406884:	0403      	lsls	r3, r0, #16
  406886:	2010      	movs	r0, #16
  406888:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40688c:	bf04      	itt	eq
  40688e:	021b      	lsleq	r3, r3, #8
  406890:	3008      	addeq	r0, #8
  406892:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406896:	bf04      	itt	eq
  406898:	011b      	lsleq	r3, r3, #4
  40689a:	3004      	addeq	r0, #4
  40689c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4068a0:	bf04      	itt	eq
  4068a2:	009b      	lsleq	r3, r3, #2
  4068a4:	3002      	addeq	r0, #2
  4068a6:	2b00      	cmp	r3, #0
  4068a8:	db02      	blt.n	4068b0 <__hi0bits+0x34>
  4068aa:	005b      	lsls	r3, r3, #1
  4068ac:	d403      	bmi.n	4068b6 <__hi0bits+0x3a>
  4068ae:	2020      	movs	r0, #32
  4068b0:	4770      	bx	lr
  4068b2:	2000      	movs	r0, #0
  4068b4:	e7e8      	b.n	406888 <__hi0bits+0xc>
  4068b6:	3001      	adds	r0, #1
  4068b8:	4770      	bx	lr
  4068ba:	bf00      	nop

004068bc <__lo0bits>:
  4068bc:	6803      	ldr	r3, [r0, #0]
  4068be:	f013 0207 	ands.w	r2, r3, #7
  4068c2:	4601      	mov	r1, r0
  4068c4:	d007      	beq.n	4068d6 <__lo0bits+0x1a>
  4068c6:	07da      	lsls	r2, r3, #31
  4068c8:	d421      	bmi.n	40690e <__lo0bits+0x52>
  4068ca:	0798      	lsls	r0, r3, #30
  4068cc:	d421      	bmi.n	406912 <__lo0bits+0x56>
  4068ce:	089b      	lsrs	r3, r3, #2
  4068d0:	600b      	str	r3, [r1, #0]
  4068d2:	2002      	movs	r0, #2
  4068d4:	4770      	bx	lr
  4068d6:	b298      	uxth	r0, r3
  4068d8:	b198      	cbz	r0, 406902 <__lo0bits+0x46>
  4068da:	4610      	mov	r0, r2
  4068dc:	f013 0fff 	tst.w	r3, #255	; 0xff
  4068e0:	bf04      	itt	eq
  4068e2:	0a1b      	lsreq	r3, r3, #8
  4068e4:	3008      	addeq	r0, #8
  4068e6:	071a      	lsls	r2, r3, #28
  4068e8:	bf04      	itt	eq
  4068ea:	091b      	lsreq	r3, r3, #4
  4068ec:	3004      	addeq	r0, #4
  4068ee:	079a      	lsls	r2, r3, #30
  4068f0:	bf04      	itt	eq
  4068f2:	089b      	lsreq	r3, r3, #2
  4068f4:	3002      	addeq	r0, #2
  4068f6:	07da      	lsls	r2, r3, #31
  4068f8:	d407      	bmi.n	40690a <__lo0bits+0x4e>
  4068fa:	085b      	lsrs	r3, r3, #1
  4068fc:	d104      	bne.n	406908 <__lo0bits+0x4c>
  4068fe:	2020      	movs	r0, #32
  406900:	4770      	bx	lr
  406902:	0c1b      	lsrs	r3, r3, #16
  406904:	2010      	movs	r0, #16
  406906:	e7e9      	b.n	4068dc <__lo0bits+0x20>
  406908:	3001      	adds	r0, #1
  40690a:	600b      	str	r3, [r1, #0]
  40690c:	4770      	bx	lr
  40690e:	2000      	movs	r0, #0
  406910:	4770      	bx	lr
  406912:	085b      	lsrs	r3, r3, #1
  406914:	600b      	str	r3, [r1, #0]
  406916:	2001      	movs	r0, #1
  406918:	4770      	bx	lr
  40691a:	bf00      	nop

0040691c <__i2b>:
  40691c:	b510      	push	{r4, lr}
  40691e:	460c      	mov	r4, r1
  406920:	2101      	movs	r1, #1
  406922:	f7ff ff3b 	bl	40679c <_Balloc>
  406926:	2201      	movs	r2, #1
  406928:	6144      	str	r4, [r0, #20]
  40692a:	6102      	str	r2, [r0, #16]
  40692c:	bd10      	pop	{r4, pc}
  40692e:	bf00      	nop

00406930 <__multiply>:
  406930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406934:	690c      	ldr	r4, [r1, #16]
  406936:	6915      	ldr	r5, [r2, #16]
  406938:	42ac      	cmp	r4, r5
  40693a:	b083      	sub	sp, #12
  40693c:	468b      	mov	fp, r1
  40693e:	4616      	mov	r6, r2
  406940:	da04      	bge.n	40694c <__multiply+0x1c>
  406942:	4622      	mov	r2, r4
  406944:	46b3      	mov	fp, r6
  406946:	462c      	mov	r4, r5
  406948:	460e      	mov	r6, r1
  40694a:	4615      	mov	r5, r2
  40694c:	f8db 3008 	ldr.w	r3, [fp, #8]
  406950:	f8db 1004 	ldr.w	r1, [fp, #4]
  406954:	eb04 0805 	add.w	r8, r4, r5
  406958:	4598      	cmp	r8, r3
  40695a:	bfc8      	it	gt
  40695c:	3101      	addgt	r1, #1
  40695e:	f7ff ff1d 	bl	40679c <_Balloc>
  406962:	f100 0914 	add.w	r9, r0, #20
  406966:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40696a:	45d1      	cmp	r9, sl
  40696c:	9000      	str	r0, [sp, #0]
  40696e:	d205      	bcs.n	40697c <__multiply+0x4c>
  406970:	464b      	mov	r3, r9
  406972:	2100      	movs	r1, #0
  406974:	f843 1b04 	str.w	r1, [r3], #4
  406978:	459a      	cmp	sl, r3
  40697a:	d8fb      	bhi.n	406974 <__multiply+0x44>
  40697c:	f106 0c14 	add.w	ip, r6, #20
  406980:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406984:	f10b 0b14 	add.w	fp, fp, #20
  406988:	459c      	cmp	ip, r3
  40698a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40698e:	d24c      	bcs.n	406a2a <__multiply+0xfa>
  406990:	f8cd a004 	str.w	sl, [sp, #4]
  406994:	469a      	mov	sl, r3
  406996:	f8dc 5000 	ldr.w	r5, [ip]
  40699a:	b2af      	uxth	r7, r5
  40699c:	b1ef      	cbz	r7, 4069da <__multiply+0xaa>
  40699e:	2100      	movs	r1, #0
  4069a0:	464d      	mov	r5, r9
  4069a2:	465e      	mov	r6, fp
  4069a4:	460c      	mov	r4, r1
  4069a6:	f856 2b04 	ldr.w	r2, [r6], #4
  4069aa:	6828      	ldr	r0, [r5, #0]
  4069ac:	b293      	uxth	r3, r2
  4069ae:	b281      	uxth	r1, r0
  4069b0:	fb07 1303 	mla	r3, r7, r3, r1
  4069b4:	0c12      	lsrs	r2, r2, #16
  4069b6:	0c01      	lsrs	r1, r0, #16
  4069b8:	4423      	add	r3, r4
  4069ba:	fb07 1102 	mla	r1, r7, r2, r1
  4069be:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4069c2:	b29b      	uxth	r3, r3
  4069c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4069c8:	45b6      	cmp	lr, r6
  4069ca:	f845 3b04 	str.w	r3, [r5], #4
  4069ce:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4069d2:	d8e8      	bhi.n	4069a6 <__multiply+0x76>
  4069d4:	602c      	str	r4, [r5, #0]
  4069d6:	f8dc 5000 	ldr.w	r5, [ip]
  4069da:	0c2d      	lsrs	r5, r5, #16
  4069dc:	d01d      	beq.n	406a1a <__multiply+0xea>
  4069de:	f8d9 3000 	ldr.w	r3, [r9]
  4069e2:	4648      	mov	r0, r9
  4069e4:	461c      	mov	r4, r3
  4069e6:	4659      	mov	r1, fp
  4069e8:	2200      	movs	r2, #0
  4069ea:	880e      	ldrh	r6, [r1, #0]
  4069ec:	0c24      	lsrs	r4, r4, #16
  4069ee:	fb05 4406 	mla	r4, r5, r6, r4
  4069f2:	4422      	add	r2, r4
  4069f4:	b29b      	uxth	r3, r3
  4069f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4069fa:	f840 3b04 	str.w	r3, [r0], #4
  4069fe:	f851 3b04 	ldr.w	r3, [r1], #4
  406a02:	6804      	ldr	r4, [r0, #0]
  406a04:	0c1b      	lsrs	r3, r3, #16
  406a06:	b2a6      	uxth	r6, r4
  406a08:	fb05 6303 	mla	r3, r5, r3, r6
  406a0c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406a10:	458e      	cmp	lr, r1
  406a12:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406a16:	d8e8      	bhi.n	4069ea <__multiply+0xba>
  406a18:	6003      	str	r3, [r0, #0]
  406a1a:	f10c 0c04 	add.w	ip, ip, #4
  406a1e:	45e2      	cmp	sl, ip
  406a20:	f109 0904 	add.w	r9, r9, #4
  406a24:	d8b7      	bhi.n	406996 <__multiply+0x66>
  406a26:	f8dd a004 	ldr.w	sl, [sp, #4]
  406a2a:	f1b8 0f00 	cmp.w	r8, #0
  406a2e:	dd0b      	ble.n	406a48 <__multiply+0x118>
  406a30:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406a34:	f1aa 0a04 	sub.w	sl, sl, #4
  406a38:	b11b      	cbz	r3, 406a42 <__multiply+0x112>
  406a3a:	e005      	b.n	406a48 <__multiply+0x118>
  406a3c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406a40:	b913      	cbnz	r3, 406a48 <__multiply+0x118>
  406a42:	f1b8 0801 	subs.w	r8, r8, #1
  406a46:	d1f9      	bne.n	406a3c <__multiply+0x10c>
  406a48:	9800      	ldr	r0, [sp, #0]
  406a4a:	f8c0 8010 	str.w	r8, [r0, #16]
  406a4e:	b003      	add	sp, #12
  406a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406a54 <__pow5mult>:
  406a54:	f012 0303 	ands.w	r3, r2, #3
  406a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406a5c:	4614      	mov	r4, r2
  406a5e:	4607      	mov	r7, r0
  406a60:	d12e      	bne.n	406ac0 <__pow5mult+0x6c>
  406a62:	460d      	mov	r5, r1
  406a64:	10a4      	asrs	r4, r4, #2
  406a66:	d01c      	beq.n	406aa2 <__pow5mult+0x4e>
  406a68:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  406a6a:	b396      	cbz	r6, 406ad2 <__pow5mult+0x7e>
  406a6c:	07e3      	lsls	r3, r4, #31
  406a6e:	f04f 0800 	mov.w	r8, #0
  406a72:	d406      	bmi.n	406a82 <__pow5mult+0x2e>
  406a74:	1064      	asrs	r4, r4, #1
  406a76:	d014      	beq.n	406aa2 <__pow5mult+0x4e>
  406a78:	6830      	ldr	r0, [r6, #0]
  406a7a:	b1a8      	cbz	r0, 406aa8 <__pow5mult+0x54>
  406a7c:	4606      	mov	r6, r0
  406a7e:	07e3      	lsls	r3, r4, #31
  406a80:	d5f8      	bpl.n	406a74 <__pow5mult+0x20>
  406a82:	4632      	mov	r2, r6
  406a84:	4629      	mov	r1, r5
  406a86:	4638      	mov	r0, r7
  406a88:	f7ff ff52 	bl	406930 <__multiply>
  406a8c:	b1b5      	cbz	r5, 406abc <__pow5mult+0x68>
  406a8e:	686a      	ldr	r2, [r5, #4]
  406a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406a92:	1064      	asrs	r4, r4, #1
  406a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406a98:	6029      	str	r1, [r5, #0]
  406a9a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406a9e:	4605      	mov	r5, r0
  406aa0:	d1ea      	bne.n	406a78 <__pow5mult+0x24>
  406aa2:	4628      	mov	r0, r5
  406aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406aa8:	4632      	mov	r2, r6
  406aaa:	4631      	mov	r1, r6
  406aac:	4638      	mov	r0, r7
  406aae:	f7ff ff3f 	bl	406930 <__multiply>
  406ab2:	6030      	str	r0, [r6, #0]
  406ab4:	f8c0 8000 	str.w	r8, [r0]
  406ab8:	4606      	mov	r6, r0
  406aba:	e7e0      	b.n	406a7e <__pow5mult+0x2a>
  406abc:	4605      	mov	r5, r0
  406abe:	e7d9      	b.n	406a74 <__pow5mult+0x20>
  406ac0:	1e5a      	subs	r2, r3, #1
  406ac2:	4d0b      	ldr	r5, [pc, #44]	; (406af0 <__pow5mult+0x9c>)
  406ac4:	2300      	movs	r3, #0
  406ac6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406aca:	f7ff fe97 	bl	4067fc <__multadd>
  406ace:	4605      	mov	r5, r0
  406ad0:	e7c8      	b.n	406a64 <__pow5mult+0x10>
  406ad2:	2101      	movs	r1, #1
  406ad4:	4638      	mov	r0, r7
  406ad6:	f7ff fe61 	bl	40679c <_Balloc>
  406ada:	f240 2171 	movw	r1, #625	; 0x271
  406ade:	2201      	movs	r2, #1
  406ae0:	2300      	movs	r3, #0
  406ae2:	6141      	str	r1, [r0, #20]
  406ae4:	6102      	str	r2, [r0, #16]
  406ae6:	4606      	mov	r6, r0
  406ae8:	64b8      	str	r0, [r7, #72]	; 0x48
  406aea:	6003      	str	r3, [r0, #0]
  406aec:	e7be      	b.n	406a6c <__pow5mult+0x18>
  406aee:	bf00      	nop
  406af0:	00409060 	.word	0x00409060

00406af4 <__lshift>:
  406af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406af8:	4691      	mov	r9, r2
  406afa:	690a      	ldr	r2, [r1, #16]
  406afc:	688b      	ldr	r3, [r1, #8]
  406afe:	ea4f 1469 	mov.w	r4, r9, asr #5
  406b02:	eb04 0802 	add.w	r8, r4, r2
  406b06:	f108 0501 	add.w	r5, r8, #1
  406b0a:	429d      	cmp	r5, r3
  406b0c:	460e      	mov	r6, r1
  406b0e:	4607      	mov	r7, r0
  406b10:	6849      	ldr	r1, [r1, #4]
  406b12:	dd04      	ble.n	406b1e <__lshift+0x2a>
  406b14:	005b      	lsls	r3, r3, #1
  406b16:	429d      	cmp	r5, r3
  406b18:	f101 0101 	add.w	r1, r1, #1
  406b1c:	dcfa      	bgt.n	406b14 <__lshift+0x20>
  406b1e:	4638      	mov	r0, r7
  406b20:	f7ff fe3c 	bl	40679c <_Balloc>
  406b24:	2c00      	cmp	r4, #0
  406b26:	f100 0314 	add.w	r3, r0, #20
  406b2a:	dd06      	ble.n	406b3a <__lshift+0x46>
  406b2c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406b30:	2100      	movs	r1, #0
  406b32:	f843 1b04 	str.w	r1, [r3], #4
  406b36:	429a      	cmp	r2, r3
  406b38:	d1fb      	bne.n	406b32 <__lshift+0x3e>
  406b3a:	6934      	ldr	r4, [r6, #16]
  406b3c:	f106 0114 	add.w	r1, r6, #20
  406b40:	f019 091f 	ands.w	r9, r9, #31
  406b44:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406b48:	d01d      	beq.n	406b86 <__lshift+0x92>
  406b4a:	f1c9 0c20 	rsb	ip, r9, #32
  406b4e:	2200      	movs	r2, #0
  406b50:	680c      	ldr	r4, [r1, #0]
  406b52:	fa04 f409 	lsl.w	r4, r4, r9
  406b56:	4314      	orrs	r4, r2
  406b58:	f843 4b04 	str.w	r4, [r3], #4
  406b5c:	f851 2b04 	ldr.w	r2, [r1], #4
  406b60:	458e      	cmp	lr, r1
  406b62:	fa22 f20c 	lsr.w	r2, r2, ip
  406b66:	d8f3      	bhi.n	406b50 <__lshift+0x5c>
  406b68:	601a      	str	r2, [r3, #0]
  406b6a:	b10a      	cbz	r2, 406b70 <__lshift+0x7c>
  406b6c:	f108 0502 	add.w	r5, r8, #2
  406b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406b72:	6872      	ldr	r2, [r6, #4]
  406b74:	3d01      	subs	r5, #1
  406b76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406b7a:	6105      	str	r5, [r0, #16]
  406b7c:	6031      	str	r1, [r6, #0]
  406b7e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406b86:	3b04      	subs	r3, #4
  406b88:	f851 2b04 	ldr.w	r2, [r1], #4
  406b8c:	f843 2f04 	str.w	r2, [r3, #4]!
  406b90:	458e      	cmp	lr, r1
  406b92:	d8f9      	bhi.n	406b88 <__lshift+0x94>
  406b94:	e7ec      	b.n	406b70 <__lshift+0x7c>
  406b96:	bf00      	nop

00406b98 <__mcmp>:
  406b98:	b430      	push	{r4, r5}
  406b9a:	690b      	ldr	r3, [r1, #16]
  406b9c:	4605      	mov	r5, r0
  406b9e:	6900      	ldr	r0, [r0, #16]
  406ba0:	1ac0      	subs	r0, r0, r3
  406ba2:	d10f      	bne.n	406bc4 <__mcmp+0x2c>
  406ba4:	009b      	lsls	r3, r3, #2
  406ba6:	3514      	adds	r5, #20
  406ba8:	3114      	adds	r1, #20
  406baa:	4419      	add	r1, r3
  406bac:	442b      	add	r3, r5
  406bae:	e001      	b.n	406bb4 <__mcmp+0x1c>
  406bb0:	429d      	cmp	r5, r3
  406bb2:	d207      	bcs.n	406bc4 <__mcmp+0x2c>
  406bb4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406bb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406bbc:	4294      	cmp	r4, r2
  406bbe:	d0f7      	beq.n	406bb0 <__mcmp+0x18>
  406bc0:	d302      	bcc.n	406bc8 <__mcmp+0x30>
  406bc2:	2001      	movs	r0, #1
  406bc4:	bc30      	pop	{r4, r5}
  406bc6:	4770      	bx	lr
  406bc8:	f04f 30ff 	mov.w	r0, #4294967295
  406bcc:	e7fa      	b.n	406bc4 <__mcmp+0x2c>
  406bce:	bf00      	nop

00406bd0 <__mdiff>:
  406bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406bd4:	690f      	ldr	r7, [r1, #16]
  406bd6:	460e      	mov	r6, r1
  406bd8:	6911      	ldr	r1, [r2, #16]
  406bda:	1a7f      	subs	r7, r7, r1
  406bdc:	2f00      	cmp	r7, #0
  406bde:	4690      	mov	r8, r2
  406be0:	d117      	bne.n	406c12 <__mdiff+0x42>
  406be2:	0089      	lsls	r1, r1, #2
  406be4:	f106 0514 	add.w	r5, r6, #20
  406be8:	f102 0e14 	add.w	lr, r2, #20
  406bec:	186b      	adds	r3, r5, r1
  406bee:	4471      	add	r1, lr
  406bf0:	e001      	b.n	406bf6 <__mdiff+0x26>
  406bf2:	429d      	cmp	r5, r3
  406bf4:	d25c      	bcs.n	406cb0 <__mdiff+0xe0>
  406bf6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  406bfa:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  406bfe:	42a2      	cmp	r2, r4
  406c00:	d0f7      	beq.n	406bf2 <__mdiff+0x22>
  406c02:	d25e      	bcs.n	406cc2 <__mdiff+0xf2>
  406c04:	4633      	mov	r3, r6
  406c06:	462c      	mov	r4, r5
  406c08:	4646      	mov	r6, r8
  406c0a:	4675      	mov	r5, lr
  406c0c:	4698      	mov	r8, r3
  406c0e:	2701      	movs	r7, #1
  406c10:	e005      	b.n	406c1e <__mdiff+0x4e>
  406c12:	db58      	blt.n	406cc6 <__mdiff+0xf6>
  406c14:	f106 0514 	add.w	r5, r6, #20
  406c18:	f108 0414 	add.w	r4, r8, #20
  406c1c:	2700      	movs	r7, #0
  406c1e:	6871      	ldr	r1, [r6, #4]
  406c20:	f7ff fdbc 	bl	40679c <_Balloc>
  406c24:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406c28:	6936      	ldr	r6, [r6, #16]
  406c2a:	60c7      	str	r7, [r0, #12]
  406c2c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406c30:	46a6      	mov	lr, r4
  406c32:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406c36:	f100 0414 	add.w	r4, r0, #20
  406c3a:	2300      	movs	r3, #0
  406c3c:	f85e 1b04 	ldr.w	r1, [lr], #4
  406c40:	f855 8b04 	ldr.w	r8, [r5], #4
  406c44:	b28a      	uxth	r2, r1
  406c46:	fa13 f388 	uxtah	r3, r3, r8
  406c4a:	0c09      	lsrs	r1, r1, #16
  406c4c:	1a9a      	subs	r2, r3, r2
  406c4e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  406c52:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406c56:	b292      	uxth	r2, r2
  406c58:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406c5c:	45f4      	cmp	ip, lr
  406c5e:	f844 2b04 	str.w	r2, [r4], #4
  406c62:	ea4f 4323 	mov.w	r3, r3, asr #16
  406c66:	d8e9      	bhi.n	406c3c <__mdiff+0x6c>
  406c68:	42af      	cmp	r7, r5
  406c6a:	d917      	bls.n	406c9c <__mdiff+0xcc>
  406c6c:	46a4      	mov	ip, r4
  406c6e:	46ae      	mov	lr, r5
  406c70:	f85e 2b04 	ldr.w	r2, [lr], #4
  406c74:	fa13 f382 	uxtah	r3, r3, r2
  406c78:	1419      	asrs	r1, r3, #16
  406c7a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  406c7e:	b29b      	uxth	r3, r3
  406c80:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  406c84:	4577      	cmp	r7, lr
  406c86:	f84c 2b04 	str.w	r2, [ip], #4
  406c8a:	ea4f 4321 	mov.w	r3, r1, asr #16
  406c8e:	d8ef      	bhi.n	406c70 <__mdiff+0xa0>
  406c90:	43ed      	mvns	r5, r5
  406c92:	442f      	add	r7, r5
  406c94:	f027 0703 	bic.w	r7, r7, #3
  406c98:	3704      	adds	r7, #4
  406c9a:	443c      	add	r4, r7
  406c9c:	3c04      	subs	r4, #4
  406c9e:	b922      	cbnz	r2, 406caa <__mdiff+0xda>
  406ca0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406ca4:	3e01      	subs	r6, #1
  406ca6:	2b00      	cmp	r3, #0
  406ca8:	d0fa      	beq.n	406ca0 <__mdiff+0xd0>
  406caa:	6106      	str	r6, [r0, #16]
  406cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406cb0:	2100      	movs	r1, #0
  406cb2:	f7ff fd73 	bl	40679c <_Balloc>
  406cb6:	2201      	movs	r2, #1
  406cb8:	2300      	movs	r3, #0
  406cba:	6102      	str	r2, [r0, #16]
  406cbc:	6143      	str	r3, [r0, #20]
  406cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406cc2:	4674      	mov	r4, lr
  406cc4:	e7ab      	b.n	406c1e <__mdiff+0x4e>
  406cc6:	4633      	mov	r3, r6
  406cc8:	f106 0414 	add.w	r4, r6, #20
  406ccc:	f102 0514 	add.w	r5, r2, #20
  406cd0:	4616      	mov	r6, r2
  406cd2:	2701      	movs	r7, #1
  406cd4:	4698      	mov	r8, r3
  406cd6:	e7a2      	b.n	406c1e <__mdiff+0x4e>

00406cd8 <__d2b>:
  406cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406cdc:	b082      	sub	sp, #8
  406cde:	2101      	movs	r1, #1
  406ce0:	461c      	mov	r4, r3
  406ce2:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406ce6:	4615      	mov	r5, r2
  406ce8:	9e08      	ldr	r6, [sp, #32]
  406cea:	f7ff fd57 	bl	40679c <_Balloc>
  406cee:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406cf2:	4680      	mov	r8, r0
  406cf4:	b10f      	cbz	r7, 406cfa <__d2b+0x22>
  406cf6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  406cfa:	9401      	str	r4, [sp, #4]
  406cfc:	b31d      	cbz	r5, 406d46 <__d2b+0x6e>
  406cfe:	a802      	add	r0, sp, #8
  406d00:	f840 5d08 	str.w	r5, [r0, #-8]!
  406d04:	f7ff fdda 	bl	4068bc <__lo0bits>
  406d08:	2800      	cmp	r0, #0
  406d0a:	d134      	bne.n	406d76 <__d2b+0x9e>
  406d0c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406d10:	f8c8 2014 	str.w	r2, [r8, #20]
  406d14:	2b00      	cmp	r3, #0
  406d16:	bf0c      	ite	eq
  406d18:	2101      	moveq	r1, #1
  406d1a:	2102      	movne	r1, #2
  406d1c:	f8c8 3018 	str.w	r3, [r8, #24]
  406d20:	f8c8 1010 	str.w	r1, [r8, #16]
  406d24:	b9df      	cbnz	r7, 406d5e <__d2b+0x86>
  406d26:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  406d2a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406d2e:	6030      	str	r0, [r6, #0]
  406d30:	6918      	ldr	r0, [r3, #16]
  406d32:	f7ff fda3 	bl	40687c <__hi0bits>
  406d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406d38:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406d3c:	6018      	str	r0, [r3, #0]
  406d3e:	4640      	mov	r0, r8
  406d40:	b002      	add	sp, #8
  406d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406d46:	a801      	add	r0, sp, #4
  406d48:	f7ff fdb8 	bl	4068bc <__lo0bits>
  406d4c:	9b01      	ldr	r3, [sp, #4]
  406d4e:	f8c8 3014 	str.w	r3, [r8, #20]
  406d52:	2101      	movs	r1, #1
  406d54:	3020      	adds	r0, #32
  406d56:	f8c8 1010 	str.w	r1, [r8, #16]
  406d5a:	2f00      	cmp	r7, #0
  406d5c:	d0e3      	beq.n	406d26 <__d2b+0x4e>
  406d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406d60:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  406d64:	4407      	add	r7, r0
  406d66:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  406d6a:	6037      	str	r7, [r6, #0]
  406d6c:	6018      	str	r0, [r3, #0]
  406d6e:	4640      	mov	r0, r8
  406d70:	b002      	add	sp, #8
  406d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406d76:	e89d 000a 	ldmia.w	sp, {r1, r3}
  406d7a:	f1c0 0220 	rsb	r2, r0, #32
  406d7e:	fa03 f202 	lsl.w	r2, r3, r2
  406d82:	430a      	orrs	r2, r1
  406d84:	40c3      	lsrs	r3, r0
  406d86:	9301      	str	r3, [sp, #4]
  406d88:	f8c8 2014 	str.w	r2, [r8, #20]
  406d8c:	e7c2      	b.n	406d14 <__d2b+0x3c>
  406d8e:	bf00      	nop

00406d90 <_sbrk_r>:
  406d90:	b538      	push	{r3, r4, r5, lr}
  406d92:	4c07      	ldr	r4, [pc, #28]	; (406db0 <_sbrk_r+0x20>)
  406d94:	2300      	movs	r3, #0
  406d96:	4605      	mov	r5, r0
  406d98:	4608      	mov	r0, r1
  406d9a:	6023      	str	r3, [r4, #0]
  406d9c:	f7fb ff32 	bl	402c04 <_sbrk>
  406da0:	1c43      	adds	r3, r0, #1
  406da2:	d000      	beq.n	406da6 <_sbrk_r+0x16>
  406da4:	bd38      	pop	{r3, r4, r5, pc}
  406da6:	6823      	ldr	r3, [r4, #0]
  406da8:	2b00      	cmp	r3, #0
  406daa:	d0fb      	beq.n	406da4 <_sbrk_r+0x14>
  406dac:	602b      	str	r3, [r5, #0]
  406dae:	bd38      	pop	{r3, r4, r5, pc}
  406db0:	2000d220 	.word	0x2000d220

00406db4 <strchr>:
  406db4:	b2c9      	uxtb	r1, r1
  406db6:	2900      	cmp	r1, #0
  406db8:	d041      	beq.n	406e3e <strchr+0x8a>
  406dba:	0782      	lsls	r2, r0, #30
  406dbc:	b4f0      	push	{r4, r5, r6, r7}
  406dbe:	d067      	beq.n	406e90 <strchr+0xdc>
  406dc0:	7803      	ldrb	r3, [r0, #0]
  406dc2:	2b00      	cmp	r3, #0
  406dc4:	d068      	beq.n	406e98 <strchr+0xe4>
  406dc6:	4299      	cmp	r1, r3
  406dc8:	d037      	beq.n	406e3a <strchr+0x86>
  406dca:	1c43      	adds	r3, r0, #1
  406dcc:	e004      	b.n	406dd8 <strchr+0x24>
  406dce:	f813 0b01 	ldrb.w	r0, [r3], #1
  406dd2:	b390      	cbz	r0, 406e3a <strchr+0x86>
  406dd4:	4281      	cmp	r1, r0
  406dd6:	d02f      	beq.n	406e38 <strchr+0x84>
  406dd8:	079a      	lsls	r2, r3, #30
  406dda:	461c      	mov	r4, r3
  406ddc:	d1f7      	bne.n	406dce <strchr+0x1a>
  406dde:	6825      	ldr	r5, [r4, #0]
  406de0:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  406de4:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  406de8:	ea83 0605 	eor.w	r6, r3, r5
  406dec:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  406df0:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  406df4:	ea20 0006 	bic.w	r0, r0, r6
  406df8:	ea22 0205 	bic.w	r2, r2, r5
  406dfc:	4302      	orrs	r2, r0
  406dfe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406e02:	d111      	bne.n	406e28 <strchr+0x74>
  406e04:	4620      	mov	r0, r4
  406e06:	f850 6f04 	ldr.w	r6, [r0, #4]!
  406e0a:	ea83 0706 	eor.w	r7, r3, r6
  406e0e:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  406e12:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  406e16:	ea25 0507 	bic.w	r5, r5, r7
  406e1a:	ea22 0206 	bic.w	r2, r2, r6
  406e1e:	432a      	orrs	r2, r5
  406e20:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406e24:	d0ef      	beq.n	406e06 <strchr+0x52>
  406e26:	4604      	mov	r4, r0
  406e28:	7820      	ldrb	r0, [r4, #0]
  406e2a:	b918      	cbnz	r0, 406e34 <strchr+0x80>
  406e2c:	e005      	b.n	406e3a <strchr+0x86>
  406e2e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  406e32:	b110      	cbz	r0, 406e3a <strchr+0x86>
  406e34:	4281      	cmp	r1, r0
  406e36:	d1fa      	bne.n	406e2e <strchr+0x7a>
  406e38:	4620      	mov	r0, r4
  406e3a:	bcf0      	pop	{r4, r5, r6, r7}
  406e3c:	4770      	bx	lr
  406e3e:	0783      	lsls	r3, r0, #30
  406e40:	d024      	beq.n	406e8c <strchr+0xd8>
  406e42:	7803      	ldrb	r3, [r0, #0]
  406e44:	2b00      	cmp	r3, #0
  406e46:	d0f9      	beq.n	406e3c <strchr+0x88>
  406e48:	1c43      	adds	r3, r0, #1
  406e4a:	e003      	b.n	406e54 <strchr+0xa0>
  406e4c:	7802      	ldrb	r2, [r0, #0]
  406e4e:	3301      	adds	r3, #1
  406e50:	2a00      	cmp	r2, #0
  406e52:	d0f3      	beq.n	406e3c <strchr+0x88>
  406e54:	0799      	lsls	r1, r3, #30
  406e56:	4618      	mov	r0, r3
  406e58:	d1f8      	bne.n	406e4c <strchr+0x98>
  406e5a:	6819      	ldr	r1, [r3, #0]
  406e5c:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  406e60:	ea22 0201 	bic.w	r2, r2, r1
  406e64:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406e68:	d108      	bne.n	406e7c <strchr+0xc8>
  406e6a:	f853 1f04 	ldr.w	r1, [r3, #4]!
  406e6e:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  406e72:	ea22 0201 	bic.w	r2, r2, r1
  406e76:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406e7a:	d0f6      	beq.n	406e6a <strchr+0xb6>
  406e7c:	781a      	ldrb	r2, [r3, #0]
  406e7e:	4618      	mov	r0, r3
  406e80:	b142      	cbz	r2, 406e94 <strchr+0xe0>
  406e82:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406e86:	2b00      	cmp	r3, #0
  406e88:	d1fb      	bne.n	406e82 <strchr+0xce>
  406e8a:	4770      	bx	lr
  406e8c:	4603      	mov	r3, r0
  406e8e:	e7e4      	b.n	406e5a <strchr+0xa6>
  406e90:	4604      	mov	r4, r0
  406e92:	e7a4      	b.n	406dde <strchr+0x2a>
  406e94:	4618      	mov	r0, r3
  406e96:	4770      	bx	lr
  406e98:	4618      	mov	r0, r3
  406e9a:	e7ce      	b.n	406e3a <strchr+0x86>
	...

00406ec0 <strlen>:
  406ec0:	f890 f000 	pld	[r0]
  406ec4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406ec8:	f020 0107 	bic.w	r1, r0, #7
  406ecc:	f06f 0c00 	mvn.w	ip, #0
  406ed0:	f010 0407 	ands.w	r4, r0, #7
  406ed4:	f891 f020 	pld	[r1, #32]
  406ed8:	f040 8049 	bne.w	406f6e <strlen+0xae>
  406edc:	f04f 0400 	mov.w	r4, #0
  406ee0:	f06f 0007 	mvn.w	r0, #7
  406ee4:	e9d1 2300 	ldrd	r2, r3, [r1]
  406ee8:	f891 f040 	pld	[r1, #64]	; 0x40
  406eec:	f100 0008 	add.w	r0, r0, #8
  406ef0:	fa82 f24c 	uadd8	r2, r2, ip
  406ef4:	faa4 f28c 	sel	r2, r4, ip
  406ef8:	fa83 f34c 	uadd8	r3, r3, ip
  406efc:	faa2 f38c 	sel	r3, r2, ip
  406f00:	bb4b      	cbnz	r3, 406f56 <strlen+0x96>
  406f02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406f06:	fa82 f24c 	uadd8	r2, r2, ip
  406f0a:	f100 0008 	add.w	r0, r0, #8
  406f0e:	faa4 f28c 	sel	r2, r4, ip
  406f12:	fa83 f34c 	uadd8	r3, r3, ip
  406f16:	faa2 f38c 	sel	r3, r2, ip
  406f1a:	b9e3      	cbnz	r3, 406f56 <strlen+0x96>
  406f1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406f20:	fa82 f24c 	uadd8	r2, r2, ip
  406f24:	f100 0008 	add.w	r0, r0, #8
  406f28:	faa4 f28c 	sel	r2, r4, ip
  406f2c:	fa83 f34c 	uadd8	r3, r3, ip
  406f30:	faa2 f38c 	sel	r3, r2, ip
  406f34:	b97b      	cbnz	r3, 406f56 <strlen+0x96>
  406f36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  406f3a:	f101 0120 	add.w	r1, r1, #32
  406f3e:	fa82 f24c 	uadd8	r2, r2, ip
  406f42:	f100 0008 	add.w	r0, r0, #8
  406f46:	faa4 f28c 	sel	r2, r4, ip
  406f4a:	fa83 f34c 	uadd8	r3, r3, ip
  406f4e:	faa2 f38c 	sel	r3, r2, ip
  406f52:	2b00      	cmp	r3, #0
  406f54:	d0c6      	beq.n	406ee4 <strlen+0x24>
  406f56:	2a00      	cmp	r2, #0
  406f58:	bf04      	itt	eq
  406f5a:	3004      	addeq	r0, #4
  406f5c:	461a      	moveq	r2, r3
  406f5e:	ba12      	rev	r2, r2
  406f60:	fab2 f282 	clz	r2, r2
  406f64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406f68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  406f6c:	4770      	bx	lr
  406f6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406f72:	f004 0503 	and.w	r5, r4, #3
  406f76:	f1c4 0000 	rsb	r0, r4, #0
  406f7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  406f7e:	f014 0f04 	tst.w	r4, #4
  406f82:	f891 f040 	pld	[r1, #64]	; 0x40
  406f86:	fa0c f505 	lsl.w	r5, ip, r5
  406f8a:	ea62 0205 	orn	r2, r2, r5
  406f8e:	bf1c      	itt	ne
  406f90:	ea63 0305 	ornne	r3, r3, r5
  406f94:	4662      	movne	r2, ip
  406f96:	f04f 0400 	mov.w	r4, #0
  406f9a:	e7a9      	b.n	406ef0 <strlen+0x30>

00406f9c <__ssprint_r>:
  406f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406fa0:	6893      	ldr	r3, [r2, #8]
  406fa2:	b083      	sub	sp, #12
  406fa4:	4690      	mov	r8, r2
  406fa6:	2b00      	cmp	r3, #0
  406fa8:	d070      	beq.n	40708c <__ssprint_r+0xf0>
  406faa:	4682      	mov	sl, r0
  406fac:	460c      	mov	r4, r1
  406fae:	6817      	ldr	r7, [r2, #0]
  406fb0:	688d      	ldr	r5, [r1, #8]
  406fb2:	6808      	ldr	r0, [r1, #0]
  406fb4:	e042      	b.n	40703c <__ssprint_r+0xa0>
  406fb6:	89a3      	ldrh	r3, [r4, #12]
  406fb8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406fbc:	d02e      	beq.n	40701c <__ssprint_r+0x80>
  406fbe:	6965      	ldr	r5, [r4, #20]
  406fc0:	6921      	ldr	r1, [r4, #16]
  406fc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  406fc6:	eba0 0b01 	sub.w	fp, r0, r1
  406fca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  406fce:	f10b 0001 	add.w	r0, fp, #1
  406fd2:	106d      	asrs	r5, r5, #1
  406fd4:	4430      	add	r0, r6
  406fd6:	42a8      	cmp	r0, r5
  406fd8:	462a      	mov	r2, r5
  406fda:	bf84      	itt	hi
  406fdc:	4605      	movhi	r5, r0
  406fde:	462a      	movhi	r2, r5
  406fe0:	055b      	lsls	r3, r3, #21
  406fe2:	d538      	bpl.n	407056 <__ssprint_r+0xba>
  406fe4:	4611      	mov	r1, r2
  406fe6:	4650      	mov	r0, sl
  406fe8:	f7fe fffc 	bl	405fe4 <_malloc_r>
  406fec:	2800      	cmp	r0, #0
  406fee:	d03c      	beq.n	40706a <__ssprint_r+0xce>
  406ff0:	465a      	mov	r2, fp
  406ff2:	6921      	ldr	r1, [r4, #16]
  406ff4:	9001      	str	r0, [sp, #4]
  406ff6:	f7ff fb2b 	bl	406650 <memcpy>
  406ffa:	89a2      	ldrh	r2, [r4, #12]
  406ffc:	9b01      	ldr	r3, [sp, #4]
  406ffe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  407002:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  407006:	81a2      	strh	r2, [r4, #12]
  407008:	eba5 020b 	sub.w	r2, r5, fp
  40700c:	eb03 000b 	add.w	r0, r3, fp
  407010:	6165      	str	r5, [r4, #20]
  407012:	6123      	str	r3, [r4, #16]
  407014:	6020      	str	r0, [r4, #0]
  407016:	60a2      	str	r2, [r4, #8]
  407018:	4635      	mov	r5, r6
  40701a:	46b3      	mov	fp, r6
  40701c:	465a      	mov	r2, fp
  40701e:	4649      	mov	r1, r9
  407020:	f000 fa18 	bl	407454 <memmove>
  407024:	f8d8 3008 	ldr.w	r3, [r8, #8]
  407028:	68a2      	ldr	r2, [r4, #8]
  40702a:	6820      	ldr	r0, [r4, #0]
  40702c:	1b55      	subs	r5, r2, r5
  40702e:	4458      	add	r0, fp
  407030:	1b9e      	subs	r6, r3, r6
  407032:	60a5      	str	r5, [r4, #8]
  407034:	6020      	str	r0, [r4, #0]
  407036:	f8c8 6008 	str.w	r6, [r8, #8]
  40703a:	b33e      	cbz	r6, 40708c <__ssprint_r+0xf0>
  40703c:	687e      	ldr	r6, [r7, #4]
  40703e:	463b      	mov	r3, r7
  407040:	3708      	adds	r7, #8
  407042:	2e00      	cmp	r6, #0
  407044:	d0fa      	beq.n	40703c <__ssprint_r+0xa0>
  407046:	42ae      	cmp	r6, r5
  407048:	f8d3 9000 	ldr.w	r9, [r3]
  40704c:	46ab      	mov	fp, r5
  40704e:	d2b2      	bcs.n	406fb6 <__ssprint_r+0x1a>
  407050:	4635      	mov	r5, r6
  407052:	46b3      	mov	fp, r6
  407054:	e7e2      	b.n	40701c <__ssprint_r+0x80>
  407056:	4650      	mov	r0, sl
  407058:	f000 fa60 	bl	40751c <_realloc_r>
  40705c:	4603      	mov	r3, r0
  40705e:	2800      	cmp	r0, #0
  407060:	d1d2      	bne.n	407008 <__ssprint_r+0x6c>
  407062:	6921      	ldr	r1, [r4, #16]
  407064:	4650      	mov	r0, sl
  407066:	f000 f8f9 	bl	40725c <_free_r>
  40706a:	230c      	movs	r3, #12
  40706c:	f8ca 3000 	str.w	r3, [sl]
  407070:	89a3      	ldrh	r3, [r4, #12]
  407072:	2200      	movs	r2, #0
  407074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407078:	f04f 30ff 	mov.w	r0, #4294967295
  40707c:	81a3      	strh	r3, [r4, #12]
  40707e:	f8c8 2008 	str.w	r2, [r8, #8]
  407082:	f8c8 2004 	str.w	r2, [r8, #4]
  407086:	b003      	add	sp, #12
  407088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40708c:	2000      	movs	r0, #0
  40708e:	f8c8 0004 	str.w	r0, [r8, #4]
  407092:	b003      	add	sp, #12
  407094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407098 <__register_exitproc>:
  407098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40709c:	4d2c      	ldr	r5, [pc, #176]	; (407150 <__register_exitproc+0xb8>)
  40709e:	4606      	mov	r6, r0
  4070a0:	6828      	ldr	r0, [r5, #0]
  4070a2:	4698      	mov	r8, r3
  4070a4:	460f      	mov	r7, r1
  4070a6:	4691      	mov	r9, r2
  4070a8:	f7fe ff98 	bl	405fdc <__retarget_lock_acquire_recursive>
  4070ac:	4b29      	ldr	r3, [pc, #164]	; (407154 <__register_exitproc+0xbc>)
  4070ae:	681c      	ldr	r4, [r3, #0]
  4070b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4070b4:	2b00      	cmp	r3, #0
  4070b6:	d03e      	beq.n	407136 <__register_exitproc+0x9e>
  4070b8:	685a      	ldr	r2, [r3, #4]
  4070ba:	2a1f      	cmp	r2, #31
  4070bc:	dc1c      	bgt.n	4070f8 <__register_exitproc+0x60>
  4070be:	f102 0e01 	add.w	lr, r2, #1
  4070c2:	b176      	cbz	r6, 4070e2 <__register_exitproc+0x4a>
  4070c4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4070c8:	2401      	movs	r4, #1
  4070ca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4070ce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4070d2:	4094      	lsls	r4, r2
  4070d4:	4320      	orrs	r0, r4
  4070d6:	2e02      	cmp	r6, #2
  4070d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4070dc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4070e0:	d023      	beq.n	40712a <__register_exitproc+0x92>
  4070e2:	3202      	adds	r2, #2
  4070e4:	f8c3 e004 	str.w	lr, [r3, #4]
  4070e8:	6828      	ldr	r0, [r5, #0]
  4070ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4070ee:	f7fe ff77 	bl	405fe0 <__retarget_lock_release_recursive>
  4070f2:	2000      	movs	r0, #0
  4070f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4070f8:	4b17      	ldr	r3, [pc, #92]	; (407158 <__register_exitproc+0xc0>)
  4070fa:	b30b      	cbz	r3, 407140 <__register_exitproc+0xa8>
  4070fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407100:	f3af 8000 	nop.w
  407104:	4603      	mov	r3, r0
  407106:	b1d8      	cbz	r0, 407140 <__register_exitproc+0xa8>
  407108:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40710c:	6002      	str	r2, [r0, #0]
  40710e:	2100      	movs	r1, #0
  407110:	6041      	str	r1, [r0, #4]
  407112:	460a      	mov	r2, r1
  407114:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  407118:	f04f 0e01 	mov.w	lr, #1
  40711c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407120:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407124:	2e00      	cmp	r6, #0
  407126:	d0dc      	beq.n	4070e2 <__register_exitproc+0x4a>
  407128:	e7cc      	b.n	4070c4 <__register_exitproc+0x2c>
  40712a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40712e:	430c      	orrs	r4, r1
  407130:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407134:	e7d5      	b.n	4070e2 <__register_exitproc+0x4a>
  407136:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40713a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40713e:	e7bb      	b.n	4070b8 <__register_exitproc+0x20>
  407140:	6828      	ldr	r0, [r5, #0]
  407142:	f7fe ff4d 	bl	405fe0 <__retarget_lock_release_recursive>
  407146:	f04f 30ff 	mov.w	r0, #4294967295
  40714a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40714e:	bf00      	nop
  407150:	20000440 	.word	0x20000440
  407154:	00408ef4 	.word	0x00408ef4
  407158:	00000000 	.word	0x00000000

0040715c <_calloc_r>:
  40715c:	b510      	push	{r4, lr}
  40715e:	fb02 f101 	mul.w	r1, r2, r1
  407162:	f7fe ff3f 	bl	405fe4 <_malloc_r>
  407166:	4604      	mov	r4, r0
  407168:	b1d8      	cbz	r0, 4071a2 <_calloc_r+0x46>
  40716a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40716e:	f022 0203 	bic.w	r2, r2, #3
  407172:	3a04      	subs	r2, #4
  407174:	2a24      	cmp	r2, #36	; 0x24
  407176:	d818      	bhi.n	4071aa <_calloc_r+0x4e>
  407178:	2a13      	cmp	r2, #19
  40717a:	d914      	bls.n	4071a6 <_calloc_r+0x4a>
  40717c:	2300      	movs	r3, #0
  40717e:	2a1b      	cmp	r2, #27
  407180:	6003      	str	r3, [r0, #0]
  407182:	6043      	str	r3, [r0, #4]
  407184:	d916      	bls.n	4071b4 <_calloc_r+0x58>
  407186:	2a24      	cmp	r2, #36	; 0x24
  407188:	6083      	str	r3, [r0, #8]
  40718a:	60c3      	str	r3, [r0, #12]
  40718c:	bf11      	iteee	ne
  40718e:	f100 0210 	addne.w	r2, r0, #16
  407192:	6103      	streq	r3, [r0, #16]
  407194:	6143      	streq	r3, [r0, #20]
  407196:	f100 0218 	addeq.w	r2, r0, #24
  40719a:	2300      	movs	r3, #0
  40719c:	6013      	str	r3, [r2, #0]
  40719e:	6053      	str	r3, [r2, #4]
  4071a0:	6093      	str	r3, [r2, #8]
  4071a2:	4620      	mov	r0, r4
  4071a4:	bd10      	pop	{r4, pc}
  4071a6:	4602      	mov	r2, r0
  4071a8:	e7f7      	b.n	40719a <_calloc_r+0x3e>
  4071aa:	2100      	movs	r1, #0
  4071ac:	f7fc fa1a 	bl	4035e4 <memset>
  4071b0:	4620      	mov	r0, r4
  4071b2:	bd10      	pop	{r4, pc}
  4071b4:	f100 0208 	add.w	r2, r0, #8
  4071b8:	e7ef      	b.n	40719a <_calloc_r+0x3e>
  4071ba:	bf00      	nop

004071bc <_malloc_trim_r>:
  4071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4071be:	4f24      	ldr	r7, [pc, #144]	; (407250 <_malloc_trim_r+0x94>)
  4071c0:	460c      	mov	r4, r1
  4071c2:	4606      	mov	r6, r0
  4071c4:	f7ff fade 	bl	406784 <__malloc_lock>
  4071c8:	68bb      	ldr	r3, [r7, #8]
  4071ca:	685d      	ldr	r5, [r3, #4]
  4071cc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4071d0:	310f      	adds	r1, #15
  4071d2:	f025 0503 	bic.w	r5, r5, #3
  4071d6:	4429      	add	r1, r5
  4071d8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4071dc:	f021 010f 	bic.w	r1, r1, #15
  4071e0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4071e4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4071e8:	db07      	blt.n	4071fa <_malloc_trim_r+0x3e>
  4071ea:	2100      	movs	r1, #0
  4071ec:	4630      	mov	r0, r6
  4071ee:	f7ff fdcf 	bl	406d90 <_sbrk_r>
  4071f2:	68bb      	ldr	r3, [r7, #8]
  4071f4:	442b      	add	r3, r5
  4071f6:	4298      	cmp	r0, r3
  4071f8:	d004      	beq.n	407204 <_malloc_trim_r+0x48>
  4071fa:	4630      	mov	r0, r6
  4071fc:	f7ff fac8 	bl	406790 <__malloc_unlock>
  407200:	2000      	movs	r0, #0
  407202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407204:	4261      	negs	r1, r4
  407206:	4630      	mov	r0, r6
  407208:	f7ff fdc2 	bl	406d90 <_sbrk_r>
  40720c:	3001      	adds	r0, #1
  40720e:	d00d      	beq.n	40722c <_malloc_trim_r+0x70>
  407210:	4b10      	ldr	r3, [pc, #64]	; (407254 <_malloc_trim_r+0x98>)
  407212:	68ba      	ldr	r2, [r7, #8]
  407214:	6819      	ldr	r1, [r3, #0]
  407216:	1b2d      	subs	r5, r5, r4
  407218:	f045 0501 	orr.w	r5, r5, #1
  40721c:	4630      	mov	r0, r6
  40721e:	1b09      	subs	r1, r1, r4
  407220:	6055      	str	r5, [r2, #4]
  407222:	6019      	str	r1, [r3, #0]
  407224:	f7ff fab4 	bl	406790 <__malloc_unlock>
  407228:	2001      	movs	r0, #1
  40722a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40722c:	2100      	movs	r1, #0
  40722e:	4630      	mov	r0, r6
  407230:	f7ff fdae 	bl	406d90 <_sbrk_r>
  407234:	68ba      	ldr	r2, [r7, #8]
  407236:	1a83      	subs	r3, r0, r2
  407238:	2b0f      	cmp	r3, #15
  40723a:	ddde      	ble.n	4071fa <_malloc_trim_r+0x3e>
  40723c:	4c06      	ldr	r4, [pc, #24]	; (407258 <_malloc_trim_r+0x9c>)
  40723e:	4905      	ldr	r1, [pc, #20]	; (407254 <_malloc_trim_r+0x98>)
  407240:	6824      	ldr	r4, [r4, #0]
  407242:	f043 0301 	orr.w	r3, r3, #1
  407246:	1b00      	subs	r0, r0, r4
  407248:	6053      	str	r3, [r2, #4]
  40724a:	6008      	str	r0, [r1, #0]
  40724c:	e7d5      	b.n	4071fa <_malloc_trim_r+0x3e>
  40724e:	bf00      	nop
  407250:	20000444 	.word	0x20000444
  407254:	20000a80 	.word	0x20000a80
  407258:	2000084c 	.word	0x2000084c

0040725c <_free_r>:
  40725c:	2900      	cmp	r1, #0
  40725e:	d044      	beq.n	4072ea <_free_r+0x8e>
  407260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407264:	460d      	mov	r5, r1
  407266:	4680      	mov	r8, r0
  407268:	f7ff fa8c 	bl	406784 <__malloc_lock>
  40726c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407270:	4969      	ldr	r1, [pc, #420]	; (407418 <_free_r+0x1bc>)
  407272:	f027 0301 	bic.w	r3, r7, #1
  407276:	f1a5 0408 	sub.w	r4, r5, #8
  40727a:	18e2      	adds	r2, r4, r3
  40727c:	688e      	ldr	r6, [r1, #8]
  40727e:	6850      	ldr	r0, [r2, #4]
  407280:	42b2      	cmp	r2, r6
  407282:	f020 0003 	bic.w	r0, r0, #3
  407286:	d05e      	beq.n	407346 <_free_r+0xea>
  407288:	07fe      	lsls	r6, r7, #31
  40728a:	6050      	str	r0, [r2, #4]
  40728c:	d40b      	bmi.n	4072a6 <_free_r+0x4a>
  40728e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407292:	1be4      	subs	r4, r4, r7
  407294:	f101 0e08 	add.w	lr, r1, #8
  407298:	68a5      	ldr	r5, [r4, #8]
  40729a:	4575      	cmp	r5, lr
  40729c:	443b      	add	r3, r7
  40729e:	d06d      	beq.n	40737c <_free_r+0x120>
  4072a0:	68e7      	ldr	r7, [r4, #12]
  4072a2:	60ef      	str	r7, [r5, #12]
  4072a4:	60bd      	str	r5, [r7, #8]
  4072a6:	1815      	adds	r5, r2, r0
  4072a8:	686d      	ldr	r5, [r5, #4]
  4072aa:	07ed      	lsls	r5, r5, #31
  4072ac:	d53e      	bpl.n	40732c <_free_r+0xd0>
  4072ae:	f043 0201 	orr.w	r2, r3, #1
  4072b2:	6062      	str	r2, [r4, #4]
  4072b4:	50e3      	str	r3, [r4, r3]
  4072b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4072ba:	d217      	bcs.n	4072ec <_free_r+0x90>
  4072bc:	08db      	lsrs	r3, r3, #3
  4072be:	1c58      	adds	r0, r3, #1
  4072c0:	109a      	asrs	r2, r3, #2
  4072c2:	684d      	ldr	r5, [r1, #4]
  4072c4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4072c8:	60a7      	str	r7, [r4, #8]
  4072ca:	2301      	movs	r3, #1
  4072cc:	4093      	lsls	r3, r2
  4072ce:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4072d2:	432b      	orrs	r3, r5
  4072d4:	3a08      	subs	r2, #8
  4072d6:	60e2      	str	r2, [r4, #12]
  4072d8:	604b      	str	r3, [r1, #4]
  4072da:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4072de:	60fc      	str	r4, [r7, #12]
  4072e0:	4640      	mov	r0, r8
  4072e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4072e6:	f7ff ba53 	b.w	406790 <__malloc_unlock>
  4072ea:	4770      	bx	lr
  4072ec:	0a5a      	lsrs	r2, r3, #9
  4072ee:	2a04      	cmp	r2, #4
  4072f0:	d852      	bhi.n	407398 <_free_r+0x13c>
  4072f2:	099a      	lsrs	r2, r3, #6
  4072f4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4072f8:	00ff      	lsls	r7, r7, #3
  4072fa:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4072fe:	19c8      	adds	r0, r1, r7
  407300:	59ca      	ldr	r2, [r1, r7]
  407302:	3808      	subs	r0, #8
  407304:	4290      	cmp	r0, r2
  407306:	d04f      	beq.n	4073a8 <_free_r+0x14c>
  407308:	6851      	ldr	r1, [r2, #4]
  40730a:	f021 0103 	bic.w	r1, r1, #3
  40730e:	428b      	cmp	r3, r1
  407310:	d232      	bcs.n	407378 <_free_r+0x11c>
  407312:	6892      	ldr	r2, [r2, #8]
  407314:	4290      	cmp	r0, r2
  407316:	d1f7      	bne.n	407308 <_free_r+0xac>
  407318:	68c3      	ldr	r3, [r0, #12]
  40731a:	60a0      	str	r0, [r4, #8]
  40731c:	60e3      	str	r3, [r4, #12]
  40731e:	609c      	str	r4, [r3, #8]
  407320:	60c4      	str	r4, [r0, #12]
  407322:	4640      	mov	r0, r8
  407324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407328:	f7ff ba32 	b.w	406790 <__malloc_unlock>
  40732c:	6895      	ldr	r5, [r2, #8]
  40732e:	4f3b      	ldr	r7, [pc, #236]	; (40741c <_free_r+0x1c0>)
  407330:	42bd      	cmp	r5, r7
  407332:	4403      	add	r3, r0
  407334:	d040      	beq.n	4073b8 <_free_r+0x15c>
  407336:	68d0      	ldr	r0, [r2, #12]
  407338:	60e8      	str	r0, [r5, #12]
  40733a:	f043 0201 	orr.w	r2, r3, #1
  40733e:	6085      	str	r5, [r0, #8]
  407340:	6062      	str	r2, [r4, #4]
  407342:	50e3      	str	r3, [r4, r3]
  407344:	e7b7      	b.n	4072b6 <_free_r+0x5a>
  407346:	07ff      	lsls	r7, r7, #31
  407348:	4403      	add	r3, r0
  40734a:	d407      	bmi.n	40735c <_free_r+0x100>
  40734c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407350:	1aa4      	subs	r4, r4, r2
  407352:	4413      	add	r3, r2
  407354:	68a0      	ldr	r0, [r4, #8]
  407356:	68e2      	ldr	r2, [r4, #12]
  407358:	60c2      	str	r2, [r0, #12]
  40735a:	6090      	str	r0, [r2, #8]
  40735c:	4a30      	ldr	r2, [pc, #192]	; (407420 <_free_r+0x1c4>)
  40735e:	6812      	ldr	r2, [r2, #0]
  407360:	f043 0001 	orr.w	r0, r3, #1
  407364:	4293      	cmp	r3, r2
  407366:	6060      	str	r0, [r4, #4]
  407368:	608c      	str	r4, [r1, #8]
  40736a:	d3b9      	bcc.n	4072e0 <_free_r+0x84>
  40736c:	4b2d      	ldr	r3, [pc, #180]	; (407424 <_free_r+0x1c8>)
  40736e:	4640      	mov	r0, r8
  407370:	6819      	ldr	r1, [r3, #0]
  407372:	f7ff ff23 	bl	4071bc <_malloc_trim_r>
  407376:	e7b3      	b.n	4072e0 <_free_r+0x84>
  407378:	4610      	mov	r0, r2
  40737a:	e7cd      	b.n	407318 <_free_r+0xbc>
  40737c:	1811      	adds	r1, r2, r0
  40737e:	6849      	ldr	r1, [r1, #4]
  407380:	07c9      	lsls	r1, r1, #31
  407382:	d444      	bmi.n	40740e <_free_r+0x1b2>
  407384:	6891      	ldr	r1, [r2, #8]
  407386:	68d2      	ldr	r2, [r2, #12]
  407388:	60ca      	str	r2, [r1, #12]
  40738a:	4403      	add	r3, r0
  40738c:	f043 0001 	orr.w	r0, r3, #1
  407390:	6091      	str	r1, [r2, #8]
  407392:	6060      	str	r0, [r4, #4]
  407394:	50e3      	str	r3, [r4, r3]
  407396:	e7a3      	b.n	4072e0 <_free_r+0x84>
  407398:	2a14      	cmp	r2, #20
  40739a:	d816      	bhi.n	4073ca <_free_r+0x16e>
  40739c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4073a0:	00ff      	lsls	r7, r7, #3
  4073a2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4073a6:	e7aa      	b.n	4072fe <_free_r+0xa2>
  4073a8:	10aa      	asrs	r2, r5, #2
  4073aa:	2301      	movs	r3, #1
  4073ac:	684d      	ldr	r5, [r1, #4]
  4073ae:	4093      	lsls	r3, r2
  4073b0:	432b      	orrs	r3, r5
  4073b2:	604b      	str	r3, [r1, #4]
  4073b4:	4603      	mov	r3, r0
  4073b6:	e7b0      	b.n	40731a <_free_r+0xbe>
  4073b8:	f043 0201 	orr.w	r2, r3, #1
  4073bc:	614c      	str	r4, [r1, #20]
  4073be:	610c      	str	r4, [r1, #16]
  4073c0:	60e5      	str	r5, [r4, #12]
  4073c2:	60a5      	str	r5, [r4, #8]
  4073c4:	6062      	str	r2, [r4, #4]
  4073c6:	50e3      	str	r3, [r4, r3]
  4073c8:	e78a      	b.n	4072e0 <_free_r+0x84>
  4073ca:	2a54      	cmp	r2, #84	; 0x54
  4073cc:	d806      	bhi.n	4073dc <_free_r+0x180>
  4073ce:	0b1a      	lsrs	r2, r3, #12
  4073d0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4073d4:	00ff      	lsls	r7, r7, #3
  4073d6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4073da:	e790      	b.n	4072fe <_free_r+0xa2>
  4073dc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4073e0:	d806      	bhi.n	4073f0 <_free_r+0x194>
  4073e2:	0bda      	lsrs	r2, r3, #15
  4073e4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4073e8:	00ff      	lsls	r7, r7, #3
  4073ea:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4073ee:	e786      	b.n	4072fe <_free_r+0xa2>
  4073f0:	f240 5054 	movw	r0, #1364	; 0x554
  4073f4:	4282      	cmp	r2, r0
  4073f6:	d806      	bhi.n	407406 <_free_r+0x1aa>
  4073f8:	0c9a      	lsrs	r2, r3, #18
  4073fa:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4073fe:	00ff      	lsls	r7, r7, #3
  407400:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407404:	e77b      	b.n	4072fe <_free_r+0xa2>
  407406:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40740a:	257e      	movs	r5, #126	; 0x7e
  40740c:	e777      	b.n	4072fe <_free_r+0xa2>
  40740e:	f043 0101 	orr.w	r1, r3, #1
  407412:	6061      	str	r1, [r4, #4]
  407414:	6013      	str	r3, [r2, #0]
  407416:	e763      	b.n	4072e0 <_free_r+0x84>
  407418:	20000444 	.word	0x20000444
  40741c:	2000044c 	.word	0x2000044c
  407420:	20000850 	.word	0x20000850
  407424:	20000ab0 	.word	0x20000ab0

00407428 <__ascii_mbtowc>:
  407428:	b082      	sub	sp, #8
  40742a:	b149      	cbz	r1, 407440 <__ascii_mbtowc+0x18>
  40742c:	b15a      	cbz	r2, 407446 <__ascii_mbtowc+0x1e>
  40742e:	b16b      	cbz	r3, 40744c <__ascii_mbtowc+0x24>
  407430:	7813      	ldrb	r3, [r2, #0]
  407432:	600b      	str	r3, [r1, #0]
  407434:	7812      	ldrb	r2, [r2, #0]
  407436:	1c10      	adds	r0, r2, #0
  407438:	bf18      	it	ne
  40743a:	2001      	movne	r0, #1
  40743c:	b002      	add	sp, #8
  40743e:	4770      	bx	lr
  407440:	a901      	add	r1, sp, #4
  407442:	2a00      	cmp	r2, #0
  407444:	d1f3      	bne.n	40742e <__ascii_mbtowc+0x6>
  407446:	4610      	mov	r0, r2
  407448:	b002      	add	sp, #8
  40744a:	4770      	bx	lr
  40744c:	f06f 0001 	mvn.w	r0, #1
  407450:	e7f4      	b.n	40743c <__ascii_mbtowc+0x14>
  407452:	bf00      	nop

00407454 <memmove>:
  407454:	4288      	cmp	r0, r1
  407456:	b5f0      	push	{r4, r5, r6, r7, lr}
  407458:	d90d      	bls.n	407476 <memmove+0x22>
  40745a:	188b      	adds	r3, r1, r2
  40745c:	4298      	cmp	r0, r3
  40745e:	d20a      	bcs.n	407476 <memmove+0x22>
  407460:	1884      	adds	r4, r0, r2
  407462:	2a00      	cmp	r2, #0
  407464:	d051      	beq.n	40750a <memmove+0xb6>
  407466:	4622      	mov	r2, r4
  407468:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40746c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407470:	4299      	cmp	r1, r3
  407472:	d1f9      	bne.n	407468 <memmove+0x14>
  407474:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407476:	2a0f      	cmp	r2, #15
  407478:	d948      	bls.n	40750c <memmove+0xb8>
  40747a:	ea41 0300 	orr.w	r3, r1, r0
  40747e:	079b      	lsls	r3, r3, #30
  407480:	d146      	bne.n	407510 <memmove+0xbc>
  407482:	f100 0410 	add.w	r4, r0, #16
  407486:	f101 0310 	add.w	r3, r1, #16
  40748a:	4615      	mov	r5, r2
  40748c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407490:	f844 6c10 	str.w	r6, [r4, #-16]
  407494:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407498:	f844 6c0c 	str.w	r6, [r4, #-12]
  40749c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4074a0:	f844 6c08 	str.w	r6, [r4, #-8]
  4074a4:	3d10      	subs	r5, #16
  4074a6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4074aa:	f844 6c04 	str.w	r6, [r4, #-4]
  4074ae:	2d0f      	cmp	r5, #15
  4074b0:	f103 0310 	add.w	r3, r3, #16
  4074b4:	f104 0410 	add.w	r4, r4, #16
  4074b8:	d8e8      	bhi.n	40748c <memmove+0x38>
  4074ba:	f1a2 0310 	sub.w	r3, r2, #16
  4074be:	f023 030f 	bic.w	r3, r3, #15
  4074c2:	f002 0e0f 	and.w	lr, r2, #15
  4074c6:	3310      	adds	r3, #16
  4074c8:	f1be 0f03 	cmp.w	lr, #3
  4074cc:	4419      	add	r1, r3
  4074ce:	4403      	add	r3, r0
  4074d0:	d921      	bls.n	407516 <memmove+0xc2>
  4074d2:	1f1e      	subs	r6, r3, #4
  4074d4:	460d      	mov	r5, r1
  4074d6:	4674      	mov	r4, lr
  4074d8:	3c04      	subs	r4, #4
  4074da:	f855 7b04 	ldr.w	r7, [r5], #4
  4074de:	f846 7f04 	str.w	r7, [r6, #4]!
  4074e2:	2c03      	cmp	r4, #3
  4074e4:	d8f8      	bhi.n	4074d8 <memmove+0x84>
  4074e6:	f1ae 0404 	sub.w	r4, lr, #4
  4074ea:	f024 0403 	bic.w	r4, r4, #3
  4074ee:	3404      	adds	r4, #4
  4074f0:	4421      	add	r1, r4
  4074f2:	4423      	add	r3, r4
  4074f4:	f002 0203 	and.w	r2, r2, #3
  4074f8:	b162      	cbz	r2, 407514 <memmove+0xc0>
  4074fa:	3b01      	subs	r3, #1
  4074fc:	440a      	add	r2, r1
  4074fe:	f811 4b01 	ldrb.w	r4, [r1], #1
  407502:	f803 4f01 	strb.w	r4, [r3, #1]!
  407506:	428a      	cmp	r2, r1
  407508:	d1f9      	bne.n	4074fe <memmove+0xaa>
  40750a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40750c:	4603      	mov	r3, r0
  40750e:	e7f3      	b.n	4074f8 <memmove+0xa4>
  407510:	4603      	mov	r3, r0
  407512:	e7f2      	b.n	4074fa <memmove+0xa6>
  407514:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407516:	4672      	mov	r2, lr
  407518:	e7ee      	b.n	4074f8 <memmove+0xa4>
  40751a:	bf00      	nop

0040751c <_realloc_r>:
  40751c:	2900      	cmp	r1, #0
  40751e:	f000 8095 	beq.w	40764c <_realloc_r+0x130>
  407522:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407526:	460d      	mov	r5, r1
  407528:	4616      	mov	r6, r2
  40752a:	b083      	sub	sp, #12
  40752c:	4680      	mov	r8, r0
  40752e:	f106 070b 	add.w	r7, r6, #11
  407532:	f7ff f927 	bl	406784 <__malloc_lock>
  407536:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40753a:	2f16      	cmp	r7, #22
  40753c:	f02e 0403 	bic.w	r4, lr, #3
  407540:	f1a5 0908 	sub.w	r9, r5, #8
  407544:	d83c      	bhi.n	4075c0 <_realloc_r+0xa4>
  407546:	2210      	movs	r2, #16
  407548:	4617      	mov	r7, r2
  40754a:	42be      	cmp	r6, r7
  40754c:	d83d      	bhi.n	4075ca <_realloc_r+0xae>
  40754e:	4294      	cmp	r4, r2
  407550:	da43      	bge.n	4075da <_realloc_r+0xbe>
  407552:	4bc4      	ldr	r3, [pc, #784]	; (407864 <_realloc_r+0x348>)
  407554:	6899      	ldr	r1, [r3, #8]
  407556:	eb09 0004 	add.w	r0, r9, r4
  40755a:	4288      	cmp	r0, r1
  40755c:	f000 80b4 	beq.w	4076c8 <_realloc_r+0x1ac>
  407560:	6843      	ldr	r3, [r0, #4]
  407562:	f023 0101 	bic.w	r1, r3, #1
  407566:	4401      	add	r1, r0
  407568:	6849      	ldr	r1, [r1, #4]
  40756a:	07c9      	lsls	r1, r1, #31
  40756c:	d54c      	bpl.n	407608 <_realloc_r+0xec>
  40756e:	f01e 0f01 	tst.w	lr, #1
  407572:	f000 809b 	beq.w	4076ac <_realloc_r+0x190>
  407576:	4631      	mov	r1, r6
  407578:	4640      	mov	r0, r8
  40757a:	f7fe fd33 	bl	405fe4 <_malloc_r>
  40757e:	4606      	mov	r6, r0
  407580:	2800      	cmp	r0, #0
  407582:	d03a      	beq.n	4075fa <_realloc_r+0xde>
  407584:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407588:	f023 0301 	bic.w	r3, r3, #1
  40758c:	444b      	add	r3, r9
  40758e:	f1a0 0208 	sub.w	r2, r0, #8
  407592:	429a      	cmp	r2, r3
  407594:	f000 8121 	beq.w	4077da <_realloc_r+0x2be>
  407598:	1f22      	subs	r2, r4, #4
  40759a:	2a24      	cmp	r2, #36	; 0x24
  40759c:	f200 8107 	bhi.w	4077ae <_realloc_r+0x292>
  4075a0:	2a13      	cmp	r2, #19
  4075a2:	f200 80db 	bhi.w	40775c <_realloc_r+0x240>
  4075a6:	4603      	mov	r3, r0
  4075a8:	462a      	mov	r2, r5
  4075aa:	6811      	ldr	r1, [r2, #0]
  4075ac:	6019      	str	r1, [r3, #0]
  4075ae:	6851      	ldr	r1, [r2, #4]
  4075b0:	6059      	str	r1, [r3, #4]
  4075b2:	6892      	ldr	r2, [r2, #8]
  4075b4:	609a      	str	r2, [r3, #8]
  4075b6:	4629      	mov	r1, r5
  4075b8:	4640      	mov	r0, r8
  4075ba:	f7ff fe4f 	bl	40725c <_free_r>
  4075be:	e01c      	b.n	4075fa <_realloc_r+0xde>
  4075c0:	f027 0707 	bic.w	r7, r7, #7
  4075c4:	2f00      	cmp	r7, #0
  4075c6:	463a      	mov	r2, r7
  4075c8:	dabf      	bge.n	40754a <_realloc_r+0x2e>
  4075ca:	2600      	movs	r6, #0
  4075cc:	230c      	movs	r3, #12
  4075ce:	4630      	mov	r0, r6
  4075d0:	f8c8 3000 	str.w	r3, [r8]
  4075d4:	b003      	add	sp, #12
  4075d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4075da:	462e      	mov	r6, r5
  4075dc:	1be3      	subs	r3, r4, r7
  4075de:	2b0f      	cmp	r3, #15
  4075e0:	d81e      	bhi.n	407620 <_realloc_r+0x104>
  4075e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4075e6:	f003 0301 	and.w	r3, r3, #1
  4075ea:	4323      	orrs	r3, r4
  4075ec:	444c      	add	r4, r9
  4075ee:	f8c9 3004 	str.w	r3, [r9, #4]
  4075f2:	6863      	ldr	r3, [r4, #4]
  4075f4:	f043 0301 	orr.w	r3, r3, #1
  4075f8:	6063      	str	r3, [r4, #4]
  4075fa:	4640      	mov	r0, r8
  4075fc:	f7ff f8c8 	bl	406790 <__malloc_unlock>
  407600:	4630      	mov	r0, r6
  407602:	b003      	add	sp, #12
  407604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407608:	f023 0303 	bic.w	r3, r3, #3
  40760c:	18e1      	adds	r1, r4, r3
  40760e:	4291      	cmp	r1, r2
  407610:	db1f      	blt.n	407652 <_realloc_r+0x136>
  407612:	68c3      	ldr	r3, [r0, #12]
  407614:	6882      	ldr	r2, [r0, #8]
  407616:	462e      	mov	r6, r5
  407618:	60d3      	str	r3, [r2, #12]
  40761a:	460c      	mov	r4, r1
  40761c:	609a      	str	r2, [r3, #8]
  40761e:	e7dd      	b.n	4075dc <_realloc_r+0xc0>
  407620:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407624:	eb09 0107 	add.w	r1, r9, r7
  407628:	f002 0201 	and.w	r2, r2, #1
  40762c:	444c      	add	r4, r9
  40762e:	f043 0301 	orr.w	r3, r3, #1
  407632:	4317      	orrs	r7, r2
  407634:	f8c9 7004 	str.w	r7, [r9, #4]
  407638:	604b      	str	r3, [r1, #4]
  40763a:	6863      	ldr	r3, [r4, #4]
  40763c:	f043 0301 	orr.w	r3, r3, #1
  407640:	3108      	adds	r1, #8
  407642:	6063      	str	r3, [r4, #4]
  407644:	4640      	mov	r0, r8
  407646:	f7ff fe09 	bl	40725c <_free_r>
  40764a:	e7d6      	b.n	4075fa <_realloc_r+0xde>
  40764c:	4611      	mov	r1, r2
  40764e:	f7fe bcc9 	b.w	405fe4 <_malloc_r>
  407652:	f01e 0f01 	tst.w	lr, #1
  407656:	d18e      	bne.n	407576 <_realloc_r+0x5a>
  407658:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40765c:	eba9 0a01 	sub.w	sl, r9, r1
  407660:	f8da 1004 	ldr.w	r1, [sl, #4]
  407664:	f021 0103 	bic.w	r1, r1, #3
  407668:	440b      	add	r3, r1
  40766a:	4423      	add	r3, r4
  40766c:	4293      	cmp	r3, r2
  40766e:	db25      	blt.n	4076bc <_realloc_r+0x1a0>
  407670:	68c2      	ldr	r2, [r0, #12]
  407672:	6881      	ldr	r1, [r0, #8]
  407674:	4656      	mov	r6, sl
  407676:	60ca      	str	r2, [r1, #12]
  407678:	6091      	str	r1, [r2, #8]
  40767a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40767e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407682:	1f22      	subs	r2, r4, #4
  407684:	2a24      	cmp	r2, #36	; 0x24
  407686:	60c1      	str	r1, [r0, #12]
  407688:	6088      	str	r0, [r1, #8]
  40768a:	f200 8094 	bhi.w	4077b6 <_realloc_r+0x29a>
  40768e:	2a13      	cmp	r2, #19
  407690:	d96f      	bls.n	407772 <_realloc_r+0x256>
  407692:	6829      	ldr	r1, [r5, #0]
  407694:	f8ca 1008 	str.w	r1, [sl, #8]
  407698:	6869      	ldr	r1, [r5, #4]
  40769a:	f8ca 100c 	str.w	r1, [sl, #12]
  40769e:	2a1b      	cmp	r2, #27
  4076a0:	f200 80a2 	bhi.w	4077e8 <_realloc_r+0x2cc>
  4076a4:	3508      	adds	r5, #8
  4076a6:	f10a 0210 	add.w	r2, sl, #16
  4076aa:	e063      	b.n	407774 <_realloc_r+0x258>
  4076ac:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4076b0:	eba9 0a03 	sub.w	sl, r9, r3
  4076b4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4076b8:	f021 0103 	bic.w	r1, r1, #3
  4076bc:	1863      	adds	r3, r4, r1
  4076be:	4293      	cmp	r3, r2
  4076c0:	f6ff af59 	blt.w	407576 <_realloc_r+0x5a>
  4076c4:	4656      	mov	r6, sl
  4076c6:	e7d8      	b.n	40767a <_realloc_r+0x15e>
  4076c8:	6841      	ldr	r1, [r0, #4]
  4076ca:	f021 0b03 	bic.w	fp, r1, #3
  4076ce:	44a3      	add	fp, r4
  4076d0:	f107 0010 	add.w	r0, r7, #16
  4076d4:	4583      	cmp	fp, r0
  4076d6:	da56      	bge.n	407786 <_realloc_r+0x26a>
  4076d8:	f01e 0f01 	tst.w	lr, #1
  4076dc:	f47f af4b 	bne.w	407576 <_realloc_r+0x5a>
  4076e0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4076e4:	eba9 0a01 	sub.w	sl, r9, r1
  4076e8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4076ec:	f021 0103 	bic.w	r1, r1, #3
  4076f0:	448b      	add	fp, r1
  4076f2:	4558      	cmp	r0, fp
  4076f4:	dce2      	bgt.n	4076bc <_realloc_r+0x1a0>
  4076f6:	4656      	mov	r6, sl
  4076f8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4076fc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407700:	1f22      	subs	r2, r4, #4
  407702:	2a24      	cmp	r2, #36	; 0x24
  407704:	60c1      	str	r1, [r0, #12]
  407706:	6088      	str	r0, [r1, #8]
  407708:	f200 808f 	bhi.w	40782a <_realloc_r+0x30e>
  40770c:	2a13      	cmp	r2, #19
  40770e:	f240 808a 	bls.w	407826 <_realloc_r+0x30a>
  407712:	6829      	ldr	r1, [r5, #0]
  407714:	f8ca 1008 	str.w	r1, [sl, #8]
  407718:	6869      	ldr	r1, [r5, #4]
  40771a:	f8ca 100c 	str.w	r1, [sl, #12]
  40771e:	2a1b      	cmp	r2, #27
  407720:	f200 808a 	bhi.w	407838 <_realloc_r+0x31c>
  407724:	3508      	adds	r5, #8
  407726:	f10a 0210 	add.w	r2, sl, #16
  40772a:	6829      	ldr	r1, [r5, #0]
  40772c:	6011      	str	r1, [r2, #0]
  40772e:	6869      	ldr	r1, [r5, #4]
  407730:	6051      	str	r1, [r2, #4]
  407732:	68a9      	ldr	r1, [r5, #8]
  407734:	6091      	str	r1, [r2, #8]
  407736:	eb0a 0107 	add.w	r1, sl, r7
  40773a:	ebab 0207 	sub.w	r2, fp, r7
  40773e:	f042 0201 	orr.w	r2, r2, #1
  407742:	6099      	str	r1, [r3, #8]
  407744:	604a      	str	r2, [r1, #4]
  407746:	f8da 3004 	ldr.w	r3, [sl, #4]
  40774a:	f003 0301 	and.w	r3, r3, #1
  40774e:	431f      	orrs	r7, r3
  407750:	4640      	mov	r0, r8
  407752:	f8ca 7004 	str.w	r7, [sl, #4]
  407756:	f7ff f81b 	bl	406790 <__malloc_unlock>
  40775a:	e751      	b.n	407600 <_realloc_r+0xe4>
  40775c:	682b      	ldr	r3, [r5, #0]
  40775e:	6003      	str	r3, [r0, #0]
  407760:	686b      	ldr	r3, [r5, #4]
  407762:	6043      	str	r3, [r0, #4]
  407764:	2a1b      	cmp	r2, #27
  407766:	d82d      	bhi.n	4077c4 <_realloc_r+0x2a8>
  407768:	f100 0308 	add.w	r3, r0, #8
  40776c:	f105 0208 	add.w	r2, r5, #8
  407770:	e71b      	b.n	4075aa <_realloc_r+0x8e>
  407772:	4632      	mov	r2, r6
  407774:	6829      	ldr	r1, [r5, #0]
  407776:	6011      	str	r1, [r2, #0]
  407778:	6869      	ldr	r1, [r5, #4]
  40777a:	6051      	str	r1, [r2, #4]
  40777c:	68a9      	ldr	r1, [r5, #8]
  40777e:	6091      	str	r1, [r2, #8]
  407780:	461c      	mov	r4, r3
  407782:	46d1      	mov	r9, sl
  407784:	e72a      	b.n	4075dc <_realloc_r+0xc0>
  407786:	eb09 0107 	add.w	r1, r9, r7
  40778a:	ebab 0b07 	sub.w	fp, fp, r7
  40778e:	f04b 0201 	orr.w	r2, fp, #1
  407792:	6099      	str	r1, [r3, #8]
  407794:	604a      	str	r2, [r1, #4]
  407796:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40779a:	f003 0301 	and.w	r3, r3, #1
  40779e:	431f      	orrs	r7, r3
  4077a0:	4640      	mov	r0, r8
  4077a2:	f845 7c04 	str.w	r7, [r5, #-4]
  4077a6:	f7fe fff3 	bl	406790 <__malloc_unlock>
  4077aa:	462e      	mov	r6, r5
  4077ac:	e728      	b.n	407600 <_realloc_r+0xe4>
  4077ae:	4629      	mov	r1, r5
  4077b0:	f7ff fe50 	bl	407454 <memmove>
  4077b4:	e6ff      	b.n	4075b6 <_realloc_r+0x9a>
  4077b6:	4629      	mov	r1, r5
  4077b8:	4630      	mov	r0, r6
  4077ba:	461c      	mov	r4, r3
  4077bc:	46d1      	mov	r9, sl
  4077be:	f7ff fe49 	bl	407454 <memmove>
  4077c2:	e70b      	b.n	4075dc <_realloc_r+0xc0>
  4077c4:	68ab      	ldr	r3, [r5, #8]
  4077c6:	6083      	str	r3, [r0, #8]
  4077c8:	68eb      	ldr	r3, [r5, #12]
  4077ca:	60c3      	str	r3, [r0, #12]
  4077cc:	2a24      	cmp	r2, #36	; 0x24
  4077ce:	d017      	beq.n	407800 <_realloc_r+0x2e4>
  4077d0:	f100 0310 	add.w	r3, r0, #16
  4077d4:	f105 0210 	add.w	r2, r5, #16
  4077d8:	e6e7      	b.n	4075aa <_realloc_r+0x8e>
  4077da:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4077de:	f023 0303 	bic.w	r3, r3, #3
  4077e2:	441c      	add	r4, r3
  4077e4:	462e      	mov	r6, r5
  4077e6:	e6f9      	b.n	4075dc <_realloc_r+0xc0>
  4077e8:	68a9      	ldr	r1, [r5, #8]
  4077ea:	f8ca 1010 	str.w	r1, [sl, #16]
  4077ee:	68e9      	ldr	r1, [r5, #12]
  4077f0:	f8ca 1014 	str.w	r1, [sl, #20]
  4077f4:	2a24      	cmp	r2, #36	; 0x24
  4077f6:	d00c      	beq.n	407812 <_realloc_r+0x2f6>
  4077f8:	3510      	adds	r5, #16
  4077fa:	f10a 0218 	add.w	r2, sl, #24
  4077fe:	e7b9      	b.n	407774 <_realloc_r+0x258>
  407800:	692b      	ldr	r3, [r5, #16]
  407802:	6103      	str	r3, [r0, #16]
  407804:	696b      	ldr	r3, [r5, #20]
  407806:	6143      	str	r3, [r0, #20]
  407808:	f105 0218 	add.w	r2, r5, #24
  40780c:	f100 0318 	add.w	r3, r0, #24
  407810:	e6cb      	b.n	4075aa <_realloc_r+0x8e>
  407812:	692a      	ldr	r2, [r5, #16]
  407814:	f8ca 2018 	str.w	r2, [sl, #24]
  407818:	696a      	ldr	r2, [r5, #20]
  40781a:	f8ca 201c 	str.w	r2, [sl, #28]
  40781e:	3518      	adds	r5, #24
  407820:	f10a 0220 	add.w	r2, sl, #32
  407824:	e7a6      	b.n	407774 <_realloc_r+0x258>
  407826:	4632      	mov	r2, r6
  407828:	e77f      	b.n	40772a <_realloc_r+0x20e>
  40782a:	4629      	mov	r1, r5
  40782c:	4630      	mov	r0, r6
  40782e:	9301      	str	r3, [sp, #4]
  407830:	f7ff fe10 	bl	407454 <memmove>
  407834:	9b01      	ldr	r3, [sp, #4]
  407836:	e77e      	b.n	407736 <_realloc_r+0x21a>
  407838:	68a9      	ldr	r1, [r5, #8]
  40783a:	f8ca 1010 	str.w	r1, [sl, #16]
  40783e:	68e9      	ldr	r1, [r5, #12]
  407840:	f8ca 1014 	str.w	r1, [sl, #20]
  407844:	2a24      	cmp	r2, #36	; 0x24
  407846:	d003      	beq.n	407850 <_realloc_r+0x334>
  407848:	3510      	adds	r5, #16
  40784a:	f10a 0218 	add.w	r2, sl, #24
  40784e:	e76c      	b.n	40772a <_realloc_r+0x20e>
  407850:	692a      	ldr	r2, [r5, #16]
  407852:	f8ca 2018 	str.w	r2, [sl, #24]
  407856:	696a      	ldr	r2, [r5, #20]
  407858:	f8ca 201c 	str.w	r2, [sl, #28]
  40785c:	3518      	adds	r5, #24
  40785e:	f10a 0220 	add.w	r2, sl, #32
  407862:	e762      	b.n	40772a <_realloc_r+0x20e>
  407864:	20000444 	.word	0x20000444

00407868 <__ascii_wctomb>:
  407868:	b121      	cbz	r1, 407874 <__ascii_wctomb+0xc>
  40786a:	2aff      	cmp	r2, #255	; 0xff
  40786c:	d804      	bhi.n	407878 <__ascii_wctomb+0x10>
  40786e:	700a      	strb	r2, [r1, #0]
  407870:	2001      	movs	r0, #1
  407872:	4770      	bx	lr
  407874:	4608      	mov	r0, r1
  407876:	4770      	bx	lr
  407878:	238a      	movs	r3, #138	; 0x8a
  40787a:	6003      	str	r3, [r0, #0]
  40787c:	f04f 30ff 	mov.w	r0, #4294967295
  407880:	4770      	bx	lr
  407882:	bf00      	nop

00407884 <__aeabi_drsub>:
  407884:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407888:	e002      	b.n	407890 <__adddf3>
  40788a:	bf00      	nop

0040788c <__aeabi_dsub>:
  40788c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407890 <__adddf3>:
  407890:	b530      	push	{r4, r5, lr}
  407892:	ea4f 0441 	mov.w	r4, r1, lsl #1
  407896:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40789a:	ea94 0f05 	teq	r4, r5
  40789e:	bf08      	it	eq
  4078a0:	ea90 0f02 	teqeq	r0, r2
  4078a4:	bf1f      	itttt	ne
  4078a6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4078aa:	ea55 0c02 	orrsne.w	ip, r5, r2
  4078ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4078b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4078b6:	f000 80e2 	beq.w	407a7e <__adddf3+0x1ee>
  4078ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4078be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4078c2:	bfb8      	it	lt
  4078c4:	426d      	neglt	r5, r5
  4078c6:	dd0c      	ble.n	4078e2 <__adddf3+0x52>
  4078c8:	442c      	add	r4, r5
  4078ca:	ea80 0202 	eor.w	r2, r0, r2
  4078ce:	ea81 0303 	eor.w	r3, r1, r3
  4078d2:	ea82 0000 	eor.w	r0, r2, r0
  4078d6:	ea83 0101 	eor.w	r1, r3, r1
  4078da:	ea80 0202 	eor.w	r2, r0, r2
  4078de:	ea81 0303 	eor.w	r3, r1, r3
  4078e2:	2d36      	cmp	r5, #54	; 0x36
  4078e4:	bf88      	it	hi
  4078e6:	bd30      	pophi	{r4, r5, pc}
  4078e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4078ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4078f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4078f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4078f8:	d002      	beq.n	407900 <__adddf3+0x70>
  4078fa:	4240      	negs	r0, r0
  4078fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407900:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407904:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407908:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40790c:	d002      	beq.n	407914 <__adddf3+0x84>
  40790e:	4252      	negs	r2, r2
  407910:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407914:	ea94 0f05 	teq	r4, r5
  407918:	f000 80a7 	beq.w	407a6a <__adddf3+0x1da>
  40791c:	f1a4 0401 	sub.w	r4, r4, #1
  407920:	f1d5 0e20 	rsbs	lr, r5, #32
  407924:	db0d      	blt.n	407942 <__adddf3+0xb2>
  407926:	fa02 fc0e 	lsl.w	ip, r2, lr
  40792a:	fa22 f205 	lsr.w	r2, r2, r5
  40792e:	1880      	adds	r0, r0, r2
  407930:	f141 0100 	adc.w	r1, r1, #0
  407934:	fa03 f20e 	lsl.w	r2, r3, lr
  407938:	1880      	adds	r0, r0, r2
  40793a:	fa43 f305 	asr.w	r3, r3, r5
  40793e:	4159      	adcs	r1, r3
  407940:	e00e      	b.n	407960 <__adddf3+0xd0>
  407942:	f1a5 0520 	sub.w	r5, r5, #32
  407946:	f10e 0e20 	add.w	lr, lr, #32
  40794a:	2a01      	cmp	r2, #1
  40794c:	fa03 fc0e 	lsl.w	ip, r3, lr
  407950:	bf28      	it	cs
  407952:	f04c 0c02 	orrcs.w	ip, ip, #2
  407956:	fa43 f305 	asr.w	r3, r3, r5
  40795a:	18c0      	adds	r0, r0, r3
  40795c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407960:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407964:	d507      	bpl.n	407976 <__adddf3+0xe6>
  407966:	f04f 0e00 	mov.w	lr, #0
  40796a:	f1dc 0c00 	rsbs	ip, ip, #0
  40796e:	eb7e 0000 	sbcs.w	r0, lr, r0
  407972:	eb6e 0101 	sbc.w	r1, lr, r1
  407976:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40797a:	d31b      	bcc.n	4079b4 <__adddf3+0x124>
  40797c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407980:	d30c      	bcc.n	40799c <__adddf3+0x10c>
  407982:	0849      	lsrs	r1, r1, #1
  407984:	ea5f 0030 	movs.w	r0, r0, rrx
  407988:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40798c:	f104 0401 	add.w	r4, r4, #1
  407990:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407994:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407998:	f080 809a 	bcs.w	407ad0 <__adddf3+0x240>
  40799c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4079a0:	bf08      	it	eq
  4079a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4079a6:	f150 0000 	adcs.w	r0, r0, #0
  4079aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4079ae:	ea41 0105 	orr.w	r1, r1, r5
  4079b2:	bd30      	pop	{r4, r5, pc}
  4079b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4079b8:	4140      	adcs	r0, r0
  4079ba:	eb41 0101 	adc.w	r1, r1, r1
  4079be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4079c2:	f1a4 0401 	sub.w	r4, r4, #1
  4079c6:	d1e9      	bne.n	40799c <__adddf3+0x10c>
  4079c8:	f091 0f00 	teq	r1, #0
  4079cc:	bf04      	itt	eq
  4079ce:	4601      	moveq	r1, r0
  4079d0:	2000      	moveq	r0, #0
  4079d2:	fab1 f381 	clz	r3, r1
  4079d6:	bf08      	it	eq
  4079d8:	3320      	addeq	r3, #32
  4079da:	f1a3 030b 	sub.w	r3, r3, #11
  4079de:	f1b3 0220 	subs.w	r2, r3, #32
  4079e2:	da0c      	bge.n	4079fe <__adddf3+0x16e>
  4079e4:	320c      	adds	r2, #12
  4079e6:	dd08      	ble.n	4079fa <__adddf3+0x16a>
  4079e8:	f102 0c14 	add.w	ip, r2, #20
  4079ec:	f1c2 020c 	rsb	r2, r2, #12
  4079f0:	fa01 f00c 	lsl.w	r0, r1, ip
  4079f4:	fa21 f102 	lsr.w	r1, r1, r2
  4079f8:	e00c      	b.n	407a14 <__adddf3+0x184>
  4079fa:	f102 0214 	add.w	r2, r2, #20
  4079fe:	bfd8      	it	le
  407a00:	f1c2 0c20 	rsble	ip, r2, #32
  407a04:	fa01 f102 	lsl.w	r1, r1, r2
  407a08:	fa20 fc0c 	lsr.w	ip, r0, ip
  407a0c:	bfdc      	itt	le
  407a0e:	ea41 010c 	orrle.w	r1, r1, ip
  407a12:	4090      	lslle	r0, r2
  407a14:	1ae4      	subs	r4, r4, r3
  407a16:	bfa2      	ittt	ge
  407a18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407a1c:	4329      	orrge	r1, r5
  407a1e:	bd30      	popge	{r4, r5, pc}
  407a20:	ea6f 0404 	mvn.w	r4, r4
  407a24:	3c1f      	subs	r4, #31
  407a26:	da1c      	bge.n	407a62 <__adddf3+0x1d2>
  407a28:	340c      	adds	r4, #12
  407a2a:	dc0e      	bgt.n	407a4a <__adddf3+0x1ba>
  407a2c:	f104 0414 	add.w	r4, r4, #20
  407a30:	f1c4 0220 	rsb	r2, r4, #32
  407a34:	fa20 f004 	lsr.w	r0, r0, r4
  407a38:	fa01 f302 	lsl.w	r3, r1, r2
  407a3c:	ea40 0003 	orr.w	r0, r0, r3
  407a40:	fa21 f304 	lsr.w	r3, r1, r4
  407a44:	ea45 0103 	orr.w	r1, r5, r3
  407a48:	bd30      	pop	{r4, r5, pc}
  407a4a:	f1c4 040c 	rsb	r4, r4, #12
  407a4e:	f1c4 0220 	rsb	r2, r4, #32
  407a52:	fa20 f002 	lsr.w	r0, r0, r2
  407a56:	fa01 f304 	lsl.w	r3, r1, r4
  407a5a:	ea40 0003 	orr.w	r0, r0, r3
  407a5e:	4629      	mov	r1, r5
  407a60:	bd30      	pop	{r4, r5, pc}
  407a62:	fa21 f004 	lsr.w	r0, r1, r4
  407a66:	4629      	mov	r1, r5
  407a68:	bd30      	pop	{r4, r5, pc}
  407a6a:	f094 0f00 	teq	r4, #0
  407a6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  407a72:	bf06      	itte	eq
  407a74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407a78:	3401      	addeq	r4, #1
  407a7a:	3d01      	subne	r5, #1
  407a7c:	e74e      	b.n	40791c <__adddf3+0x8c>
  407a7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407a82:	bf18      	it	ne
  407a84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407a88:	d029      	beq.n	407ade <__adddf3+0x24e>
  407a8a:	ea94 0f05 	teq	r4, r5
  407a8e:	bf08      	it	eq
  407a90:	ea90 0f02 	teqeq	r0, r2
  407a94:	d005      	beq.n	407aa2 <__adddf3+0x212>
  407a96:	ea54 0c00 	orrs.w	ip, r4, r0
  407a9a:	bf04      	itt	eq
  407a9c:	4619      	moveq	r1, r3
  407a9e:	4610      	moveq	r0, r2
  407aa0:	bd30      	pop	{r4, r5, pc}
  407aa2:	ea91 0f03 	teq	r1, r3
  407aa6:	bf1e      	ittt	ne
  407aa8:	2100      	movne	r1, #0
  407aaa:	2000      	movne	r0, #0
  407aac:	bd30      	popne	{r4, r5, pc}
  407aae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  407ab2:	d105      	bne.n	407ac0 <__adddf3+0x230>
  407ab4:	0040      	lsls	r0, r0, #1
  407ab6:	4149      	adcs	r1, r1
  407ab8:	bf28      	it	cs
  407aba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407abe:	bd30      	pop	{r4, r5, pc}
  407ac0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407ac4:	bf3c      	itt	cc
  407ac6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407aca:	bd30      	popcc	{r4, r5, pc}
  407acc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407ad0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407ad4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407ad8:	f04f 0000 	mov.w	r0, #0
  407adc:	bd30      	pop	{r4, r5, pc}
  407ade:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407ae2:	bf1a      	itte	ne
  407ae4:	4619      	movne	r1, r3
  407ae6:	4610      	movne	r0, r2
  407ae8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407aec:	bf1c      	itt	ne
  407aee:	460b      	movne	r3, r1
  407af0:	4602      	movne	r2, r0
  407af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407af6:	bf06      	itte	eq
  407af8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407afc:	ea91 0f03 	teqeq	r1, r3
  407b00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407b04:	bd30      	pop	{r4, r5, pc}
  407b06:	bf00      	nop

00407b08 <__aeabi_ui2d>:
  407b08:	f090 0f00 	teq	r0, #0
  407b0c:	bf04      	itt	eq
  407b0e:	2100      	moveq	r1, #0
  407b10:	4770      	bxeq	lr
  407b12:	b530      	push	{r4, r5, lr}
  407b14:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407b18:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407b1c:	f04f 0500 	mov.w	r5, #0
  407b20:	f04f 0100 	mov.w	r1, #0
  407b24:	e750      	b.n	4079c8 <__adddf3+0x138>
  407b26:	bf00      	nop

00407b28 <__aeabi_i2d>:
  407b28:	f090 0f00 	teq	r0, #0
  407b2c:	bf04      	itt	eq
  407b2e:	2100      	moveq	r1, #0
  407b30:	4770      	bxeq	lr
  407b32:	b530      	push	{r4, r5, lr}
  407b34:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407b38:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407b3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407b40:	bf48      	it	mi
  407b42:	4240      	negmi	r0, r0
  407b44:	f04f 0100 	mov.w	r1, #0
  407b48:	e73e      	b.n	4079c8 <__adddf3+0x138>
  407b4a:	bf00      	nop

00407b4c <__aeabi_f2d>:
  407b4c:	0042      	lsls	r2, r0, #1
  407b4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  407b52:	ea4f 0131 	mov.w	r1, r1, rrx
  407b56:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407b5a:	bf1f      	itttt	ne
  407b5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407b60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407b64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407b68:	4770      	bxne	lr
  407b6a:	f092 0f00 	teq	r2, #0
  407b6e:	bf14      	ite	ne
  407b70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407b74:	4770      	bxeq	lr
  407b76:	b530      	push	{r4, r5, lr}
  407b78:	f44f 7460 	mov.w	r4, #896	; 0x380
  407b7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407b80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407b84:	e720      	b.n	4079c8 <__adddf3+0x138>
  407b86:	bf00      	nop

00407b88 <__aeabi_ul2d>:
  407b88:	ea50 0201 	orrs.w	r2, r0, r1
  407b8c:	bf08      	it	eq
  407b8e:	4770      	bxeq	lr
  407b90:	b530      	push	{r4, r5, lr}
  407b92:	f04f 0500 	mov.w	r5, #0
  407b96:	e00a      	b.n	407bae <__aeabi_l2d+0x16>

00407b98 <__aeabi_l2d>:
  407b98:	ea50 0201 	orrs.w	r2, r0, r1
  407b9c:	bf08      	it	eq
  407b9e:	4770      	bxeq	lr
  407ba0:	b530      	push	{r4, r5, lr}
  407ba2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407ba6:	d502      	bpl.n	407bae <__aeabi_l2d+0x16>
  407ba8:	4240      	negs	r0, r0
  407baa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407bae:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407bb2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407bb6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407bba:	f43f aedc 	beq.w	407976 <__adddf3+0xe6>
  407bbe:	f04f 0203 	mov.w	r2, #3
  407bc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407bc6:	bf18      	it	ne
  407bc8:	3203      	addne	r2, #3
  407bca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407bce:	bf18      	it	ne
  407bd0:	3203      	addne	r2, #3
  407bd2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407bd6:	f1c2 0320 	rsb	r3, r2, #32
  407bda:	fa00 fc03 	lsl.w	ip, r0, r3
  407bde:	fa20 f002 	lsr.w	r0, r0, r2
  407be2:	fa01 fe03 	lsl.w	lr, r1, r3
  407be6:	ea40 000e 	orr.w	r0, r0, lr
  407bea:	fa21 f102 	lsr.w	r1, r1, r2
  407bee:	4414      	add	r4, r2
  407bf0:	e6c1      	b.n	407976 <__adddf3+0xe6>
  407bf2:	bf00      	nop

00407bf4 <__aeabi_dmul>:
  407bf4:	b570      	push	{r4, r5, r6, lr}
  407bf6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407bfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407bfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407c02:	bf1d      	ittte	ne
  407c04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407c08:	ea94 0f0c 	teqne	r4, ip
  407c0c:	ea95 0f0c 	teqne	r5, ip
  407c10:	f000 f8de 	bleq	407dd0 <__aeabi_dmul+0x1dc>
  407c14:	442c      	add	r4, r5
  407c16:	ea81 0603 	eor.w	r6, r1, r3
  407c1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407c1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407c22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407c26:	bf18      	it	ne
  407c28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407c2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407c34:	d038      	beq.n	407ca8 <__aeabi_dmul+0xb4>
  407c36:	fba0 ce02 	umull	ip, lr, r0, r2
  407c3a:	f04f 0500 	mov.w	r5, #0
  407c3e:	fbe1 e502 	umlal	lr, r5, r1, r2
  407c42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407c46:	fbe0 e503 	umlal	lr, r5, r0, r3
  407c4a:	f04f 0600 	mov.w	r6, #0
  407c4e:	fbe1 5603 	umlal	r5, r6, r1, r3
  407c52:	f09c 0f00 	teq	ip, #0
  407c56:	bf18      	it	ne
  407c58:	f04e 0e01 	orrne.w	lr, lr, #1
  407c5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407c60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407c64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407c68:	d204      	bcs.n	407c74 <__aeabi_dmul+0x80>
  407c6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407c6e:	416d      	adcs	r5, r5
  407c70:	eb46 0606 	adc.w	r6, r6, r6
  407c74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407c78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407c7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407c80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407c84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407c88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407c8c:	bf88      	it	hi
  407c8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407c92:	d81e      	bhi.n	407cd2 <__aeabi_dmul+0xde>
  407c94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407c98:	bf08      	it	eq
  407c9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407c9e:	f150 0000 	adcs.w	r0, r0, #0
  407ca2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407ca6:	bd70      	pop	{r4, r5, r6, pc}
  407ca8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407cac:	ea46 0101 	orr.w	r1, r6, r1
  407cb0:	ea40 0002 	orr.w	r0, r0, r2
  407cb4:	ea81 0103 	eor.w	r1, r1, r3
  407cb8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407cbc:	bfc2      	ittt	gt
  407cbe:	ebd4 050c 	rsbsgt	r5, r4, ip
  407cc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407cc6:	bd70      	popgt	{r4, r5, r6, pc}
  407cc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407ccc:	f04f 0e00 	mov.w	lr, #0
  407cd0:	3c01      	subs	r4, #1
  407cd2:	f300 80ab 	bgt.w	407e2c <__aeabi_dmul+0x238>
  407cd6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407cda:	bfde      	ittt	le
  407cdc:	2000      	movle	r0, #0
  407cde:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407ce2:	bd70      	pople	{r4, r5, r6, pc}
  407ce4:	f1c4 0400 	rsb	r4, r4, #0
  407ce8:	3c20      	subs	r4, #32
  407cea:	da35      	bge.n	407d58 <__aeabi_dmul+0x164>
  407cec:	340c      	adds	r4, #12
  407cee:	dc1b      	bgt.n	407d28 <__aeabi_dmul+0x134>
  407cf0:	f104 0414 	add.w	r4, r4, #20
  407cf4:	f1c4 0520 	rsb	r5, r4, #32
  407cf8:	fa00 f305 	lsl.w	r3, r0, r5
  407cfc:	fa20 f004 	lsr.w	r0, r0, r4
  407d00:	fa01 f205 	lsl.w	r2, r1, r5
  407d04:	ea40 0002 	orr.w	r0, r0, r2
  407d08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407d0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407d10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407d14:	fa21 f604 	lsr.w	r6, r1, r4
  407d18:	eb42 0106 	adc.w	r1, r2, r6
  407d1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407d20:	bf08      	it	eq
  407d22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407d26:	bd70      	pop	{r4, r5, r6, pc}
  407d28:	f1c4 040c 	rsb	r4, r4, #12
  407d2c:	f1c4 0520 	rsb	r5, r4, #32
  407d30:	fa00 f304 	lsl.w	r3, r0, r4
  407d34:	fa20 f005 	lsr.w	r0, r0, r5
  407d38:	fa01 f204 	lsl.w	r2, r1, r4
  407d3c:	ea40 0002 	orr.w	r0, r0, r2
  407d40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407d44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407d48:	f141 0100 	adc.w	r1, r1, #0
  407d4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407d50:	bf08      	it	eq
  407d52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407d56:	bd70      	pop	{r4, r5, r6, pc}
  407d58:	f1c4 0520 	rsb	r5, r4, #32
  407d5c:	fa00 f205 	lsl.w	r2, r0, r5
  407d60:	ea4e 0e02 	orr.w	lr, lr, r2
  407d64:	fa20 f304 	lsr.w	r3, r0, r4
  407d68:	fa01 f205 	lsl.w	r2, r1, r5
  407d6c:	ea43 0302 	orr.w	r3, r3, r2
  407d70:	fa21 f004 	lsr.w	r0, r1, r4
  407d74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407d78:	fa21 f204 	lsr.w	r2, r1, r4
  407d7c:	ea20 0002 	bic.w	r0, r0, r2
  407d80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407d84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407d88:	bf08      	it	eq
  407d8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407d8e:	bd70      	pop	{r4, r5, r6, pc}
  407d90:	f094 0f00 	teq	r4, #0
  407d94:	d10f      	bne.n	407db6 <__aeabi_dmul+0x1c2>
  407d96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407d9a:	0040      	lsls	r0, r0, #1
  407d9c:	eb41 0101 	adc.w	r1, r1, r1
  407da0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407da4:	bf08      	it	eq
  407da6:	3c01      	subeq	r4, #1
  407da8:	d0f7      	beq.n	407d9a <__aeabi_dmul+0x1a6>
  407daa:	ea41 0106 	orr.w	r1, r1, r6
  407dae:	f095 0f00 	teq	r5, #0
  407db2:	bf18      	it	ne
  407db4:	4770      	bxne	lr
  407db6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407dba:	0052      	lsls	r2, r2, #1
  407dbc:	eb43 0303 	adc.w	r3, r3, r3
  407dc0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407dc4:	bf08      	it	eq
  407dc6:	3d01      	subeq	r5, #1
  407dc8:	d0f7      	beq.n	407dba <__aeabi_dmul+0x1c6>
  407dca:	ea43 0306 	orr.w	r3, r3, r6
  407dce:	4770      	bx	lr
  407dd0:	ea94 0f0c 	teq	r4, ip
  407dd4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407dd8:	bf18      	it	ne
  407dda:	ea95 0f0c 	teqne	r5, ip
  407dde:	d00c      	beq.n	407dfa <__aeabi_dmul+0x206>
  407de0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407de4:	bf18      	it	ne
  407de6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407dea:	d1d1      	bne.n	407d90 <__aeabi_dmul+0x19c>
  407dec:	ea81 0103 	eor.w	r1, r1, r3
  407df0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407df4:	f04f 0000 	mov.w	r0, #0
  407df8:	bd70      	pop	{r4, r5, r6, pc}
  407dfa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407dfe:	bf06      	itte	eq
  407e00:	4610      	moveq	r0, r2
  407e02:	4619      	moveq	r1, r3
  407e04:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407e08:	d019      	beq.n	407e3e <__aeabi_dmul+0x24a>
  407e0a:	ea94 0f0c 	teq	r4, ip
  407e0e:	d102      	bne.n	407e16 <__aeabi_dmul+0x222>
  407e10:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407e14:	d113      	bne.n	407e3e <__aeabi_dmul+0x24a>
  407e16:	ea95 0f0c 	teq	r5, ip
  407e1a:	d105      	bne.n	407e28 <__aeabi_dmul+0x234>
  407e1c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407e20:	bf1c      	itt	ne
  407e22:	4610      	movne	r0, r2
  407e24:	4619      	movne	r1, r3
  407e26:	d10a      	bne.n	407e3e <__aeabi_dmul+0x24a>
  407e28:	ea81 0103 	eor.w	r1, r1, r3
  407e2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407e30:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407e34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407e38:	f04f 0000 	mov.w	r0, #0
  407e3c:	bd70      	pop	{r4, r5, r6, pc}
  407e3e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407e42:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407e46:	bd70      	pop	{r4, r5, r6, pc}

00407e48 <__aeabi_ddiv>:
  407e48:	b570      	push	{r4, r5, r6, lr}
  407e4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407e4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407e52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407e56:	bf1d      	ittte	ne
  407e58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407e5c:	ea94 0f0c 	teqne	r4, ip
  407e60:	ea95 0f0c 	teqne	r5, ip
  407e64:	f000 f8a7 	bleq	407fb6 <__aeabi_ddiv+0x16e>
  407e68:	eba4 0405 	sub.w	r4, r4, r5
  407e6c:	ea81 0e03 	eor.w	lr, r1, r3
  407e70:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407e74:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407e78:	f000 8088 	beq.w	407f8c <__aeabi_ddiv+0x144>
  407e7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407e80:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407e84:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407e88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407e8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407e90:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407e94:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407e98:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407e9c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407ea0:	429d      	cmp	r5, r3
  407ea2:	bf08      	it	eq
  407ea4:	4296      	cmpeq	r6, r2
  407ea6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407eaa:	f504 7440 	add.w	r4, r4, #768	; 0x300
  407eae:	d202      	bcs.n	407eb6 <__aeabi_ddiv+0x6e>
  407eb0:	085b      	lsrs	r3, r3, #1
  407eb2:	ea4f 0232 	mov.w	r2, r2, rrx
  407eb6:	1ab6      	subs	r6, r6, r2
  407eb8:	eb65 0503 	sbc.w	r5, r5, r3
  407ebc:	085b      	lsrs	r3, r3, #1
  407ebe:	ea4f 0232 	mov.w	r2, r2, rrx
  407ec2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  407ec6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407eca:	ebb6 0e02 	subs.w	lr, r6, r2
  407ece:	eb75 0e03 	sbcs.w	lr, r5, r3
  407ed2:	bf22      	ittt	cs
  407ed4:	1ab6      	subcs	r6, r6, r2
  407ed6:	4675      	movcs	r5, lr
  407ed8:	ea40 000c 	orrcs.w	r0, r0, ip
  407edc:	085b      	lsrs	r3, r3, #1
  407ede:	ea4f 0232 	mov.w	r2, r2, rrx
  407ee2:	ebb6 0e02 	subs.w	lr, r6, r2
  407ee6:	eb75 0e03 	sbcs.w	lr, r5, r3
  407eea:	bf22      	ittt	cs
  407eec:	1ab6      	subcs	r6, r6, r2
  407eee:	4675      	movcs	r5, lr
  407ef0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407ef4:	085b      	lsrs	r3, r3, #1
  407ef6:	ea4f 0232 	mov.w	r2, r2, rrx
  407efa:	ebb6 0e02 	subs.w	lr, r6, r2
  407efe:	eb75 0e03 	sbcs.w	lr, r5, r3
  407f02:	bf22      	ittt	cs
  407f04:	1ab6      	subcs	r6, r6, r2
  407f06:	4675      	movcs	r5, lr
  407f08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407f0c:	085b      	lsrs	r3, r3, #1
  407f0e:	ea4f 0232 	mov.w	r2, r2, rrx
  407f12:	ebb6 0e02 	subs.w	lr, r6, r2
  407f16:	eb75 0e03 	sbcs.w	lr, r5, r3
  407f1a:	bf22      	ittt	cs
  407f1c:	1ab6      	subcs	r6, r6, r2
  407f1e:	4675      	movcs	r5, lr
  407f20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407f24:	ea55 0e06 	orrs.w	lr, r5, r6
  407f28:	d018      	beq.n	407f5c <__aeabi_ddiv+0x114>
  407f2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  407f2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  407f32:	ea4f 1606 	mov.w	r6, r6, lsl #4
  407f36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  407f3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  407f3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  407f42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407f46:	d1c0      	bne.n	407eca <__aeabi_ddiv+0x82>
  407f48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407f4c:	d10b      	bne.n	407f66 <__aeabi_ddiv+0x11e>
  407f4e:	ea41 0100 	orr.w	r1, r1, r0
  407f52:	f04f 0000 	mov.w	r0, #0
  407f56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407f5a:	e7b6      	b.n	407eca <__aeabi_ddiv+0x82>
  407f5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407f60:	bf04      	itt	eq
  407f62:	4301      	orreq	r1, r0
  407f64:	2000      	moveq	r0, #0
  407f66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407f6a:	bf88      	it	hi
  407f6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407f70:	f63f aeaf 	bhi.w	407cd2 <__aeabi_dmul+0xde>
  407f74:	ebb5 0c03 	subs.w	ip, r5, r3
  407f78:	bf04      	itt	eq
  407f7a:	ebb6 0c02 	subseq.w	ip, r6, r2
  407f7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407f82:	f150 0000 	adcs.w	r0, r0, #0
  407f86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407f8a:	bd70      	pop	{r4, r5, r6, pc}
  407f8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407f90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407f94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407f98:	bfc2      	ittt	gt
  407f9a:	ebd4 050c 	rsbsgt	r5, r4, ip
  407f9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407fa2:	bd70      	popgt	{r4, r5, r6, pc}
  407fa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407fa8:	f04f 0e00 	mov.w	lr, #0
  407fac:	3c01      	subs	r4, #1
  407fae:	e690      	b.n	407cd2 <__aeabi_dmul+0xde>
  407fb0:	ea45 0e06 	orr.w	lr, r5, r6
  407fb4:	e68d      	b.n	407cd2 <__aeabi_dmul+0xde>
  407fb6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407fba:	ea94 0f0c 	teq	r4, ip
  407fbe:	bf08      	it	eq
  407fc0:	ea95 0f0c 	teqeq	r5, ip
  407fc4:	f43f af3b 	beq.w	407e3e <__aeabi_dmul+0x24a>
  407fc8:	ea94 0f0c 	teq	r4, ip
  407fcc:	d10a      	bne.n	407fe4 <__aeabi_ddiv+0x19c>
  407fce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407fd2:	f47f af34 	bne.w	407e3e <__aeabi_dmul+0x24a>
  407fd6:	ea95 0f0c 	teq	r5, ip
  407fda:	f47f af25 	bne.w	407e28 <__aeabi_dmul+0x234>
  407fde:	4610      	mov	r0, r2
  407fe0:	4619      	mov	r1, r3
  407fe2:	e72c      	b.n	407e3e <__aeabi_dmul+0x24a>
  407fe4:	ea95 0f0c 	teq	r5, ip
  407fe8:	d106      	bne.n	407ff8 <__aeabi_ddiv+0x1b0>
  407fea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407fee:	f43f aefd 	beq.w	407dec <__aeabi_dmul+0x1f8>
  407ff2:	4610      	mov	r0, r2
  407ff4:	4619      	mov	r1, r3
  407ff6:	e722      	b.n	407e3e <__aeabi_dmul+0x24a>
  407ff8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407ffc:	bf18      	it	ne
  407ffe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408002:	f47f aec5 	bne.w	407d90 <__aeabi_dmul+0x19c>
  408006:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40800a:	f47f af0d 	bne.w	407e28 <__aeabi_dmul+0x234>
  40800e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408012:	f47f aeeb 	bne.w	407dec <__aeabi_dmul+0x1f8>
  408016:	e712      	b.n	407e3e <__aeabi_dmul+0x24a>

00408018 <__gedf2>:
  408018:	f04f 3cff 	mov.w	ip, #4294967295
  40801c:	e006      	b.n	40802c <__cmpdf2+0x4>
  40801e:	bf00      	nop

00408020 <__ledf2>:
  408020:	f04f 0c01 	mov.w	ip, #1
  408024:	e002      	b.n	40802c <__cmpdf2+0x4>
  408026:	bf00      	nop

00408028 <__cmpdf2>:
  408028:	f04f 0c01 	mov.w	ip, #1
  40802c:	f84d cd04 	str.w	ip, [sp, #-4]!
  408030:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408034:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408038:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40803c:	bf18      	it	ne
  40803e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408042:	d01b      	beq.n	40807c <__cmpdf2+0x54>
  408044:	b001      	add	sp, #4
  408046:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40804a:	bf0c      	ite	eq
  40804c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408050:	ea91 0f03 	teqne	r1, r3
  408054:	bf02      	ittt	eq
  408056:	ea90 0f02 	teqeq	r0, r2
  40805a:	2000      	moveq	r0, #0
  40805c:	4770      	bxeq	lr
  40805e:	f110 0f00 	cmn.w	r0, #0
  408062:	ea91 0f03 	teq	r1, r3
  408066:	bf58      	it	pl
  408068:	4299      	cmppl	r1, r3
  40806a:	bf08      	it	eq
  40806c:	4290      	cmpeq	r0, r2
  40806e:	bf2c      	ite	cs
  408070:	17d8      	asrcs	r0, r3, #31
  408072:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408076:	f040 0001 	orr.w	r0, r0, #1
  40807a:	4770      	bx	lr
  40807c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408080:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408084:	d102      	bne.n	40808c <__cmpdf2+0x64>
  408086:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40808a:	d107      	bne.n	40809c <__cmpdf2+0x74>
  40808c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408090:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408094:	d1d6      	bne.n	408044 <__cmpdf2+0x1c>
  408096:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40809a:	d0d3      	beq.n	408044 <__cmpdf2+0x1c>
  40809c:	f85d 0b04 	ldr.w	r0, [sp], #4
  4080a0:	4770      	bx	lr
  4080a2:	bf00      	nop

004080a4 <__aeabi_cdrcmple>:
  4080a4:	4684      	mov	ip, r0
  4080a6:	4610      	mov	r0, r2
  4080a8:	4662      	mov	r2, ip
  4080aa:	468c      	mov	ip, r1
  4080ac:	4619      	mov	r1, r3
  4080ae:	4663      	mov	r3, ip
  4080b0:	e000      	b.n	4080b4 <__aeabi_cdcmpeq>
  4080b2:	bf00      	nop

004080b4 <__aeabi_cdcmpeq>:
  4080b4:	b501      	push	{r0, lr}
  4080b6:	f7ff ffb7 	bl	408028 <__cmpdf2>
  4080ba:	2800      	cmp	r0, #0
  4080bc:	bf48      	it	mi
  4080be:	f110 0f00 	cmnmi.w	r0, #0
  4080c2:	bd01      	pop	{r0, pc}

004080c4 <__aeabi_dcmpeq>:
  4080c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4080c8:	f7ff fff4 	bl	4080b4 <__aeabi_cdcmpeq>
  4080cc:	bf0c      	ite	eq
  4080ce:	2001      	moveq	r0, #1
  4080d0:	2000      	movne	r0, #0
  4080d2:	f85d fb08 	ldr.w	pc, [sp], #8
  4080d6:	bf00      	nop

004080d8 <__aeabi_dcmplt>:
  4080d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4080dc:	f7ff ffea 	bl	4080b4 <__aeabi_cdcmpeq>
  4080e0:	bf34      	ite	cc
  4080e2:	2001      	movcc	r0, #1
  4080e4:	2000      	movcs	r0, #0
  4080e6:	f85d fb08 	ldr.w	pc, [sp], #8
  4080ea:	bf00      	nop

004080ec <__aeabi_dcmple>:
  4080ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  4080f0:	f7ff ffe0 	bl	4080b4 <__aeabi_cdcmpeq>
  4080f4:	bf94      	ite	ls
  4080f6:	2001      	movls	r0, #1
  4080f8:	2000      	movhi	r0, #0
  4080fa:	f85d fb08 	ldr.w	pc, [sp], #8
  4080fe:	bf00      	nop

00408100 <__aeabi_dcmpge>:
  408100:	f84d ed08 	str.w	lr, [sp, #-8]!
  408104:	f7ff ffce 	bl	4080a4 <__aeabi_cdrcmple>
  408108:	bf94      	ite	ls
  40810a:	2001      	movls	r0, #1
  40810c:	2000      	movhi	r0, #0
  40810e:	f85d fb08 	ldr.w	pc, [sp], #8
  408112:	bf00      	nop

00408114 <__aeabi_dcmpgt>:
  408114:	f84d ed08 	str.w	lr, [sp, #-8]!
  408118:	f7ff ffc4 	bl	4080a4 <__aeabi_cdrcmple>
  40811c:	bf34      	ite	cc
  40811e:	2001      	movcc	r0, #1
  408120:	2000      	movcs	r0, #0
  408122:	f85d fb08 	ldr.w	pc, [sp], #8
  408126:	bf00      	nop

00408128 <__aeabi_dcmpun>:
  408128:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40812c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408130:	d102      	bne.n	408138 <__aeabi_dcmpun+0x10>
  408132:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408136:	d10a      	bne.n	40814e <__aeabi_dcmpun+0x26>
  408138:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40813c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408140:	d102      	bne.n	408148 <__aeabi_dcmpun+0x20>
  408142:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408146:	d102      	bne.n	40814e <__aeabi_dcmpun+0x26>
  408148:	f04f 0000 	mov.w	r0, #0
  40814c:	4770      	bx	lr
  40814e:	f04f 0001 	mov.w	r0, #1
  408152:	4770      	bx	lr

00408154 <__aeabi_d2iz>:
  408154:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408158:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40815c:	d215      	bcs.n	40818a <__aeabi_d2iz+0x36>
  40815e:	d511      	bpl.n	408184 <__aeabi_d2iz+0x30>
  408160:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408164:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408168:	d912      	bls.n	408190 <__aeabi_d2iz+0x3c>
  40816a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40816e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408172:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408176:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40817a:	fa23 f002 	lsr.w	r0, r3, r2
  40817e:	bf18      	it	ne
  408180:	4240      	negne	r0, r0
  408182:	4770      	bx	lr
  408184:	f04f 0000 	mov.w	r0, #0
  408188:	4770      	bx	lr
  40818a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40818e:	d105      	bne.n	40819c <__aeabi_d2iz+0x48>
  408190:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408194:	bf08      	it	eq
  408196:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40819a:	4770      	bx	lr
  40819c:	f04f 0000 	mov.w	r0, #0
  4081a0:	4770      	bx	lr
  4081a2:	bf00      	nop

004081a4 <OV2640_JPEG_INIT>:
  4081a4:	00ff ff2c df2e 01ff 323c 0111 0209 2804     ..,.....<2.....(
  4081b4:	e513 4814 0c2c 7833 333a fb3b 003e 1143     ...H,.3x:3;.>.C.
  4081c4:	1016 9239 da35 1a22 c337 0023 c034 1a36     ..9.5.".7.#.4.6.
  4081d4:	8806 c007 870d 410e 004c 0048 005b 0342     .......AL.H.[.B.
  4081e4:	814a 9921 4024 3825 8226 005c 0063 7061     J.!.$@%8&.\.c.ap
  4081f4:	8062 057c 8020 3028 006c 806d 006e 0270     b.|. .(0l.m.n.p.
  408204:	9471 c173 4012 1117 4318 0019 4b1a 0932     q.s..@...C...K2.
  408214:	c037 604f a850 006d 383d 3f46 604f 3c0c     7.O`P.m.=8F?O`.<
  408224:	00ff 7fe5 c0f9 2441 14e0 ff76 a033 2042     ......A$..v.3.B 
  408234:	1843 004c d587 3f88 03d7 10d9 82d3 08c8     C.L....?........
  408244:	80c9 007c 007d 037c 487d 487d 087c 207d     ..|.}.|.}H}H|.} 
  408254:	107d 0e7d 0090 0e91 1a91 3191 5a91 6991     }.}........1.Z.i
  408264:	7591 7e91 8891 8f91 9691 a391 af91 c491     .u.~............
  408274:	d791 e891 2091 0092 0693 e393 0593 0593     ..... ..........
  408284:	0093 0493 0093 0093 0093 0093 0093 0093     ................
  408294:	0093 0096 0897 1997 0297 0c97 2497 3097     .............$.0
  4082a4:	2897 2697 0297 9897 8097 0097 0097 edc3     .(.&............
  4082b4:	00a4 00a8 11c5 51c6 80bf 10c7 66b6 a5b8     .......Q.....f..
  4082c4:	64b7 7cb9 afb3 97b4 ffb5 c5b0 94b1 0fb2     .d.|............
  4082d4:	5cc4 64c0 4bc1 008c 3d86 0050 c851 9652     .\.d.K...=P.Q.R.
  4082e4:	0053 0054 0055 c85a 965b 005c 00d3 edc3     S.T.U.Z.[.\.....
  4082f4:	007f 00da 1fe5 67e1 00e0 7fdd 0005 4012     .......g.......@
  408304:	04d3 16c0 12c1 008c 3d86 0050 2c51 2452     .........=P.Q,R$
  408314:	0053 0054 0055 2c5a 245b 005c ffff 0000     S.T.U.Z,[$\.....

00408324 <OV2640_YUV422>:
  408324:	00ff 0005 10da 03d7 00df 8033 403c 77e1     ..........3.<@.w
  408334:	0000 ffff                                   ....

00408338 <OV2640_JPEG>:
  408338:	14e0 77e1 1fe5 03d7 10da 00e0 01ff 0804     ...w............
  408348:	ffff 0000                                   ....

0040834c <OV2640_JPEG_320x240>:
  40834c:	01ff 4012 1117 4318 0019 4b1a 0932 ca4f     ...@...C...K2.O.
  40835c:	a850 235a 006d 1239 da35 1a22 c337 0023     P.Z#m.9.5.".7.#.
  40836c:	c034 1a36 8806 c007 870d 410e 004c 00ff     4.6........AL...
  40837c:	04e0 64c0 4bc1 3586 8950 c851 9652 0053     ...d.K.5P.Q.R.S.
  40838c:	0054 0055 0057 505a 3c5b 005c 00e0 ffff     T.U.W.ZP[<\.....

0040839c <OV2640_JPEG_640x480>:
  40839c:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  4083ac:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  4083bc:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  4083cc:	04e0 c8c0 96c1 3d86 8950 9051 2c52 0053     .......=P.Q.R,S.
  4083dc:	0054 8855 0057 a05a 785b 005c 04d3 00e0     T.U.W.Z.[x\.....
  4083ec:	ffff 0000                                   ....

004083f0 <OV2640_JPEG_800x600>:
  4083f0:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408400:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408410:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408420:	04e0 c8c0 96c1 3586 8950 9051 2c52 0053     .......5P.Q.R,S.
  408430:	0054 8855 0057 c85a 965b 005c 02d3 00e0     T.U.W.Z.[.\.....
  408440:	ffff 0000                                   ....

00408444 <OV2640_JPEG_1024x768>:
  408444:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408454:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408464:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408474:	c8c0 96c1 008c 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408484:	0054 8855 005a c05b 015c 02d3 ffff 0000     T.U.Z.[.\.......

00408494 <OV2640_JPEG_1280x1024>:
  408494:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  4084a4:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  4084b4:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  4084c4:	04e0 c8c0 96c1 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  4084d4:	0054 8855 0057 405a f05b 015c 02d3 00e0     T.U.W.Z@[.\.....
  4084e4:	ffff 0000                                   ....

004084e8 <OV2640_JPEG_1600x1200>:
  4084e8:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  4084f8:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408508:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408518:	04e0 c8c0 96c1 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408528:	0054 8855 0057 905a 2c5b 055c 02d3 00e0     T.U.W.Z.[,\.....
  408538:	ffff 0000                                   ....

0040853c <OV2640_QVGA_YUV422_10FPS>:
  40853c:	000e 8012 05fe 0013 0511 0012 10d5 d40c     ................
  40854c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40855c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40856c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40857c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40858c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40859c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  4085ac:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  4085bc:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  4085cc:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  4085dc:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  4085ec:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  4085fc:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40860c:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  40861c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040862c <OV2640_QVGA_YUV422_15FPS>:
  40862c:	000e 8012 05fe 0013 0311 0012 10d5 d40c     ................
  40863c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40864c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40865c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40866c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40867c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40868c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40869c:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  4086ac:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  4086bc:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  4086cc:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  4086dc:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  4086ec:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  4086fc:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  40870c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040871c <OV2640_QVGA_YUV422_20FPS>:
  40871c:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  40872c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40873c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40874c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40875c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40876c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40877c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40878c:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  40879c:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  4087ac:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  4087bc:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  4087cc:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  4087dc:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  4087ec:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  4087fc:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040880c <OV2640_QVGA_YUV422_30FPS>:
  40880c:	000e 8012 05fe 0013 0111 0012 10d5 d40c     ................
  40881c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40882c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40883c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40884c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40885c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40886c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40887c:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  40888c:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  40889c:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  4088ac:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  4088bc:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  4088cc:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  4088dc:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  4088ec:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

004088fc <OV2640_QVGA_RGB888>:
  4088fc:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  40890c:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  40891c:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  40892c:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  40893c:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  40894c:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  40895c:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  40896c:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  40897c:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  40898c:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  40899c:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  4089ac:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  4089bc:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  4089cc:	605d 6eac ffbe 00bf 5031 7832 3f82 0112     ]`.n....1P2x.?..
  4089dc:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  4089ec:	0228 ffff                                   (...

004089f0 <OV2640_QQVGA_YUV422>:
  4089f0:	000e 8012 0013 0111 0012 10d5 540c 340d     .............T.4
  408a00:	0116 2517 a018 0319 f01a 891b 0322 1829     ...%........".).
  408a10:	f82b 012c a031 f032 c433 b43a 3f36 6004     +.,.1.2.3.:.6?.`
  408a20:	8027 0f3d 803e 403f 7f40 6a41 2942 e544     '.=.>.?@@.AjB)D.
  408a30:	4145 0247 6449 a14a 704b 1a4c 504d 134e     EAG.IdJ.KpL.MPN.
  408a40:	0064 8867 1a68 3814 3c24 3025 7226 9750     d.g.h..8$<%0&rP.
  408a50:	7e51 0052 0053 0020 2321 1438 00e9 5556     Q~R.S. .!#8...VU
  408a60:	ff57 ff58 ff59 045f 00ec ff13 7f80 3f81     W.X.Y._........?
  408a70:	3282 0183 1138 7084 0085 0386 0187 0588     .2..8..p........
  408a80:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  408a90:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  408aa0:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  408ab0:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  408ac0:	885c 605d 6eac ffbe 00bf 2831 3c32 0034     \.]`.n....1(2<4.
  408ad0:	3f82 0012 3f36 0053 0033 891b 0322 0228     .?..6?S.3...".(.
  408ae0:	00d9 ffff                                   ....

00408ae4 <OV2640_QQVGA_RGB888>:
  408ae4:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  408af4:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  408b04:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  408b14:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  408b24:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  408b34:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  408b44:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  408b54:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  408b64:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  408b74:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  408b84:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  408b94:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  408ba4:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  408bb4:	605d 6eac ffbe 00bf 2831 3c32 3f82 0112     ]`.n....1(2<.?..
  408bc4:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  408bd4:	0228 ffff                                   (...

00408bd8 <OV2640_TEST_PATTERN>:
  408bd8:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  408be8:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  408bf8:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  408c08:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  408c18:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  408c28:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  408c38:	9750 7e51 0052 0053 0020 2321 0738 0284     P.Q~R.S. .!#8...
  408c48:	1438 00e9 5556 ff57 ff58 ff59 045f 00ec     8...VUW.X.Y._...
  408c58:	ff13 7f80 3f81 3282 0183 1138 0085 0386     .....?.2..8.....
  408c68:	0187 0588 3089 308d 858f 3093 8595 3099     .....0.0...0...0
  408c78:	859b 089c 129d 239e 459f 55a0 64a1 72a2     .......#.E.U.d.r
  408c88:	7fa3 8ba4 95a5 a7a6 b5a7 cba8 dda9 ecaa     ................
  408c98:	1aab 78ce 6ecf 0ad0 0cd1 84d2 90d3 1ed4     ...x.n..........
  408ca8:	245a 1f5b 885c 605d 6eac ffbe 00bf 5031     Z$[.\.]`.n....1P
  408cb8:	7832 3f82 0012 3f36 0053 c433 891b 0322     2x.?..6?S.3...".
  408cc8:	0228 ffff                                   (...

00408ccc <OV2640_VGA_YUV422_20FPS>:
  408ccc:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  408cdc:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  408cec:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  408cfc:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  408d0c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  408d1c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  408d2c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  408d3c:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  408d4c:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  408d5c:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  408d6c:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  408d7c:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  408d8c:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  408d9c:	885c 605d 6eac ffbe 00bf a031 f032 3f82     \.]`.n....1.2..?
  408dac:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...
  408dbc:	c200 0001 00c0 0000 0800 0000 0000 0000     ................
	...
  408dd4:	6d69 6761 5f65 7274 6e61 6673 7265 2520     image_transfer %
  408de4:	0d64 000a 6f43 706d 656c 6574 0a0d 0000     d...Complete....
  408df4:	6f4e 656e 0000 0000 6d49 6761 0065 0000     None....Image...
  408e04:	6573 2074 6175 7472 662e 6f6c 2077 2030     set uart.flow 0 
  408e14:	6e6f 0d20 000a 0000 6573 2074 7562 2e73     on .....set bus.
  408e24:	6f63 6d6d 6e61 2e64 7872 625f 6675 6973     command.rx_bufsi
  408e34:	657a 3520 3030 0d30 000a 0000 6573 2074     ze 5000.....set 
  408e44:	7973 6920 6720 7720 616c 206e 3032 0a0d     sy i g wlan 20..
  408e54:	0000 0000 6573 2074 7973 6920 6720 6e20     ....set sy i g n
  408e64:	7465 6f77 6b72 3120 0d39 000a 6573 2074     etwork 19...set 
  408e74:	7973 6920 6720 7320 666f 6174 2070 3132     sy i g softap 21
  408e84:	0a0d 0000 6573 2074 7973 7473 6d65 632e     ....set system.c
  408e94:	646d 672e 6970 206f 3331 0a0d 0000 0000     md.gpio 13......
  408ea4:	6573 2074 6c77 6e20 6f20 3120 0d34 000a     set wl n o 14...
  408eb4:	6173 6576 0a0d 0000 6572 6f62 746f 0a0d     save....reboot..
  408ec4:	0000 0000 6573 7574 2070 6577 0d62 000a     ....setup web...
  408ed4:	6573 2074 7973 6320 7020 6f20 6666 0a0d     set sy c p off..
  408ee4:	0000 0000 6f70 6c6c 6120 6c6c 0a0d 0000     ....poll all....

00408ef4 <_global_impure_ptr>:
  408ef4:	0018 2000 4e49 0046 6e69 0066 414e 004e     ... INF.inf.NAN.
  408f04:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  408f14:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  408f24:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  408f34:	296c 0000 0030 0000                         l)..0...

00408f3c <blanks.7223>:
  408f3c:	2020 2020 2020 2020 2020 2020 2020 2020                     

00408f4c <zeroes.7224>:
  408f4c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  408f5c:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  408f6c:	0000 0000                                   ....

00408f70 <__mprec_bigtens>:
  408f70:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  408f80:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  408f90:	bf3c 7f73 4fdd 7515                         <.s..O.u

00408f98 <__mprec_tens>:
  408f98:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  408fa8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  408fb8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  408fc8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  408fd8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  408fe8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  408ff8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  409008:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  409018:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  409028:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  409038:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  409048:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  409058:	9db4 79d9 7843 44ea                         ...yCx.D

00409060 <p05.6055>:
  409060:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  409070:	4f50 4953 0058 0000 002e 0000               POSIX.......

0040907c <_ctype_>:
  40907c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40908c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40909c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4090ac:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  4090bc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  4090cc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  4090dc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  4090ec:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  4090fc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00409180 <_init>:
  409180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409182:	bf00      	nop
  409184:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409186:	bc08      	pop	{r3}
  409188:	469e      	mov	lr, r3
  40918a:	4770      	bx	lr

0040918c <__init_array_start>:
  40918c:	00404ff1 	.word	0x00404ff1

00409190 <__frame_dummy_init_array_entry>:
  409190:	004000f1                                ..@.

00409194 <_fini>:
  409194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409196:	bf00      	nop
  409198:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40919a:	bc08      	pop	{r3}
  40919c:	469e      	mov	lr, r3
  40919e:	4770      	bx	lr

004091a0 <__fini_array_start>:
  4091a0:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__atexit_recursive_mutex>:
20000440:	d1fc 2000                                   ... 

20000444 <__malloc_av_>:
	...
2000044c:	0444 2000 0444 2000 044c 2000 044c 2000     D.. D.. L.. L.. 
2000045c:	0454 2000 0454 2000 045c 2000 045c 2000     T.. T.. \.. \.. 
2000046c:	0464 2000 0464 2000 046c 2000 046c 2000     d.. d.. l.. l.. 
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 

2000084c <__malloc_sbrk_base>:
2000084c:	ffff ffff                                   ....

20000850 <__malloc_trim_threshold>:
20000850:	0000 0002                                   ....

20000854 <__global_locale>:
20000854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000934:	7869 0040 7429 0040 0000 0000 907c 0040     ix@.)t@.....|.@.
20000944:	9078 0040 8f18 0040 8f18 0040 8f18 0040     x.@...@...@...@.
20000954:	8f18 0040 8f18 0040 8f18 0040 8f18 0040     ..@...@...@...@.
20000964:	8f18 0040 8f18 0040 ffff ffff ffff ffff     ..@...@.........
20000974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2000099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
