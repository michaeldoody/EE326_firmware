
webcam_firmware2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000093d4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004093d4  004093d4  000193d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009bc  20000000  004093dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c844  200009bc  00409d98  000209bc  2**2
                  ALLOC
  4 .stack        00003000  2000d200  004165dc  000209bc  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209bc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  7 .debug_info   000170ad  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002f59  00000000  00000000  00037aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007000  00000000  00000000  0003aa45  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c70  00000000  00000000  00041a45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b68  00000000  00000000  000426b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00015801  00000000  00000000  0004321d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f214  00000000  00000000  00058a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00051f7b  00000000  00000000  00067c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000403c  00000000  00000000  000b9bb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	00 02 01 20 81 2b 40 00 49 2c 40 00 49 2c 40 00     ... .+@.I,@.I,@.
  400010:	49 2c 40 00 49 2c 40 00 49 2c 40 00 00 00 00 00     I,@.I,@.I,@.....
	...
  40002c:	49 2c 40 00 49 2c 40 00 00 00 00 00 49 2c 40 00     I,@.I,@.....I,@.
  40003c:	49 2c 40 00 49 2c 40 00 49 2c 40 00 49 2c 40 00     I,@.I,@.I,@.I,@.
  40004c:	49 2c 40 00 49 2c 40 00 49 2c 40 00 49 2c 40 00     I,@.I,@.I,@.I,@.
  40005c:	00 00 00 00 49 2c 40 00 49 2c 40 00 00 00 00 00     ....I,@.I,@.....
  40006c:	51 0b 40 00 69 0b 40 00 00 00 00 00 69 25 40 00     Q.@.i.@.....i%@.
  40007c:	49 2c 40 00 00 00 00 00 00 00 00 00 49 2c 40 00     I,@.........I,@.
  40008c:	49 2c 40 00 49 2c 40 00 49 2c 40 00 49 2c 40 00     I,@.I,@.I,@.I,@.
  40009c:	95 23 40 00 49 2c 40 00 49 2c 40 00 00 00 00 00     .#@.I,@.I,@.....
	...
  4000b4:	49 2c 40 00 49 2c 40 00 49 2c 40 00 49 2c 40 00     I,@.I,@.I,@.I,@.
  4000c4:	49 2c 40 00 49 2c 40 00                             I,@.I,@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009bc 	.word	0x200009bc
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004093dc 	.word	0x004093dc

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	004093dc 	.word	0x004093dc
  40012c:	200009c0 	.word	0x200009c0
  400130:	004093dc 	.word	0x004093dc
  400134:	00000000 	.word	0x00000000

00400138 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400138:	b580      	push	{r7, lr}
  40013a:	b082      	sub	sp, #8
  40013c:	af00      	add	r7, sp, #0
  40013e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400140:	687b      	ldr	r3, [r7, #4]
  400142:	2b07      	cmp	r3, #7
  400144:	d831      	bhi.n	4001aa <osc_enable+0x72>
  400146:	a201      	add	r2, pc, #4	; (adr r2, 40014c <osc_enable+0x14>)
  400148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40014c:	004001a9 	.word	0x004001a9
  400150:	0040016d 	.word	0x0040016d
  400154:	00400175 	.word	0x00400175
  400158:	0040017d 	.word	0x0040017d
  40015c:	00400185 	.word	0x00400185
  400160:	0040018d 	.word	0x0040018d
  400164:	00400195 	.word	0x00400195
  400168:	0040019f 	.word	0x0040019f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40016c:	2000      	movs	r0, #0
  40016e:	4b11      	ldr	r3, [pc, #68]	; (4001b4 <osc_enable+0x7c>)
  400170:	4798      	blx	r3
		break;
  400172:	e01a      	b.n	4001aa <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400174:	2001      	movs	r0, #1
  400176:	4b0f      	ldr	r3, [pc, #60]	; (4001b4 <osc_enable+0x7c>)
  400178:	4798      	blx	r3
		break;
  40017a:	e016      	b.n	4001aa <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  40017c:	2000      	movs	r0, #0
  40017e:	4b0e      	ldr	r3, [pc, #56]	; (4001b8 <osc_enable+0x80>)
  400180:	4798      	blx	r3
		break;
  400182:	e012      	b.n	4001aa <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400184:	2010      	movs	r0, #16
  400186:	4b0c      	ldr	r3, [pc, #48]	; (4001b8 <osc_enable+0x80>)
  400188:	4798      	blx	r3
		break;
  40018a:	e00e      	b.n	4001aa <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40018c:	2020      	movs	r0, #32
  40018e:	4b0a      	ldr	r3, [pc, #40]	; (4001b8 <osc_enable+0x80>)
  400190:	4798      	blx	r3
		break;
  400192:	e00a      	b.n	4001aa <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400194:	213e      	movs	r1, #62	; 0x3e
  400196:	2000      	movs	r0, #0
  400198:	4b08      	ldr	r3, [pc, #32]	; (4001bc <osc_enable+0x84>)
  40019a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40019c:	e005      	b.n	4001aa <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40019e:	213e      	movs	r1, #62	; 0x3e
  4001a0:	2001      	movs	r0, #1
  4001a2:	4b06      	ldr	r3, [pc, #24]	; (4001bc <osc_enable+0x84>)
  4001a4:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4001a6:	e000      	b.n	4001aa <osc_enable+0x72>
		break;
  4001a8:	bf00      	nop
	}
}
  4001aa:	bf00      	nop
  4001ac:	3708      	adds	r7, #8
  4001ae:	46bd      	mov	sp, r7
  4001b0:	bd80      	pop	{r7, pc}
  4001b2:	bf00      	nop
  4001b4:	00400c01 	.word	0x00400c01
  4001b8:	00400c6d 	.word	0x00400c6d
  4001bc:	00400cdd 	.word	0x00400cdd

004001c0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4001c0:	b580      	push	{r7, lr}
  4001c2:	b082      	sub	sp, #8
  4001c4:	af00      	add	r7, sp, #0
  4001c6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001c8:	687b      	ldr	r3, [r7, #4]
  4001ca:	2b07      	cmp	r3, #7
  4001cc:	d826      	bhi.n	40021c <osc_is_ready+0x5c>
  4001ce:	a201      	add	r2, pc, #4	; (adr r2, 4001d4 <osc_is_ready+0x14>)
  4001d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001d4:	004001f5 	.word	0x004001f5
  4001d8:	004001f9 	.word	0x004001f9
  4001dc:	004001f9 	.word	0x004001f9
  4001e0:	0040020b 	.word	0x0040020b
  4001e4:	0040020b 	.word	0x0040020b
  4001e8:	0040020b 	.word	0x0040020b
  4001ec:	0040020b 	.word	0x0040020b
  4001f0:	0040020b 	.word	0x0040020b
	case OSC_SLCK_32K_RC:
		return 1;
  4001f4:	2301      	movs	r3, #1
  4001f6:	e012      	b.n	40021e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4001f8:	4b0b      	ldr	r3, [pc, #44]	; (400228 <osc_is_ready+0x68>)
  4001fa:	4798      	blx	r3
  4001fc:	4603      	mov	r3, r0
  4001fe:	2b00      	cmp	r3, #0
  400200:	bf14      	ite	ne
  400202:	2301      	movne	r3, #1
  400204:	2300      	moveq	r3, #0
  400206:	b2db      	uxtb	r3, r3
  400208:	e009      	b.n	40021e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40020a:	4b08      	ldr	r3, [pc, #32]	; (40022c <osc_is_ready+0x6c>)
  40020c:	4798      	blx	r3
  40020e:	4603      	mov	r3, r0
  400210:	2b00      	cmp	r3, #0
  400212:	bf14      	ite	ne
  400214:	2301      	movne	r3, #1
  400216:	2300      	moveq	r3, #0
  400218:	b2db      	uxtb	r3, r3
  40021a:	e000      	b.n	40021e <osc_is_ready+0x5e>
	}

	return 0;
  40021c:	2300      	movs	r3, #0
}
  40021e:	4618      	mov	r0, r3
  400220:	3708      	adds	r7, #8
  400222:	46bd      	mov	sp, r7
  400224:	bd80      	pop	{r7, pc}
  400226:	bf00      	nop
  400228:	00400c39 	.word	0x00400c39
  40022c:	00400d55 	.word	0x00400d55

00400230 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400230:	b480      	push	{r7}
  400232:	b083      	sub	sp, #12
  400234:	af00      	add	r7, sp, #0
  400236:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400238:	687b      	ldr	r3, [r7, #4]
  40023a:	2b07      	cmp	r3, #7
  40023c:	d825      	bhi.n	40028a <osc_get_rate+0x5a>
  40023e:	a201      	add	r2, pc, #4	; (adr r2, 400244 <osc_get_rate+0x14>)
  400240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400244:	00400265 	.word	0x00400265
  400248:	0040026b 	.word	0x0040026b
  40024c:	00400271 	.word	0x00400271
  400250:	00400277 	.word	0x00400277
  400254:	0040027b 	.word	0x0040027b
  400258:	0040027f 	.word	0x0040027f
  40025c:	00400283 	.word	0x00400283
  400260:	00400287 	.word	0x00400287
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400264:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400268:	e010      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40026a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40026e:	e00d      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400274:	e00a      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400276:	4b08      	ldr	r3, [pc, #32]	; (400298 <osc_get_rate+0x68>)
  400278:	e008      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40027a:	4b08      	ldr	r3, [pc, #32]	; (40029c <osc_get_rate+0x6c>)
  40027c:	e006      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_get_rate+0x70>)
  400280:	e004      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400282:	4b07      	ldr	r3, [pc, #28]	; (4002a0 <osc_get_rate+0x70>)
  400284:	e002      	b.n	40028c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400286:	4b06      	ldr	r3, [pc, #24]	; (4002a0 <osc_get_rate+0x70>)
  400288:	e000      	b.n	40028c <osc_get_rate+0x5c>
	}

	return 0;
  40028a:	2300      	movs	r3, #0
}
  40028c:	4618      	mov	r0, r3
  40028e:	370c      	adds	r7, #12
  400290:	46bd      	mov	sp, r7
  400292:	bc80      	pop	{r7}
  400294:	4770      	bx	lr
  400296:	bf00      	nop
  400298:	003d0900 	.word	0x003d0900
  40029c:	007a1200 	.word	0x007a1200
  4002a0:	00b71b00 	.word	0x00b71b00

004002a4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4002a4:	b580      	push	{r7, lr}
  4002a6:	b082      	sub	sp, #8
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	4603      	mov	r3, r0
  4002ac:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4002ae:	bf00      	nop
  4002b0:	79fb      	ldrb	r3, [r7, #7]
  4002b2:	4618      	mov	r0, r3
  4002b4:	4b05      	ldr	r3, [pc, #20]	; (4002cc <osc_wait_ready+0x28>)
  4002b6:	4798      	blx	r3
  4002b8:	4603      	mov	r3, r0
  4002ba:	f083 0301 	eor.w	r3, r3, #1
  4002be:	b2db      	uxtb	r3, r3
  4002c0:	2b00      	cmp	r3, #0
  4002c2:	d1f5      	bne.n	4002b0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4002c4:	bf00      	nop
  4002c6:	3708      	adds	r7, #8
  4002c8:	46bd      	mov	sp, r7
  4002ca:	bd80      	pop	{r7, pc}
  4002cc:	004001c1 	.word	0x004001c1

004002d0 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4002d0:	b580      	push	{r7, lr}
  4002d2:	b086      	sub	sp, #24
  4002d4:	af00      	add	r7, sp, #0
  4002d6:	60f8      	str	r0, [r7, #12]
  4002d8:	607a      	str	r2, [r7, #4]
  4002da:	603b      	str	r3, [r7, #0]
  4002dc:	460b      	mov	r3, r1
  4002de:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4002e0:	7afb      	ldrb	r3, [r7, #11]
  4002e2:	4618      	mov	r0, r3
  4002e4:	4b0d      	ldr	r3, [pc, #52]	; (40031c <pll_config_init+0x4c>)
  4002e6:	4798      	blx	r3
  4002e8:	4602      	mov	r2, r0
  4002ea:	687b      	ldr	r3, [r7, #4]
  4002ec:	fbb2 f3f3 	udiv	r3, r2, r3
  4002f0:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4002f2:	697b      	ldr	r3, [r7, #20]
  4002f4:	683a      	ldr	r2, [r7, #0]
  4002f6:	fb02 f303 	mul.w	r3, r2, r3
  4002fa:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4002fc:	683b      	ldr	r3, [r7, #0]
  4002fe:	3b01      	subs	r3, #1
  400300:	041a      	lsls	r2, r3, #16
  400302:	4b07      	ldr	r3, [pc, #28]	; (400320 <pll_config_init+0x50>)
  400304:	4013      	ands	r3, r2
  400306:	687a      	ldr	r2, [r7, #4]
  400308:	b2d2      	uxtb	r2, r2
  40030a:	4313      	orrs	r3, r2
  40030c:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400310:	68fb      	ldr	r3, [r7, #12]
  400312:	601a      	str	r2, [r3, #0]
}
  400314:	bf00      	nop
  400316:	3718      	adds	r7, #24
  400318:	46bd      	mov	sp, r7
  40031a:	bd80      	pop	{r7, pc}
  40031c:	00400231 	.word	0x00400231
  400320:	07ff0000 	.word	0x07ff0000

00400324 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400324:	b580      	push	{r7, lr}
  400326:	b082      	sub	sp, #8
  400328:	af00      	add	r7, sp, #0
  40032a:	6078      	str	r0, [r7, #4]
  40032c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40032e:	683b      	ldr	r3, [r7, #0]
  400330:	2b00      	cmp	r3, #0
  400332:	d108      	bne.n	400346 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400334:	4b09      	ldr	r3, [pc, #36]	; (40035c <pll_enable+0x38>)
  400336:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400338:	4a09      	ldr	r2, [pc, #36]	; (400360 <pll_enable+0x3c>)
  40033a:	687b      	ldr	r3, [r7, #4]
  40033c:	681b      	ldr	r3, [r3, #0]
  40033e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400342:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400344:	e005      	b.n	400352 <pll_enable+0x2e>
		pmc_disable_pllbck();
  400346:	4b07      	ldr	r3, [pc, #28]	; (400364 <pll_enable+0x40>)
  400348:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40034a:	4a05      	ldr	r2, [pc, #20]	; (400360 <pll_enable+0x3c>)
  40034c:	687b      	ldr	r3, [r7, #4]
  40034e:	681b      	ldr	r3, [r3, #0]
  400350:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  400352:	bf00      	nop
  400354:	3708      	adds	r7, #8
  400356:	46bd      	mov	sp, r7
  400358:	bd80      	pop	{r7, pc}
  40035a:	bf00      	nop
  40035c:	00400d6d 	.word	0x00400d6d
  400360:	400e0400 	.word	0x400e0400
  400364:	00400ded 	.word	0x00400ded

00400368 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400368:	b580      	push	{r7, lr}
  40036a:	b082      	sub	sp, #8
  40036c:	af00      	add	r7, sp, #0
  40036e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400370:	687b      	ldr	r3, [r7, #4]
  400372:	2b00      	cmp	r3, #0
  400374:	d103      	bne.n	40037e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400376:	4b05      	ldr	r3, [pc, #20]	; (40038c <pll_is_locked+0x24>)
  400378:	4798      	blx	r3
  40037a:	4603      	mov	r3, r0
  40037c:	e002      	b.n	400384 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40037e:	4b04      	ldr	r3, [pc, #16]	; (400390 <pll_is_locked+0x28>)
  400380:	4798      	blx	r3
  400382:	4603      	mov	r3, r0
	}
}
  400384:	4618      	mov	r0, r3
  400386:	3708      	adds	r7, #8
  400388:	46bd      	mov	sp, r7
  40038a:	bd80      	pop	{r7, pc}
  40038c:	00400d85 	.word	0x00400d85
  400390:	00400e05 	.word	0x00400e05

00400394 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400394:	b580      	push	{r7, lr}
  400396:	b082      	sub	sp, #8
  400398:	af00      	add	r7, sp, #0
  40039a:	4603      	mov	r3, r0
  40039c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40039e:	79fb      	ldrb	r3, [r7, #7]
  4003a0:	3b03      	subs	r3, #3
  4003a2:	2b04      	cmp	r3, #4
  4003a4:	d808      	bhi.n	4003b8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4003a6:	79fb      	ldrb	r3, [r7, #7]
  4003a8:	4618      	mov	r0, r3
  4003aa:	4b06      	ldr	r3, [pc, #24]	; (4003c4 <pll_enable_source+0x30>)
  4003ac:	4798      	blx	r3
		osc_wait_ready(e_src);
  4003ae:	79fb      	ldrb	r3, [r7, #7]
  4003b0:	4618      	mov	r0, r3
  4003b2:	4b05      	ldr	r3, [pc, #20]	; (4003c8 <pll_enable_source+0x34>)
  4003b4:	4798      	blx	r3
		break;
  4003b6:	e000      	b.n	4003ba <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4003b8:	bf00      	nop
	}
}
  4003ba:	bf00      	nop
  4003bc:	3708      	adds	r7, #8
  4003be:	46bd      	mov	sp, r7
  4003c0:	bd80      	pop	{r7, pc}
  4003c2:	bf00      	nop
  4003c4:	00400139 	.word	0x00400139
  4003c8:	004002a5 	.word	0x004002a5

004003cc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4003cc:	b580      	push	{r7, lr}
  4003ce:	b082      	sub	sp, #8
  4003d0:	af00      	add	r7, sp, #0
  4003d2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4003d4:	bf00      	nop
  4003d6:	6878      	ldr	r0, [r7, #4]
  4003d8:	4b04      	ldr	r3, [pc, #16]	; (4003ec <pll_wait_for_lock+0x20>)
  4003da:	4798      	blx	r3
  4003dc:	4603      	mov	r3, r0
  4003de:	2b00      	cmp	r3, #0
  4003e0:	d0f9      	beq.n	4003d6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4003e2:	2300      	movs	r3, #0
}
  4003e4:	4618      	mov	r0, r3
  4003e6:	3708      	adds	r7, #8
  4003e8:	46bd      	mov	sp, r7
  4003ea:	bd80      	pop	{r7, pc}
  4003ec:	00400369 	.word	0x00400369

004003f0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4003f4:	2006      	movs	r0, #6
  4003f6:	4b04      	ldr	r3, [pc, #16]	; (400408 <sysclk_get_main_hz+0x18>)
  4003f8:	4798      	blx	r3
  4003fa:	4602      	mov	r2, r0
  4003fc:	4613      	mov	r3, r2
  4003fe:	009b      	lsls	r3, r3, #2
  400400:	4413      	add	r3, r2
  400402:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400404:	4618      	mov	r0, r3
  400406:	bd80      	pop	{r7, pc}
  400408:	00400231 	.word	0x00400231

0040040c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40040c:	b580      	push	{r7, lr}
  40040e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400410:	4b02      	ldr	r3, [pc, #8]	; (40041c <sysclk_get_cpu_hz+0x10>)
  400412:	4798      	blx	r3
  400414:	4603      	mov	r3, r0
  400416:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400418:	4618      	mov	r0, r3
  40041a:	bd80      	pop	{r7, pc}
  40041c:	004003f1 	.word	0x004003f1

00400420 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400420:	b590      	push	{r4, r7, lr}
  400422:	b083      	sub	sp, #12
  400424:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400426:	4811      	ldr	r0, [pc, #68]	; (40046c <sysclk_init+0x4c>)
  400428:	4b11      	ldr	r3, [pc, #68]	; (400470 <sysclk_init+0x50>)
  40042a:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  40042c:	2006      	movs	r0, #6
  40042e:	4b11      	ldr	r3, [pc, #68]	; (400474 <sysclk_init+0x54>)
  400430:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400432:	1d38      	adds	r0, r7, #4
  400434:	2314      	movs	r3, #20
  400436:	2201      	movs	r2, #1
  400438:	2106      	movs	r1, #6
  40043a:	4c0f      	ldr	r4, [pc, #60]	; (400478 <sysclk_init+0x58>)
  40043c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40043e:	1d3b      	adds	r3, r7, #4
  400440:	2100      	movs	r1, #0
  400442:	4618      	mov	r0, r3
  400444:	4b0d      	ldr	r3, [pc, #52]	; (40047c <sysclk_init+0x5c>)
  400446:	4798      	blx	r3
		pll_wait_for_lock(0);
  400448:	2000      	movs	r0, #0
  40044a:	4b0d      	ldr	r3, [pc, #52]	; (400480 <sysclk_init+0x60>)
  40044c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40044e:	2010      	movs	r0, #16
  400450:	4b0c      	ldr	r3, [pc, #48]	; (400484 <sysclk_init+0x64>)
  400452:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400454:	4b0c      	ldr	r3, [pc, #48]	; (400488 <sysclk_init+0x68>)
  400456:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400458:	4b0c      	ldr	r3, [pc, #48]	; (40048c <sysclk_init+0x6c>)
  40045a:	4798      	blx	r3
  40045c:	4603      	mov	r3, r0
  40045e:	4618      	mov	r0, r3
  400460:	4b03      	ldr	r3, [pc, #12]	; (400470 <sysclk_init+0x50>)
  400462:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400464:	bf00      	nop
  400466:	370c      	adds	r7, #12
  400468:	46bd      	mov	sp, r7
  40046a:	bd90      	pop	{r4, r7, pc}
  40046c:	07270e00 	.word	0x07270e00
  400470:	00402de9 	.word	0x00402de9
  400474:	00400395 	.word	0x00400395
  400478:	004002d1 	.word	0x004002d1
  40047c:	00400325 	.word	0x00400325
  400480:	004003cd 	.word	0x004003cd
  400484:	00400b81 	.word	0x00400b81
  400488:	00402c51 	.word	0x00402c51
  40048c:	0040040d 	.word	0x0040040d

00400490 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400490:	b480      	push	{r7}
  400492:	b085      	sub	sp, #20
  400494:	af00      	add	r7, sp, #0
  400496:	60f8      	str	r0, [r7, #12]
  400498:	60b9      	str	r1, [r7, #8]
  40049a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40049c:	687b      	ldr	r3, [r7, #4]
  40049e:	2b00      	cmp	r3, #0
  4004a0:	d003      	beq.n	4004aa <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4004a2:	68fb      	ldr	r3, [r7, #12]
  4004a4:	68ba      	ldr	r2, [r7, #8]
  4004a6:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4004a8:	e002      	b.n	4004b0 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  4004aa:	68fb      	ldr	r3, [r7, #12]
  4004ac:	68ba      	ldr	r2, [r7, #8]
  4004ae:	661a      	str	r2, [r3, #96]	; 0x60
}
  4004b0:	bf00      	nop
  4004b2:	3714      	adds	r7, #20
  4004b4:	46bd      	mov	sp, r7
  4004b6:	bc80      	pop	{r7}
  4004b8:	4770      	bx	lr

004004ba <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  4004ba:	b480      	push	{r7}
  4004bc:	b085      	sub	sp, #20
  4004be:	af00      	add	r7, sp, #0
  4004c0:	60f8      	str	r0, [r7, #12]
  4004c2:	60b9      	str	r1, [r7, #8]
  4004c4:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4004c6:	68fb      	ldr	r3, [r7, #12]
  4004c8:	68ba      	ldr	r2, [r7, #8]
  4004ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4004ce:	687b      	ldr	r3, [r7, #4]
  4004d0:	005b      	lsls	r3, r3, #1
  4004d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4004d6:	fbb2 f3f3 	udiv	r3, r2, r3
  4004da:	3b01      	subs	r3, #1
  4004dc:	f3c3 020d 	ubfx	r2, r3, #0, #14
  4004e0:	68fb      	ldr	r3, [r7, #12]
  4004e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  4004e6:	bf00      	nop
  4004e8:	3714      	adds	r7, #20
  4004ea:	46bd      	mov	sp, r7
  4004ec:	bc80      	pop	{r7}
  4004ee:	4770      	bx	lr

004004f0 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4004f0:	b480      	push	{r7}
  4004f2:	b087      	sub	sp, #28
  4004f4:	af00      	add	r7, sp, #0
  4004f6:	60f8      	str	r0, [r7, #12]
  4004f8:	60b9      	str	r1, [r7, #8]
  4004fa:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4004fc:	68fb      	ldr	r3, [r7, #12]
  4004fe:	687a      	ldr	r2, [r7, #4]
  400500:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400502:	68bb      	ldr	r3, [r7, #8]
  400504:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400508:	d04a      	beq.n	4005a0 <pio_set_peripheral+0xb0>
  40050a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40050e:	d808      	bhi.n	400522 <pio_set_peripheral+0x32>
  400510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400514:	d016      	beq.n	400544 <pio_set_peripheral+0x54>
  400516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40051a:	d02c      	beq.n	400576 <pio_set_peripheral+0x86>
  40051c:	2b00      	cmp	r3, #0
  40051e:	d069      	beq.n	4005f4 <pio_set_peripheral+0x104>
  400520:	e064      	b.n	4005ec <pio_set_peripheral+0xfc>
  400522:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400526:	d065      	beq.n	4005f4 <pio_set_peripheral+0x104>
  400528:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40052c:	d803      	bhi.n	400536 <pio_set_peripheral+0x46>
  40052e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400532:	d04a      	beq.n	4005ca <pio_set_peripheral+0xda>
  400534:	e05a      	b.n	4005ec <pio_set_peripheral+0xfc>
  400536:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40053a:	d05b      	beq.n	4005f4 <pio_set_peripheral+0x104>
  40053c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400540:	d058      	beq.n	4005f4 <pio_set_peripheral+0x104>
  400542:	e053      	b.n	4005ec <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400544:	68fb      	ldr	r3, [r7, #12]
  400546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400548:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40054a:	68fb      	ldr	r3, [r7, #12]
  40054c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40054e:	687b      	ldr	r3, [r7, #4]
  400550:	43d9      	mvns	r1, r3
  400552:	697b      	ldr	r3, [r7, #20]
  400554:	400b      	ands	r3, r1
  400556:	401a      	ands	r2, r3
  400558:	68fb      	ldr	r3, [r7, #12]
  40055a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40055c:	68fb      	ldr	r3, [r7, #12]
  40055e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400560:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400562:	68fb      	ldr	r3, [r7, #12]
  400564:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400566:	687b      	ldr	r3, [r7, #4]
  400568:	43d9      	mvns	r1, r3
  40056a:	697b      	ldr	r3, [r7, #20]
  40056c:	400b      	ands	r3, r1
  40056e:	401a      	ands	r2, r3
  400570:	68fb      	ldr	r3, [r7, #12]
  400572:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400574:	e03a      	b.n	4005ec <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400576:	68fb      	ldr	r3, [r7, #12]
  400578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40057a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40057c:	687a      	ldr	r2, [r7, #4]
  40057e:	697b      	ldr	r3, [r7, #20]
  400580:	431a      	orrs	r2, r3
  400582:	68fb      	ldr	r3, [r7, #12]
  400584:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400586:	68fb      	ldr	r3, [r7, #12]
  400588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40058a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40058c:	68fb      	ldr	r3, [r7, #12]
  40058e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400590:	687b      	ldr	r3, [r7, #4]
  400592:	43d9      	mvns	r1, r3
  400594:	697b      	ldr	r3, [r7, #20]
  400596:	400b      	ands	r3, r1
  400598:	401a      	ands	r2, r3
  40059a:	68fb      	ldr	r3, [r7, #12]
  40059c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40059e:	e025      	b.n	4005ec <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005a0:	68fb      	ldr	r3, [r7, #12]
  4005a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4005a4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4005a6:	68fb      	ldr	r3, [r7, #12]
  4005a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005aa:	687b      	ldr	r3, [r7, #4]
  4005ac:	43d9      	mvns	r1, r3
  4005ae:	697b      	ldr	r3, [r7, #20]
  4005b0:	400b      	ands	r3, r1
  4005b2:	401a      	ands	r2, r3
  4005b4:	68fb      	ldr	r3, [r7, #12]
  4005b6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005b8:	68fb      	ldr	r3, [r7, #12]
  4005ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4005bc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4005be:	687a      	ldr	r2, [r7, #4]
  4005c0:	697b      	ldr	r3, [r7, #20]
  4005c2:	431a      	orrs	r2, r3
  4005c4:	68fb      	ldr	r3, [r7, #12]
  4005c6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4005c8:	e010      	b.n	4005ec <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005ca:	68fb      	ldr	r3, [r7, #12]
  4005cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4005ce:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4005d0:	687a      	ldr	r2, [r7, #4]
  4005d2:	697b      	ldr	r3, [r7, #20]
  4005d4:	431a      	orrs	r2, r3
  4005d6:	68fb      	ldr	r3, [r7, #12]
  4005d8:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005da:	68fb      	ldr	r3, [r7, #12]
  4005dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4005de:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4005e0:	687a      	ldr	r2, [r7, #4]
  4005e2:	697b      	ldr	r3, [r7, #20]
  4005e4:	431a      	orrs	r2, r3
  4005e6:	68fb      	ldr	r3, [r7, #12]
  4005e8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4005ea:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4005ec:	68fb      	ldr	r3, [r7, #12]
  4005ee:	687a      	ldr	r2, [r7, #4]
  4005f0:	605a      	str	r2, [r3, #4]
  4005f2:	e000      	b.n	4005f6 <pio_set_peripheral+0x106>
		return;
  4005f4:	bf00      	nop
}
  4005f6:	371c      	adds	r7, #28
  4005f8:	46bd      	mov	sp, r7
  4005fa:	bc80      	pop	{r7}
  4005fc:	4770      	bx	lr
	...

00400600 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400600:	b580      	push	{r7, lr}
  400602:	b084      	sub	sp, #16
  400604:	af00      	add	r7, sp, #0
  400606:	60f8      	str	r0, [r7, #12]
  400608:	60b9      	str	r1, [r7, #8]
  40060a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  40060c:	68b9      	ldr	r1, [r7, #8]
  40060e:	68f8      	ldr	r0, [r7, #12]
  400610:	4b19      	ldr	r3, [pc, #100]	; (400678 <pio_set_input+0x78>)
  400612:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400614:	687b      	ldr	r3, [r7, #4]
  400616:	f003 0301 	and.w	r3, r3, #1
  40061a:	461a      	mov	r2, r3
  40061c:	68b9      	ldr	r1, [r7, #8]
  40061e:	68f8      	ldr	r0, [r7, #12]
  400620:	4b16      	ldr	r3, [pc, #88]	; (40067c <pio_set_input+0x7c>)
  400622:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400624:	687b      	ldr	r3, [r7, #4]
  400626:	f003 030a 	and.w	r3, r3, #10
  40062a:	2b00      	cmp	r3, #0
  40062c:	d003      	beq.n	400636 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	68ba      	ldr	r2, [r7, #8]
  400632:	621a      	str	r2, [r3, #32]
  400634:	e002      	b.n	40063c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400636:	68fb      	ldr	r3, [r7, #12]
  400638:	68ba      	ldr	r2, [r7, #8]
  40063a:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40063c:	687b      	ldr	r3, [r7, #4]
  40063e:	f003 0302 	and.w	r3, r3, #2
  400642:	2b00      	cmp	r3, #0
  400644:	d004      	beq.n	400650 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400646:	68fb      	ldr	r3, [r7, #12]
  400648:	68ba      	ldr	r2, [r7, #8]
  40064a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40064e:	e008      	b.n	400662 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400650:	687b      	ldr	r3, [r7, #4]
  400652:	f003 0308 	and.w	r3, r3, #8
  400656:	2b00      	cmp	r3, #0
  400658:	d003      	beq.n	400662 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40065a:	68fb      	ldr	r3, [r7, #12]
  40065c:	68ba      	ldr	r2, [r7, #8]
  40065e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400662:	68fb      	ldr	r3, [r7, #12]
  400664:	68ba      	ldr	r2, [r7, #8]
  400666:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400668:	68fb      	ldr	r3, [r7, #12]
  40066a:	68ba      	ldr	r2, [r7, #8]
  40066c:	601a      	str	r2, [r3, #0]
}
  40066e:	bf00      	nop
  400670:	3710      	adds	r7, #16
  400672:	46bd      	mov	sp, r7
  400674:	bd80      	pop	{r7, pc}
  400676:	bf00      	nop
  400678:	00400769 	.word	0x00400769
  40067c:	00400491 	.word	0x00400491

00400680 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400680:	b580      	push	{r7, lr}
  400682:	b084      	sub	sp, #16
  400684:	af00      	add	r7, sp, #0
  400686:	60f8      	str	r0, [r7, #12]
  400688:	60b9      	str	r1, [r7, #8]
  40068a:	607a      	str	r2, [r7, #4]
  40068c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40068e:	68b9      	ldr	r1, [r7, #8]
  400690:	68f8      	ldr	r0, [r7, #12]
  400692:	4b12      	ldr	r3, [pc, #72]	; (4006dc <pio_set_output+0x5c>)
  400694:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400696:	69ba      	ldr	r2, [r7, #24]
  400698:	68b9      	ldr	r1, [r7, #8]
  40069a:	68f8      	ldr	r0, [r7, #12]
  40069c:	4b10      	ldr	r3, [pc, #64]	; (4006e0 <pio_set_output+0x60>)
  40069e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4006a0:	683b      	ldr	r3, [r7, #0]
  4006a2:	2b00      	cmp	r3, #0
  4006a4:	d003      	beq.n	4006ae <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4006a6:	68fb      	ldr	r3, [r7, #12]
  4006a8:	68ba      	ldr	r2, [r7, #8]
  4006aa:	651a      	str	r2, [r3, #80]	; 0x50
  4006ac:	e002      	b.n	4006b4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4006ae:	68fb      	ldr	r3, [r7, #12]
  4006b0:	68ba      	ldr	r2, [r7, #8]
  4006b2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4006b4:	687b      	ldr	r3, [r7, #4]
  4006b6:	2b00      	cmp	r3, #0
  4006b8:	d003      	beq.n	4006c2 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4006ba:	68fb      	ldr	r3, [r7, #12]
  4006bc:	68ba      	ldr	r2, [r7, #8]
  4006be:	631a      	str	r2, [r3, #48]	; 0x30
  4006c0:	e002      	b.n	4006c8 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4006c2:	68fb      	ldr	r3, [r7, #12]
  4006c4:	68ba      	ldr	r2, [r7, #8]
  4006c6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4006c8:	68fb      	ldr	r3, [r7, #12]
  4006ca:	68ba      	ldr	r2, [r7, #8]
  4006cc:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4006ce:	68fb      	ldr	r3, [r7, #12]
  4006d0:	68ba      	ldr	r2, [r7, #8]
  4006d2:	601a      	str	r2, [r3, #0]
}
  4006d4:	bf00      	nop
  4006d6:	3710      	adds	r7, #16
  4006d8:	46bd      	mov	sp, r7
  4006da:	bd80      	pop	{r7, pc}
  4006dc:	00400769 	.word	0x00400769
  4006e0:	00400491 	.word	0x00400491

004006e4 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  4006e4:	b480      	push	{r7}
  4006e6:	b085      	sub	sp, #20
  4006e8:	af00      	add	r7, sp, #0
  4006ea:	60f8      	str	r0, [r7, #12]
  4006ec:	60b9      	str	r1, [r7, #8]
  4006ee:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4006f0:	687b      	ldr	r3, [r7, #4]
  4006f2:	f003 0310 	and.w	r3, r3, #16
  4006f6:	2b00      	cmp	r3, #0
  4006f8:	d020      	beq.n	40073c <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4006fa:	68fb      	ldr	r3, [r7, #12]
  4006fc:	68ba      	ldr	r2, [r7, #8]
  4006fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400702:	687b      	ldr	r3, [r7, #4]
  400704:	f003 0320 	and.w	r3, r3, #32
  400708:	2b00      	cmp	r3, #0
  40070a:	d004      	beq.n	400716 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40070c:	68fb      	ldr	r3, [r7, #12]
  40070e:	68ba      	ldr	r2, [r7, #8]
  400710:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400714:	e003      	b.n	40071e <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400716:	68fb      	ldr	r3, [r7, #12]
  400718:	68ba      	ldr	r2, [r7, #8]
  40071a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40071e:	687b      	ldr	r3, [r7, #4]
  400720:	f003 0340 	and.w	r3, r3, #64	; 0x40
  400724:	2b00      	cmp	r3, #0
  400726:	d004      	beq.n	400732 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400728:	68fb      	ldr	r3, [r7, #12]
  40072a:	68ba      	ldr	r2, [r7, #8]
  40072c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400730:	e008      	b.n	400744 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  400732:	68fb      	ldr	r3, [r7, #12]
  400734:	68ba      	ldr	r2, [r7, #8]
  400736:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  40073a:	e003      	b.n	400744 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  40073c:	68fb      	ldr	r3, [r7, #12]
  40073e:	68ba      	ldr	r2, [r7, #8]
  400740:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  400744:	bf00      	nop
  400746:	3714      	adds	r7, #20
  400748:	46bd      	mov	sp, r7
  40074a:	bc80      	pop	{r7}
  40074c:	4770      	bx	lr

0040074e <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40074e:	b480      	push	{r7}
  400750:	b083      	sub	sp, #12
  400752:	af00      	add	r7, sp, #0
  400754:	6078      	str	r0, [r7, #4]
  400756:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  400758:	687b      	ldr	r3, [r7, #4]
  40075a:	683a      	ldr	r2, [r7, #0]
  40075c:	641a      	str	r2, [r3, #64]	; 0x40
}
  40075e:	bf00      	nop
  400760:	370c      	adds	r7, #12
  400762:	46bd      	mov	sp, r7
  400764:	bc80      	pop	{r7}
  400766:	4770      	bx	lr

00400768 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400768:	b480      	push	{r7}
  40076a:	b083      	sub	sp, #12
  40076c:	af00      	add	r7, sp, #0
  40076e:	6078      	str	r0, [r7, #4]
  400770:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400772:	687b      	ldr	r3, [r7, #4]
  400774:	683a      	ldr	r2, [r7, #0]
  400776:	645a      	str	r2, [r3, #68]	; 0x44
}
  400778:	bf00      	nop
  40077a:	370c      	adds	r7, #12
  40077c:	46bd      	mov	sp, r7
  40077e:	bc80      	pop	{r7}
  400780:	4770      	bx	lr

00400782 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400782:	b480      	push	{r7}
  400784:	b083      	sub	sp, #12
  400786:	af00      	add	r7, sp, #0
  400788:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40078a:	687b      	ldr	r3, [r7, #4]
  40078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40078e:	4618      	mov	r0, r3
  400790:	370c      	adds	r7, #12
  400792:	46bd      	mov	sp, r7
  400794:	bc80      	pop	{r7}
  400796:	4770      	bx	lr

00400798 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400798:	b480      	push	{r7}
  40079a:	b083      	sub	sp, #12
  40079c:	af00      	add	r7, sp, #0
  40079e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4007a0:	687b      	ldr	r3, [r7, #4]
  4007a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4007a4:	4618      	mov	r0, r3
  4007a6:	370c      	adds	r7, #12
  4007a8:	46bd      	mov	sp, r7
  4007aa:	bc80      	pop	{r7}
  4007ac:	4770      	bx	lr
	...

004007b0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4007b0:	b590      	push	{r4, r7, lr}
  4007b2:	b087      	sub	sp, #28
  4007b4:	af02      	add	r7, sp, #8
  4007b6:	6078      	str	r0, [r7, #4]
  4007b8:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4007ba:	6878      	ldr	r0, [r7, #4]
  4007bc:	4b63      	ldr	r3, [pc, #396]	; (40094c <pio_configure_pin+0x19c>)
  4007be:	4798      	blx	r3
  4007c0:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4007c2:	683b      	ldr	r3, [r7, #0]
  4007c4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4007c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4007cc:	d067      	beq.n	40089e <pio_configure_pin+0xee>
  4007ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4007d2:	d809      	bhi.n	4007e8 <pio_configure_pin+0x38>
  4007d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4007d8:	d02b      	beq.n	400832 <pio_configure_pin+0x82>
  4007da:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4007de:	d043      	beq.n	400868 <pio_configure_pin+0xb8>
  4007e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4007e4:	d00a      	beq.n	4007fc <pio_configure_pin+0x4c>
  4007e6:	e0a9      	b.n	40093c <pio_configure_pin+0x18c>
  4007e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4007ec:	d07e      	beq.n	4008ec <pio_configure_pin+0x13c>
  4007ee:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4007f2:	d07b      	beq.n	4008ec <pio_configure_pin+0x13c>
  4007f4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4007f8:	d06c      	beq.n	4008d4 <pio_configure_pin+0x124>
  4007fa:	e09f      	b.n	40093c <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4007fc:	687b      	ldr	r3, [r7, #4]
  4007fe:	f003 031f 	and.w	r3, r3, #31
  400802:	2201      	movs	r2, #1
  400804:	fa02 f303 	lsl.w	r3, r2, r3
  400808:	461a      	mov	r2, r3
  40080a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40080e:	68f8      	ldr	r0, [r7, #12]
  400810:	4b4f      	ldr	r3, [pc, #316]	; (400950 <pio_configure_pin+0x1a0>)
  400812:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400814:	687b      	ldr	r3, [r7, #4]
  400816:	f003 031f 	and.w	r3, r3, #31
  40081a:	2201      	movs	r2, #1
  40081c:	fa02 f303 	lsl.w	r3, r2, r3
  400820:	4619      	mov	r1, r3
  400822:	683b      	ldr	r3, [r7, #0]
  400824:	f003 0301 	and.w	r3, r3, #1
  400828:	461a      	mov	r2, r3
  40082a:	68f8      	ldr	r0, [r7, #12]
  40082c:	4b49      	ldr	r3, [pc, #292]	; (400954 <pio_configure_pin+0x1a4>)
  40082e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400830:	e086      	b.n	400940 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400832:	687b      	ldr	r3, [r7, #4]
  400834:	f003 031f 	and.w	r3, r3, #31
  400838:	2201      	movs	r2, #1
  40083a:	fa02 f303 	lsl.w	r3, r2, r3
  40083e:	461a      	mov	r2, r3
  400840:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400844:	68f8      	ldr	r0, [r7, #12]
  400846:	4b42      	ldr	r3, [pc, #264]	; (400950 <pio_configure_pin+0x1a0>)
  400848:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40084a:	687b      	ldr	r3, [r7, #4]
  40084c:	f003 031f 	and.w	r3, r3, #31
  400850:	2201      	movs	r2, #1
  400852:	fa02 f303 	lsl.w	r3, r2, r3
  400856:	4619      	mov	r1, r3
  400858:	683b      	ldr	r3, [r7, #0]
  40085a:	f003 0301 	and.w	r3, r3, #1
  40085e:	461a      	mov	r2, r3
  400860:	68f8      	ldr	r0, [r7, #12]
  400862:	4b3c      	ldr	r3, [pc, #240]	; (400954 <pio_configure_pin+0x1a4>)
  400864:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400866:	e06b      	b.n	400940 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400868:	687b      	ldr	r3, [r7, #4]
  40086a:	f003 031f 	and.w	r3, r3, #31
  40086e:	2201      	movs	r2, #1
  400870:	fa02 f303 	lsl.w	r3, r2, r3
  400874:	461a      	mov	r2, r3
  400876:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40087a:	68f8      	ldr	r0, [r7, #12]
  40087c:	4b34      	ldr	r3, [pc, #208]	; (400950 <pio_configure_pin+0x1a0>)
  40087e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400880:	687b      	ldr	r3, [r7, #4]
  400882:	f003 031f 	and.w	r3, r3, #31
  400886:	2201      	movs	r2, #1
  400888:	fa02 f303 	lsl.w	r3, r2, r3
  40088c:	4619      	mov	r1, r3
  40088e:	683b      	ldr	r3, [r7, #0]
  400890:	f003 0301 	and.w	r3, r3, #1
  400894:	461a      	mov	r2, r3
  400896:	68f8      	ldr	r0, [r7, #12]
  400898:	4b2e      	ldr	r3, [pc, #184]	; (400954 <pio_configure_pin+0x1a4>)
  40089a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40089c:	e050      	b.n	400940 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40089e:	687b      	ldr	r3, [r7, #4]
  4008a0:	f003 031f 	and.w	r3, r3, #31
  4008a4:	2201      	movs	r2, #1
  4008a6:	fa02 f303 	lsl.w	r3, r2, r3
  4008aa:	461a      	mov	r2, r3
  4008ac:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4008b0:	68f8      	ldr	r0, [r7, #12]
  4008b2:	4b27      	ldr	r3, [pc, #156]	; (400950 <pio_configure_pin+0x1a0>)
  4008b4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4008b6:	687b      	ldr	r3, [r7, #4]
  4008b8:	f003 031f 	and.w	r3, r3, #31
  4008bc:	2201      	movs	r2, #1
  4008be:	fa02 f303 	lsl.w	r3, r2, r3
  4008c2:	4619      	mov	r1, r3
  4008c4:	683b      	ldr	r3, [r7, #0]
  4008c6:	f003 0301 	and.w	r3, r3, #1
  4008ca:	461a      	mov	r2, r3
  4008cc:	68f8      	ldr	r0, [r7, #12]
  4008ce:	4b21      	ldr	r3, [pc, #132]	; (400954 <pio_configure_pin+0x1a4>)
  4008d0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4008d2:	e035      	b.n	400940 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4008d4:	687b      	ldr	r3, [r7, #4]
  4008d6:	f003 031f 	and.w	r3, r3, #31
  4008da:	2201      	movs	r2, #1
  4008dc:	fa02 f303 	lsl.w	r3, r2, r3
  4008e0:	683a      	ldr	r2, [r7, #0]
  4008e2:	4619      	mov	r1, r3
  4008e4:	68f8      	ldr	r0, [r7, #12]
  4008e6:	4b1c      	ldr	r3, [pc, #112]	; (400958 <pio_configure_pin+0x1a8>)
  4008e8:	4798      	blx	r3
		break;
  4008ea:	e029      	b.n	400940 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4008ec:	687b      	ldr	r3, [r7, #4]
  4008ee:	f003 031f 	and.w	r3, r3, #31
  4008f2:	2201      	movs	r2, #1
  4008f4:	fa02 f303 	lsl.w	r3, r2, r3
  4008f8:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4008fa:	683b      	ldr	r3, [r7, #0]
  4008fc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400900:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400904:	bf0c      	ite	eq
  400906:	2301      	moveq	r3, #1
  400908:	2300      	movne	r3, #0
  40090a:	b2db      	uxtb	r3, r3
  40090c:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40090e:	683b      	ldr	r3, [r7, #0]
  400910:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400914:	2b00      	cmp	r3, #0
  400916:	bf14      	ite	ne
  400918:	2301      	movne	r3, #1
  40091a:	2300      	moveq	r3, #0
  40091c:	b2db      	uxtb	r3, r3
  40091e:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  400920:	683b      	ldr	r3, [r7, #0]
  400922:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400926:	2b00      	cmp	r3, #0
  400928:	bf14      	ite	ne
  40092a:	2301      	movne	r3, #1
  40092c:	2300      	moveq	r3, #0
  40092e:	b2db      	uxtb	r3, r3
  400930:	9300      	str	r3, [sp, #0]
  400932:	4603      	mov	r3, r0
  400934:	68f8      	ldr	r0, [r7, #12]
  400936:	4c09      	ldr	r4, [pc, #36]	; (40095c <pio_configure_pin+0x1ac>)
  400938:	47a0      	blx	r4
		break;
  40093a:	e001      	b.n	400940 <pio_configure_pin+0x190>

	default:
		return 0;
  40093c:	2300      	movs	r3, #0
  40093e:	e000      	b.n	400942 <pio_configure_pin+0x192>
	}

	return 1;
  400940:	2301      	movs	r3, #1
}
  400942:	4618      	mov	r0, r3
  400944:	3714      	adds	r7, #20
  400946:	46bd      	mov	sp, r7
  400948:	bd90      	pop	{r4, r7, pc}
  40094a:	bf00      	nop
  40094c:	00400961 	.word	0x00400961
  400950:	004004f1 	.word	0x004004f1
  400954:	00400491 	.word	0x00400491
  400958:	00400601 	.word	0x00400601
  40095c:	00400681 	.word	0x00400681

00400960 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  400960:	b480      	push	{r7}
  400962:	b085      	sub	sp, #20
  400964:	af00      	add	r7, sp, #0
  400966:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400968:	687b      	ldr	r3, [r7, #4]
  40096a:	095b      	lsrs	r3, r3, #5
  40096c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400970:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400974:	025b      	lsls	r3, r3, #9
  400976:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  400978:	68fb      	ldr	r3, [r7, #12]
}
  40097a:	4618      	mov	r0, r3
  40097c:	3714      	adds	r7, #20
  40097e:	46bd      	mov	sp, r7
  400980:	bc80      	pop	{r7}
  400982:	4770      	bx	lr

00400984 <pio_capture_enable>:
 * \brief Enable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
  400984:	b480      	push	{r7}
  400986:	b083      	sub	sp, #12
  400988:	af00      	add	r7, sp, #0
  40098a:	6078      	str	r0, [r7, #4]
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  40098c:	687b      	ldr	r3, [r7, #4]
  40098e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  400992:	f043 0201 	orr.w	r2, r3, #1
  400996:	687b      	ldr	r3, [r7, #4]
  400998:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pio_capture_enable_flag = true;
  40099c:	4b03      	ldr	r3, [pc, #12]	; (4009ac <pio_capture_enable+0x28>)
  40099e:	2201      	movs	r2, #1
  4009a0:	601a      	str	r2, [r3, #0]
}
  4009a2:	bf00      	nop
  4009a4:	370c      	adds	r7, #12
  4009a6:	46bd      	mov	sp, r7
  4009a8:	bc80      	pop	{r7}
  4009aa:	4770      	bx	lr
  4009ac:	20000ab4 	.word	0x20000ab4

004009b0 <pio_capture_disable>:
 * \brief Disable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_disable(Pio *p_pio)
{
  4009b0:	b480      	push	{r7}
  4009b2:	b083      	sub	sp, #12
  4009b4:	af00      	add	r7, sp, #0
  4009b6:	6078      	str	r0, [r7, #4]
	p_pio->PIO_PCMR &= (~PIO_PCMR_PCEN);
  4009b8:	687b      	ldr	r3, [r7, #4]
  4009ba:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4009be:	f023 0201 	bic.w	r2, r3, #1
  4009c2:	687b      	ldr	r3, [r7, #4]
  4009c4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pio_capture_enable_flag = false;
  4009c8:	4b03      	ldr	r3, [pc, #12]	; (4009d8 <pio_capture_disable+0x28>)
  4009ca:	2200      	movs	r2, #0
  4009cc:	601a      	str	r2, [r3, #0]
}
  4009ce:	bf00      	nop
  4009d0:	370c      	adds	r7, #12
  4009d2:	46bd      	mov	sp, r7
  4009d4:	bc80      	pop	{r7}
  4009d6:	4770      	bx	lr
  4009d8:	20000ab4 	.word	0x20000ab4

004009dc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4009dc:	b580      	push	{r7, lr}
  4009de:	b084      	sub	sp, #16
  4009e0:	af00      	add	r7, sp, #0
  4009e2:	6078      	str	r0, [r7, #4]
  4009e4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4009e6:	6878      	ldr	r0, [r7, #4]
  4009e8:	4b2c      	ldr	r3, [pc, #176]	; (400a9c <pio_handler_process+0xc0>)
  4009ea:	4798      	blx	r3
  4009ec:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4009ee:	6878      	ldr	r0, [r7, #4]
  4009f0:	4b2b      	ldr	r3, [pc, #172]	; (400aa0 <pio_handler_process+0xc4>)
  4009f2:	4798      	blx	r3
  4009f4:	4602      	mov	r2, r0
  4009f6:	68fb      	ldr	r3, [r7, #12]
  4009f8:	4013      	ands	r3, r2
  4009fa:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4009fc:	68fb      	ldr	r3, [r7, #12]
  4009fe:	2b00      	cmp	r3, #0
  400a00:	d03c      	beq.n	400a7c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400a02:	2300      	movs	r3, #0
  400a04:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400a06:	e034      	b.n	400a72 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400a08:	4a26      	ldr	r2, [pc, #152]	; (400aa4 <pio_handler_process+0xc8>)
  400a0a:	68bb      	ldr	r3, [r7, #8]
  400a0c:	011b      	lsls	r3, r3, #4
  400a0e:	4413      	add	r3, r2
  400a10:	681a      	ldr	r2, [r3, #0]
  400a12:	683b      	ldr	r3, [r7, #0]
  400a14:	429a      	cmp	r2, r3
  400a16:	d126      	bne.n	400a66 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a18:	4a22      	ldr	r2, [pc, #136]	; (400aa4 <pio_handler_process+0xc8>)
  400a1a:	68bb      	ldr	r3, [r7, #8]
  400a1c:	011b      	lsls	r3, r3, #4
  400a1e:	4413      	add	r3, r2
  400a20:	3304      	adds	r3, #4
  400a22:	681a      	ldr	r2, [r3, #0]
  400a24:	68fb      	ldr	r3, [r7, #12]
  400a26:	4013      	ands	r3, r2
  400a28:	2b00      	cmp	r3, #0
  400a2a:	d01c      	beq.n	400a66 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a2c:	4a1d      	ldr	r2, [pc, #116]	; (400aa4 <pio_handler_process+0xc8>)
  400a2e:	68bb      	ldr	r3, [r7, #8]
  400a30:	011b      	lsls	r3, r3, #4
  400a32:	4413      	add	r3, r2
  400a34:	330c      	adds	r3, #12
  400a36:	681b      	ldr	r3, [r3, #0]
  400a38:	491a      	ldr	r1, [pc, #104]	; (400aa4 <pio_handler_process+0xc8>)
  400a3a:	68ba      	ldr	r2, [r7, #8]
  400a3c:	0112      	lsls	r2, r2, #4
  400a3e:	440a      	add	r2, r1
  400a40:	6810      	ldr	r0, [r2, #0]
  400a42:	4918      	ldr	r1, [pc, #96]	; (400aa4 <pio_handler_process+0xc8>)
  400a44:	68ba      	ldr	r2, [r7, #8]
  400a46:	0112      	lsls	r2, r2, #4
  400a48:	440a      	add	r2, r1
  400a4a:	3204      	adds	r2, #4
  400a4c:	6812      	ldr	r2, [r2, #0]
  400a4e:	4611      	mov	r1, r2
  400a50:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400a52:	4a14      	ldr	r2, [pc, #80]	; (400aa4 <pio_handler_process+0xc8>)
  400a54:	68bb      	ldr	r3, [r7, #8]
  400a56:	011b      	lsls	r3, r3, #4
  400a58:	4413      	add	r3, r2
  400a5a:	3304      	adds	r3, #4
  400a5c:	681b      	ldr	r3, [r3, #0]
  400a5e:	43db      	mvns	r3, r3
  400a60:	68fa      	ldr	r2, [r7, #12]
  400a62:	4013      	ands	r3, r2
  400a64:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400a66:	68bb      	ldr	r3, [r7, #8]
  400a68:	3301      	adds	r3, #1
  400a6a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a6c:	68bb      	ldr	r3, [r7, #8]
  400a6e:	2b06      	cmp	r3, #6
  400a70:	d803      	bhi.n	400a7a <pio_handler_process+0x9e>
		while (status != 0) {
  400a72:	68fb      	ldr	r3, [r7, #12]
  400a74:	2b00      	cmp	r3, #0
  400a76:	d1c7      	bne.n	400a08 <pio_handler_process+0x2c>
  400a78:	e000      	b.n	400a7c <pio_handler_process+0xa0>
				break;
  400a7a:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400a7c:	4b0a      	ldr	r3, [pc, #40]	; (400aa8 <pio_handler_process+0xcc>)
  400a7e:	681b      	ldr	r3, [r3, #0]
  400a80:	2b00      	cmp	r3, #0
  400a82:	d007      	beq.n	400a94 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400a84:	4b09      	ldr	r3, [pc, #36]	; (400aac <pio_handler_process+0xd0>)
  400a86:	681b      	ldr	r3, [r3, #0]
  400a88:	2b00      	cmp	r3, #0
  400a8a:	d003      	beq.n	400a94 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400a8c:	4b07      	ldr	r3, [pc, #28]	; (400aac <pio_handler_process+0xd0>)
  400a8e:	681b      	ldr	r3, [r3, #0]
  400a90:	6878      	ldr	r0, [r7, #4]
  400a92:	4798      	blx	r3
		}
	}
#endif
}
  400a94:	bf00      	nop
  400a96:	3710      	adds	r7, #16
  400a98:	46bd      	mov	sp, r7
  400a9a:	bd80      	pop	{r7, pc}
  400a9c:	00400783 	.word	0x00400783
  400aa0:	00400799 	.word	0x00400799
  400aa4:	200009d8 	.word	0x200009d8
  400aa8:	20000ab4 	.word	0x20000ab4
  400aac:	20000a4c 	.word	0x20000a4c

00400ab0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400ab0:	b580      	push	{r7, lr}
  400ab2:	b086      	sub	sp, #24
  400ab4:	af00      	add	r7, sp, #0
  400ab6:	60f8      	str	r0, [r7, #12]
  400ab8:	60b9      	str	r1, [r7, #8]
  400aba:	607a      	str	r2, [r7, #4]
  400abc:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400abe:	4b21      	ldr	r3, [pc, #132]	; (400b44 <pio_handler_set+0x94>)
  400ac0:	681b      	ldr	r3, [r3, #0]
  400ac2:	2b06      	cmp	r3, #6
  400ac4:	d901      	bls.n	400aca <pio_handler_set+0x1a>
		return 1;
  400ac6:	2301      	movs	r3, #1
  400ac8:	e038      	b.n	400b3c <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400aca:	2300      	movs	r3, #0
  400acc:	75fb      	strb	r3, [r7, #23]
  400ace:	e011      	b.n	400af4 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400ad0:	7dfb      	ldrb	r3, [r7, #23]
  400ad2:	011b      	lsls	r3, r3, #4
  400ad4:	4a1c      	ldr	r2, [pc, #112]	; (400b48 <pio_handler_set+0x98>)
  400ad6:	4413      	add	r3, r2
  400ad8:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400ada:	693b      	ldr	r3, [r7, #16]
  400adc:	681a      	ldr	r2, [r3, #0]
  400ade:	68bb      	ldr	r3, [r7, #8]
  400ae0:	429a      	cmp	r2, r3
  400ae2:	d104      	bne.n	400aee <pio_handler_set+0x3e>
  400ae4:	693b      	ldr	r3, [r7, #16]
  400ae6:	685a      	ldr	r2, [r3, #4]
  400ae8:	687b      	ldr	r3, [r7, #4]
  400aea:	429a      	cmp	r2, r3
  400aec:	d008      	beq.n	400b00 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400aee:	7dfb      	ldrb	r3, [r7, #23]
  400af0:	3301      	adds	r3, #1
  400af2:	75fb      	strb	r3, [r7, #23]
  400af4:	7dfa      	ldrb	r2, [r7, #23]
  400af6:	4b13      	ldr	r3, [pc, #76]	; (400b44 <pio_handler_set+0x94>)
  400af8:	681b      	ldr	r3, [r3, #0]
  400afa:	429a      	cmp	r2, r3
  400afc:	d9e8      	bls.n	400ad0 <pio_handler_set+0x20>
  400afe:	e000      	b.n	400b02 <pio_handler_set+0x52>
			break;
  400b00:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400b02:	693b      	ldr	r3, [r7, #16]
  400b04:	68ba      	ldr	r2, [r7, #8]
  400b06:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400b08:	693b      	ldr	r3, [r7, #16]
  400b0a:	687a      	ldr	r2, [r7, #4]
  400b0c:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  400b0e:	693b      	ldr	r3, [r7, #16]
  400b10:	683a      	ldr	r2, [r7, #0]
  400b12:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400b14:	693b      	ldr	r3, [r7, #16]
  400b16:	6a3a      	ldr	r2, [r7, #32]
  400b18:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400b1a:	7dfa      	ldrb	r2, [r7, #23]
  400b1c:	4b09      	ldr	r3, [pc, #36]	; (400b44 <pio_handler_set+0x94>)
  400b1e:	681b      	ldr	r3, [r3, #0]
  400b20:	3301      	adds	r3, #1
  400b22:	429a      	cmp	r2, r3
  400b24:	d104      	bne.n	400b30 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400b26:	4b07      	ldr	r3, [pc, #28]	; (400b44 <pio_handler_set+0x94>)
  400b28:	681b      	ldr	r3, [r3, #0]
  400b2a:	3301      	adds	r3, #1
  400b2c:	4a05      	ldr	r2, [pc, #20]	; (400b44 <pio_handler_set+0x94>)
  400b2e:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400b30:	683a      	ldr	r2, [r7, #0]
  400b32:	6879      	ldr	r1, [r7, #4]
  400b34:	68f8      	ldr	r0, [r7, #12]
  400b36:	4b05      	ldr	r3, [pc, #20]	; (400b4c <pio_handler_set+0x9c>)
  400b38:	4798      	blx	r3

	return 0;
  400b3a:	2300      	movs	r3, #0
}
  400b3c:	4618      	mov	r0, r3
  400b3e:	3718      	adds	r7, #24
  400b40:	46bd      	mov	sp, r7
  400b42:	bd80      	pop	{r7, pc}
  400b44:	20000a48 	.word	0x20000a48
  400b48:	200009d8 	.word	0x200009d8
  400b4c:	004006e5 	.word	0x004006e5

00400b50 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400b50:	b580      	push	{r7, lr}
  400b52:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400b54:	210b      	movs	r1, #11
  400b56:	4802      	ldr	r0, [pc, #8]	; (400b60 <PIOA_Handler+0x10>)
  400b58:	4b02      	ldr	r3, [pc, #8]	; (400b64 <PIOA_Handler+0x14>)
  400b5a:	4798      	blx	r3
}
  400b5c:	bf00      	nop
  400b5e:	bd80      	pop	{r7, pc}
  400b60:	400e0e00 	.word	0x400e0e00
  400b64:	004009dd 	.word	0x004009dd

00400b68 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400b68:	b580      	push	{r7, lr}
  400b6a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400b6c:	210c      	movs	r1, #12
  400b6e:	4802      	ldr	r0, [pc, #8]	; (400b78 <PIOB_Handler+0x10>)
  400b70:	4b02      	ldr	r3, [pc, #8]	; (400b7c <PIOB_Handler+0x14>)
  400b72:	4798      	blx	r3
}
  400b74:	bf00      	nop
  400b76:	bd80      	pop	{r7, pc}
  400b78:	400e1000 	.word	0x400e1000
  400b7c:	004009dd 	.word	0x004009dd

00400b80 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400b80:	b480      	push	{r7}
  400b82:	b085      	sub	sp, #20
  400b84:	af00      	add	r7, sp, #0
  400b86:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b88:	491c      	ldr	r1, [pc, #112]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400b8a:	4b1c      	ldr	r3, [pc, #112]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400b92:	687b      	ldr	r3, [r7, #4]
  400b94:	4313      	orrs	r3, r2
  400b96:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b98:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400b9c:	60fb      	str	r3, [r7, #12]
  400b9e:	e007      	b.n	400bb0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ba0:	68fb      	ldr	r3, [r7, #12]
  400ba2:	2b00      	cmp	r3, #0
  400ba4:	d101      	bne.n	400baa <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400ba6:	2301      	movs	r3, #1
  400ba8:	e023      	b.n	400bf2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400baa:	68fb      	ldr	r3, [r7, #12]
  400bac:	3b01      	subs	r3, #1
  400bae:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bb0:	4b12      	ldr	r3, [pc, #72]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400bb4:	f003 0308 	and.w	r3, r3, #8
  400bb8:	2b00      	cmp	r3, #0
  400bba:	d0f1      	beq.n	400ba0 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400bbc:	4a0f      	ldr	r2, [pc, #60]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400bbe:	4b0f      	ldr	r3, [pc, #60]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bc2:	f023 0303 	bic.w	r3, r3, #3
  400bc6:	f043 0302 	orr.w	r3, r3, #2
  400bca:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400bd0:	60fb      	str	r3, [r7, #12]
  400bd2:	e007      	b.n	400be4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400bd4:	68fb      	ldr	r3, [r7, #12]
  400bd6:	2b00      	cmp	r3, #0
  400bd8:	d101      	bne.n	400bde <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400bda:	2301      	movs	r3, #1
  400bdc:	e009      	b.n	400bf2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400bde:	68fb      	ldr	r3, [r7, #12]
  400be0:	3b01      	subs	r3, #1
  400be2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400be4:	4b05      	ldr	r3, [pc, #20]	; (400bfc <pmc_switch_mck_to_pllack+0x7c>)
  400be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400be8:	f003 0308 	and.w	r3, r3, #8
  400bec:	2b00      	cmp	r3, #0
  400bee:	d0f1      	beq.n	400bd4 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  400bf0:	2300      	movs	r3, #0
}
  400bf2:	4618      	mov	r0, r3
  400bf4:	3714      	adds	r7, #20
  400bf6:	46bd      	mov	sp, r7
  400bf8:	bc80      	pop	{r7}
  400bfa:	4770      	bx	lr
  400bfc:	400e0400 	.word	0x400e0400

00400c00 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400c00:	b480      	push	{r7}
  400c02:	b083      	sub	sp, #12
  400c04:	af00      	add	r7, sp, #0
  400c06:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400c08:	687b      	ldr	r3, [r7, #4]
  400c0a:	2b01      	cmp	r3, #1
  400c0c:	d107      	bne.n	400c1e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400c0e:	4a08      	ldr	r2, [pc, #32]	; (400c30 <pmc_switch_sclk_to_32kxtal+0x30>)
  400c10:	4b07      	ldr	r3, [pc, #28]	; (400c30 <pmc_switch_sclk_to_32kxtal+0x30>)
  400c12:	689b      	ldr	r3, [r3, #8]
  400c14:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  400c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  400c1c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400c1e:	4b04      	ldr	r3, [pc, #16]	; (400c30 <pmc_switch_sclk_to_32kxtal+0x30>)
  400c20:	4a04      	ldr	r2, [pc, #16]	; (400c34 <pmc_switch_sclk_to_32kxtal+0x34>)
  400c22:	601a      	str	r2, [r3, #0]
}
  400c24:	bf00      	nop
  400c26:	370c      	adds	r7, #12
  400c28:	46bd      	mov	sp, r7
  400c2a:	bc80      	pop	{r7}
  400c2c:	4770      	bx	lr
  400c2e:	bf00      	nop
  400c30:	400e1410 	.word	0x400e1410
  400c34:	a5000008 	.word	0xa5000008

00400c38 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400c38:	b480      	push	{r7}
  400c3a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400c3c:	4b09      	ldr	r3, [pc, #36]	; (400c64 <pmc_osc_is_ready_32kxtal+0x2c>)
  400c3e:	695b      	ldr	r3, [r3, #20]
  400c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400c44:	2b00      	cmp	r3, #0
  400c46:	d007      	beq.n	400c58 <pmc_osc_is_ready_32kxtal+0x20>
  400c48:	4b07      	ldr	r3, [pc, #28]	; (400c68 <pmc_osc_is_ready_32kxtal+0x30>)
  400c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400c50:	2b00      	cmp	r3, #0
  400c52:	d001      	beq.n	400c58 <pmc_osc_is_ready_32kxtal+0x20>
  400c54:	2301      	movs	r3, #1
  400c56:	e000      	b.n	400c5a <pmc_osc_is_ready_32kxtal+0x22>
  400c58:	2300      	movs	r3, #0
}
  400c5a:	4618      	mov	r0, r3
  400c5c:	46bd      	mov	sp, r7
  400c5e:	bc80      	pop	{r7}
  400c60:	4770      	bx	lr
  400c62:	bf00      	nop
  400c64:	400e1410 	.word	0x400e1410
  400c68:	400e0400 	.word	0x400e0400

00400c6c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400c6c:	b480      	push	{r7}
  400c6e:	b083      	sub	sp, #12
  400c70:	af00      	add	r7, sp, #0
  400c72:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400c74:	4a18      	ldr	r2, [pc, #96]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400c76:	4b18      	ldr	r3, [pc, #96]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400c78:	6a1b      	ldr	r3, [r3, #32]
  400c7a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400c7e:	f043 0308 	orr.w	r3, r3, #8
  400c82:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400c84:	bf00      	nop
  400c86:	4b14      	ldr	r3, [pc, #80]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400c8e:	2b00      	cmp	r3, #0
  400c90:	d0f9      	beq.n	400c86 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400c92:	4911      	ldr	r1, [pc, #68]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400c94:	4b10      	ldr	r3, [pc, #64]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400c96:	6a1b      	ldr	r3, [r3, #32]
  400c98:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400ca0:	687a      	ldr	r2, [r7, #4]
  400ca2:	4313      	orrs	r3, r2
  400ca4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400ca8:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400caa:	bf00      	nop
  400cac:	4b0a      	ldr	r3, [pc, #40]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400cb4:	2b00      	cmp	r3, #0
  400cb6:	d0f9      	beq.n	400cac <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400cb8:	4a07      	ldr	r2, [pc, #28]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400cba:	4b07      	ldr	r3, [pc, #28]	; (400cd8 <pmc_switch_mainck_to_fastrc+0x6c>)
  400cbc:	6a1b      	ldr	r3, [r3, #32]
  400cbe:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  400cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400cc6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400cca:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400ccc:	bf00      	nop
  400cce:	370c      	adds	r7, #12
  400cd0:	46bd      	mov	sp, r7
  400cd2:	bc80      	pop	{r7}
  400cd4:	4770      	bx	lr
  400cd6:	bf00      	nop
  400cd8:	400e0400 	.word	0x400e0400

00400cdc <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400cdc:	b480      	push	{r7}
  400cde:	b083      	sub	sp, #12
  400ce0:	af00      	add	r7, sp, #0
  400ce2:	6078      	str	r0, [r7, #4]
  400ce4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400ce6:	687b      	ldr	r3, [r7, #4]
  400ce8:	2b00      	cmp	r3, #0
  400cea:	d008      	beq.n	400cfe <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400cec:	4916      	ldr	r1, [pc, #88]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400cee:	4b16      	ldr	r3, [pc, #88]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400cf0:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400cf2:	4a16      	ldr	r2, [pc, #88]	; (400d4c <pmc_switch_mainck_to_xtal+0x70>)
  400cf4:	401a      	ands	r2, r3
  400cf6:	4b16      	ldr	r3, [pc, #88]	; (400d50 <pmc_switch_mainck_to_xtal+0x74>)
  400cf8:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400cfa:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400cfc:	e01e      	b.n	400d3c <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400cfe:	4912      	ldr	r1, [pc, #72]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400d00:	4b11      	ldr	r3, [pc, #68]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400d02:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400d04:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400d08:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400d0c:	683a      	ldr	r2, [r7, #0]
  400d0e:	0212      	lsls	r2, r2, #8
  400d10:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400d12:	4313      	orrs	r3, r2
  400d14:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400d18:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d1c:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400d1e:	bf00      	nop
  400d20:	4b09      	ldr	r3, [pc, #36]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d24:	f003 0301 	and.w	r3, r3, #1
  400d28:	2b00      	cmp	r3, #0
  400d2a:	d0f9      	beq.n	400d20 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400d2c:	4a06      	ldr	r2, [pc, #24]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400d2e:	4b06      	ldr	r3, [pc, #24]	; (400d48 <pmc_switch_mainck_to_xtal+0x6c>)
  400d30:	6a1b      	ldr	r3, [r3, #32]
  400d32:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400d3a:	6213      	str	r3, [r2, #32]
}
  400d3c:	bf00      	nop
  400d3e:	370c      	adds	r7, #12
  400d40:	46bd      	mov	sp, r7
  400d42:	bc80      	pop	{r7}
  400d44:	4770      	bx	lr
  400d46:	bf00      	nop
  400d48:	400e0400 	.word	0x400e0400
  400d4c:	fec8fffc 	.word	0xfec8fffc
  400d50:	01370002 	.word	0x01370002

00400d54 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400d54:	b480      	push	{r7}
  400d56:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400d58:	4b03      	ldr	r3, [pc, #12]	; (400d68 <pmc_osc_is_ready_mainck+0x14>)
  400d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400d60:	4618      	mov	r0, r3
  400d62:	46bd      	mov	sp, r7
  400d64:	bc80      	pop	{r7}
  400d66:	4770      	bx	lr
  400d68:	400e0400 	.word	0x400e0400

00400d6c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400d6c:	b480      	push	{r7}
  400d6e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400d70:	4b03      	ldr	r3, [pc, #12]	; (400d80 <pmc_disable_pllack+0x14>)
  400d72:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400d76:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400d78:	bf00      	nop
  400d7a:	46bd      	mov	sp, r7
  400d7c:	bc80      	pop	{r7}
  400d7e:	4770      	bx	lr
  400d80:	400e0400 	.word	0x400e0400

00400d84 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400d84:	b480      	push	{r7}
  400d86:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400d88:	4b03      	ldr	r3, [pc, #12]	; (400d98 <pmc_is_locked_pllack+0x14>)
  400d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d8c:	f003 0302 	and.w	r3, r3, #2
}
  400d90:	4618      	mov	r0, r3
  400d92:	46bd      	mov	sp, r7
  400d94:	bc80      	pop	{r7}
  400d96:	4770      	bx	lr
  400d98:	400e0400 	.word	0x400e0400

00400d9c <pmc_enable_pllbck>:
 * \param mulb PLLB multiplier.
 * \param pllbcount PLLB counter.
 * \param divb Divider.
 */
void pmc_enable_pllbck(uint32_t mulb, uint32_t pllbcount, uint32_t divb)
{
  400d9c:	b580      	push	{r7, lr}
  400d9e:	b084      	sub	sp, #16
  400da0:	af00      	add	r7, sp, #0
  400da2:	60f8      	str	r0, [r7, #12]
  400da4:	60b9      	str	r1, [r7, #8]
  400da6:	607a      	str	r2, [r7, #4]
	/* first disable the PLL to unlock the lock */
	pmc_disable_pllbck();
  400da8:	4b0d      	ldr	r3, [pc, #52]	; (400de0 <pmc_enable_pllbck+0x44>)
  400daa:	4798      	blx	r3

#if SAMG55
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(divb) |
		CKGR_PLLAR_PLLACOUNT(pllbcount) | CKGR_PLLAR_MULA(mulb);
#else
	PMC->CKGR_PLLBR =
  400dac:	480d      	ldr	r0, [pc, #52]	; (400de4 <pmc_enable_pllbck+0x48>)
			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
  400dae:	687b      	ldr	r3, [r7, #4]
  400db0:	b2da      	uxtb	r2, r3
  400db2:	68bb      	ldr	r3, [r7, #8]
  400db4:	021b      	lsls	r3, r3, #8
  400db6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
  400dba:	431a      	orrs	r2, r3
			| CKGR_PLLBR_MULB(mulb);
  400dbc:	68fb      	ldr	r3, [r7, #12]
  400dbe:	0419      	lsls	r1, r3, #16
  400dc0:	4b09      	ldr	r3, [pc, #36]	; (400de8 <pmc_enable_pllbck+0x4c>)
  400dc2:	400b      	ands	r3, r1
  400dc4:	4313      	orrs	r3, r2
	PMC->CKGR_PLLBR =
  400dc6:	62c3      	str	r3, [r0, #44]	; 0x2c
#endif
	while ((PMC->PMC_SR & PMC_SR_LOCKB) == 0);
  400dc8:	bf00      	nop
  400dca:	4b06      	ldr	r3, [pc, #24]	; (400de4 <pmc_enable_pllbck+0x48>)
  400dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400dce:	f003 0304 	and.w	r3, r3, #4
  400dd2:	2b00      	cmp	r3, #0
  400dd4:	d0f9      	beq.n	400dca <pmc_enable_pllbck+0x2e>
}
  400dd6:	bf00      	nop
  400dd8:	3710      	adds	r7, #16
  400dda:	46bd      	mov	sp, r7
  400ddc:	bd80      	pop	{r7, pc}
  400dde:	bf00      	nop
  400de0:	00400ded 	.word	0x00400ded
  400de4:	400e0400 	.word	0x400e0400
  400de8:	07ff0000 	.word	0x07ff0000

00400dec <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  400dec:	b480      	push	{r7}
  400dee:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  400df0:	4b03      	ldr	r3, [pc, #12]	; (400e00 <pmc_disable_pllbck+0x14>)
  400df2:	2200      	movs	r2, #0
  400df4:	62da      	str	r2, [r3, #44]	; 0x2c
}
  400df6:	bf00      	nop
  400df8:	46bd      	mov	sp, r7
  400dfa:	bc80      	pop	{r7}
  400dfc:	4770      	bx	lr
  400dfe:	bf00      	nop
  400e00:	400e0400 	.word	0x400e0400

00400e04 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  400e04:	b480      	push	{r7}
  400e06:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  400e08:	4b03      	ldr	r3, [pc, #12]	; (400e18 <pmc_is_locked_pllbck+0x14>)
  400e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e0c:	f003 0304 	and.w	r3, r3, #4
}
  400e10:	4618      	mov	r0, r3
  400e12:	46bd      	mov	sp, r7
  400e14:	bc80      	pop	{r7}
  400e16:	4770      	bx	lr
  400e18:	400e0400 	.word	0x400e0400

00400e1c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400e1c:	b480      	push	{r7}
  400e1e:	b083      	sub	sp, #12
  400e20:	af00      	add	r7, sp, #0
  400e22:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400e24:	687b      	ldr	r3, [r7, #4]
  400e26:	2b22      	cmp	r3, #34	; 0x22
  400e28:	d901      	bls.n	400e2e <pmc_enable_periph_clk+0x12>
		return 1;
  400e2a:	2301      	movs	r3, #1
  400e2c:	e02f      	b.n	400e8e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400e2e:	687b      	ldr	r3, [r7, #4]
  400e30:	2b1f      	cmp	r3, #31
  400e32:	d813      	bhi.n	400e5c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400e34:	4b18      	ldr	r3, [pc, #96]	; (400e98 <pmc_enable_periph_clk+0x7c>)
  400e36:	699a      	ldr	r2, [r3, #24]
  400e38:	2101      	movs	r1, #1
  400e3a:	687b      	ldr	r3, [r7, #4]
  400e3c:	fa01 f303 	lsl.w	r3, r1, r3
  400e40:	401a      	ands	r2, r3
  400e42:	2101      	movs	r1, #1
  400e44:	687b      	ldr	r3, [r7, #4]
  400e46:	fa01 f303 	lsl.w	r3, r1, r3
  400e4a:	429a      	cmp	r2, r3
  400e4c:	d01e      	beq.n	400e8c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400e4e:	4a12      	ldr	r2, [pc, #72]	; (400e98 <pmc_enable_periph_clk+0x7c>)
  400e50:	2101      	movs	r1, #1
  400e52:	687b      	ldr	r3, [r7, #4]
  400e54:	fa01 f303 	lsl.w	r3, r1, r3
  400e58:	6113      	str	r3, [r2, #16]
  400e5a:	e017      	b.n	400e8c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400e5c:	687b      	ldr	r3, [r7, #4]
  400e5e:	3b20      	subs	r3, #32
  400e60:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400e62:	4b0d      	ldr	r3, [pc, #52]	; (400e98 <pmc_enable_periph_clk+0x7c>)
  400e64:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400e68:	2101      	movs	r1, #1
  400e6a:	687b      	ldr	r3, [r7, #4]
  400e6c:	fa01 f303 	lsl.w	r3, r1, r3
  400e70:	401a      	ands	r2, r3
  400e72:	2101      	movs	r1, #1
  400e74:	687b      	ldr	r3, [r7, #4]
  400e76:	fa01 f303 	lsl.w	r3, r1, r3
  400e7a:	429a      	cmp	r2, r3
  400e7c:	d006      	beq.n	400e8c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400e7e:	4a06      	ldr	r2, [pc, #24]	; (400e98 <pmc_enable_periph_clk+0x7c>)
  400e80:	2101      	movs	r1, #1
  400e82:	687b      	ldr	r3, [r7, #4]
  400e84:	fa01 f303 	lsl.w	r3, r1, r3
  400e88:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400e8c:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400e8e:	4618      	mov	r0, r3
  400e90:	370c      	adds	r7, #12
  400e92:	46bd      	mov	sp, r7
  400e94:	bc80      	pop	{r7}
  400e96:	4770      	bx	lr
  400e98:	400e0400 	.word	0x400e0400

00400e9c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400e9c:	b480      	push	{r7}
  400e9e:	b087      	sub	sp, #28
  400ea0:	af00      	add	r7, sp, #0
  400ea2:	60f8      	str	r0, [r7, #12]
  400ea4:	60b9      	str	r1, [r7, #8]
  400ea6:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400ea8:	68fa      	ldr	r2, [r7, #12]
  400eaa:	68bb      	ldr	r3, [r7, #8]
  400eac:	019b      	lsls	r3, r3, #6
  400eae:	4413      	add	r3, r2
  400eb0:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400eb2:	697b      	ldr	r3, [r7, #20]
  400eb4:	2202      	movs	r2, #2
  400eb6:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400eb8:	697b      	ldr	r3, [r7, #20]
  400eba:	f04f 32ff 	mov.w	r2, #4294967295
  400ebe:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400ec0:	697b      	ldr	r3, [r7, #20]
  400ec2:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400ec4:	697b      	ldr	r3, [r7, #20]
  400ec6:	687a      	ldr	r2, [r7, #4]
  400ec8:	605a      	str	r2, [r3, #4]
}
  400eca:	bf00      	nop
  400ecc:	371c      	adds	r7, #28
  400ece:	46bd      	mov	sp, r7
  400ed0:	bc80      	pop	{r7}
  400ed2:	4770      	bx	lr

00400ed4 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400ed4:	b480      	push	{r7}
  400ed6:	b083      	sub	sp, #12
  400ed8:	af00      	add	r7, sp, #0
  400eda:	6078      	str	r0, [r7, #4]
  400edc:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400ede:	687a      	ldr	r2, [r7, #4]
  400ee0:	683b      	ldr	r3, [r7, #0]
  400ee2:	019b      	lsls	r3, r3, #6
  400ee4:	4413      	add	r3, r2
  400ee6:	2205      	movs	r2, #5
  400ee8:	601a      	str	r2, [r3, #0]
}
  400eea:	bf00      	nop
  400eec:	370c      	adds	r7, #12
  400eee:	46bd      	mov	sp, r7
  400ef0:	bc80      	pop	{r7}
  400ef2:	4770      	bx	lr

00400ef4 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  400ef4:	b480      	push	{r7}
  400ef6:	b085      	sub	sp, #20
  400ef8:	af00      	add	r7, sp, #0
  400efa:	60f8      	str	r0, [r7, #12]
  400efc:	60b9      	str	r1, [r7, #8]
  400efe:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400f00:	68fa      	ldr	r2, [r7, #12]
  400f02:	68bb      	ldr	r3, [r7, #8]
  400f04:	019b      	lsls	r3, r3, #6
  400f06:	4413      	add	r3, r2
  400f08:	331c      	adds	r3, #28
  400f0a:	687a      	ldr	r2, [r7, #4]
  400f0c:	601a      	str	r2, [r3, #0]
}
  400f0e:	bf00      	nop
  400f10:	3714      	adds	r7, #20
  400f12:	46bd      	mov	sp, r7
  400f14:	bc80      	pop	{r7}
  400f16:	4770      	bx	lr

00400f18 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  400f18:	b480      	push	{r7}
  400f1a:	b087      	sub	sp, #28
  400f1c:	af00      	add	r7, sp, #0
  400f1e:	60f8      	str	r0, [r7, #12]
  400f20:	60b9      	str	r1, [r7, #8]
  400f22:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400f24:	68fa      	ldr	r2, [r7, #12]
  400f26:	68bb      	ldr	r3, [r7, #8]
  400f28:	019b      	lsls	r3, r3, #6
  400f2a:	4413      	add	r3, r2
  400f2c:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  400f2e:	697b      	ldr	r3, [r7, #20]
  400f30:	687a      	ldr	r2, [r7, #4]
  400f32:	625a      	str	r2, [r3, #36]	; 0x24
}
  400f34:	bf00      	nop
  400f36:	371c      	adds	r7, #28
  400f38:	46bd      	mov	sp, r7
  400f3a:	bc80      	pop	{r7}
  400f3c:	4770      	bx	lr

00400f3e <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400f3e:	b480      	push	{r7}
  400f40:	b085      	sub	sp, #20
  400f42:	af00      	add	r7, sp, #0
  400f44:	6078      	str	r0, [r7, #4]
  400f46:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400f48:	687a      	ldr	r2, [r7, #4]
  400f4a:	683b      	ldr	r3, [r7, #0]
  400f4c:	019b      	lsls	r3, r3, #6
  400f4e:	4413      	add	r3, r2
  400f50:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  400f52:	68fb      	ldr	r3, [r7, #12]
  400f54:	6a1b      	ldr	r3, [r3, #32]
}
  400f56:	4618      	mov	r0, r3
  400f58:	3714      	adds	r7, #20
  400f5a:	46bd      	mov	sp, r7
  400f5c:	bc80      	pop	{r7}
  400f5e:	4770      	bx	lr

00400f60 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400f60:	b480      	push	{r7}
  400f62:	b08d      	sub	sp, #52	; 0x34
  400f64:	af00      	add	r7, sp, #0
  400f66:	60f8      	str	r0, [r7, #12]
  400f68:	60b9      	str	r1, [r7, #8]
  400f6a:	607a      	str	r2, [r7, #4]
  400f6c:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400f6e:	2302      	movs	r3, #2
  400f70:	613b      	str	r3, [r7, #16]
  400f72:	2308      	movs	r3, #8
  400f74:	617b      	str	r3, [r7, #20]
  400f76:	2320      	movs	r3, #32
  400f78:	61bb      	str	r3, [r7, #24]
  400f7a:	2380      	movs	r3, #128	; 0x80
  400f7c:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  400f80:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400f82:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400f84:	2300      	movs	r3, #0
  400f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  400f88:	e01a      	b.n	400fc0 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  400f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f8c:	009b      	lsls	r3, r3, #2
  400f8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400f92:	4413      	add	r3, r2
  400f94:	f853 3c20 	ldr.w	r3, [r3, #-32]
  400f98:	68ba      	ldr	r2, [r7, #8]
  400f9a:	fbb2 f3f3 	udiv	r3, r2, r3
  400f9e:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  400fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400fa2:	0c1b      	lsrs	r3, r3, #16
  400fa4:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  400fa6:	68fa      	ldr	r2, [r7, #12]
  400fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400faa:	429a      	cmp	r2, r3
  400fac:	d901      	bls.n	400fb2 <tc_find_mck_divisor+0x52>
			return 0;
  400fae:	2300      	movs	r3, #0
  400fb0:	e023      	b.n	400ffa <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  400fb2:	68fa      	ldr	r2, [r7, #12]
  400fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400fb6:	429a      	cmp	r2, r3
  400fb8:	d206      	bcs.n	400fc8 <tc_find_mck_divisor+0x68>
			ul_index++) {
  400fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fbc:	3301      	adds	r3, #1
  400fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  400fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fc2:	2b04      	cmp	r3, #4
  400fc4:	d9e1      	bls.n	400f8a <tc_find_mck_divisor+0x2a>
  400fc6:	e000      	b.n	400fca <tc_find_mck_divisor+0x6a>
			break;
  400fc8:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  400fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fcc:	2b04      	cmp	r3, #4
  400fce:	d901      	bls.n	400fd4 <tc_find_mck_divisor+0x74>
		return 0;
  400fd0:	2300      	movs	r3, #0
  400fd2:	e012      	b.n	400ffa <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400fd4:	687b      	ldr	r3, [r7, #4]
  400fd6:	2b00      	cmp	r3, #0
  400fd8:	d008      	beq.n	400fec <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  400fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fdc:	009b      	lsls	r3, r3, #2
  400fde:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400fe2:	4413      	add	r3, r2
  400fe4:	f853 2c20 	ldr.w	r2, [r3, #-32]
  400fe8:	687b      	ldr	r3, [r7, #4]
  400fea:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  400fec:	683b      	ldr	r3, [r7, #0]
  400fee:	2b00      	cmp	r3, #0
  400ff0:	d002      	beq.n	400ff8 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  400ff2:	683b      	ldr	r3, [r7, #0]
  400ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400ff6:	601a      	str	r2, [r3, #0]
	}

	return 1;
  400ff8:	2301      	movs	r3, #1
}
  400ffa:	4618      	mov	r0, r3
  400ffc:	3734      	adds	r7, #52	; 0x34
  400ffe:	46bd      	mov	sp, r7
  401000:	bc80      	pop	{r7}
  401002:	4770      	bx	lr

00401004 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  401004:	b480      	push	{r7}
  401006:	b083      	sub	sp, #12
  401008:	af00      	add	r7, sp, #0
  40100a:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  40100c:	687b      	ldr	r3, [r7, #4]
  40100e:	2208      	movs	r2, #8
  401010:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  401012:	687b      	ldr	r3, [r7, #4]
  401014:	2220      	movs	r2, #32
  401016:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  401018:	687b      	ldr	r3, [r7, #4]
  40101a:	2204      	movs	r2, #4
  40101c:	601a      	str	r2, [r3, #0]
}
  40101e:	bf00      	nop
  401020:	370c      	adds	r7, #12
  401022:	46bd      	mov	sp, r7
  401024:	bc80      	pop	{r7}
  401026:	4770      	bx	lr

00401028 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  401028:	b580      	push	{r7, lr}
  40102a:	b084      	sub	sp, #16
  40102c:	af00      	add	r7, sp, #0
  40102e:	6078      	str	r0, [r7, #4]
  401030:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  401032:	2300      	movs	r3, #0
  401034:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  401036:	687b      	ldr	r3, [r7, #4]
  401038:	f04f 32ff 	mov.w	r2, #4294967295
  40103c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  40103e:	687b      	ldr	r3, [r7, #4]
  401040:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  401042:	6878      	ldr	r0, [r7, #4]
  401044:	4b0e      	ldr	r3, [pc, #56]	; (401080 <twi_master_init+0x58>)
  401046:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  401048:	6878      	ldr	r0, [r7, #4]
  40104a:	4b0e      	ldr	r3, [pc, #56]	; (401084 <twi_master_init+0x5c>)
  40104c:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  40104e:	683b      	ldr	r3, [r7, #0]
  401050:	6859      	ldr	r1, [r3, #4]
  401052:	683b      	ldr	r3, [r7, #0]
  401054:	681b      	ldr	r3, [r3, #0]
  401056:	461a      	mov	r2, r3
  401058:	6878      	ldr	r0, [r7, #4]
  40105a:	4b0b      	ldr	r3, [pc, #44]	; (401088 <twi_master_init+0x60>)
  40105c:	4798      	blx	r3
  40105e:	4603      	mov	r3, r0
  401060:	2b01      	cmp	r3, #1
  401062:	d101      	bne.n	401068 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  401064:	2301      	movs	r3, #1
  401066:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  401068:	683b      	ldr	r3, [r7, #0]
  40106a:	7a5b      	ldrb	r3, [r3, #9]
  40106c:	2b01      	cmp	r3, #1
  40106e:	d102      	bne.n	401076 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  401070:	687b      	ldr	r3, [r7, #4]
  401072:	2240      	movs	r2, #64	; 0x40
  401074:	601a      	str	r2, [r3, #0]
	}

	return status;
  401076:	68fb      	ldr	r3, [r7, #12]
}
  401078:	4618      	mov	r0, r3
  40107a:	3710      	adds	r7, #16
  40107c:	46bd      	mov	sp, r7
  40107e:	bd80      	pop	{r7, pc}
  401080:	004013c5 	.word	0x004013c5
  401084:	00401005 	.word	0x00401005
  401088:	0040108d 	.word	0x0040108d

0040108c <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  40108c:	b480      	push	{r7}
  40108e:	b089      	sub	sp, #36	; 0x24
  401090:	af00      	add	r7, sp, #0
  401092:	60f8      	str	r0, [r7, #12]
  401094:	60b9      	str	r1, [r7, #8]
  401096:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  401098:	2300      	movs	r3, #0
  40109a:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  40109c:	68bb      	ldr	r3, [r7, #8]
  40109e:	4a34      	ldr	r2, [pc, #208]	; (401170 <twi_set_speed+0xe4>)
  4010a0:	4293      	cmp	r3, r2
  4010a2:	d901      	bls.n	4010a8 <twi_set_speed+0x1c>
		return FAIL;
  4010a4:	2301      	movs	r3, #1
  4010a6:	e05d      	b.n	401164 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4010a8:	68bb      	ldr	r3, [r7, #8]
  4010aa:	4a32      	ldr	r2, [pc, #200]	; (401174 <twi_set_speed+0xe8>)
  4010ac:	4293      	cmp	r3, r2
  4010ae:	d937      	bls.n	401120 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4010b0:	687b      	ldr	r3, [r7, #4]
  4010b2:	4a31      	ldr	r2, [pc, #196]	; (401178 <twi_set_speed+0xec>)
  4010b4:	fba2 2303 	umull	r2, r3, r2, r3
  4010b8:	0b9b      	lsrs	r3, r3, #14
  4010ba:	3b04      	subs	r3, #4
  4010bc:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4010be:	68ba      	ldr	r2, [r7, #8]
  4010c0:	4b2e      	ldr	r3, [pc, #184]	; (40117c <twi_set_speed+0xf0>)
  4010c2:	4413      	add	r3, r2
  4010c4:	009b      	lsls	r3, r3, #2
  4010c6:	687a      	ldr	r2, [r7, #4]
  4010c8:	fbb2 f3f3 	udiv	r3, r2, r3
  4010cc:	3b04      	subs	r3, #4
  4010ce:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4010d0:	e005      	b.n	4010de <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  4010d2:	69fb      	ldr	r3, [r7, #28]
  4010d4:	3301      	adds	r3, #1
  4010d6:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4010d8:	697b      	ldr	r3, [r7, #20]
  4010da:	085b      	lsrs	r3, r3, #1
  4010dc:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4010de:	697b      	ldr	r3, [r7, #20]
  4010e0:	2bff      	cmp	r3, #255	; 0xff
  4010e2:	d909      	bls.n	4010f8 <twi_set_speed+0x6c>
  4010e4:	69fb      	ldr	r3, [r7, #28]
  4010e6:	2b06      	cmp	r3, #6
  4010e8:	d9f3      	bls.n	4010d2 <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4010ea:	e005      	b.n	4010f8 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  4010ec:	69fb      	ldr	r3, [r7, #28]
  4010ee:	3301      	adds	r3, #1
  4010f0:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  4010f2:	693b      	ldr	r3, [r7, #16]
  4010f4:	085b      	lsrs	r3, r3, #1
  4010f6:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4010f8:	693b      	ldr	r3, [r7, #16]
  4010fa:	2bff      	cmp	r3, #255	; 0xff
  4010fc:	d902      	bls.n	401104 <twi_set_speed+0x78>
  4010fe:	69fb      	ldr	r3, [r7, #28]
  401100:	2b06      	cmp	r3, #6
  401102:	d9f3      	bls.n	4010ec <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401104:	697b      	ldr	r3, [r7, #20]
  401106:	b2da      	uxtb	r2, r3
  401108:	693b      	ldr	r3, [r7, #16]
  40110a:	021b      	lsls	r3, r3, #8
  40110c:	b29b      	uxth	r3, r3
  40110e:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  401110:	69fb      	ldr	r3, [r7, #28]
  401112:	041b      	lsls	r3, r3, #16
  401114:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401118:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  40111a:	68fb      	ldr	r3, [r7, #12]
  40111c:	611a      	str	r2, [r3, #16]
  40111e:	e020      	b.n	401162 <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401120:	68bb      	ldr	r3, [r7, #8]
  401122:	005b      	lsls	r3, r3, #1
  401124:	687a      	ldr	r2, [r7, #4]
  401126:	fbb2 f3f3 	udiv	r3, r2, r3
  40112a:	3b04      	subs	r3, #4
  40112c:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40112e:	e005      	b.n	40113c <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  401130:	69fb      	ldr	r3, [r7, #28]
  401132:	3301      	adds	r3, #1
  401134:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  401136:	69bb      	ldr	r3, [r7, #24]
  401138:	085b      	lsrs	r3, r3, #1
  40113a:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40113c:	69bb      	ldr	r3, [r7, #24]
  40113e:	2bff      	cmp	r3, #255	; 0xff
  401140:	d902      	bls.n	401148 <twi_set_speed+0xbc>
  401142:	69fb      	ldr	r3, [r7, #28]
  401144:	2b06      	cmp	r3, #6
  401146:	d9f3      	bls.n	401130 <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401148:	69bb      	ldr	r3, [r7, #24]
  40114a:	b2da      	uxtb	r2, r3
  40114c:	69bb      	ldr	r3, [r7, #24]
  40114e:	021b      	lsls	r3, r3, #8
  401150:	b29b      	uxth	r3, r3
  401152:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  401154:	69fb      	ldr	r3, [r7, #28]
  401156:	041b      	lsls	r3, r3, #16
  401158:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  40115c:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  40115e:	68fb      	ldr	r3, [r7, #12]
  401160:	611a      	str	r2, [r3, #16]
	}

	return PASS;
  401162:	2300      	movs	r3, #0
}
  401164:	4618      	mov	r0, r3
  401166:	3724      	adds	r7, #36	; 0x24
  401168:	46bd      	mov	sp, r7
  40116a:	bc80      	pop	{r7}
  40116c:	4770      	bx	lr
  40116e:	bf00      	nop
  401170:	00061a80 	.word	0x00061a80
  401174:	0005dc00 	.word	0x0005dc00
  401178:	057619f1 	.word	0x057619f1
  40117c:	3ffd1200 	.word	0x3ffd1200

00401180 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  401180:	b480      	push	{r7}
  401182:	b085      	sub	sp, #20
  401184:	af00      	add	r7, sp, #0
  401186:	6078      	str	r0, [r7, #4]
  401188:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  40118a:	683b      	ldr	r3, [r7, #0]
  40118c:	2b00      	cmp	r3, #0
  40118e:	d101      	bne.n	401194 <twi_mk_addr+0x14>
		return 0;
  401190:	2300      	movs	r3, #0
  401192:	e01d      	b.n	4011d0 <twi_mk_addr+0x50>

	val = addr[0];
  401194:	687b      	ldr	r3, [r7, #4]
  401196:	781b      	ldrb	r3, [r3, #0]
  401198:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  40119a:	683b      	ldr	r3, [r7, #0]
  40119c:	2b01      	cmp	r3, #1
  40119e:	dd09      	ble.n	4011b4 <twi_mk_addr+0x34>
		val <<= 8;
  4011a0:	68fb      	ldr	r3, [r7, #12]
  4011a2:	021b      	lsls	r3, r3, #8
  4011a4:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  4011a6:	687b      	ldr	r3, [r7, #4]
  4011a8:	3301      	adds	r3, #1
  4011aa:	781b      	ldrb	r3, [r3, #0]
  4011ac:	461a      	mov	r2, r3
  4011ae:	68fb      	ldr	r3, [r7, #12]
  4011b0:	4313      	orrs	r3, r2
  4011b2:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  4011b4:	683b      	ldr	r3, [r7, #0]
  4011b6:	2b02      	cmp	r3, #2
  4011b8:	dd09      	ble.n	4011ce <twi_mk_addr+0x4e>
		val <<= 8;
  4011ba:	68fb      	ldr	r3, [r7, #12]
  4011bc:	021b      	lsls	r3, r3, #8
  4011be:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  4011c0:	687b      	ldr	r3, [r7, #4]
  4011c2:	3302      	adds	r3, #2
  4011c4:	781b      	ldrb	r3, [r3, #0]
  4011c6:	461a      	mov	r2, r3
  4011c8:	68fb      	ldr	r3, [r7, #12]
  4011ca:	4313      	orrs	r3, r2
  4011cc:	60fb      	str	r3, [r7, #12]
	}
	return val;
  4011ce:	68fb      	ldr	r3, [r7, #12]
}
  4011d0:	4618      	mov	r0, r3
  4011d2:	3714      	adds	r7, #20
  4011d4:	46bd      	mov	sp, r7
  4011d6:	bc80      	pop	{r7}
  4011d8:	4770      	bx	lr
	...

004011dc <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  4011dc:	b580      	push	{r7, lr}
  4011de:	b088      	sub	sp, #32
  4011e0:	af00      	add	r7, sp, #0
  4011e2:	6078      	str	r0, [r7, #4]
  4011e4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4011e6:	683b      	ldr	r3, [r7, #0]
  4011e8:	68db      	ldr	r3, [r3, #12]
  4011ea:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  4011ec:	683b      	ldr	r3, [r7, #0]
  4011ee:	689b      	ldr	r3, [r3, #8]
  4011f0:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  4011f2:	2300      	movs	r3, #0
  4011f4:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  4011f6:	f247 5330 	movw	r3, #30000	; 0x7530
  4011fa:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  4011fc:	69fb      	ldr	r3, [r7, #28]
  4011fe:	2b00      	cmp	r3, #0
  401200:	d101      	bne.n	401206 <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  401202:	2301      	movs	r3, #1
  401204:	e069      	b.n	4012da <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401206:	687b      	ldr	r3, [r7, #4]
  401208:	2200      	movs	r2, #0
  40120a:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  40120c:	683b      	ldr	r3, [r7, #0]
  40120e:	7c1b      	ldrb	r3, [r3, #16]
  401210:	041b      	lsls	r3, r3, #16
  401212:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401216:	683b      	ldr	r3, [r7, #0]
  401218:	685b      	ldr	r3, [r3, #4]
  40121a:	021b      	lsls	r3, r3, #8
  40121c:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401220:	4313      	orrs	r3, r2
  401222:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  401226:	687b      	ldr	r3, [r7, #4]
  401228:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  40122a:	687b      	ldr	r3, [r7, #4]
  40122c:	2200      	movs	r2, #0
  40122e:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401230:	683a      	ldr	r2, [r7, #0]
  401232:	683b      	ldr	r3, [r7, #0]
  401234:	685b      	ldr	r3, [r3, #4]
  401236:	4619      	mov	r1, r3
  401238:	4610      	mov	r0, r2
  40123a:	4b2a      	ldr	r3, [pc, #168]	; (4012e4 <twi_master_read+0x108>)
  40123c:	4798      	blx	r3
  40123e:	4602      	mov	r2, r0
  401240:	687b      	ldr	r3, [r7, #4]
  401242:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  401244:	69fb      	ldr	r3, [r7, #28]
  401246:	2b01      	cmp	r3, #1
  401248:	d105      	bne.n	401256 <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40124a:	687b      	ldr	r3, [r7, #4]
  40124c:	2203      	movs	r2, #3
  40124e:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  401250:	2301      	movs	r3, #1
  401252:	75fb      	strb	r3, [r7, #23]
  401254:	e034      	b.n	4012c0 <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  401256:	687b      	ldr	r3, [r7, #4]
  401258:	2201      	movs	r2, #1
  40125a:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  40125c:	2300      	movs	r3, #0
  40125e:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  401260:	e02e      	b.n	4012c0 <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  401262:	687b      	ldr	r3, [r7, #4]
  401264:	6a1b      	ldr	r3, [r3, #32]
  401266:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  401268:	68fb      	ldr	r3, [r7, #12]
  40126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40126e:	2b00      	cmp	r3, #0
  401270:	d001      	beq.n	401276 <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  401272:	2305      	movs	r3, #5
  401274:	e031      	b.n	4012da <twi_master_read+0xfe>
		}

		if (!timeout--) {
  401276:	693b      	ldr	r3, [r7, #16]
  401278:	1e5a      	subs	r2, r3, #1
  40127a:	613a      	str	r2, [r7, #16]
  40127c:	2b00      	cmp	r3, #0
  40127e:	d101      	bne.n	401284 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  401280:	2309      	movs	r3, #9
  401282:	e02a      	b.n	4012da <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  401284:	69fb      	ldr	r3, [r7, #28]
  401286:	2b01      	cmp	r3, #1
  401288:	d107      	bne.n	40129a <twi_master_read+0xbe>
  40128a:	7dfb      	ldrb	r3, [r7, #23]
  40128c:	2b00      	cmp	r3, #0
  40128e:	d104      	bne.n	40129a <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  401290:	687b      	ldr	r3, [r7, #4]
  401292:	2202      	movs	r2, #2
  401294:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  401296:	2301      	movs	r3, #1
  401298:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  40129a:	68fb      	ldr	r3, [r7, #12]
  40129c:	f003 0302 	and.w	r3, r3, #2
  4012a0:	2b00      	cmp	r3, #0
  4012a2:	d100      	bne.n	4012a6 <twi_master_read+0xca>
			continue;
  4012a4:	e00c      	b.n	4012c0 <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  4012a6:	69bb      	ldr	r3, [r7, #24]
  4012a8:	1c5a      	adds	r2, r3, #1
  4012aa:	61ba      	str	r2, [r7, #24]
  4012ac:	687a      	ldr	r2, [r7, #4]
  4012ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4012b0:	b2d2      	uxtb	r2, r2
  4012b2:	701a      	strb	r2, [r3, #0]

		cnt--;
  4012b4:	69fb      	ldr	r3, [r7, #28]
  4012b6:	3b01      	subs	r3, #1
  4012b8:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  4012ba:	f247 5330 	movw	r3, #30000	; 0x7530
  4012be:	613b      	str	r3, [r7, #16]
	while (cnt > 0) {
  4012c0:	69fb      	ldr	r3, [r7, #28]
  4012c2:	2b00      	cmp	r3, #0
  4012c4:	d1cd      	bne.n	401262 <twi_master_read+0x86>
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4012c6:	bf00      	nop
  4012c8:	687b      	ldr	r3, [r7, #4]
  4012ca:	6a1b      	ldr	r3, [r3, #32]
  4012cc:	f003 0301 	and.w	r3, r3, #1
  4012d0:	2b00      	cmp	r3, #0
  4012d2:	d0f9      	beq.n	4012c8 <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  4012d4:	687b      	ldr	r3, [r7, #4]
  4012d6:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  4012d8:	2300      	movs	r3, #0
}
  4012da:	4618      	mov	r0, r3
  4012dc:	3720      	adds	r7, #32
  4012de:	46bd      	mov	sp, r7
  4012e0:	bd80      	pop	{r7, pc}
  4012e2:	bf00      	nop
  4012e4:	00401181 	.word	0x00401181

004012e8 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4012e8:	b580      	push	{r7, lr}
  4012ea:	b086      	sub	sp, #24
  4012ec:	af00      	add	r7, sp, #0
  4012ee:	6078      	str	r0, [r7, #4]
  4012f0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4012f2:	683b      	ldr	r3, [r7, #0]
  4012f4:	68db      	ldr	r3, [r3, #12]
  4012f6:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  4012f8:	683b      	ldr	r3, [r7, #0]
  4012fa:	689b      	ldr	r3, [r3, #8]
  4012fc:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  4012fe:	697b      	ldr	r3, [r7, #20]
  401300:	2b00      	cmp	r3, #0
  401302:	d101      	bne.n	401308 <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  401304:	2301      	movs	r3, #1
  401306:	e056      	b.n	4013b6 <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401308:	687b      	ldr	r3, [r7, #4]
  40130a:	2200      	movs	r2, #0
  40130c:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  40130e:	683b      	ldr	r3, [r7, #0]
  401310:	7c1b      	ldrb	r3, [r3, #16]
  401312:	041b      	lsls	r3, r3, #16
  401314:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401318:	683b      	ldr	r3, [r7, #0]
  40131a:	685b      	ldr	r3, [r3, #4]
  40131c:	021b      	lsls	r3, r3, #8
  40131e:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401322:	431a      	orrs	r2, r3
  401324:	687b      	ldr	r3, [r7, #4]
  401326:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401328:	687b      	ldr	r3, [r7, #4]
  40132a:	2200      	movs	r2, #0
  40132c:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40132e:	683a      	ldr	r2, [r7, #0]
  401330:	683b      	ldr	r3, [r7, #0]
  401332:	685b      	ldr	r3, [r3, #4]
  401334:	4619      	mov	r1, r3
  401336:	4610      	mov	r0, r2
  401338:	4b21      	ldr	r3, [pc, #132]	; (4013c0 <twi_master_write+0xd8>)
  40133a:	4798      	blx	r3
  40133c:	4602      	mov	r2, r0
  40133e:	687b      	ldr	r3, [r7, #4]
  401340:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  401342:	e019      	b.n	401378 <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  401344:	687b      	ldr	r3, [r7, #4]
  401346:	6a1b      	ldr	r3, [r3, #32]
  401348:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  40134a:	68fb      	ldr	r3, [r7, #12]
  40134c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401350:	2b00      	cmp	r3, #0
  401352:	d001      	beq.n	401358 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  401354:	2305      	movs	r3, #5
  401356:	e02e      	b.n	4013b6 <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  401358:	68fb      	ldr	r3, [r7, #12]
  40135a:	f003 0304 	and.w	r3, r3, #4
  40135e:	2b00      	cmp	r3, #0
  401360:	d100      	bne.n	401364 <twi_master_write+0x7c>
			continue;
  401362:	e009      	b.n	401378 <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  401364:	693b      	ldr	r3, [r7, #16]
  401366:	1c5a      	adds	r2, r3, #1
  401368:	613a      	str	r2, [r7, #16]
  40136a:	781b      	ldrb	r3, [r3, #0]
  40136c:	461a      	mov	r2, r3
  40136e:	687b      	ldr	r3, [r7, #4]
  401370:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  401372:	697b      	ldr	r3, [r7, #20]
  401374:	3b01      	subs	r3, #1
  401376:	617b      	str	r3, [r7, #20]
	while (cnt > 0) {
  401378:	697b      	ldr	r3, [r7, #20]
  40137a:	2b00      	cmp	r3, #0
  40137c:	d1e2      	bne.n	401344 <twi_master_write+0x5c>
	}

	while (1) {
		status = p_twi->TWI_SR;
  40137e:	687b      	ldr	r3, [r7, #4]
  401380:	6a1b      	ldr	r3, [r3, #32]
  401382:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  401384:	68fb      	ldr	r3, [r7, #12]
  401386:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40138a:	2b00      	cmp	r3, #0
  40138c:	d001      	beq.n	401392 <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  40138e:	2305      	movs	r3, #5
  401390:	e011      	b.n	4013b6 <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  401392:	68fb      	ldr	r3, [r7, #12]
  401394:	f003 0304 	and.w	r3, r3, #4
  401398:	2b00      	cmp	r3, #0
  40139a:	d100      	bne.n	40139e <twi_master_write+0xb6>
		status = p_twi->TWI_SR;
  40139c:	e7ef      	b.n	40137e <twi_master_write+0x96>
			break;
  40139e:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  4013a0:	687b      	ldr	r3, [r7, #4]
  4013a2:	2202      	movs	r2, #2
  4013a4:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4013a6:	bf00      	nop
  4013a8:	687b      	ldr	r3, [r7, #4]
  4013aa:	6a1b      	ldr	r3, [r3, #32]
  4013ac:	f003 0301 	and.w	r3, r3, #1
  4013b0:	2b00      	cmp	r3, #0
  4013b2:	d0f9      	beq.n	4013a8 <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  4013b4:	2300      	movs	r3, #0
}
  4013b6:	4618      	mov	r0, r3
  4013b8:	3718      	adds	r7, #24
  4013ba:	46bd      	mov	sp, r7
  4013bc:	bd80      	pop	{r7, pc}
  4013be:	bf00      	nop
  4013c0:	00401181 	.word	0x00401181

004013c4 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  4013c4:	b480      	push	{r7}
  4013c6:	b083      	sub	sp, #12
  4013c8:	af00      	add	r7, sp, #0
  4013ca:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4013cc:	687b      	ldr	r3, [r7, #4]
  4013ce:	2280      	movs	r2, #128	; 0x80
  4013d0:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  4013d2:	687b      	ldr	r3, [r7, #4]
  4013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4013d6:	bf00      	nop
  4013d8:	370c      	adds	r7, #12
  4013da:	46bd      	mov	sp, r7
  4013dc:	bc80      	pop	{r7}
  4013de:	4770      	bx	lr

004013e0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4013e0:	b480      	push	{r7}
  4013e2:	b089      	sub	sp, #36	; 0x24
  4013e4:	af00      	add	r7, sp, #0
  4013e6:	60f8      	str	r0, [r7, #12]
  4013e8:	60b9      	str	r1, [r7, #8]
  4013ea:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4013ec:	68bb      	ldr	r3, [r7, #8]
  4013ee:	011a      	lsls	r2, r3, #4
  4013f0:	687b      	ldr	r3, [r7, #4]
  4013f2:	429a      	cmp	r2, r3
  4013f4:	d802      	bhi.n	4013fc <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4013f6:	2310      	movs	r3, #16
  4013f8:	61fb      	str	r3, [r7, #28]
  4013fa:	e001      	b.n	401400 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4013fc:	2308      	movs	r3, #8
  4013fe:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401400:	687b      	ldr	r3, [r7, #4]
  401402:	00da      	lsls	r2, r3, #3
  401404:	69fb      	ldr	r3, [r7, #28]
  401406:	68b9      	ldr	r1, [r7, #8]
  401408:	fb01 f303 	mul.w	r3, r1, r3
  40140c:	085b      	lsrs	r3, r3, #1
  40140e:	441a      	add	r2, r3
  401410:	69fb      	ldr	r3, [r7, #28]
  401412:	68b9      	ldr	r1, [r7, #8]
  401414:	fb01 f303 	mul.w	r3, r1, r3
  401418:	fbb2 f3f3 	udiv	r3, r2, r3
  40141c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40141e:	69bb      	ldr	r3, [r7, #24]
  401420:	08db      	lsrs	r3, r3, #3
  401422:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401424:	69bb      	ldr	r3, [r7, #24]
  401426:	f003 0307 	and.w	r3, r3, #7
  40142a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40142c:	697b      	ldr	r3, [r7, #20]
  40142e:	2b00      	cmp	r3, #0
  401430:	d003      	beq.n	40143a <usart_set_async_baudrate+0x5a>
  401432:	697b      	ldr	r3, [r7, #20]
  401434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401438:	d301      	bcc.n	40143e <usart_set_async_baudrate+0x5e>
		return 1;
  40143a:	2301      	movs	r3, #1
  40143c:	e00f      	b.n	40145e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40143e:	69fb      	ldr	r3, [r7, #28]
  401440:	2b08      	cmp	r3, #8
  401442:	d105      	bne.n	401450 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401444:	68fb      	ldr	r3, [r7, #12]
  401446:	685b      	ldr	r3, [r3, #4]
  401448:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  40144c:	68fb      	ldr	r3, [r7, #12]
  40144e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401450:	693b      	ldr	r3, [r7, #16]
  401452:	041a      	lsls	r2, r3, #16
  401454:	697b      	ldr	r3, [r7, #20]
  401456:	431a      	orrs	r2, r3
  401458:	68fb      	ldr	r3, [r7, #12]
  40145a:	621a      	str	r2, [r3, #32]

	return 0;
  40145c:	2300      	movs	r3, #0
}
  40145e:	4618      	mov	r0, r3
  401460:	3724      	adds	r7, #36	; 0x24
  401462:	46bd      	mov	sp, r7
  401464:	bc80      	pop	{r7}
  401466:	4770      	bx	lr

00401468 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  401468:	b580      	push	{r7, lr}
  40146a:	b082      	sub	sp, #8
  40146c:	af00      	add	r7, sp, #0
  40146e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401470:	6878      	ldr	r0, [r7, #4]
  401472:	4b0f      	ldr	r3, [pc, #60]	; (4014b0 <usart_reset+0x48>)
  401474:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  401476:	687b      	ldr	r3, [r7, #4]
  401478:	2200      	movs	r2, #0
  40147a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  40147c:	687b      	ldr	r3, [r7, #4]
  40147e:	2200      	movs	r2, #0
  401480:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401482:	687b      	ldr	r3, [r7, #4]
  401484:	2200      	movs	r2, #0
  401486:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401488:	6878      	ldr	r0, [r7, #4]
  40148a:	4b0a      	ldr	r3, [pc, #40]	; (4014b4 <usart_reset+0x4c>)
  40148c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40148e:	6878      	ldr	r0, [r7, #4]
  401490:	4b09      	ldr	r3, [pc, #36]	; (4014b8 <usart_reset+0x50>)
  401492:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401494:	6878      	ldr	r0, [r7, #4]
  401496:	4b09      	ldr	r3, [pc, #36]	; (4014bc <usart_reset+0x54>)
  401498:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40149a:	6878      	ldr	r0, [r7, #4]
  40149c:	4b08      	ldr	r3, [pc, #32]	; (4014c0 <usart_reset+0x58>)
  40149e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  4014a0:	6878      	ldr	r0, [r7, #4]
  4014a2:	4b08      	ldr	r3, [pc, #32]	; (4014c4 <usart_reset+0x5c>)
  4014a4:	4798      	blx	r3
#endif
}
  4014a6:	bf00      	nop
  4014a8:	3708      	adds	r7, #8
  4014aa:	46bd      	mov	sp, r7
  4014ac:	bd80      	pop	{r7, pc}
  4014ae:	bf00      	nop
  4014b0:	00401719 	.word	0x00401719
  4014b4:	004015a5 	.word	0x004015a5
  4014b8:	004015d5 	.word	0x004015d5
  4014bc:	00401637 	.word	0x00401637
  4014c0:	0040166b 	.word	0x0040166b
  4014c4:	00401651 	.word	0x00401651

004014c8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4014c8:	b580      	push	{r7, lr}
  4014ca:	b084      	sub	sp, #16
  4014cc:	af00      	add	r7, sp, #0
  4014ce:	60f8      	str	r0, [r7, #12]
  4014d0:	60b9      	str	r1, [r7, #8]
  4014d2:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4014d4:	68f8      	ldr	r0, [r7, #12]
  4014d6:	4b1a      	ldr	r3, [pc, #104]	; (401540 <usart_init_rs232+0x78>)
  4014d8:	4798      	blx	r3

	ul_reg_val = 0;
  4014da:	4b1a      	ldr	r3, [pc, #104]	; (401544 <usart_init_rs232+0x7c>)
  4014dc:	2200      	movs	r2, #0
  4014de:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4014e0:	68bb      	ldr	r3, [r7, #8]
  4014e2:	2b00      	cmp	r3, #0
  4014e4:	d009      	beq.n	4014fa <usart_init_rs232+0x32>
  4014e6:	68bb      	ldr	r3, [r7, #8]
  4014e8:	681b      	ldr	r3, [r3, #0]
  4014ea:	687a      	ldr	r2, [r7, #4]
  4014ec:	4619      	mov	r1, r3
  4014ee:	68f8      	ldr	r0, [r7, #12]
  4014f0:	4b15      	ldr	r3, [pc, #84]	; (401548 <usart_init_rs232+0x80>)
  4014f2:	4798      	blx	r3
  4014f4:	4603      	mov	r3, r0
  4014f6:	2b00      	cmp	r3, #0
  4014f8:	d001      	beq.n	4014fe <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4014fa:	2301      	movs	r3, #1
  4014fc:	e01b      	b.n	401536 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4014fe:	68bb      	ldr	r3, [r7, #8]
  401500:	685a      	ldr	r2, [r3, #4]
  401502:	68bb      	ldr	r3, [r7, #8]
  401504:	689b      	ldr	r3, [r3, #8]
  401506:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401508:	68bb      	ldr	r3, [r7, #8]
  40150a:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40150c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40150e:	68bb      	ldr	r3, [r7, #8]
  401510:	68db      	ldr	r3, [r3, #12]
  401512:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401514:	4b0b      	ldr	r3, [pc, #44]	; (401544 <usart_init_rs232+0x7c>)
  401516:	681b      	ldr	r3, [r3, #0]
  401518:	4313      	orrs	r3, r2
  40151a:	4a0a      	ldr	r2, [pc, #40]	; (401544 <usart_init_rs232+0x7c>)
  40151c:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40151e:	4b09      	ldr	r3, [pc, #36]	; (401544 <usart_init_rs232+0x7c>)
  401520:	681b      	ldr	r3, [r3, #0]
  401522:	4a08      	ldr	r2, [pc, #32]	; (401544 <usart_init_rs232+0x7c>)
  401524:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401526:	68fb      	ldr	r3, [r7, #12]
  401528:	685a      	ldr	r2, [r3, #4]
  40152a:	4b06      	ldr	r3, [pc, #24]	; (401544 <usart_init_rs232+0x7c>)
  40152c:	681b      	ldr	r3, [r3, #0]
  40152e:	431a      	orrs	r2, r3
  401530:	68fb      	ldr	r3, [r7, #12]
  401532:	605a      	str	r2, [r3, #4]

	return 0;
  401534:	2300      	movs	r3, #0
}
  401536:	4618      	mov	r0, r3
  401538:	3710      	adds	r7, #16
  40153a:	46bd      	mov	sp, r7
  40153c:	bd80      	pop	{r7, pc}
  40153e:	bf00      	nop
  401540:	00401469 	.word	0x00401469
  401544:	20000a50 	.word	0x20000a50
  401548:	004013e1 	.word	0x004013e1

0040154c <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  40154c:	b580      	push	{r7, lr}
  40154e:	b084      	sub	sp, #16
  401550:	af00      	add	r7, sp, #0
  401552:	60f8      	str	r0, [r7, #12]
  401554:	60b9      	str	r1, [r7, #8]
  401556:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  401558:	687a      	ldr	r2, [r7, #4]
  40155a:	68b9      	ldr	r1, [r7, #8]
  40155c:	68f8      	ldr	r0, [r7, #12]
  40155e:	4b0a      	ldr	r3, [pc, #40]	; (401588 <usart_init_hw_handshaking+0x3c>)
  401560:	4798      	blx	r3
  401562:	4603      	mov	r3, r0
  401564:	2b00      	cmp	r3, #0
  401566:	d001      	beq.n	40156c <usart_init_hw_handshaking+0x20>
		return 1;
  401568:	2301      	movs	r3, #1
  40156a:	e008      	b.n	40157e <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  40156c:	68fb      	ldr	r3, [r7, #12]
  40156e:	685b      	ldr	r3, [r3, #4]
  401570:	f023 030f 	bic.w	r3, r3, #15
  401574:	f043 0202 	orr.w	r2, r3, #2
  401578:	68fb      	ldr	r3, [r7, #12]
  40157a:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  40157c:	2300      	movs	r3, #0
}
  40157e:	4618      	mov	r0, r3
  401580:	3710      	adds	r7, #16
  401582:	46bd      	mov	sp, r7
  401584:	bd80      	pop	{r7, pc}
  401586:	bf00      	nop
  401588:	004014c9 	.word	0x004014c9

0040158c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  40158c:	b480      	push	{r7}
  40158e:	b083      	sub	sp, #12
  401590:	af00      	add	r7, sp, #0
  401592:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401594:	687b      	ldr	r3, [r7, #4]
  401596:	2240      	movs	r2, #64	; 0x40
  401598:	601a      	str	r2, [r3, #0]
}
  40159a:	bf00      	nop
  40159c:	370c      	adds	r7, #12
  40159e:	46bd      	mov	sp, r7
  4015a0:	bc80      	pop	{r7}
  4015a2:	4770      	bx	lr

004015a4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4015a4:	b480      	push	{r7}
  4015a6:	b083      	sub	sp, #12
  4015a8:	af00      	add	r7, sp, #0
  4015aa:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4015ac:	687b      	ldr	r3, [r7, #4]
  4015ae:	2288      	movs	r2, #136	; 0x88
  4015b0:	601a      	str	r2, [r3, #0]
}
  4015b2:	bf00      	nop
  4015b4:	370c      	adds	r7, #12
  4015b6:	46bd      	mov	sp, r7
  4015b8:	bc80      	pop	{r7}
  4015ba:	4770      	bx	lr

004015bc <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4015bc:	b480      	push	{r7}
  4015be:	b083      	sub	sp, #12
  4015c0:	af00      	add	r7, sp, #0
  4015c2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4015c4:	687b      	ldr	r3, [r7, #4]
  4015c6:	2210      	movs	r2, #16
  4015c8:	601a      	str	r2, [r3, #0]
}
  4015ca:	bf00      	nop
  4015cc:	370c      	adds	r7, #12
  4015ce:	46bd      	mov	sp, r7
  4015d0:	bc80      	pop	{r7}
  4015d2:	4770      	bx	lr

004015d4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4015d4:	b480      	push	{r7}
  4015d6:	b083      	sub	sp, #12
  4015d8:	af00      	add	r7, sp, #0
  4015da:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4015dc:	687b      	ldr	r3, [r7, #4]
  4015de:	2224      	movs	r2, #36	; 0x24
  4015e0:	601a      	str	r2, [r3, #0]
}
  4015e2:	bf00      	nop
  4015e4:	370c      	adds	r7, #12
  4015e6:	46bd      	mov	sp, r7
  4015e8:	bc80      	pop	{r7}
  4015ea:	4770      	bx	lr

004015ec <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4015ec:	b480      	push	{r7}
  4015ee:	b083      	sub	sp, #12
  4015f0:	af00      	add	r7, sp, #0
  4015f2:	6078      	str	r0, [r7, #4]
  4015f4:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4015f6:	687b      	ldr	r3, [r7, #4]
  4015f8:	683a      	ldr	r2, [r7, #0]
  4015fa:	609a      	str	r2, [r3, #8]
}
  4015fc:	bf00      	nop
  4015fe:	370c      	adds	r7, #12
  401600:	46bd      	mov	sp, r7
  401602:	bc80      	pop	{r7}
  401604:	4770      	bx	lr

00401606 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  401606:	b480      	push	{r7}
  401608:	b083      	sub	sp, #12
  40160a:	af00      	add	r7, sp, #0
  40160c:	6078      	str	r0, [r7, #4]
  40160e:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  401610:	687b      	ldr	r3, [r7, #4]
  401612:	683a      	ldr	r2, [r7, #0]
  401614:	60da      	str	r2, [r3, #12]
}
  401616:	bf00      	nop
  401618:	370c      	adds	r7, #12
  40161a:	46bd      	mov	sp, r7
  40161c:	bc80      	pop	{r7}
  40161e:	4770      	bx	lr

00401620 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  401620:	b480      	push	{r7}
  401622:	b083      	sub	sp, #12
  401624:	af00      	add	r7, sp, #0
  401626:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  401628:	687b      	ldr	r3, [r7, #4]
  40162a:	695b      	ldr	r3, [r3, #20]
}
  40162c:	4618      	mov	r0, r3
  40162e:	370c      	adds	r7, #12
  401630:	46bd      	mov	sp, r7
  401632:	bc80      	pop	{r7}
  401634:	4770      	bx	lr

00401636 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401636:	b480      	push	{r7}
  401638:	b083      	sub	sp, #12
  40163a:	af00      	add	r7, sp, #0
  40163c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40163e:	687b      	ldr	r3, [r7, #4]
  401640:	f44f 7280 	mov.w	r2, #256	; 0x100
  401644:	601a      	str	r2, [r3, #0]
}
  401646:	bf00      	nop
  401648:	370c      	adds	r7, #12
  40164a:	46bd      	mov	sp, r7
  40164c:	bc80      	pop	{r7}
  40164e:	4770      	bx	lr

00401650 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  401650:	b480      	push	{r7}
  401652:	b083      	sub	sp, #12
  401654:	af00      	add	r7, sp, #0
  401656:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  401658:	687b      	ldr	r3, [r7, #4]
  40165a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40165e:	601a      	str	r2, [r3, #0]
}
  401660:	bf00      	nop
  401662:	370c      	adds	r7, #12
  401664:	46bd      	mov	sp, r7
  401666:	bc80      	pop	{r7}
  401668:	4770      	bx	lr

0040166a <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  40166a:	b480      	push	{r7}
  40166c:	b083      	sub	sp, #12
  40166e:	af00      	add	r7, sp, #0
  401670:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401672:	687b      	ldr	r3, [r7, #4]
  401674:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401678:	601a      	str	r2, [r3, #0]
}
  40167a:	bf00      	nop
  40167c:	370c      	adds	r7, #12
  40167e:	46bd      	mov	sp, r7
  401680:	bc80      	pop	{r7}
  401682:	4770      	bx	lr

00401684 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  401684:	b480      	push	{r7}
  401686:	b083      	sub	sp, #12
  401688:	af00      	add	r7, sp, #0
  40168a:	6078      	str	r0, [r7, #4]
  40168c:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40168e:	bf00      	nop
  401690:	687b      	ldr	r3, [r7, #4]
  401692:	695b      	ldr	r3, [r3, #20]
  401694:	f003 0302 	and.w	r3, r3, #2
  401698:	2b00      	cmp	r3, #0
  40169a:	d0f9      	beq.n	401690 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40169c:	683b      	ldr	r3, [r7, #0]
  40169e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4016a2:	687b      	ldr	r3, [r7, #4]
  4016a4:	61da      	str	r2, [r3, #28]

	return 0;
  4016a6:	2300      	movs	r3, #0
}
  4016a8:	4618      	mov	r0, r3
  4016aa:	370c      	adds	r7, #12
  4016ac:	46bd      	mov	sp, r7
  4016ae:	bc80      	pop	{r7}
  4016b0:	4770      	bx	lr
	...

004016b4 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  4016b4:	b580      	push	{r7, lr}
  4016b6:	b082      	sub	sp, #8
  4016b8:	af00      	add	r7, sp, #0
  4016ba:	6078      	str	r0, [r7, #4]
  4016bc:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  4016be:	e007      	b.n	4016d0 <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  4016c0:	683b      	ldr	r3, [r7, #0]
  4016c2:	1c5a      	adds	r2, r3, #1
  4016c4:	603a      	str	r2, [r7, #0]
  4016c6:	781b      	ldrb	r3, [r3, #0]
  4016c8:	4619      	mov	r1, r3
  4016ca:	6878      	ldr	r0, [r7, #4]
  4016cc:	4b04      	ldr	r3, [pc, #16]	; (4016e0 <usart_write_line+0x2c>)
  4016ce:	4798      	blx	r3
	while (*string != '\0') {
  4016d0:	683b      	ldr	r3, [r7, #0]
  4016d2:	781b      	ldrb	r3, [r3, #0]
  4016d4:	2b00      	cmp	r3, #0
  4016d6:	d1f3      	bne.n	4016c0 <usart_write_line+0xc>
	}
}
  4016d8:	bf00      	nop
  4016da:	3708      	adds	r7, #8
  4016dc:	46bd      	mov	sp, r7
  4016de:	bd80      	pop	{r7, pc}
  4016e0:	00401685 	.word	0x00401685

004016e4 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4016e4:	b480      	push	{r7}
  4016e6:	b083      	sub	sp, #12
  4016e8:	af00      	add	r7, sp, #0
  4016ea:	6078      	str	r0, [r7, #4]
  4016ec:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4016ee:	687b      	ldr	r3, [r7, #4]
  4016f0:	695b      	ldr	r3, [r3, #20]
  4016f2:	f003 0301 	and.w	r3, r3, #1
  4016f6:	2b00      	cmp	r3, #0
  4016f8:	d101      	bne.n	4016fe <usart_read+0x1a>
		return 1;
  4016fa:	2301      	movs	r3, #1
  4016fc:	e006      	b.n	40170c <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4016fe:	687b      	ldr	r3, [r7, #4]
  401700:	699b      	ldr	r3, [r3, #24]
  401702:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401706:	683b      	ldr	r3, [r7, #0]
  401708:	601a      	str	r2, [r3, #0]

	return 0;
  40170a:	2300      	movs	r3, #0
}
  40170c:	4618      	mov	r0, r3
  40170e:	370c      	adds	r7, #12
  401710:	46bd      	mov	sp, r7
  401712:	bc80      	pop	{r7}
  401714:	4770      	bx	lr
	...

00401718 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401718:	b480      	push	{r7}
  40171a:	b083      	sub	sp, #12
  40171c:	af00      	add	r7, sp, #0
  40171e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401720:	687b      	ldr	r3, [r7, #4]
  401722:	4a04      	ldr	r2, [pc, #16]	; (401734 <usart_disable_writeprotect+0x1c>)
  401724:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401728:	bf00      	nop
  40172a:	370c      	adds	r7, #12
  40172c:	46bd      	mov	sp, r7
  40172e:	bc80      	pop	{r7}
  401730:	4770      	bx	lr
  401732:	bf00      	nop
  401734:	55534100 	.word	0x55534100

00401738 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  401738:	b480      	push	{r7}
  40173a:	b083      	sub	sp, #12
  40173c:	af00      	add	r7, sp, #0
  40173e:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401740:	687b      	ldr	r3, [r7, #4]
  401742:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401746:	605a      	str	r2, [r3, #4]

}
  401748:	bf00      	nop
  40174a:	370c      	adds	r7, #12
  40174c:	46bd      	mov	sp, r7
  40174e:	bc80      	pop	{r7}
  401750:	4770      	bx	lr
	...

00401754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401754:	b480      	push	{r7}
  401756:	b083      	sub	sp, #12
  401758:	af00      	add	r7, sp, #0
  40175a:	4603      	mov	r3, r0
  40175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401762:	2b00      	cmp	r3, #0
  401764:	db0b      	blt.n	40177e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401766:	4908      	ldr	r1, [pc, #32]	; (401788 <__NVIC_EnableIRQ+0x34>)
  401768:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40176c:	095b      	lsrs	r3, r3, #5
  40176e:	79fa      	ldrb	r2, [r7, #7]
  401770:	f002 021f 	and.w	r2, r2, #31
  401774:	2001      	movs	r0, #1
  401776:	fa00 f202 	lsl.w	r2, r0, r2
  40177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  40177e:	bf00      	nop
  401780:	370c      	adds	r7, #12
  401782:	46bd      	mov	sp, r7
  401784:	bc80      	pop	{r7}
  401786:	4770      	bx	lr
  401788:	e000e100 	.word	0xe000e100

0040178c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  40178c:	b480      	push	{r7}
  40178e:	b083      	sub	sp, #12
  401790:	af00      	add	r7, sp, #0
  401792:	4603      	mov	r3, r0
  401794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  401796:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40179a:	2b00      	cmp	r3, #0
  40179c:	db10      	blt.n	4017c0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40179e:	490b      	ldr	r1, [pc, #44]	; (4017cc <__NVIC_DisableIRQ+0x40>)
  4017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017a4:	095b      	lsrs	r3, r3, #5
  4017a6:	79fa      	ldrb	r2, [r7, #7]
  4017a8:	f002 021f 	and.w	r2, r2, #31
  4017ac:	2001      	movs	r0, #1
  4017ae:	fa00 f202 	lsl.w	r2, r0, r2
  4017b2:	3320      	adds	r3, #32
  4017b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4017b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4017bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
  4017c0:	bf00      	nop
  4017c2:	370c      	adds	r7, #12
  4017c4:	46bd      	mov	sp, r7
  4017c6:	bc80      	pop	{r7}
  4017c8:	4770      	bx	lr
  4017ca:	bf00      	nop
  4017cc:	e000e100 	.word	0xe000e100

004017d0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4017d0:	b480      	push	{r7}
  4017d2:	b083      	sub	sp, #12
  4017d4:	af00      	add	r7, sp, #0
  4017d6:	4603      	mov	r3, r0
  4017d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017de:	2b00      	cmp	r3, #0
  4017e0:	db0c      	blt.n	4017fc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4017e2:	4909      	ldr	r1, [pc, #36]	; (401808 <__NVIC_ClearPendingIRQ+0x38>)
  4017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017e8:	095b      	lsrs	r3, r3, #5
  4017ea:	79fa      	ldrb	r2, [r7, #7]
  4017ec:	f002 021f 	and.w	r2, r2, #31
  4017f0:	2001      	movs	r0, #1
  4017f2:	fa00 f202 	lsl.w	r2, r0, r2
  4017f6:	3360      	adds	r3, #96	; 0x60
  4017f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  4017fc:	bf00      	nop
  4017fe:	370c      	adds	r7, #12
  401800:	46bd      	mov	sp, r7
  401802:	bc80      	pop	{r7}
  401804:	4770      	bx	lr
  401806:	bf00      	nop
  401808:	e000e100 	.word	0xe000e100

0040180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40180c:	b480      	push	{r7}
  40180e:	b083      	sub	sp, #12
  401810:	af00      	add	r7, sp, #0
  401812:	4603      	mov	r3, r0
  401814:	6039      	str	r1, [r7, #0]
  401816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  401818:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40181c:	2b00      	cmp	r3, #0
  40181e:	db0a      	blt.n	401836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401820:	490d      	ldr	r1, [pc, #52]	; (401858 <__NVIC_SetPriority+0x4c>)
  401822:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401826:	683a      	ldr	r2, [r7, #0]
  401828:	b2d2      	uxtb	r2, r2
  40182a:	0112      	lsls	r2, r2, #4
  40182c:	b2d2      	uxtb	r2, r2
  40182e:	440b      	add	r3, r1
  401830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
  401834:	e00a      	b.n	40184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401836:	4909      	ldr	r1, [pc, #36]	; (40185c <__NVIC_SetPriority+0x50>)
  401838:	79fb      	ldrb	r3, [r7, #7]
  40183a:	f003 030f 	and.w	r3, r3, #15
  40183e:	3b04      	subs	r3, #4
  401840:	683a      	ldr	r2, [r7, #0]
  401842:	b2d2      	uxtb	r2, r2
  401844:	0112      	lsls	r2, r2, #4
  401846:	b2d2      	uxtb	r2, r2
  401848:	440b      	add	r3, r1
  40184a:	761a      	strb	r2, [r3, #24]
}
  40184c:	bf00      	nop
  40184e:	370c      	adds	r7, #12
  401850:	46bd      	mov	sp, r7
  401852:	bc80      	pop	{r7}
  401854:	4770      	bx	lr
  401856:	bf00      	nop
  401858:	e000e100 	.word	0xe000e100
  40185c:	e000ed00 	.word	0xe000ed00

00401860 <osc_get_rate>:
{
  401860:	b480      	push	{r7}
  401862:	b083      	sub	sp, #12
  401864:	af00      	add	r7, sp, #0
  401866:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401868:	687b      	ldr	r3, [r7, #4]
  40186a:	2b07      	cmp	r3, #7
  40186c:	d825      	bhi.n	4018ba <osc_get_rate+0x5a>
  40186e:	a201      	add	r2, pc, #4	; (adr r2, 401874 <osc_get_rate+0x14>)
  401870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401874:	00401895 	.word	0x00401895
  401878:	0040189b 	.word	0x0040189b
  40187c:	004018a1 	.word	0x004018a1
  401880:	004018a7 	.word	0x004018a7
  401884:	004018ab 	.word	0x004018ab
  401888:	004018af 	.word	0x004018af
  40188c:	004018b3 	.word	0x004018b3
  401890:	004018b7 	.word	0x004018b7
		return OSC_SLCK_32K_RC_HZ;
  401894:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401898:	e010      	b.n	4018bc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40189a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40189e:	e00d      	b.n	4018bc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4018a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4018a4:	e00a      	b.n	4018bc <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4018a6:	4b08      	ldr	r3, [pc, #32]	; (4018c8 <osc_get_rate+0x68>)
  4018a8:	e008      	b.n	4018bc <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4018aa:	4b08      	ldr	r3, [pc, #32]	; (4018cc <osc_get_rate+0x6c>)
  4018ac:	e006      	b.n	4018bc <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4018ae:	4b08      	ldr	r3, [pc, #32]	; (4018d0 <osc_get_rate+0x70>)
  4018b0:	e004      	b.n	4018bc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4018b2:	4b07      	ldr	r3, [pc, #28]	; (4018d0 <osc_get_rate+0x70>)
  4018b4:	e002      	b.n	4018bc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4018b6:	4b06      	ldr	r3, [pc, #24]	; (4018d0 <osc_get_rate+0x70>)
  4018b8:	e000      	b.n	4018bc <osc_get_rate+0x5c>
	return 0;
  4018ba:	2300      	movs	r3, #0
}
  4018bc:	4618      	mov	r0, r3
  4018be:	370c      	adds	r7, #12
  4018c0:	46bd      	mov	sp, r7
  4018c2:	bc80      	pop	{r7}
  4018c4:	4770      	bx	lr
  4018c6:	bf00      	nop
  4018c8:	003d0900 	.word	0x003d0900
  4018cc:	007a1200 	.word	0x007a1200
  4018d0:	00b71b00 	.word	0x00b71b00

004018d4 <sysclk_get_main_hz>:
{
  4018d4:	b580      	push	{r7, lr}
  4018d6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4018d8:	2006      	movs	r0, #6
  4018da:	4b04      	ldr	r3, [pc, #16]	; (4018ec <sysclk_get_main_hz+0x18>)
  4018dc:	4798      	blx	r3
  4018de:	4602      	mov	r2, r0
  4018e0:	4613      	mov	r3, r2
  4018e2:	009b      	lsls	r3, r3, #2
  4018e4:	4413      	add	r3, r2
  4018e6:	009b      	lsls	r3, r3, #2
}
  4018e8:	4618      	mov	r0, r3
  4018ea:	bd80      	pop	{r7, pc}
  4018ec:	00401861 	.word	0x00401861

004018f0 <sysclk_get_cpu_hz>:
{
  4018f0:	b580      	push	{r7, lr}
  4018f2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4018f4:	4b02      	ldr	r3, [pc, #8]	; (401900 <sysclk_get_cpu_hz+0x10>)
  4018f6:	4798      	blx	r3
  4018f8:	4603      	mov	r3, r0
  4018fa:	085b      	lsrs	r3, r3, #1
}
  4018fc:	4618      	mov	r0, r3
  4018fe:	bd80      	pop	{r7, pc}
  401900:	004018d5 	.word	0x004018d5

00401904 <vsync_handler>:
#include "ov2640.h"

static volatile uint32_t g_ul_vsync_flag = false;

void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
  401904:	b480      	push	{r7}
  401906:	b083      	sub	sp, #12
  401908:	af00      	add	r7, sp, #0
  40190a:	6078      	str	r0, [r7, #4]
  40190c:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	g_ul_vsync_flag = true;
  40190e:	4b04      	ldr	r3, [pc, #16]	; (401920 <vsync_handler+0x1c>)
  401910:	2201      	movs	r2, #1
  401912:	601a      	str	r2, [r3, #0]
}
  401914:	bf00      	nop
  401916:	370c      	adds	r7, #12
  401918:	46bd      	mov	sp, r7
  40191a:	bc80      	pop	{r7}
  40191c:	4770      	bx	lr
  40191e:	bf00      	nop
  401920:	20000a54 	.word	0x20000a54

00401924 <init_vsync_interrupts>:

void init_vsync_interrupts(void)
{
  401924:	b590      	push	{r4, r7, lr}
  401926:	b083      	sub	sp, #12
  401928:	af02      	add	r7, sp, #8
	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(OV2640_VSYNC_PIO, OV2640_VSYNC_ID, OV2640_VSYNC_MASK,
  40192a:	4b0a      	ldr	r3, [pc, #40]	; (401954 <init_vsync_interrupts+0x30>)
  40192c:	9300      	str	r3, [sp, #0]
  40192e:	2301      	movs	r3, #1
  401930:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401934:	210b      	movs	r1, #11
  401936:	4808      	ldr	r0, [pc, #32]	; (401958 <init_vsync_interrupts+0x34>)
  401938:	4c08      	ldr	r4, [pc, #32]	; (40195c <init_vsync_interrupts+0x38>)
  40193a:	47a0      	blx	r4
			OV2640_VSYNC_TYPE, vsync_handler);

	/* Enable PIO controller IRQs */
	NVIC_EnableIRQ((IRQn_Type)OV2640_VSYNC_ID);
  40193c:	200b      	movs	r0, #11
  40193e:	4b08      	ldr	r3, [pc, #32]	; (401960 <init_vsync_interrupts+0x3c>)
  401940:	4798      	blx	r3
	
	pio_enable_interrupt(OV2640_VSYNC_PIO, OV2640_VSYNC_MASK);
  401942:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401946:	4804      	ldr	r0, [pc, #16]	; (401958 <init_vsync_interrupts+0x34>)
  401948:	4b06      	ldr	r3, [pc, #24]	; (401964 <init_vsync_interrupts+0x40>)
  40194a:	4798      	blx	r3
}
  40194c:	bf00      	nop
  40194e:	3704      	adds	r7, #4
  401950:	46bd      	mov	sp, r7
  401952:	bd90      	pop	{r4, r7, pc}
  401954:	00401905 	.word	0x00401905
  401958:	400e0e00 	.word	0x400e0e00
  40195c:	00400ab1 	.word	0x00400ab1
  401960:	00401755 	.word	0x00401755
  401964:	0040074f 	.word	0x0040074f

00401968 <configure_twi>:

void configure_twi(void)
{
  401968:	b580      	push	{r7, lr}
  40196a:	b084      	sub	sp, #16
  40196c:	af00      	add	r7, sp, #0
	twi_options_t opt;
	
	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);
  40196e:	2013      	movs	r0, #19
  401970:	4b13      	ldr	r3, [pc, #76]	; (4019c0 <configure_twi+0x58>)
  401972:	4798      	blx	r3

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  401974:	4b13      	ldr	r3, [pc, #76]	; (4019c4 <configure_twi+0x5c>)
  401976:	4798      	blx	r3
  401978:	4603      	mov	r3, r0
  40197a:	607b      	str	r3, [r7, #4]
	opt.speed      = TWI_CLK;
  40197c:	4b12      	ldr	r3, [pc, #72]	; (4019c8 <configure_twi+0x60>)
  40197e:	60bb      	str	r3, [r7, #8]
	twi_master_init(BOARD_TWI, &opt);
  401980:	1d3b      	adds	r3, r7, #4
  401982:	4619      	mov	r1, r3
  401984:	4811      	ldr	r0, [pc, #68]	; (4019cc <configure_twi+0x64>)
  401986:	4b12      	ldr	r3, [pc, #72]	; (4019d0 <configure_twi+0x68>)
  401988:	4798      	blx	r3

	/* Configure TWI interrupts */
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
  40198a:	2013      	movs	r0, #19
  40198c:	4b11      	ldr	r3, [pc, #68]	; (4019d4 <configure_twi+0x6c>)
  40198e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
  401990:	2013      	movs	r0, #19
  401992:	4b11      	ldr	r3, [pc, #68]	; (4019d8 <configure_twi+0x70>)
  401994:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
  401996:	2100      	movs	r1, #0
  401998:	2013      	movs	r0, #19
  40199a:	4b10      	ldr	r3, [pc, #64]	; (4019dc <configure_twi+0x74>)
  40199c:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
  40199e:	2013      	movs	r0, #19
  4019a0:	4b0f      	ldr	r3, [pc, #60]	; (4019e0 <configure_twi+0x78>)
  4019a2:	4798      	blx	r3
	
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4019a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019a8:	2003      	movs	r0, #3
  4019aa:	4b0e      	ldr	r3, [pc, #56]	; (4019e4 <configure_twi+0x7c>)
  4019ac:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4019ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019b2:	2004      	movs	r0, #4
  4019b4:	4b0b      	ldr	r3, [pc, #44]	; (4019e4 <configure_twi+0x7c>)
  4019b6:	4798      	blx	r3
	
}
  4019b8:	bf00      	nop
  4019ba:	3710      	adds	r7, #16
  4019bc:	46bd      	mov	sp, r7
  4019be:	bd80      	pop	{r7, pc}
  4019c0:	00400e1d 	.word	0x00400e1d
  4019c4:	004018f1 	.word	0x004018f1
  4019c8:	00061a80 	.word	0x00061a80
  4019cc:	40018000 	.word	0x40018000
  4019d0:	00401029 	.word	0x00401029
  4019d4:	0040178d 	.word	0x0040178d
  4019d8:	004017d1 	.word	0x004017d1
  4019dc:	0040180d 	.word	0x0040180d
  4019e0:	00401755 	.word	0x00401755
  4019e4:	004007b1 	.word	0x004007b1

004019e8 <pio_capture_init>:



void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
  4019e8:	b580      	push	{r7, lr}
  4019ea:	b082      	sub	sp, #8
  4019ec:	af00      	add	r7, sp, #0
  4019ee:	6078      	str	r0, [r7, #4]
  4019f0:	6039      	str	r1, [r7, #0]
	/* Enable peripheral clock */
	pmc_enable_periph_clk(ul_id);
  4019f2:	6838      	ldr	r0, [r7, #0]
  4019f4:	4b1a      	ldr	r3, [pc, #104]	; (401a60 <pio_capture_init+0x78>)
  4019f6:	4798      	blx	r3

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  4019f8:	687b      	ldr	r3, [r7, #4]
  4019fa:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4019fe:	f023 0201 	bic.w	r2, r3, #1
  401a02:	687b      	ldr	r3, [r7, #4]
  401a04:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  401a08:	687b      	ldr	r3, [r7, #4]
  401a0a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
  401a0e:	f043 0208 	orr.w	r2, r3, #8
  401a12:	687b      	ldr	r3, [r7, #4]
  401a14:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  401a18:	687b      	ldr	r3, [r7, #4]
  401a1a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401a1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
  401a22:	687b      	ldr	r3, [r7, #4]
  401a24:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  401a28:	687b      	ldr	r3, [r7, #4]
  401a2a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401a2e:	f043 0220 	orr.w	r2, r3, #32
  401a32:	687b      	ldr	r3, [r7, #4]
  401a34:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  401a38:	687b      	ldr	r3, [r7, #4]
  401a3a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401a3e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
  401a42:	687b      	ldr	r3, [r7, #4]
  401a44:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  401a48:	687b      	ldr	r3, [r7, #4]
  401a4a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401a4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  401a52:	687b      	ldr	r3, [r7, #4]
  401a54:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150



}
  401a58:	bf00      	nop
  401a5a:	3708      	adds	r7, #8
  401a5c:	46bd      	mov	sp, r7
  401a5e:	bd80      	pop	{r7, pc}
  401a60:	00400e1d 	.word	0x00400e1d

00401a64 <pio_capture_to_buffer>:

static uint8_t pio_capture_to_buffer(Pio *p_pio, uint8_t *uc_buf,
uint32_t ul_size)
{
  401a64:	b480      	push	{r7}
  401a66:	b085      	sub	sp, #20
  401a68:	af00      	add	r7, sp, #0
  401a6a:	60f8      	str	r0, [r7, #12]
  401a6c:	60b9      	str	r1, [r7, #8]
  401a6e:	607a      	str	r2, [r7, #4]
	/* Check if the first PDC bank is free */
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) {
  401a70:	68fb      	ldr	r3, [r7, #12]
  401a72:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
  401a76:	2b00      	cmp	r3, #0
  401a78:	d112      	bne.n	401aa0 <pio_capture_to_buffer+0x3c>
  401a7a:	68fb      	ldr	r3, [r7, #12]
  401a7c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  401a80:	2b00      	cmp	r3, #0
  401a82:	d10d      	bne.n	401aa0 <pio_capture_to_buffer+0x3c>
		p_pio->PIO_RPR = (uint32_t)uc_buf;
  401a84:	68ba      	ldr	r2, [r7, #8]
  401a86:	68fb      	ldr	r3, [r7, #12]
  401a88:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		p_pio->PIO_RCR = ul_size;
  401a8c:	68fb      	ldr	r3, [r7, #12]
  401a8e:	687a      	ldr	r2, [r7, #4]
  401a90:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
		p_pio->PIO_PTCR = PIO_PTCR_RXTEN;
  401a94:	68fb      	ldr	r3, [r7, #12]
  401a96:	2201      	movs	r2, #1
  401a98:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		return 1;
  401a9c:	2301      	movs	r3, #1
  401a9e:	e00f      	b.n	401ac0 <pio_capture_to_buffer+0x5c>
		} else if (p_pio->PIO_RNCR == 0) {
  401aa0:	68fb      	ldr	r3, [r7, #12]
  401aa2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  401aa6:	2b00      	cmp	r3, #0
  401aa8:	d109      	bne.n	401abe <pio_capture_to_buffer+0x5a>
		p_pio->PIO_RNPR = (uint32_t)uc_buf;
  401aaa:	68ba      	ldr	r2, [r7, #8]
  401aac:	68fb      	ldr	r3, [r7, #12]
  401aae:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		p_pio->PIO_RNCR = ul_size;
  401ab2:	68fb      	ldr	r3, [r7, #12]
  401ab4:	687a      	ldr	r2, [r7, #4]
  401ab6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
		return 1;
  401aba:	2301      	movs	r3, #1
  401abc:	e000      	b.n	401ac0 <pio_capture_to_buffer+0x5c>
		} else {
		return 0;
  401abe:	2300      	movs	r3, #0
	}
}
  401ac0:	4618      	mov	r0, r3
  401ac2:	3714      	adds	r7, #20
  401ac4:	46bd      	mov	sp, r7
  401ac6:	bc80      	pop	{r7}
  401ac8:	4770      	bx	lr
	...

00401acc <init_camera>:


void init_camera(void)
{
  401acc:	b580      	push	{r7, lr}
  401ace:	af00      	add	r7, sp, #0
	
	pmc_enable_pllbck(7, 0x1, 1);
  401ad0:	2201      	movs	r2, #1
  401ad2:	2101      	movs	r1, #1
  401ad4:	2007      	movs	r0, #7
  401ad6:	4b26      	ldr	r3, [pc, #152]	; (401b70 <init_camera+0xa4>)
  401ad8:	4798      	blx	r3
	
	pio_capture_init(OV_DATA_BUS_PIO, OV_DATA_BUS_ID);
  401ada:	210b      	movs	r1, #11
  401adc:	4825      	ldr	r0, [pc, #148]	; (401b74 <init_camera+0xa8>)
  401ade:	4b26      	ldr	r3, [pc, #152]	; (401b78 <init_camera+0xac>)
  401ae0:	4798      	blx	r3
	
	init_vsync_interrupts();
  401ae2:	4b26      	ldr	r3, [pc, #152]	; (401b7c <init_camera+0xb0>)
  401ae4:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  401ae6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401aea:	2011      	movs	r0, #17
  401aec:	4b24      	ldr	r3, [pc, #144]	; (401b80 <init_camera+0xb4>)
  401aee:	4798      	blx	r3
	
	/* Init PCK1 to work at 24 Mhz */
	/* 96/4=24 Mhz */
	PMC->PMC_PCK[1] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLB_CLK);
  401af0:	4b24      	ldr	r3, [pc, #144]	; (401b84 <init_camera+0xb8>)
  401af2:	2223      	movs	r2, #35	; 0x23
  401af4:	645a      	str	r2, [r3, #68]	; 0x44
	PMC->PMC_SCER = PMC_SCER_PCK1;
  401af6:	4b23      	ldr	r3, [pc, #140]	; (401b84 <init_camera+0xb8>)
  401af8:	f44f 7200 	mov.w	r2, #512	; 0x200
  401afc:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK1)) {
  401afe:	bf00      	nop
  401b00:	4b20      	ldr	r3, [pc, #128]	; (401b84 <init_camera+0xb8>)
  401b02:	689b      	ldr	r3, [r3, #8]
  401b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
  401b08:	2b00      	cmp	r3, #0
  401b0a:	d0f9      	beq.n	401b00 <init_camera+0x34>
	}
	
	configure_twi();	
  401b0c:	4b1e      	ldr	r3, [pc, #120]	; (401b88 <init_camera+0xbc>)
  401b0e:	4798      	blx	r3
	
	
	gpio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
  401b10:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401b14:	2014      	movs	r0, #20
  401b16:	4b1a      	ldr	r3, [pc, #104]	; (401b80 <init_camera+0xb4>)
  401b18:	4798      	blx	r3
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  401b1a:	2171      	movs	r1, #113	; 0x71
  401b1c:	2010      	movs	r0, #16
  401b1e:	4b18      	ldr	r3, [pc, #96]	; (401b80 <init_camera+0xb4>)
  401b20:	4798      	blx	r3
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  401b22:	2171      	movs	r1, #113	; 0x71
  401b24:	200f      	movs	r0, #15
  401b26:	4b16      	ldr	r3, [pc, #88]	; (401b80 <init_camera+0xb4>)
  401b28:	4798      	blx	r3
	
	gpio_configure_pin(OV_DATA_BUS_D0, OV_DATA_BUS_FLAGS);
  401b2a:	4918      	ldr	r1, [pc, #96]	; (401b8c <init_camera+0xc0>)
  401b2c:	2018      	movs	r0, #24
  401b2e:	4b14      	ldr	r3, [pc, #80]	; (401b80 <init_camera+0xb4>)
  401b30:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D1, OV_DATA_BUS_FLAGS);
  401b32:	4916      	ldr	r1, [pc, #88]	; (401b8c <init_camera+0xc0>)
  401b34:	2019      	movs	r0, #25
  401b36:	4b12      	ldr	r3, [pc, #72]	; (401b80 <init_camera+0xb4>)
  401b38:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  401b3a:	4914      	ldr	r1, [pc, #80]	; (401b8c <init_camera+0xc0>)
  401b3c:	201a      	movs	r0, #26
  401b3e:	4b10      	ldr	r3, [pc, #64]	; (401b80 <init_camera+0xb4>)
  401b40:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  401b42:	4912      	ldr	r1, [pc, #72]	; (401b8c <init_camera+0xc0>)
  401b44:	201b      	movs	r0, #27
  401b46:	4b0e      	ldr	r3, [pc, #56]	; (401b80 <init_camera+0xb4>)
  401b48:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  401b4a:	4910      	ldr	r1, [pc, #64]	; (401b8c <init_camera+0xc0>)
  401b4c:	201c      	movs	r0, #28
  401b4e:	4b0c      	ldr	r3, [pc, #48]	; (401b80 <init_camera+0xb4>)
  401b50:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  401b52:	490e      	ldr	r1, [pc, #56]	; (401b8c <init_camera+0xc0>)
  401b54:	201d      	movs	r0, #29
  401b56:	4b0a      	ldr	r3, [pc, #40]	; (401b80 <init_camera+0xb4>)
  401b58:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  401b5a:	490c      	ldr	r1, [pc, #48]	; (401b8c <init_camera+0xc0>)
  401b5c:	201e      	movs	r0, #30
  401b5e:	4b08      	ldr	r3, [pc, #32]	; (401b80 <init_camera+0xb4>)
  401b60:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  401b62:	490a      	ldr	r1, [pc, #40]	; (401b8c <init_camera+0xc0>)
  401b64:	201f      	movs	r0, #31
  401b66:	4b06      	ldr	r3, [pc, #24]	; (401b80 <init_camera+0xb4>)
  401b68:	4798      	blx	r3


	/* Init PIO capture*/


}
  401b6a:	bf00      	nop
  401b6c:	bd80      	pop	{r7, pc}
  401b6e:	bf00      	nop
  401b70:	00400d9d 	.word	0x00400d9d
  401b74:	400e0e00 	.word	0x400e0e00
  401b78:	004019e9 	.word	0x004019e9
  401b7c:	00401925 	.word	0x00401925
  401b80:	004007b1 	.word	0x004007b1
  401b84:	400e0400 	.word	0x400e0400
  401b88:	00401969 	.word	0x00401969
  401b8c:	28000001 	.word	0x28000001

00401b90 <configure_camera>:

void configure_camera(void)
{
  401b90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b94:	af00      	add	r7, sp, #0
	/* ov7740 Initialization */
	while (ov_init(BOARD_TWI) == 1) {
  401b96:	bf00      	nop
  401b98:	482c      	ldr	r0, [pc, #176]	; (401c4c <configure_camera+0xbc>)
  401b9a:	4b2d      	ldr	r3, [pc, #180]	; (401c50 <configure_camera+0xc0>)
  401b9c:	4798      	blx	r3
  401b9e:	4603      	mov	r3, r0
  401ba0:	2b01      	cmp	r3, #1
  401ba2:	d0f9      	beq.n	401b98 <configure_camera+0x8>
	}

	/* ov7740 configuration */
	ov_configure(BOARD_TWI, JPEG_INIT);
  401ba4:	2100      	movs	r1, #0
  401ba6:	4829      	ldr	r0, [pc, #164]	; (401c4c <configure_camera+0xbc>)
  401ba8:	4b2a      	ldr	r3, [pc, #168]	; (401c54 <configure_camera+0xc4>)
  401baa:	4798      	blx	r3
	ov_configure(BOARD_TWI, YUV422);
  401bac:	2101      	movs	r1, #1
  401bae:	4827      	ldr	r0, [pc, #156]	; (401c4c <configure_camera+0xbc>)
  401bb0:	4b28      	ldr	r3, [pc, #160]	; (401c54 <configure_camera+0xc4>)
  401bb2:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG);
  401bb4:	2102      	movs	r1, #2
  401bb6:	4825      	ldr	r0, [pc, #148]	; (401c4c <configure_camera+0xbc>)
  401bb8:	4b26      	ldr	r3, [pc, #152]	; (401c54 <configure_camera+0xc4>)
  401bba:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG_640x480);
  401bbc:	2104      	movs	r1, #4
  401bbe:	4823      	ldr	r0, [pc, #140]	; (401c4c <configure_camera+0xbc>)
  401bc0:	4b24      	ldr	r3, [pc, #144]	; (401c54 <configure_camera+0xc4>)
  401bc2:	4798      	blx	r3

	/* Wait 3 seconds to let the image sensor to adapt to environment */
	delay_ms(3000);
  401bc4:	4b24      	ldr	r3, [pc, #144]	; (401c58 <configure_camera+0xc8>)
  401bc6:	4798      	blx	r3
  401bc8:	4603      	mov	r3, r0
  401bca:	4619      	mov	r1, r3
  401bcc:	f04f 0200 	mov.w	r2, #0
  401bd0:	460b      	mov	r3, r1
  401bd2:	4614      	mov	r4, r2
  401bd4:	18db      	adds	r3, r3, r3
  401bd6:	eb44 0404 	adc.w	r4, r4, r4
  401bda:	185b      	adds	r3, r3, r1
  401bdc:	eb44 0402 	adc.w	r4, r4, r2
  401be0:	ea4f 1b04 	mov.w	fp, r4, lsl #4
  401be4:	ea4b 7b13 	orr.w	fp, fp, r3, lsr #28
  401be8:	ea4f 1a03 	mov.w	sl, r3, lsl #4
  401bec:	4653      	mov	r3, sl
  401bee:	465c      	mov	r4, fp
  401bf0:	1a5b      	subs	r3, r3, r1
  401bf2:	eb64 0402 	sbc.w	r4, r4, r2
  401bf6:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  401bfa:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  401bfe:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  401c02:	4643      	mov	r3, r8
  401c04:	464c      	mov	r4, r9
  401c06:	1a5b      	subs	r3, r3, r1
  401c08:	eb64 0402 	sbc.w	r4, r4, r2
  401c0c:	00e6      	lsls	r6, r4, #3
  401c0e:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  401c12:	00dd      	lsls	r5, r3, #3
  401c14:	462b      	mov	r3, r5
  401c16:	4634      	mov	r4, r6
  401c18:	4619      	mov	r1, r3
  401c1a:	4622      	mov	r2, r4
  401c1c:	f243 63af 	movw	r3, #13999	; 0x36af
  401c20:	f04f 0400 	mov.w	r4, #0
  401c24:	18cd      	adds	r5, r1, r3
  401c26:	eb42 0604 	adc.w	r6, r2, r4
  401c2a:	4628      	mov	r0, r5
  401c2c:	4631      	mov	r1, r6
  401c2e:	4c0b      	ldr	r4, [pc, #44]	; (401c5c <configure_camera+0xcc>)
  401c30:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401c34:	f04f 0300 	mov.w	r3, #0
  401c38:	47a0      	blx	r4
  401c3a:	4603      	mov	r3, r0
  401c3c:	460c      	mov	r4, r1
  401c3e:	4618      	mov	r0, r3
  401c40:	4b07      	ldr	r3, [pc, #28]	; (401c60 <configure_camera+0xd0>)
  401c42:	4798      	blx	r3
}
  401c44:	bf00      	nop
  401c46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c4a:	bf00      	nop
  401c4c:	40018000 	.word	0x40018000
  401c50:	004020f1 	.word	0x004020f1
  401c54:	0040217d 	.word	0x0040217d
  401c58:	004018f1 	.word	0x004018f1
  401c5c:	00403509 	.word	0x00403509
  401c60:	20000001 	.word	0x20000001

00401c64 <start_capture>:


uint8_t start_capture(void)
{
  401c64:	b580      	push	{r7, lr}
  401c66:	b082      	sub	sp, #8
  401c68:	af00      	add	r7, sp, #0

	/* Enable vsync interrupt*/
	pio_enable_interrupt(OV2640_VSYNC_PIO, OV2640_VSYNC_MASK);
  401c6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401c6e:	4818      	ldr	r0, [pc, #96]	; (401cd0 <start_capture+0x6c>)
  401c70:	4b18      	ldr	r3, [pc, #96]	; (401cd4 <start_capture+0x70>)
  401c72:	4798      	blx	r3

	/* Capture acquisition will start on rising edge of Vsync signal.
	 * So wait g_vsync_flag = 1 before start process
	 */
	while (!g_ul_vsync_flag) {
  401c74:	bf00      	nop
  401c76:	4b18      	ldr	r3, [pc, #96]	; (401cd8 <start_capture+0x74>)
  401c78:	681b      	ldr	r3, [r3, #0]
  401c7a:	2b00      	cmp	r3, #0
  401c7c:	d0fb      	beq.n	401c76 <start_capture+0x12>
	}

	/* Disable vsync interrupt*/
	pio_disable_interrupt(OV2640_VSYNC_PIO, OV2640_VSYNC_MASK);
  401c7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401c82:	4813      	ldr	r0, [pc, #76]	; (401cd0 <start_capture+0x6c>)
  401c84:	4b15      	ldr	r3, [pc, #84]	; (401cdc <start_capture+0x78>)
  401c86:	4798      	blx	r3

	/* Enable pio capture*/
	pio_capture_enable(OV_DATA_BUS_PIO);
  401c88:	4811      	ldr	r0, [pc, #68]	; (401cd0 <start_capture+0x6c>)
  401c8a:	4b15      	ldr	r3, [pc, #84]	; (401ce0 <start_capture+0x7c>)
  401c8c:	4798      	blx	r3

	/* Capture data and send it to external SRAM memory thanks to PDC
	 * feature */
	pio_capture_to_buffer(OV_DATA_BUS_PIO, image_buffer,
  401c8e:	f243 02d4 	movw	r2, #12500	; 0x30d4
  401c92:	4914      	ldr	r1, [pc, #80]	; (401ce4 <start_capture+0x80>)
  401c94:	480e      	ldr	r0, [pc, #56]	; (401cd0 <start_capture+0x6c>)
  401c96:	4b14      	ldr	r3, [pc, #80]	; (401ce8 <start_capture+0x84>)
  401c98:	4798      	blx	r3
			IMAGE_MAX >> 2);


	/* Wait end of capture*/
	while (!((OV_DATA_BUS_PIO->PIO_PCISR & PIO_PCIMR_RXBUFF) ==
  401c9a:	bf00      	nop
  401c9c:	4b0c      	ldr	r3, [pc, #48]	; (401cd0 <start_capture+0x6c>)
  401c9e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
  401ca2:	f003 0308 	and.w	r3, r3, #8
  401ca6:	2b08      	cmp	r3, #8
  401ca8:	d1f8      	bne.n	401c9c <start_capture+0x38>
			PIO_PCIMR_RXBUFF)) {
	}

	/* Disable pio capture*/
	pio_capture_disable(OV_DATA_BUS_PIO);
  401caa:	4809      	ldr	r0, [pc, #36]	; (401cd0 <start_capture+0x6c>)
  401cac:	4b0f      	ldr	r3, [pc, #60]	; (401cec <start_capture+0x88>)
  401cae:	4798      	blx	r3
	
				
				
	vsync_flag = false;
  401cb0:	4b0f      	ldr	r3, [pc, #60]	; (401cf0 <start_capture+0x8c>)
  401cb2:	2200      	movs	r2, #0
  401cb4:	601a      	str	r2, [r3, #0]

	/* Reset vsync flag*/
	g_ul_vsync_flag = false;
  401cb6:	4b08      	ldr	r3, [pc, #32]	; (401cd8 <start_capture+0x74>)
  401cb8:	2200      	movs	r2, #0
  401cba:	601a      	str	r2, [r3, #0]
	
	uint8_t val = find_image_len();
  401cbc:	4b0d      	ldr	r3, [pc, #52]	; (401cf4 <start_capture+0x90>)
  401cbe:	4798      	blx	r3
  401cc0:	4603      	mov	r3, r0
  401cc2:	71fb      	strb	r3, [r7, #7]
	return val;
  401cc4:	79fb      	ldrb	r3, [r7, #7]
}
  401cc6:	4618      	mov	r0, r3
  401cc8:	3708      	adds	r7, #8
  401cca:	46bd      	mov	sp, r7
  401ccc:	bd80      	pop	{r7, pc}
  401cce:	bf00      	nop
  401cd0:	400e0e00 	.word	0x400e0e00
  401cd4:	0040074f 	.word	0x0040074f
  401cd8:	20000a54 	.word	0x20000a54
  401cdc:	00400769 	.word	0x00400769
  401ce0:	00400985 	.word	0x00400985
  401ce4:	20000ac4 	.word	0x20000ac4
  401ce8:	00401a65 	.word	0x00401a65
  401cec:	004009b1 	.word	0x004009b1
  401cf0:	20000abc 	.word	0x20000abc
  401cf4:	00401cf9 	.word	0x00401cf9

00401cf8 <find_image_len>:


uint8_t find_image_len(void){
  401cf8:	b480      	push	{r7}
  401cfa:	b083      	sub	sp, #12
  401cfc:	af00      	add	r7, sp, #0
		uint8_t start_exists = 0;
  401cfe:	2300      	movs	r3, #0
  401d00:	71fb      	strb	r3, [r7, #7]
		uint32_t arrSize = 0;
  401d02:	2300      	movs	r3, #0
  401d04:	603b      	str	r3, [r7, #0]
		start_of_image = 0;
  401d06:	4b21      	ldr	r3, [pc, #132]	; (401d8c <find_image_len+0x94>)
  401d08:	2200      	movs	r2, #0
  401d0a:	601a      	str	r2, [r3, #0]
		end_of_image = 0;
  401d0c:	4b20      	ldr	r3, [pc, #128]	; (401d90 <find_image_len+0x98>)
  401d0e:	2200      	movs	r2, #0
  401d10:	601a      	str	r2, [r3, #0]
		while( arrSize+1 < IMAGE_MAX){
  401d12:	e028      	b.n	401d66 <find_image_len+0x6e>
			if(image_buffer[arrSize] == 0xff && image_buffer[arrSize+1] == 0xd8){
  401d14:	4a1f      	ldr	r2, [pc, #124]	; (401d94 <find_image_len+0x9c>)
  401d16:	683b      	ldr	r3, [r7, #0]
  401d18:	4413      	add	r3, r2
  401d1a:	781b      	ldrb	r3, [r3, #0]
  401d1c:	2bff      	cmp	r3, #255	; 0xff
  401d1e:	d10a      	bne.n	401d36 <find_image_len+0x3e>
  401d20:	683b      	ldr	r3, [r7, #0]
  401d22:	3301      	adds	r3, #1
  401d24:	4a1b      	ldr	r2, [pc, #108]	; (401d94 <find_image_len+0x9c>)
  401d26:	5cd3      	ldrb	r3, [r2, r3]
  401d28:	2bd8      	cmp	r3, #216	; 0xd8
  401d2a:	d104      	bne.n	401d36 <find_image_len+0x3e>
				start_of_image = arrSize;
  401d2c:	4a17      	ldr	r2, [pc, #92]	; (401d8c <find_image_len+0x94>)
  401d2e:	683b      	ldr	r3, [r7, #0]
  401d30:	6013      	str	r3, [r2, #0]
				start_exists = 1;
  401d32:	2301      	movs	r3, #1
  401d34:	71fb      	strb	r3, [r7, #7]
			}
			if(image_buffer[arrSize] == 0xff && image_buffer[arrSize+1] == 0xd9 && start_exists == 1){
  401d36:	4a17      	ldr	r2, [pc, #92]	; (401d94 <find_image_len+0x9c>)
  401d38:	683b      	ldr	r3, [r7, #0]
  401d3a:	4413      	add	r3, r2
  401d3c:	781b      	ldrb	r3, [r3, #0]
  401d3e:	2bff      	cmp	r3, #255	; 0xff
  401d40:	d10e      	bne.n	401d60 <find_image_len+0x68>
  401d42:	683b      	ldr	r3, [r7, #0]
  401d44:	3301      	adds	r3, #1
  401d46:	4a13      	ldr	r2, [pc, #76]	; (401d94 <find_image_len+0x9c>)
  401d48:	5cd3      	ldrb	r3, [r2, r3]
  401d4a:	2bd9      	cmp	r3, #217	; 0xd9
  401d4c:	d108      	bne.n	401d60 <find_image_len+0x68>
  401d4e:	79fb      	ldrb	r3, [r7, #7]
  401d50:	2b01      	cmp	r3, #1
  401d52:	d105      	bne.n	401d60 <find_image_len+0x68>
				end_of_image = arrSize+2;
  401d54:	683b      	ldr	r3, [r7, #0]
  401d56:	3302      	adds	r3, #2
  401d58:	4a0d      	ldr	r2, [pc, #52]	; (401d90 <find_image_len+0x98>)
  401d5a:	6013      	str	r3, [r2, #0]
				return 1;
  401d5c:	2301      	movs	r3, #1
  401d5e:	e00f      	b.n	401d80 <find_image_len+0x88>
			}
			arrSize = arrSize + 1;
  401d60:	683b      	ldr	r3, [r7, #0]
  401d62:	3301      	adds	r3, #1
  401d64:	603b      	str	r3, [r7, #0]
		while( arrSize+1 < IMAGE_MAX){
  401d66:	683b      	ldr	r3, [r7, #0]
  401d68:	3301      	adds	r3, #1
  401d6a:	f24c 324f 	movw	r2, #49999	; 0xc34f
  401d6e:	4293      	cmp	r3, r2
  401d70:	d9d0      	bls.n	401d14 <find_image_len+0x1c>
		}
		start_of_image = 0;
  401d72:	4b06      	ldr	r3, [pc, #24]	; (401d8c <find_image_len+0x94>)
  401d74:	2200      	movs	r2, #0
  401d76:	601a      	str	r2, [r3, #0]
		end_of_image = 0;
  401d78:	4b05      	ldr	r3, [pc, #20]	; (401d90 <find_image_len+0x98>)
  401d7a:	2200      	movs	r2, #0
  401d7c:	601a      	str	r2, [r3, #0]
		
		return 0;
  401d7e:	2300      	movs	r3, #0
}
  401d80:	4618      	mov	r0, r3
  401d82:	370c      	adds	r7, #12
  401d84:	46bd      	mov	sp, r7
  401d86:	bc80      	pop	{r7}
  401d88:	4770      	bx	lr
  401d8a:	bf00      	nop
  401d8c:	20000ab8 	.word	0x20000ab8
  401d90:	20000ac0 	.word	0x20000ac0
  401d94:	20000ac4 	.word	0x20000ac4

00401d98 <osc_get_rate>:
{
  401d98:	b480      	push	{r7}
  401d9a:	b083      	sub	sp, #12
  401d9c:	af00      	add	r7, sp, #0
  401d9e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401da0:	687b      	ldr	r3, [r7, #4]
  401da2:	2b07      	cmp	r3, #7
  401da4:	d825      	bhi.n	401df2 <osc_get_rate+0x5a>
  401da6:	a201      	add	r2, pc, #4	; (adr r2, 401dac <osc_get_rate+0x14>)
  401da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401dac:	00401dcd 	.word	0x00401dcd
  401db0:	00401dd3 	.word	0x00401dd3
  401db4:	00401dd9 	.word	0x00401dd9
  401db8:	00401ddf 	.word	0x00401ddf
  401dbc:	00401de3 	.word	0x00401de3
  401dc0:	00401de7 	.word	0x00401de7
  401dc4:	00401deb 	.word	0x00401deb
  401dc8:	00401def 	.word	0x00401def
		return OSC_SLCK_32K_RC_HZ;
  401dcc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401dd0:	e010      	b.n	401df4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401dd6:	e00d      	b.n	401df4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401dd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401ddc:	e00a      	b.n	401df4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401dde:	4b08      	ldr	r3, [pc, #32]	; (401e00 <osc_get_rate+0x68>)
  401de0:	e008      	b.n	401df4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401de2:	4b08      	ldr	r3, [pc, #32]	; (401e04 <osc_get_rate+0x6c>)
  401de4:	e006      	b.n	401df4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401de6:	4b08      	ldr	r3, [pc, #32]	; (401e08 <osc_get_rate+0x70>)
  401de8:	e004      	b.n	401df4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401dea:	4b07      	ldr	r3, [pc, #28]	; (401e08 <osc_get_rate+0x70>)
  401dec:	e002      	b.n	401df4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401dee:	4b06      	ldr	r3, [pc, #24]	; (401e08 <osc_get_rate+0x70>)
  401df0:	e000      	b.n	401df4 <osc_get_rate+0x5c>
	return 0;
  401df2:	2300      	movs	r3, #0
}
  401df4:	4618      	mov	r0, r3
  401df6:	370c      	adds	r7, #12
  401df8:	46bd      	mov	sp, r7
  401dfa:	bc80      	pop	{r7}
  401dfc:	4770      	bx	lr
  401dfe:	bf00      	nop
  401e00:	003d0900 	.word	0x003d0900
  401e04:	007a1200 	.word	0x007a1200
  401e08:	00b71b00 	.word	0x00b71b00

00401e0c <sysclk_get_main_hz>:
{
  401e0c:	b580      	push	{r7, lr}
  401e0e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401e10:	2006      	movs	r0, #6
  401e12:	4b04      	ldr	r3, [pc, #16]	; (401e24 <sysclk_get_main_hz+0x18>)
  401e14:	4798      	blx	r3
  401e16:	4602      	mov	r2, r0
  401e18:	4613      	mov	r3, r2
  401e1a:	009b      	lsls	r3, r3, #2
  401e1c:	4413      	add	r3, r2
  401e1e:	009b      	lsls	r3, r3, #2
}
  401e20:	4618      	mov	r0, r3
  401e22:	bd80      	pop	{r7, pc}
  401e24:	00401d99 	.word	0x00401d99

00401e28 <sysclk_get_cpu_hz>:
{
  401e28:	b580      	push	{r7, lr}
  401e2a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401e2c:	4b02      	ldr	r3, [pc, #8]	; (401e38 <sysclk_get_cpu_hz+0x10>)
  401e2e:	4798      	blx	r3
  401e30:	4603      	mov	r3, r0
  401e32:	085b      	lsrs	r3, r3, #1
}
  401e34:	4618      	mov	r0, r3
  401e36:	bd80      	pop	{r7, pc}
  401e38:	00401e0d 	.word	0x00401e0d

00401e3c <ov_id>:
 *
 * \param p_twi TWI interface.
 * \return PID and VER.
 */
static uint32_t ov_id(Twi* const p_twi)
{
  401e3c:	b580      	push	{r7, lr}
  401e3e:	b08e      	sub	sp, #56	; 0x38
  401e40:	af00      	add	r7, sp, #0
  401e42:	6078      	str	r0, [r7, #4]
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  401e44:	2300      	movs	r3, #0
  401e46:	60fb      	str	r3, [r7, #12]
	uint32_t ul_ver = 0;
  401e48:	2300      	movs	r3, #0
  401e4a:	60bb      	str	r3, [r7, #8]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  401e4c:	2330      	movs	r3, #48	; 0x30
  401e4e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	packet_pid.addr[0] = OV2640_PIDH;
  401e52:	230a      	movs	r3, #10
  401e54:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	packet_pid.addr_length = 1;
  401e58:	2301      	movs	r3, #1
  401e5a:	62bb      	str	r3, [r7, #40]	; 0x28
	packet_pid.buffer = &ul_id;
  401e5c:	f107 030c 	add.w	r3, r7, #12
  401e60:	62fb      	str	r3, [r7, #44]	; 0x2c
	packet_pid.length = 1;
  401e62:	2301      	movs	r3, #1
  401e64:	633b      	str	r3, [r7, #48]	; 0x30

	ov_read_reg(p_twi, &packet_pid);
  401e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401e6a:	4619      	mov	r1, r3
  401e6c:	6878      	ldr	r0, [r7, #4]
  401e6e:	4b0e      	ldr	r3, [pc, #56]	; (401ea8 <ov_id+0x6c>)
  401e70:	4798      	blx	r3

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  401e72:	2330      	movs	r3, #48	; 0x30
  401e74:	f887 3020 	strb.w	r3, [r7, #32]
	packet_ver.addr[0] = OV2640_PIDL;
  401e78:	230b      	movs	r3, #11
  401e7a:	743b      	strb	r3, [r7, #16]
	packet_ver.addr_length = 1;
  401e7c:	2301      	movs	r3, #1
  401e7e:	617b      	str	r3, [r7, #20]
	packet_ver.buffer = &ul_ver;
  401e80:	f107 0308 	add.w	r3, r7, #8
  401e84:	61bb      	str	r3, [r7, #24]
	packet_ver.length = 1;
  401e86:	2301      	movs	r3, #1
  401e88:	61fb      	str	r3, [r7, #28]

	ov_read_reg(p_twi, &packet_ver);
  401e8a:	f107 0310 	add.w	r3, r7, #16
  401e8e:	4619      	mov	r1, r3
  401e90:	6878      	ldr	r0, [r7, #4]
  401e92:	4b05      	ldr	r3, [pc, #20]	; (401ea8 <ov_id+0x6c>)
  401e94:	4798      	blx	r3
	return ((uint32_t)(ul_id << 8) | ul_ver);
  401e96:	68fb      	ldr	r3, [r7, #12]
  401e98:	021a      	lsls	r2, r3, #8
  401e9a:	68bb      	ldr	r3, [r7, #8]
  401e9c:	4313      	orrs	r3, r2
}
  401e9e:	4618      	mov	r0, r3
  401ea0:	3738      	adds	r7, #56	; 0x38
  401ea2:	46bd      	mov	sp, r7
  401ea4:	bd80      	pop	{r7, pc}
  401ea6:	bf00      	nop
  401ea8:	00401fd5 	.word	0x00401fd5

00401eac <ov_manufacturer>:
 *
 * \param p_twi TWI interface.
 * \return 0 if the sensor is present, 1 otherwise.
 */
static uint32_t ov_manufacturer(Twi* const p_twi)
{
  401eac:	b580      	push	{r7, lr}
  401eae:	b08a      	sub	sp, #40	; 0x28
  401eb0:	af00      	add	r7, sp, #0
  401eb2:	6078      	str	r0, [r7, #4]
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
  401eb4:	2300      	movs	r3, #0
  401eb6:	613b      	str	r3, [r7, #16]
	uint32_t ul_midl = 0;
  401eb8:	2300      	movs	r3, #0
  401eba:	60fb      	str	r3, [r7, #12]

	/* OV_MIDH */
	twi_packet.addr[0] = OV2640_MIDH;
  401ebc:	231c      	movs	r3, #28
  401ebe:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401ec0:	2301      	movs	r3, #1
  401ec2:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401ec4:	2330      	movs	r3, #48	; 0x30
  401ec6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midh;
  401eca:	f107 0310 	add.w	r3, r7, #16
  401ece:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  401ed0:	2301      	movs	r3, #1
  401ed2:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  401ed4:	f107 0314 	add.w	r3, r7, #20
  401ed8:	4619      	mov	r1, r3
  401eda:	6878      	ldr	r0, [r7, #4]
  401edc:	4b10      	ldr	r3, [pc, #64]	; (401f20 <ov_manufacturer+0x74>)
  401ede:	4798      	blx	r3

	/* OV_MIDL */
	twi_packet.addr[0] = OV2640_MIDL;
  401ee0:	231d      	movs	r3, #29
  401ee2:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401ee4:	2301      	movs	r3, #1
  401ee6:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401ee8:	2330      	movs	r3, #48	; 0x30
  401eea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midl;
  401eee:	f107 030c 	add.w	r3, r7, #12
  401ef2:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  401ef4:	2301      	movs	r3, #1
  401ef6:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  401ef8:	f107 0314 	add.w	r3, r7, #20
  401efc:	4619      	mov	r1, r3
  401efe:	6878      	ldr	r0, [r7, #4]
  401f00:	4b07      	ldr	r3, [pc, #28]	; (401f20 <ov_manufacturer+0x74>)
  401f02:	4798      	blx	r3

	if ((ul_midh == OV2640_MIDH_DEFAULT) && (ul_midl == OV2640_MIDL_DEFAULT)) {
  401f04:	693b      	ldr	r3, [r7, #16]
  401f06:	2b7f      	cmp	r3, #127	; 0x7f
  401f08:	d104      	bne.n	401f14 <ov_manufacturer+0x68>
  401f0a:	68fb      	ldr	r3, [r7, #12]
  401f0c:	2ba2      	cmp	r3, #162	; 0xa2
  401f0e:	d101      	bne.n	401f14 <ov_manufacturer+0x68>
		return 0;
  401f10:	2300      	movs	r3, #0
  401f12:	e000      	b.n	401f16 <ov_manufacturer+0x6a>
	}

	return 1;
  401f14:	2301      	movs	r3, #1
}
  401f16:	4618      	mov	r0, r3
  401f18:	3728      	adds	r7, #40	; 0x28
  401f1a:	46bd      	mov	sp, r7
  401f1c:	bd80      	pop	{r7, pc}
  401f1e:	bf00      	nop
  401f20:	00401fd5 	.word	0x00401fd5

00401f24 <ov_test_write>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
static uint32_t ov_test_write(Twi* const p_twi)
{
  401f24:	b580      	push	{r7, lr}
  401f26:	b08a      	sub	sp, #40	; 0x28
  401f28:	af00      	add	r7, sp, #0
  401f2a:	6078      	str	r0, [r7, #4]
	twi_packet_t twi_packet;
	uint32_t ul_value = 0;
  401f2c:	2300      	movs	r3, #0
  401f2e:	613b      	str	r3, [r7, #16]
	uint32_t ul_oldvalue = 0;
  401f30:	2300      	movs	r3, #0
  401f32:	60fb      	str	r3, [r7, #12]
	uint32_t ul_entervalue = 0;
  401f34:	2300      	movs	r3, #0
  401f36:	60bb      	str	r3, [r7, #8]

	/* OV_BLUE_GAIN */
	twi_packet.addr[0] = 0x01;
  401f38:	2301      	movs	r3, #1
  401f3a:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401f3c:	2301      	movs	r3, #1
  401f3e:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401f40:	2330      	movs	r3, #48	; 0x30
  401f42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.length = 1;
  401f46:	2301      	movs	r3, #1
  401f48:	623b      	str	r3, [r7, #32]

	twi_packet.buffer = &ul_oldvalue;
  401f4a:	f107 030c 	add.w	r3, r7, #12
  401f4e:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401f50:	f107 0314 	add.w	r3, r7, #20
  401f54:	4619      	mov	r1, r3
  401f56:	6878      	ldr	r0, [r7, #4]
  401f58:	4b1c      	ldr	r3, [pc, #112]	; (401fcc <ov_test_write+0xa8>)
  401f5a:	4798      	blx	r3

	ul_entervalue = 0xAD;
  401f5c:	23ad      	movs	r3, #173	; 0xad
  401f5e:	60bb      	str	r3, [r7, #8]
	twi_packet.buffer = &ul_entervalue;
  401f60:	f107 0308 	add.w	r3, r7, #8
  401f64:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  401f66:	f107 0314 	add.w	r3, r7, #20
  401f6a:	4619      	mov	r1, r3
  401f6c:	6878      	ldr	r0, [r7, #4]
  401f6e:	4b18      	ldr	r3, [pc, #96]	; (401fd0 <ov_test_write+0xac>)
  401f70:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  401f72:	f107 0310 	add.w	r3, r7, #16
  401f76:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401f78:	f107 0314 	add.w	r3, r7, #20
  401f7c:	4619      	mov	r1, r3
  401f7e:	6878      	ldr	r0, [r7, #4]
  401f80:	4b12      	ldr	r3, [pc, #72]	; (401fcc <ov_test_write+0xa8>)
  401f82:	4798      	blx	r3

	if (ul_value != ul_entervalue) {
  401f84:	693a      	ldr	r2, [r7, #16]
  401f86:	68bb      	ldr	r3, [r7, #8]
  401f88:	429a      	cmp	r2, r3
  401f8a:	d001      	beq.n	401f90 <ov_test_write+0x6c>
		return 1;
  401f8c:	2301      	movs	r3, #1
  401f8e:	e018      	b.n	401fc2 <ov_test_write+0x9e>
	}

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
  401f90:	f107 030c 	add.w	r3, r7, #12
  401f94:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  401f96:	f107 0314 	add.w	r3, r7, #20
  401f9a:	4619      	mov	r1, r3
  401f9c:	6878      	ldr	r0, [r7, #4]
  401f9e:	4b0c      	ldr	r3, [pc, #48]	; (401fd0 <ov_test_write+0xac>)
  401fa0:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  401fa2:	f107 0310 	add.w	r3, r7, #16
  401fa6:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401fa8:	f107 0314 	add.w	r3, r7, #20
  401fac:	4619      	mov	r1, r3
  401fae:	6878      	ldr	r0, [r7, #4]
  401fb0:	4b06      	ldr	r3, [pc, #24]	; (401fcc <ov_test_write+0xa8>)
  401fb2:	4798      	blx	r3

	if (ul_value != ul_oldvalue) {
  401fb4:	693a      	ldr	r2, [r7, #16]
  401fb6:	68fb      	ldr	r3, [r7, #12]
  401fb8:	429a      	cmp	r2, r3
  401fba:	d001      	beq.n	401fc0 <ov_test_write+0x9c>
		return 1;
  401fbc:	2301      	movs	r3, #1
  401fbe:	e000      	b.n	401fc2 <ov_test_write+0x9e>
	}

	return 0;
  401fc0:	2300      	movs	r3, #0
}
  401fc2:	4618      	mov	r0, r3
  401fc4:	3728      	adds	r7, #40	; 0x28
  401fc6:	46bd      	mov	sp, r7
  401fc8:	bd80      	pop	{r7, pc}
  401fca:	bf00      	nop
  401fcc:	00401fd5 	.word	0x00401fd5
  401fd0:	00401ff9 	.word	0x00401ff9

00401fd4 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  401fd4:	b580      	push	{r7, lr}
  401fd6:	b084      	sub	sp, #16
  401fd8:	af00      	add	r7, sp, #0
  401fda:	6078      	str	r0, [r7, #4]
  401fdc:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  401fde:	6839      	ldr	r1, [r7, #0]
  401fe0:	6878      	ldr	r0, [r7, #4]
  401fe2:	4b04      	ldr	r3, [pc, #16]	; (401ff4 <ov_read_reg+0x20>)
  401fe4:	4798      	blx	r3
  401fe6:	60f8      	str	r0, [r7, #12]

	return ul_status;
  401fe8:	68fb      	ldr	r3, [r7, #12]
}
  401fea:	4618      	mov	r0, r3
  401fec:	3710      	adds	r7, #16
  401fee:	46bd      	mov	sp, r7
  401ff0:	bd80      	pop	{r7, pc}
  401ff2:	bf00      	nop
  401ff4:	004011dd 	.word	0x004011dd

00401ff8 <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  401ff8:	b580      	push	{r7, lr}
  401ffa:	b084      	sub	sp, #16
  401ffc:	af00      	add	r7, sp, #0
  401ffe:	6078      	str	r0, [r7, #4]
  402000:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  402002:	6839      	ldr	r1, [r7, #0]
  402004:	6878      	ldr	r0, [r7, #4]
  402006:	4b04      	ldr	r3, [pc, #16]	; (402018 <ov_write_reg+0x20>)
  402008:	4798      	blx	r3
  40200a:	60f8      	str	r0, [r7, #12]

	return ul_status;
  40200c:	68fb      	ldr	r3, [r7, #12]
}
  40200e:	4618      	mov	r0, r3
  402010:	3710      	adds	r7, #16
  402012:	46bd      	mov	sp, r7
  402014:	bd80      	pop	{r7, pc}
  402016:	bf00      	nop
  402018:	004012e9 	.word	0x004012e9

0040201c <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  40201c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  402020:	b08a      	sub	sp, #40	; 0x28
  402022:	af00      	add	r7, sp, #0
  402024:	6078      	str	r0, [r7, #4]
  402026:	6039      	str	r1, [r7, #0]
	uint32_t ul_err;
	uint32_t ul_size = 0;
  402028:	2300      	movs	r3, #0
  40202a:	627b      	str	r3, [r7, #36]	; 0x24
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;
  40202c:	683b      	ldr	r3, [r7, #0]
  40202e:	623b      	str	r3, [r7, #32]

	while (!((p_next->reg == OV_REG_TERM) &&
  402030:	e048      	b.n	4020c4 <ov_write_regs+0xa8>
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
  402032:	6a3b      	ldr	r3, [r7, #32]
  402034:	781b      	ldrb	r3, [r3, #0]
  402036:	2bfe      	cmp	r3, #254	; 0xfe
  402038:	d126      	bne.n	402088 <ov_write_regs+0x6c>
			delay_ms(5);
  40203a:	4b29      	ldr	r3, [pc, #164]	; (4020e0 <ov_write_regs+0xc4>)
  40203c:	4798      	blx	r3
  40203e:	4603      	mov	r3, r0
  402040:	4619      	mov	r1, r3
  402042:	f04f 0200 	mov.w	r2, #0
  402046:	460b      	mov	r3, r1
  402048:	4614      	mov	r4, r2
  40204a:	00a6      	lsls	r6, r4, #2
  40204c:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  402050:	009d      	lsls	r5, r3, #2
  402052:	462b      	mov	r3, r5
  402054:	4634      	mov	r4, r6
  402056:	185b      	adds	r3, r3, r1
  402058:	eb44 0402 	adc.w	r4, r4, r2
  40205c:	f243 61af 	movw	r1, #13999	; 0x36af
  402060:	f04f 0200 	mov.w	r2, #0
  402064:	eb13 0b01 	adds.w	fp, r3, r1
  402068:	eb44 0c02 	adc.w	ip, r4, r2
  40206c:	4658      	mov	r0, fp
  40206e:	4661      	mov	r1, ip
  402070:	4c1c      	ldr	r4, [pc, #112]	; (4020e4 <ov_write_regs+0xc8>)
  402072:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402076:	f04f 0300 	mov.w	r3, #0
  40207a:	47a0      	blx	r4
  40207c:	4603      	mov	r3, r0
  40207e:	460c      	mov	r4, r1
  402080:	4618      	mov	r0, r3
  402082:	4b19      	ldr	r3, [pc, #100]	; (4020e8 <ov_write_regs+0xcc>)
  402084:	4798      	blx	r3
  402086:	e01a      	b.n	4020be <ov_write_regs+0xa2>
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
  402088:	6a3b      	ldr	r3, [r7, #32]
  40208a:	781b      	ldrb	r3, [r3, #0]
  40208c:	723b      	strb	r3, [r7, #8]
			twi_packet_regs.addr_length = 1;
  40208e:	2301      	movs	r3, #1
  402090:	60fb      	str	r3, [r7, #12]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  402092:	2330      	movs	r3, #48	; 0x30
  402094:	763b      	strb	r3, [r7, #24]
			twi_packet_regs.length = 1;
  402096:	2301      	movs	r3, #1
  402098:	617b      	str	r3, [r7, #20]
			twi_packet_regs.buffer = &(p_next->val);
  40209a:	6a3b      	ldr	r3, [r7, #32]
  40209c:	3301      	adds	r3, #1
  40209e:	613b      	str	r3, [r7, #16]

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  4020a0:	f107 0308 	add.w	r3, r7, #8
  4020a4:	4619      	mov	r1, r3
  4020a6:	6878      	ldr	r0, [r7, #4]
  4020a8:	4b10      	ldr	r3, [pc, #64]	; (4020ec <ov_write_regs+0xd0>)
  4020aa:	4798      	blx	r3
  4020ac:	61f8      	str	r0, [r7, #28]
			ul_size++;
  4020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4020b0:	3301      	adds	r3, #1
  4020b2:	627b      	str	r3, [r7, #36]	; 0x24

			if (ul_err == TWI_BUSY) {
  4020b4:	69fb      	ldr	r3, [r7, #28]
  4020b6:	2b08      	cmp	r3, #8
  4020b8:	d101      	bne.n	4020be <ov_write_regs+0xa2>
				return ul_err;
  4020ba:	69fb      	ldr	r3, [r7, #28]
  4020bc:	e00b      	b.n	4020d6 <ov_write_regs+0xba>
			}
		}

		p_next++;
  4020be:	6a3b      	ldr	r3, [r7, #32]
  4020c0:	3302      	adds	r3, #2
  4020c2:	623b      	str	r3, [r7, #32]
	while (!((p_next->reg == OV_REG_TERM) &&
  4020c4:	6a3b      	ldr	r3, [r7, #32]
  4020c6:	781b      	ldrb	r3, [r3, #0]
  4020c8:	2bff      	cmp	r3, #255	; 0xff
  4020ca:	d1b2      	bne.n	402032 <ov_write_regs+0x16>
			(p_next->val == OV_VAL_TERM))) {
  4020cc:	6a3b      	ldr	r3, [r7, #32]
  4020ce:	785b      	ldrb	r3, [r3, #1]
	while (!((p_next->reg == OV_REG_TERM) &&
  4020d0:	2bff      	cmp	r3, #255	; 0xff
  4020d2:	d1ae      	bne.n	402032 <ov_write_regs+0x16>
	}
	return 0;
  4020d4:	2300      	movs	r3, #0
}
  4020d6:	4618      	mov	r0, r3
  4020d8:	3728      	adds	r7, #40	; 0x28
  4020da:	46bd      	mov	sp, r7
  4020dc:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  4020e0:	00401e29 	.word	0x00401e29
  4020e4:	00403509 	.word	0x00403509
  4020e8:	20000001 	.word	0x20000001
  4020ec:	00401ff9 	.word	0x00401ff9

004020f0 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  4020f0:	b580      	push	{r7, lr}
  4020f2:	b08a      	sub	sp, #40	; 0x28
  4020f4:	af00      	add	r7, sp, #0
  4020f6:	6078      	str	r0, [r7, #4]
	const uint8_t cont_reg_val = 1;
  4020f8:	2301      	movs	r3, #1
  4020fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	twi_packet_t init_packet = {
  4020fe:	f107 030c 	add.w	r3, r7, #12
  402102:	2200      	movs	r2, #0
  402104:	601a      	str	r2, [r3, #0]
  402106:	605a      	str	r2, [r3, #4]
  402108:	609a      	str	r2, [r3, #8]
  40210a:	60da      	str	r2, [r3, #12]
  40210c:	611a      	str	r2, [r3, #16]
  40210e:	23ff      	movs	r3, #255	; 0xff
  402110:	733b      	strb	r3, [r7, #12]
  402112:	2301      	movs	r3, #1
  402114:	613b      	str	r3, [r7, #16]
  402116:	f107 0323 	add.w	r3, r7, #35	; 0x23
  40211a:	617b      	str	r3, [r7, #20]
  40211c:	2301      	movs	r3, #1
  40211e:	61bb      	str	r3, [r7, #24]
  402120:	2330      	movs	r3, #48	; 0x30
  402122:	773b      	strb	r3, [r7, #28]
		.addr_length  = 1, //sizeof (uint16_t),    // TWI slave memory address data size
		.chip         = OV_I2C_SENSOR_ADDRESS,      // TWI slave bus address
		.buffer       = &cont_reg_val,        // transfer data destination buffer
		.length       = 1                    // transfer data size (bytes)
	};
	ov_write_reg(p_twi, &init_packet);
  402124:	f107 030c 	add.w	r3, r7, #12
  402128:	4619      	mov	r1, r3
  40212a:	6878      	ldr	r0, [r7, #4]
  40212c:	4b0f      	ldr	r3, [pc, #60]	; (40216c <ov_init+0x7c>)
  40212e:	4798      	blx	r3
	
	
	uint32_t ul_id = 0;
  402130:	2300      	movs	r3, #0
  402132:	627b      	str	r3, [r7, #36]	; 0x24

	ul_id = ov_id( p_twi );
  402134:	6878      	ldr	r0, [r7, #4]
  402136:	4b0e      	ldr	r3, [pc, #56]	; (402170 <ov_init+0x80>)
  402138:	4798      	blx	r3
  40213a:	6278      	str	r0, [r7, #36]	; 0x24

	if (((ul_id >> 8)&0xff)  == OV2640_PIDH_DEFAULT) {
  40213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40213e:	0a1b      	lsrs	r3, r3, #8
  402140:	b2db      	uxtb	r3, r3
  402142:	2b26      	cmp	r3, #38	; 0x26
  402144:	d10d      	bne.n	402162 <ov_init+0x72>
		if (ov_manufacturer( p_twi ) == 0) {
  402146:	6878      	ldr	r0, [r7, #4]
  402148:	4b0a      	ldr	r3, [pc, #40]	; (402174 <ov_init+0x84>)
  40214a:	4798      	blx	r3
  40214c:	4603      	mov	r3, r0
  40214e:	2b00      	cmp	r3, #0
  402150:	d107      	bne.n	402162 <ov_init+0x72>
			if (ov_test_write( p_twi ) == 0) {
  402152:	6878      	ldr	r0, [r7, #4]
  402154:	4b08      	ldr	r3, [pc, #32]	; (402178 <ov_init+0x88>)
  402156:	4798      	blx	r3
  402158:	4603      	mov	r3, r0
  40215a:	2b00      	cmp	r3, #0
  40215c:	d101      	bne.n	402162 <ov_init+0x72>
				return 0;
  40215e:	2300      	movs	r3, #0
  402160:	e000      	b.n	402164 <ov_init+0x74>
			}
		}
	}
	
	return 1;
  402162:	2301      	movs	r3, #1
}
  402164:	4618      	mov	r0, r3
  402166:	3728      	adds	r7, #40	; 0x28
  402168:	46bd      	mov	sp, r7
  40216a:	bd80      	pop	{r7, pc}
  40216c:	00401ff9 	.word	0x00401ff9
  402170:	00401e3d 	.word	0x00401e3d
  402174:	00401ead 	.word	0x00401ead
  402178:	00401f25 	.word	0x00401f25

0040217c <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_OV2640_format format)
{
  40217c:	b580      	push	{r7, lr}
  40217e:	b084      	sub	sp, #16
  402180:	af00      	add	r7, sp, #0
  402182:	6078      	str	r0, [r7, #4]
  402184:	460b      	mov	r3, r1
  402186:	70fb      	strb	r3, [r7, #3]
	const ov_reg *p_regs_conf = NULL;
  402188:	2300      	movs	r3, #0
  40218a:	60fb      	str	r3, [r7, #12]

	/* Common register initialization */
	switch (format) {
  40218c:	78fb      	ldrb	r3, [r7, #3]
  40218e:	2b11      	cmp	r3, #17
  402190:	d85c      	bhi.n	40224c <ov_configure+0xd0>
  402192:	a201      	add	r2, pc, #4	; (adr r2, 402198 <ov_configure+0x1c>)
  402194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402198:	004021e1 	.word	0x004021e1
  40219c:	004021e7 	.word	0x004021e7
  4021a0:	004021ed 	.word	0x004021ed
  4021a4:	004021f3 	.word	0x004021f3
  4021a8:	004021f9 	.word	0x004021f9
  4021ac:	004021ff 	.word	0x004021ff
  4021b0:	00402205 	.word	0x00402205
  4021b4:	0040220b 	.word	0x0040220b
  4021b8:	00402211 	.word	0x00402211
  4021bc:	00402217 	.word	0x00402217
  4021c0:	0040221d 	.word	0x0040221d
  4021c4:	00402223 	.word	0x00402223
  4021c8:	00402229 	.word	0x00402229
  4021cc:	0040222f 	.word	0x0040222f
  4021d0:	00402235 	.word	0x00402235
  4021d4:	0040223b 	.word	0x0040223b
  4021d8:	00402241 	.word	0x00402241
  4021dc:	00402247 	.word	0x00402247
		
	case JPEG_INIT:
		p_regs_conf = OV2640_JPEG_INIT;
  4021e0:	4b22      	ldr	r3, [pc, #136]	; (40226c <ov_configure+0xf0>)
  4021e2:	60fb      	str	r3, [r7, #12]
		break;
  4021e4:	e033      	b.n	40224e <ov_configure+0xd2>
		
	case YUV422:
		p_regs_conf = OV2640_YUV422;
  4021e6:	4b22      	ldr	r3, [pc, #136]	; (402270 <ov_configure+0xf4>)
  4021e8:	60fb      	str	r3, [r7, #12]
		break;
  4021ea:	e030      	b.n	40224e <ov_configure+0xd2>
		
	case JPEG:
		p_regs_conf = OV2640_JPEG;
  4021ec:	4b21      	ldr	r3, [pc, #132]	; (402274 <ov_configure+0xf8>)
  4021ee:	60fb      	str	r3, [r7, #12]
		break;
  4021f0:	e02d      	b.n	40224e <ov_configure+0xd2>
		
	case JPEG_320x240:
		p_regs_conf = OV2640_JPEG_320x240;
  4021f2:	4b21      	ldr	r3, [pc, #132]	; (402278 <ov_configure+0xfc>)
  4021f4:	60fb      	str	r3, [r7, #12]
		break;
  4021f6:	e02a      	b.n	40224e <ov_configure+0xd2>
		
	case JPEG_640x480:
		p_regs_conf = OV2640_JPEG_640x480;
  4021f8:	4b20      	ldr	r3, [pc, #128]	; (40227c <ov_configure+0x100>)
  4021fa:	60fb      	str	r3, [r7, #12]
		break;
  4021fc:	e027      	b.n	40224e <ov_configure+0xd2>
		
	case JPEG_800x600:
		p_regs_conf = OV2640_JPEG_800x600;
  4021fe:	4b20      	ldr	r3, [pc, #128]	; (402280 <ov_configure+0x104>)
  402200:	60fb      	str	r3, [r7, #12]
		break;
  402202:	e024      	b.n	40224e <ov_configure+0xd2>
		
	case JPEG_1024x768:
		p_regs_conf = OV2640_JPEG_1024x768;
  402204:	4b1f      	ldr	r3, [pc, #124]	; (402284 <ov_configure+0x108>)
  402206:	60fb      	str	r3, [r7, #12]
		break;
  402208:	e021      	b.n	40224e <ov_configure+0xd2>
		
	case JPEG_1280x1024:
		p_regs_conf = OV2640_JPEG_1280x1024;
  40220a:	4b1f      	ldr	r3, [pc, #124]	; (402288 <ov_configure+0x10c>)
  40220c:	60fb      	str	r3, [r7, #12]
		break;
  40220e:	e01e      	b.n	40224e <ov_configure+0xd2>
		
	case JPEG_1600x1200:
		p_regs_conf = OV2640_JPEG_1600x1200;
  402210:	4b1e      	ldr	r3, [pc, #120]	; (40228c <ov_configure+0x110>)
  402212:	60fb      	str	r3, [r7, #12]
		break;
  402214:	e01b      	b.n	40224e <ov_configure+0xd2>
		
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV2640_QVGA_YUV422_10FPS;
  402216:	4b1e      	ldr	r3, [pc, #120]	; (402290 <ov_configure+0x114>)
  402218:	60fb      	str	r3, [r7, #12]
		break;
  40221a:	e018      	b.n	40224e <ov_configure+0xd2>

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV2640_QVGA_YUV422_15FPS;
  40221c:	4b1d      	ldr	r3, [pc, #116]	; (402294 <ov_configure+0x118>)
  40221e:	60fb      	str	r3, [r7, #12]
		break;
  402220:	e015      	b.n	40224e <ov_configure+0xd2>

	case QVGA_YUV422_20FPS:
		p_regs_conf = OV2640_QVGA_YUV422_20FPS;
  402222:	4b1d      	ldr	r3, [pc, #116]	; (402298 <ov_configure+0x11c>)
  402224:	60fb      	str	r3, [r7, #12]
		break;
  402226:	e012      	b.n	40224e <ov_configure+0xd2>

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV2640_QVGA_YUV422_30FPS;
  402228:	4b1c      	ldr	r3, [pc, #112]	; (40229c <ov_configure+0x120>)
  40222a:	60fb      	str	r3, [r7, #12]
		break;
  40222c:	e00f      	b.n	40224e <ov_configure+0xd2>

	case QVGA_RGB888:
		p_regs_conf = OV2640_QVGA_RGB888;
  40222e:	4b1c      	ldr	r3, [pc, #112]	; (4022a0 <ov_configure+0x124>)
  402230:	60fb      	str	r3, [r7, #12]
		break;
  402232:	e00c      	b.n	40224e <ov_configure+0xd2>

	case QQVGA_YUV422:
		p_regs_conf = OV2640_QQVGA_YUV422;
  402234:	4b1b      	ldr	r3, [pc, #108]	; (4022a4 <ov_configure+0x128>)
  402236:	60fb      	str	r3, [r7, #12]
		break;
  402238:	e009      	b.n	40224e <ov_configure+0xd2>

	case QQVGA_RGB888:
		p_regs_conf = OV2640_QQVGA_RGB888;
  40223a:	4b1b      	ldr	r3, [pc, #108]	; (4022a8 <ov_configure+0x12c>)
  40223c:	60fb      	str	r3, [r7, #12]
		break;
  40223e:	e006      	b.n	40224e <ov_configure+0xd2>

	case TEST_PATTERN:
		p_regs_conf = OV2640_TEST_PATTERN;
  402240:	4b1a      	ldr	r3, [pc, #104]	; (4022ac <ov_configure+0x130>)
  402242:	60fb      	str	r3, [r7, #12]
		break;
  402244:	e003      	b.n	40224e <ov_configure+0xd2>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV2640_VGA_YUV422_20FPS;
  402246:	4b1a      	ldr	r3, [pc, #104]	; (4022b0 <ov_configure+0x134>)
  402248:	60fb      	str	r3, [r7, #12]
		break;
  40224a:	e000      	b.n	40224e <ov_configure+0xd2>

	default:
		break;
  40224c:	bf00      	nop
	}

	if (p_regs_conf != NULL) {
  40224e:	68fb      	ldr	r3, [r7, #12]
  402250:	2b00      	cmp	r3, #0
  402252:	d005      	beq.n	402260 <ov_configure+0xe4>
		ov_write_regs( p_twi, p_regs_conf );
  402254:	68f9      	ldr	r1, [r7, #12]
  402256:	6878      	ldr	r0, [r7, #4]
  402258:	4b16      	ldr	r3, [pc, #88]	; (4022b4 <ov_configure+0x138>)
  40225a:	4798      	blx	r3
		return 0;
  40225c:	2300      	movs	r3, #0
  40225e:	e000      	b.n	402262 <ov_configure+0xe6>
	}

	return 1;
  402260:	2301      	movs	r3, #1
}
  402262:	4618      	mov	r0, r3
  402264:	3710      	adds	r7, #16
  402266:	46bd      	mov	sp, r7
  402268:	bd80      	pop	{r7, pc}
  40226a:	bf00      	nop
  40226c:	004083c4 	.word	0x004083c4
  402270:	00408544 	.word	0x00408544
  402274:	00408558 	.word	0x00408558
  402278:	0040856c 	.word	0x0040856c
  40227c:	004085bc 	.word	0x004085bc
  402280:	00408610 	.word	0x00408610
  402284:	00408664 	.word	0x00408664
  402288:	004086b4 	.word	0x004086b4
  40228c:	00408708 	.word	0x00408708
  402290:	0040875c 	.word	0x0040875c
  402294:	0040884c 	.word	0x0040884c
  402298:	0040893c 	.word	0x0040893c
  40229c:	00408a2c 	.word	0x00408a2c
  4022a0:	00408b1c 	.word	0x00408b1c
  4022a4:	00408c10 	.word	0x00408c10
  4022a8:	00408d04 	.word	0x00408d04
  4022ac:	00408df8 	.word	0x00408df8
  4022b0:	00408eec 	.word	0x00408eec
  4022b4:	0040201d 	.word	0x0040201d

004022b8 <__NVIC_EnableIRQ>:
{
  4022b8:	b480      	push	{r7}
  4022ba:	b083      	sub	sp, #12
  4022bc:	af00      	add	r7, sp, #0
  4022be:	4603      	mov	r3, r0
  4022c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4022c6:	2b00      	cmp	r3, #0
  4022c8:	db0b      	blt.n	4022e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4022ca:	4908      	ldr	r1, [pc, #32]	; (4022ec <__NVIC_EnableIRQ+0x34>)
  4022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4022d0:	095b      	lsrs	r3, r3, #5
  4022d2:	79fa      	ldrb	r2, [r7, #7]
  4022d4:	f002 021f 	and.w	r2, r2, #31
  4022d8:	2001      	movs	r0, #1
  4022da:	fa00 f202 	lsl.w	r2, r0, r2
  4022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4022e2:	bf00      	nop
  4022e4:	370c      	adds	r7, #12
  4022e6:	46bd      	mov	sp, r7
  4022e8:	bc80      	pop	{r7}
  4022ea:	4770      	bx	lr
  4022ec:	e000e100 	.word	0xe000e100

004022f0 <osc_get_rate>:
{
  4022f0:	b480      	push	{r7}
  4022f2:	b083      	sub	sp, #12
  4022f4:	af00      	add	r7, sp, #0
  4022f6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4022f8:	687b      	ldr	r3, [r7, #4]
  4022fa:	2b07      	cmp	r3, #7
  4022fc:	d825      	bhi.n	40234a <osc_get_rate+0x5a>
  4022fe:	a201      	add	r2, pc, #4	; (adr r2, 402304 <osc_get_rate+0x14>)
  402300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402304:	00402325 	.word	0x00402325
  402308:	0040232b 	.word	0x0040232b
  40230c:	00402331 	.word	0x00402331
  402310:	00402337 	.word	0x00402337
  402314:	0040233b 	.word	0x0040233b
  402318:	0040233f 	.word	0x0040233f
  40231c:	00402343 	.word	0x00402343
  402320:	00402347 	.word	0x00402347
		return OSC_SLCK_32K_RC_HZ;
  402324:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402328:	e010      	b.n	40234c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40232a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40232e:	e00d      	b.n	40234c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402334:	e00a      	b.n	40234c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402336:	4b08      	ldr	r3, [pc, #32]	; (402358 <osc_get_rate+0x68>)
  402338:	e008      	b.n	40234c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40233a:	4b08      	ldr	r3, [pc, #32]	; (40235c <osc_get_rate+0x6c>)
  40233c:	e006      	b.n	40234c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40233e:	4b08      	ldr	r3, [pc, #32]	; (402360 <osc_get_rate+0x70>)
  402340:	e004      	b.n	40234c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402342:	4b07      	ldr	r3, [pc, #28]	; (402360 <osc_get_rate+0x70>)
  402344:	e002      	b.n	40234c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402346:	4b06      	ldr	r3, [pc, #24]	; (402360 <osc_get_rate+0x70>)
  402348:	e000      	b.n	40234c <osc_get_rate+0x5c>
	return 0;
  40234a:	2300      	movs	r3, #0
}
  40234c:	4618      	mov	r0, r3
  40234e:	370c      	adds	r7, #12
  402350:	46bd      	mov	sp, r7
  402352:	bc80      	pop	{r7}
  402354:	4770      	bx	lr
  402356:	bf00      	nop
  402358:	003d0900 	.word	0x003d0900
  40235c:	007a1200 	.word	0x007a1200
  402360:	00b71b00 	.word	0x00b71b00

00402364 <sysclk_get_main_hz>:
{
  402364:	b580      	push	{r7, lr}
  402366:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402368:	2006      	movs	r0, #6
  40236a:	4b04      	ldr	r3, [pc, #16]	; (40237c <sysclk_get_main_hz+0x18>)
  40236c:	4798      	blx	r3
  40236e:	4602      	mov	r2, r0
  402370:	4613      	mov	r3, r2
  402372:	009b      	lsls	r3, r3, #2
  402374:	4413      	add	r3, r2
  402376:	009b      	lsls	r3, r3, #2
}
  402378:	4618      	mov	r0, r3
  40237a:	bd80      	pop	{r7, pc}
  40237c:	004022f1 	.word	0x004022f1

00402380 <sysclk_get_cpu_hz>:
{
  402380:	b580      	push	{r7, lr}
  402382:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402384:	4b02      	ldr	r3, [pc, #8]	; (402390 <sysclk_get_cpu_hz+0x10>)
  402386:	4798      	blx	r3
  402388:	4603      	mov	r3, r0
  40238a:	085b      	lsrs	r3, r3, #1
}
  40238c:	4618      	mov	r0, r3
  40238e:	bd80      	pop	{r7, pc}
  402390:	00402365 	.word	0x00402365

00402394 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  402394:	b580      	push	{r7, lr}
  402396:	b082      	sub	sp, #8
  402398:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  40239a:	2100      	movs	r1, #0
  40239c:	4809      	ldr	r0, [pc, #36]	; (4023c4 <TC0_Handler+0x30>)
  40239e:	4b0a      	ldr	r3, [pc, #40]	; (4023c8 <TC0_Handler+0x34>)
  4023a0:	4798      	blx	r3
  4023a2:	6078      	str	r0, [r7, #4]

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  4023a4:	687b      	ldr	r3, [r7, #4]
  4023a6:	f003 0310 	and.w	r3, r3, #16
  4023aa:	2b00      	cmp	r3, #0
  4023ac:	d006      	beq.n	4023bc <TC0_Handler+0x28>
		counts++;
  4023ae:	4b07      	ldr	r3, [pc, #28]	; (4023cc <TC0_Handler+0x38>)
  4023b0:	781b      	ldrb	r3, [r3, #0]
  4023b2:	b2db      	uxtb	r3, r3
  4023b4:	3301      	adds	r3, #1
  4023b6:	b2da      	uxtb	r2, r3
  4023b8:	4b04      	ldr	r3, [pc, #16]	; (4023cc <TC0_Handler+0x38>)
  4023ba:	701a      	strb	r2, [r3, #0]
	}
}
  4023bc:	bf00      	nop
  4023be:	3708      	adds	r7, #8
  4023c0:	46bd      	mov	sp, r7
  4023c2:	bd80      	pop	{r7, pc}
  4023c4:	40010000 	.word	0x40010000
  4023c8:	00400f3f 	.word	0x00400f3f
  4023cc:	20000a74 	.word	0x20000a74

004023d0 <configure_tc>:

void configure_tc(void)
{
  4023d0:	b590      	push	{r4, r7, lr}
  4023d2:	b087      	sub	sp, #28
  4023d4:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();
  4023d6:	4b18      	ldr	r3, [pc, #96]	; (402438 <configure_tc+0x68>)
  4023d8:	4798      	blx	r3
  4023da:	60f8      	str	r0, [r7, #12]

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  4023dc:	2017      	movs	r0, #23
  4023de:	4b17      	ldr	r3, [pc, #92]	; (40243c <configure_tc+0x6c>)
  4023e0:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4023e2:	1d39      	adds	r1, r7, #4
  4023e4:	f107 0208 	add.w	r2, r7, #8
  4023e8:	68fb      	ldr	r3, [r7, #12]
  4023ea:	9300      	str	r3, [sp, #0]
  4023ec:	460b      	mov	r3, r1
  4023ee:	68f9      	ldr	r1, [r7, #12]
  4023f0:	2001      	movs	r0, #1
  4023f2:	4c13      	ldr	r4, [pc, #76]	; (402440 <configure_tc+0x70>)
  4023f4:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  4023f6:	687b      	ldr	r3, [r7, #4]
  4023f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4023fc:	461a      	mov	r2, r3
  4023fe:	2100      	movs	r1, #0
  402400:	4810      	ldr	r0, [pc, #64]	; (402444 <configure_tc+0x74>)
  402402:	4b11      	ldr	r3, [pc, #68]	; (402448 <configure_tc+0x78>)
  402404:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  402406:	68bb      	ldr	r3, [r7, #8]
  402408:	68fa      	ldr	r2, [r7, #12]
  40240a:	fbb2 f3f3 	udiv	r3, r2, r3
  40240e:	461a      	mov	r2, r3
  402410:	2100      	movs	r1, #0
  402412:	480c      	ldr	r0, [pc, #48]	; (402444 <configure_tc+0x74>)
  402414:	4b0d      	ldr	r3, [pc, #52]	; (40244c <configure_tc+0x7c>)
  402416:	4798      	blx	r3

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  402418:	2017      	movs	r0, #23
  40241a:	4b0d      	ldr	r3, [pc, #52]	; (402450 <configure_tc+0x80>)
  40241c:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  40241e:	2210      	movs	r2, #16
  402420:	2100      	movs	r1, #0
  402422:	4808      	ldr	r0, [pc, #32]	; (402444 <configure_tc+0x74>)
  402424:	4b0b      	ldr	r3, [pc, #44]	; (402454 <configure_tc+0x84>)
  402426:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  402428:	2100      	movs	r1, #0
  40242a:	4806      	ldr	r0, [pc, #24]	; (402444 <configure_tc+0x74>)
  40242c:	4b0a      	ldr	r3, [pc, #40]	; (402458 <configure_tc+0x88>)
  40242e:	4798      	blx	r3
  402430:	bf00      	nop
  402432:	3714      	adds	r7, #20
  402434:	46bd      	mov	sp, r7
  402436:	bd90      	pop	{r4, r7, pc}
  402438:	00402381 	.word	0x00402381
  40243c:	00400e1d 	.word	0x00400e1d
  402440:	00400f61 	.word	0x00400f61
  402444:	40010000 	.word	0x40010000
  402448:	00400e9d 	.word	0x00400e9d
  40244c:	00400ef5 	.word	0x00400ef5
  402450:	004022b9 	.word	0x004022b9
  402454:	00400f19 	.word	0x00400f19
  402458:	00400ed5 	.word	0x00400ed5

0040245c <__NVIC_EnableIRQ>:
{
  40245c:	b480      	push	{r7}
  40245e:	b083      	sub	sp, #12
  402460:	af00      	add	r7, sp, #0
  402462:	4603      	mov	r3, r0
  402464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  402466:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40246a:	2b00      	cmp	r3, #0
  40246c:	db0b      	blt.n	402486 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40246e:	4908      	ldr	r1, [pc, #32]	; (402490 <__NVIC_EnableIRQ+0x34>)
  402470:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402474:	095b      	lsrs	r3, r3, #5
  402476:	79fa      	ldrb	r2, [r7, #7]
  402478:	f002 021f 	and.w	r2, r2, #31
  40247c:	2001      	movs	r0, #1
  40247e:	fa00 f202 	lsl.w	r2, r0, r2
  402482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402486:	bf00      	nop
  402488:	370c      	adds	r7, #12
  40248a:	46bd      	mov	sp, r7
  40248c:	bc80      	pop	{r7}
  40248e:	4770      	bx	lr
  402490:	e000e100 	.word	0xe000e100

00402494 <osc_get_rate>:
{
  402494:	b480      	push	{r7}
  402496:	b083      	sub	sp, #12
  402498:	af00      	add	r7, sp, #0
  40249a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40249c:	687b      	ldr	r3, [r7, #4]
  40249e:	2b07      	cmp	r3, #7
  4024a0:	d825      	bhi.n	4024ee <osc_get_rate+0x5a>
  4024a2:	a201      	add	r2, pc, #4	; (adr r2, 4024a8 <osc_get_rate+0x14>)
  4024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4024a8:	004024c9 	.word	0x004024c9
  4024ac:	004024cf 	.word	0x004024cf
  4024b0:	004024d5 	.word	0x004024d5
  4024b4:	004024db 	.word	0x004024db
  4024b8:	004024df 	.word	0x004024df
  4024bc:	004024e3 	.word	0x004024e3
  4024c0:	004024e7 	.word	0x004024e7
  4024c4:	004024eb 	.word	0x004024eb
		return OSC_SLCK_32K_RC_HZ;
  4024c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4024cc:	e010      	b.n	4024f0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4024ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4024d2:	e00d      	b.n	4024f0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4024d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4024d8:	e00a      	b.n	4024f0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4024da:	4b08      	ldr	r3, [pc, #32]	; (4024fc <osc_get_rate+0x68>)
  4024dc:	e008      	b.n	4024f0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4024de:	4b08      	ldr	r3, [pc, #32]	; (402500 <osc_get_rate+0x6c>)
  4024e0:	e006      	b.n	4024f0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4024e2:	4b08      	ldr	r3, [pc, #32]	; (402504 <osc_get_rate+0x70>)
  4024e4:	e004      	b.n	4024f0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4024e6:	4b07      	ldr	r3, [pc, #28]	; (402504 <osc_get_rate+0x70>)
  4024e8:	e002      	b.n	4024f0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4024ea:	4b06      	ldr	r3, [pc, #24]	; (402504 <osc_get_rate+0x70>)
  4024ec:	e000      	b.n	4024f0 <osc_get_rate+0x5c>
	return 0;
  4024ee:	2300      	movs	r3, #0
}
  4024f0:	4618      	mov	r0, r3
  4024f2:	370c      	adds	r7, #12
  4024f4:	46bd      	mov	sp, r7
  4024f6:	bc80      	pop	{r7}
  4024f8:	4770      	bx	lr
  4024fa:	bf00      	nop
  4024fc:	003d0900 	.word	0x003d0900
  402500:	007a1200 	.word	0x007a1200
  402504:	00b71b00 	.word	0x00b71b00

00402508 <sysclk_get_main_hz>:
{
  402508:	b580      	push	{r7, lr}
  40250a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40250c:	2006      	movs	r0, #6
  40250e:	4b04      	ldr	r3, [pc, #16]	; (402520 <sysclk_get_main_hz+0x18>)
  402510:	4798      	blx	r3
  402512:	4602      	mov	r2, r0
  402514:	4613      	mov	r3, r2
  402516:	009b      	lsls	r3, r3, #2
  402518:	4413      	add	r3, r2
  40251a:	009b      	lsls	r3, r3, #2
}
  40251c:	4618      	mov	r0, r3
  40251e:	bd80      	pop	{r7, pc}
  402520:	00402495 	.word	0x00402495

00402524 <sysclk_get_cpu_hz>:
{
  402524:	b580      	push	{r7, lr}
  402526:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402528:	4b02      	ldr	r3, [pc, #8]	; (402534 <sysclk_get_cpu_hz+0x10>)
  40252a:	4798      	blx	r3
  40252c:	4603      	mov	r3, r0
  40252e:	085b      	lsrs	r3, r3, #1
}
  402530:	4618      	mov	r0, r3
  402532:	bd80      	pop	{r7, pc}
  402534:	00402509 	.word	0x00402509

00402538 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402538:	b580      	push	{r7, lr}
  40253a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40253c:	4b02      	ldr	r3, [pc, #8]	; (402548 <sysclk_get_peripheral_hz+0x10>)
  40253e:	4798      	blx	r3
  402540:	4603      	mov	r3, r0
  402542:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  402544:	4618      	mov	r0, r3
  402546:	bd80      	pop	{r7, pc}
  402548:	00402509 	.word	0x00402509

0040254c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40254c:	b580      	push	{r7, lr}
  40254e:	b082      	sub	sp, #8
  402550:	af00      	add	r7, sp, #0
  402552:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402554:	6878      	ldr	r0, [r7, #4]
  402556:	4b03      	ldr	r3, [pc, #12]	; (402564 <sysclk_enable_peripheral_clock+0x18>)
  402558:	4798      	blx	r3
}
  40255a:	bf00      	nop
  40255c:	3708      	adds	r7, #8
  40255e:	46bd      	mov	sp, r7
  402560:	bd80      	pop	{r7, pc}
  402562:	bf00      	nop
  402564:	00400e1d 	.word	0x00400e1d

00402568 <USART0_Handler>:
volatile uint32_t image_length=0;
volatile uint32_t start_image_transfer = 0;
volatile uint32_t wait_flag = 0;

void USART_Handler(void)
{
  402568:	b580      	push	{r7, lr}
  40256a:	b082      	sub	sp, #8
  40256c:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read USART status. */
	ul_status = usart_get_status(WIFI_USART);
  40256e:	480b      	ldr	r0, [pc, #44]	; (40259c <USART0_Handler+0x34>)
  402570:	4b0b      	ldr	r3, [pc, #44]	; (4025a0 <USART0_Handler+0x38>)
  402572:	4798      	blx	r3
  402574:	6078      	str	r0, [r7, #4]

	/* Receive buffer is full. */
	if (ul_status & US_CSR_RXBUFF) {
  402576:	687b      	ldr	r3, [r7, #4]
  402578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  40257c:	2b00      	cmp	r3, #0
  40257e:	d009      	beq.n	402594 <USART0_Handler+0x2c>
		usart_read(WIFI_USART, &received_byte_wifi);
  402580:	4908      	ldr	r1, [pc, #32]	; (4025a4 <USART0_Handler+0x3c>)
  402582:	4806      	ldr	r0, [pc, #24]	; (40259c <USART0_Handler+0x34>)
  402584:	4b08      	ldr	r3, [pc, #32]	; (4025a8 <USART0_Handler+0x40>)
  402586:	4798      	blx	r3
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  402588:	4b06      	ldr	r3, [pc, #24]	; (4025a4 <USART0_Handler+0x3c>)
  40258a:	681b      	ldr	r3, [r3, #0]
  40258c:	b2db      	uxtb	r3, r3
  40258e:	4618      	mov	r0, r3
  402590:	4b06      	ldr	r3, [pc, #24]	; (4025ac <USART0_Handler+0x44>)
  402592:	4798      	blx	r3
	}
}
  402594:	bf00      	nop
  402596:	3708      	adds	r7, #8
  402598:	46bd      	mov	sp, r7
  40259a:	bd80      	pop	{r7, pc}
  40259c:	40024000 	.word	0x40024000
  4025a0:	00401621 	.word	0x00401621
  4025a4:	20000a58 	.word	0x20000a58
  4025a8:	004016e5 	.word	0x004016e5
  4025ac:	00402995 	.word	0x00402995

004025b0 <wifi_command_response_handler>:

void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask)
{
  4025b0:	b580      	push	{r7, lr}
  4025b2:	b084      	sub	sp, #16
  4025b4:	af00      	add	r7, sp, #0
  4025b6:	6078      	str	r0, [r7, #4]
  4025b8:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	process_data_wifi();
  4025ba:	4b0d      	ldr	r3, [pc, #52]	; (4025f0 <wifi_command_response_handler+0x40>)
  4025bc:	4798      	blx	r3
	wifi_comm_success = true;
  4025be:	4b0d      	ldr	r3, [pc, #52]	; (4025f4 <wifi_command_response_handler+0x44>)
  4025c0:	2201      	movs	r2, #1
  4025c2:	601a      	str	r2, [r3, #0]
	for (int jj = 0;jj<1000;jj++) {
  4025c4:	2300      	movs	r3, #0
  4025c6:	60fb      	str	r3, [r7, #12]
  4025c8:	e007      	b.n	4025da <wifi_command_response_handler+0x2a>
		 input_line_wifi[jj] = 0;
  4025ca:	4a0b      	ldr	r2, [pc, #44]	; (4025f8 <wifi_command_response_handler+0x48>)
  4025cc:	68fb      	ldr	r3, [r7, #12]
  4025ce:	4413      	add	r3, r2
  4025d0:	2200      	movs	r2, #0
  4025d2:	701a      	strb	r2, [r3, #0]
	for (int jj = 0;jj<1000;jj++) {
  4025d4:	68fb      	ldr	r3, [r7, #12]
  4025d6:	3301      	adds	r3, #1
  4025d8:	60fb      	str	r3, [r7, #12]
  4025da:	68fb      	ldr	r3, [r7, #12]
  4025dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4025e0:	dbf3      	blt.n	4025ca <wifi_command_response_handler+0x1a>
	}
	input_pos_wifi = 0;
  4025e2:	4b06      	ldr	r3, [pc, #24]	; (4025fc <wifi_command_response_handler+0x4c>)
  4025e4:	2200      	movs	r2, #0
  4025e6:	601a      	str	r2, [r3, #0]
}
  4025e8:	bf00      	nop
  4025ea:	3710      	adds	r7, #16
  4025ec:	46bd      	mov	sp, r7
  4025ee:	bd80      	pop	{r7, pc}
  4025f0:	004029c5 	.word	0x004029c5
  4025f4:	20000a64 	.word	0x20000a64
  4025f8:	2000ce14 	.word	0x2000ce14
  4025fc:	20000a5c 	.word	0x20000a5c

00402600 <wifi_web_setup_handler>:

void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask)
{
  402600:	b480      	push	{r7}
  402602:	b083      	sub	sp, #12
  402604:	af00      	add	r7, sp, #0
  402606:	6078      	str	r0, [r7, #4]
  402608:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	
	wifi_setup_button_flag = true;
  40260a:	4b04      	ldr	r3, [pc, #16]	; (40261c <wifi_web_setup_handler+0x1c>)
  40260c:	2201      	movs	r2, #1
  40260e:	601a      	str	r2, [r3, #0]
}
  402610:	bf00      	nop
  402612:	370c      	adds	r7, #12
  402614:	46bd      	mov	sp, r7
  402616:	bc80      	pop	{r7}
  402618:	4770      	bx	lr
  40261a:	bf00      	nop
  40261c:	20000a60 	.word	0x20000a60

00402620 <configure_usart_wifi>:

void configure_usart_wifi(void)
{
  402620:	b5b0      	push	{r4, r5, r7, lr}
  402622:	b086      	sub	sp, #24
  402624:	af00      	add	r7, sp, #0
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  402626:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40262a:	2005      	movs	r0, #5
  40262c:	4b1c      	ldr	r3, [pc, #112]	; (4026a0 <configure_usart_wifi+0x80>)
  40262e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  402630:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402634:	2006      	movs	r0, #6
  402636:	4b1a      	ldr	r3, [pc, #104]	; (4026a0 <configure_usart_wifi+0x80>)
  402638:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  40263a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40263e:	2008      	movs	r0, #8
  402640:	4b17      	ldr	r3, [pc, #92]	; (4026a0 <configure_usart_wifi+0x80>)
  402642:	4798      	blx	r3
	//gpio_configure_pin(PIN_USART1_RTS_IDX, PIN_USART1_RTS_FLAGS);

	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  402644:	4b17      	ldr	r3, [pc, #92]	; (4026a4 <configure_usart_wifi+0x84>)
  402646:	463c      	mov	r4, r7
  402648:	461d      	mov	r5, r3
  40264a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40264c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40264e:	e895 0003 	ldmia.w	r5, {r0, r1}
  402652:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  402656:	4b14      	ldr	r3, [pc, #80]	; (4026a8 <configure_usart_wifi+0x88>)
  402658:	4798      	blx	r3
  40265a:	4602      	mov	r2, r0
  40265c:	4b13      	ldr	r3, [pc, #76]	; (4026ac <configure_usart_wifi+0x8c>)
  40265e:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  402660:	200e      	movs	r0, #14
  402662:	4b13      	ldr	r3, [pc, #76]	; (4026b0 <configure_usart_wifi+0x90>)
  402664:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(WIFI_USART, &usart_console_settings, ul_sysclk);
  402666:	4b11      	ldr	r3, [pc, #68]	; (4026ac <configure_usart_wifi+0x8c>)
  402668:	681a      	ldr	r2, [r3, #0]
  40266a:	463b      	mov	r3, r7
  40266c:	4619      	mov	r1, r3
  40266e:	4811      	ldr	r0, [pc, #68]	; (4026b4 <configure_usart_wifi+0x94>)
  402670:	4b11      	ldr	r3, [pc, #68]	; (4026b8 <configure_usart_wifi+0x98>)
  402672:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(WIFI_USART, ALL_INTERRUPT_MASK);
  402674:	f04f 31ff 	mov.w	r1, #4294967295
  402678:	480e      	ldr	r0, [pc, #56]	; (4026b4 <configure_usart_wifi+0x94>)
  40267a:	4b10      	ldr	r3, [pc, #64]	; (4026bc <configure_usart_wifi+0x9c>)
  40267c:	4798      	blx	r3

	/* Enable TX & RX function. */
	usart_enable_tx(WIFI_USART);
  40267e:	480d      	ldr	r0, [pc, #52]	; (4026b4 <configure_usart_wifi+0x94>)
  402680:	4b0f      	ldr	r3, [pc, #60]	; (4026c0 <configure_usart_wifi+0xa0>)
  402682:	4798      	blx	r3
	usart_enable_rx(WIFI_USART);
  402684:	480b      	ldr	r0, [pc, #44]	; (4026b4 <configure_usart_wifi+0x94>)
  402686:	4b0f      	ldr	r3, [pc, #60]	; (4026c4 <configure_usart_wifi+0xa4>)
  402688:	4798      	blx	r3

	usart_enable_interrupt(WIFI_USART, US_IER_RXRDY);
  40268a:	2101      	movs	r1, #1
  40268c:	4809      	ldr	r0, [pc, #36]	; (4026b4 <configure_usart_wifi+0x94>)
  40268e:	4b0e      	ldr	r3, [pc, #56]	; (4026c8 <configure_usart_wifi+0xa8>)
  402690:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  402692:	200e      	movs	r0, #14
  402694:	4b0d      	ldr	r3, [pc, #52]	; (4026cc <configure_usart_wifi+0xac>)
  402696:	4798      	blx	r3
}
  402698:	bf00      	nop
  40269a:	3718      	adds	r7, #24
  40269c:	46bd      	mov	sp, r7
  40269e:	bdb0      	pop	{r4, r5, r7, pc}
  4026a0:	004007b1 	.word	0x004007b1
  4026a4:	00408fdc 	.word	0x00408fdc
  4026a8:	00402539 	.word	0x00402539
  4026ac:	20000a78 	.word	0x20000a78
  4026b0:	0040254d 	.word	0x0040254d
  4026b4:	40024000 	.word	0x40024000
  4026b8:	0040154d 	.word	0x0040154d
  4026bc:	00401607 	.word	0x00401607
  4026c0:	0040158d 	.word	0x0040158d
  4026c4:	004015bd 	.word	0x004015bd
  4026c8:	004015ed 	.word	0x004015ed
  4026cc:	0040245d 	.word	0x0040245d

004026d0 <configure_wifi_command_pin>:

void configure_wifi_command_pin(void)
{
  4026d0:	b590      	push	{r4, r7, lr}
  4026d2:	b083      	sub	sp, #12
  4026d4:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_COMM_ID);
  4026d6:	200c      	movs	r0, #12
  4026d8:	4b0e      	ldr	r3, [pc, #56]	; (402714 <configure_wifi_command_pin+0x44>)
  4026da:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK, 10);
  4026dc:	220a      	movs	r2, #10
  4026de:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4026e2:	480d      	ldr	r0, [pc, #52]	; (402718 <configure_wifi_command_pin+0x48>)
  4026e4:	4b0d      	ldr	r3, [pc, #52]	; (40271c <configure_wifi_command_pin+0x4c>)
  4026e6:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_MSK,
  4026e8:	4b0d      	ldr	r3, [pc, #52]	; (402720 <configure_wifi_command_pin+0x50>)
  4026ea:	9300      	str	r3, [sp, #0]
  4026ec:	2370      	movs	r3, #112	; 0x70
  4026ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4026f2:	210c      	movs	r1, #12
  4026f4:	4808      	ldr	r0, [pc, #32]	; (402718 <configure_wifi_command_pin+0x48>)
  4026f6:	4c0b      	ldr	r4, [pc, #44]	; (402724 <configure_wifi_command_pin+0x54>)
  4026f8:	47a0      	blx	r4
			WIFI_COMM_ATTR, wifi_command_response_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  4026fa:	200c      	movs	r0, #12
  4026fc:	4b0a      	ldr	r3, [pc, #40]	; (402728 <configure_wifi_command_pin+0x58>)
  4026fe:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK);
  402700:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402704:	4804      	ldr	r0, [pc, #16]	; (402718 <configure_wifi_command_pin+0x48>)
  402706:	4b09      	ldr	r3, [pc, #36]	; (40272c <configure_wifi_command_pin+0x5c>)
  402708:	4798      	blx	r3
}
  40270a:	bf00      	nop
  40270c:	3704      	adds	r7, #4
  40270e:	46bd      	mov	sp, r7
  402710:	bd90      	pop	{r4, r7, pc}
  402712:	bf00      	nop
  402714:	00400e1d 	.word	0x00400e1d
  402718:	400e1000 	.word	0x400e1000
  40271c:	004004bb 	.word	0x004004bb
  402720:	004025b1 	.word	0x004025b1
  402724:	00400ab1 	.word	0x00400ab1
  402728:	0040245d 	.word	0x0040245d
  40272c:	0040074f 	.word	0x0040074f

00402730 <configure_wifi_web_setup_pin>:

void configure_wifi_web_setup_pin(void)
{
  402730:	b590      	push	{r4, r7, lr}
  402732:	b083      	sub	sp, #12
  402734:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WEB_SETUP_BUTTON_ID);
  402736:	200b      	movs	r0, #11
  402738:	4b0e      	ldr	r3, [pc, #56]	; (402774 <configure_wifi_web_setup_pin+0x44>)
  40273a:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WEB_SETUP_BUTTON_PIO, WEB_SETUP_BUTTON_PIN_MSK, 10);
  40273c:	220a      	movs	r2, #10
  40273e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  402742:	480d      	ldr	r0, [pc, #52]	; (402778 <configure_wifi_web_setup_pin+0x48>)
  402744:	4b0d      	ldr	r3, [pc, #52]	; (40277c <configure_wifi_web_setup_pin+0x4c>)
  402746:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WEB_SETUP_BUTTON_PIO, WEB_SETUP_BUTTON_ID, WEB_SETUP_BUTTON_PIN_MSK,
  402748:	4b0d      	ldr	r3, [pc, #52]	; (402780 <configure_wifi_web_setup_pin+0x50>)
  40274a:	9300      	str	r3, [sp, #0]
  40274c:	2370      	movs	r3, #112	; 0x70
  40274e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402752:	210b      	movs	r1, #11
  402754:	4808      	ldr	r0, [pc, #32]	; (402778 <configure_wifi_web_setup_pin+0x48>)
  402756:	4c0b      	ldr	r4, [pc, #44]	; (402784 <configure_wifi_web_setup_pin+0x54>)
  402758:	47a0      	blx	r4
			WEB_SETUP_BUTTON_ATTR, wifi_web_setup_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WEB_SETUP_BUTTON_ID);
  40275a:	200b      	movs	r0, #11
  40275c:	4b0a      	ldr	r3, [pc, #40]	; (402788 <configure_wifi_web_setup_pin+0x58>)
  40275e:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WEB_SETUP_BUTTON_PIO, WEB_SETUP_BUTTON_PIN_MSK);
  402760:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  402764:	4804      	ldr	r0, [pc, #16]	; (402778 <configure_wifi_web_setup_pin+0x48>)
  402766:	4b09      	ldr	r3, [pc, #36]	; (40278c <configure_wifi_web_setup_pin+0x5c>)
  402768:	4798      	blx	r3
}
  40276a:	bf00      	nop
  40276c:	3704      	adds	r7, #4
  40276e:	46bd      	mov	sp, r7
  402770:	bd90      	pop	{r4, r7, pc}
  402772:	bf00      	nop
  402774:	00400e1d 	.word	0x00400e1d
  402778:	400e0e00 	.word	0x400e0e00
  40277c:	004004bb 	.word	0x004004bb
  402780:	00402601 	.word	0x00402601
  402784:	00400ab1 	.word	0x00400ab1
  402788:	0040245d 	.word	0x0040245d
  40278c:	0040074f 	.word	0x0040074f

00402790 <write_wifi_command>:

void write_wifi_command(char* comm, uint8_t cnt)
{
  402790:	b580      	push	{r7, lr}
  402792:	b082      	sub	sp, #8
  402794:	af00      	add	r7, sp, #0
  402796:	6078      	str	r0, [r7, #4]
  402798:	460b      	mov	r3, r1
  40279a:	70fb      	strb	r3, [r7, #3]
	//Write command to the AMW136
	usart_write_line(WIFI_USART, comm);
  40279c:	6879      	ldr	r1, [r7, #4]
  40279e:	480e      	ldr	r0, [pc, #56]	; (4027d8 <write_wifi_command+0x48>)
  4027a0:	4b0e      	ldr	r3, [pc, #56]	; (4027dc <write_wifi_command+0x4c>)
  4027a2:	4798      	blx	r3
	
	//Wait for either an acknowledgment or a timeout
	counts = 0;
  4027a4:	4b0e      	ldr	r3, [pc, #56]	; (4027e0 <write_wifi_command+0x50>)
  4027a6:	2200      	movs	r2, #0
  4027a8:	601a      	str	r2, [r3, #0]
	while (counts < cnt)
  4027aa:	e00c      	b.n	4027c6 <write_wifi_command+0x36>
	{
		if (wifi_comm_success==true)
  4027ac:	4b0d      	ldr	r3, [pc, #52]	; (4027e4 <write_wifi_command+0x54>)
  4027ae:	681b      	ldr	r3, [r3, #0]
  4027b0:	2b01      	cmp	r3, #1
  4027b2:	d103      	bne.n	4027bc <write_wifi_command+0x2c>
		{
			wifi_comm_success = false;
  4027b4:	4b0b      	ldr	r3, [pc, #44]	; (4027e4 <write_wifi_command+0x54>)
  4027b6:	2200      	movs	r2, #0
  4027b8:	601a      	str	r2, [r3, #0]
			return;
  4027ba:	e00a      	b.n	4027d2 <write_wifi_command+0x42>
		}
		else{
			counts++;
  4027bc:	4b08      	ldr	r3, [pc, #32]	; (4027e0 <write_wifi_command+0x50>)
  4027be:	681b      	ldr	r3, [r3, #0]
  4027c0:	3301      	adds	r3, #1
  4027c2:	4a07      	ldr	r2, [pc, #28]	; (4027e0 <write_wifi_command+0x50>)
  4027c4:	6013      	str	r3, [r2, #0]
	while (counts < cnt)
  4027c6:	78fa      	ldrb	r2, [r7, #3]
  4027c8:	4b05      	ldr	r3, [pc, #20]	; (4027e0 <write_wifi_command+0x50>)
  4027ca:	681b      	ldr	r3, [r3, #0]
  4027cc:	429a      	cmp	r2, r3
  4027ce:	d8ed      	bhi.n	4027ac <write_wifi_command+0x1c>
		}
		
	}
	return;
  4027d0:	bf00      	nop
}
  4027d2:	3708      	adds	r7, #8
  4027d4:	46bd      	mov	sp, r7
  4027d6:	bd80      	pop	{r7, pc}
  4027d8:	40024000 	.word	0x40024000
  4027dc:	004016b5 	.word	0x004016b5
  4027e0:	20000a74 	.word	0x20000a74
  4027e4:	20000a64 	.word	0x20000a64

004027e8 <write_image_to_file>:

void write_image_to_file(void)
{
  4027e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4027ec:	b09d      	sub	sp, #116	; 0x74
  4027ee:	af00      	add	r7, sp, #0
	if (find_image_len()==0)
  4027f0:	4b57      	ldr	r3, [pc, #348]	; (402950 <write_image_to_file+0x168>)
  4027f2:	4798      	blx	r3
  4027f4:	4603      	mov	r3, r0
  4027f6:	2b00      	cmp	r3, #0
  4027f8:	f000 80a4 	beq.w	402944 <write_image_to_file+0x15c>
	{
		return;
	}
	
	image_length = end_of_image - start_of_image;
  4027fc:	4b55      	ldr	r3, [pc, #340]	; (402954 <write_image_to_file+0x16c>)
  4027fe:	681a      	ldr	r2, [r3, #0]
  402800:	4b55      	ldr	r3, [pc, #340]	; (402958 <write_image_to_file+0x170>)
  402802:	681b      	ldr	r3, [r3, #0]
  402804:	1ad3      	subs	r3, r2, r3
  402806:	4a55      	ldr	r2, [pc, #340]	; (40295c <write_image_to_file+0x174>)
  402808:	6013      	str	r3, [r2, #0]
	char string[100] = {0};
  40280a:	f107 0308 	add.w	r3, r7, #8
  40280e:	2264      	movs	r2, #100	; 0x64
  402810:	2100      	movs	r1, #0
  402812:	4618      	mov	r0, r3
  402814:	4b52      	ldr	r3, [pc, #328]	; (402960 <write_image_to_file+0x178>)
  402816:	4798      	blx	r3
	sprintf(string,"image_transfer %u\r\n\0", image_length);
  402818:	4b50      	ldr	r3, [pc, #320]	; (40295c <write_image_to_file+0x174>)
  40281a:	681a      	ldr	r2, [r3, #0]
  40281c:	f107 0308 	add.w	r3, r7, #8
  402820:	4950      	ldr	r1, [pc, #320]	; (402964 <write_image_to_file+0x17c>)
  402822:	4618      	mov	r0, r3
  402824:	4b50      	ldr	r3, [pc, #320]	; (402968 <write_image_to_file+0x180>)
  402826:	4798      	blx	r3
	write_wifi_command(string, 2);
  402828:	f107 0308 	add.w	r3, r7, #8
  40282c:	2102      	movs	r1, #2
  40282e:	4618      	mov	r0, r3
  402830:	4b4e      	ldr	r3, [pc, #312]	; (40296c <write_image_to_file+0x184>)
  402832:	4798      	blx	r3
	delay_ms(100);
  402834:	4b4e      	ldr	r3, [pc, #312]	; (402970 <write_image_to_file+0x188>)
  402836:	4798      	blx	r3
  402838:	4603      	mov	r3, r0
  40283a:	4619      	mov	r1, r3
  40283c:	f04f 0200 	mov.w	r2, #0
  402840:	460b      	mov	r3, r1
  402842:	4614      	mov	r4, r2
  402844:	18db      	adds	r3, r3, r3
  402846:	eb44 0404 	adc.w	r4, r4, r4
  40284a:	185b      	adds	r3, r3, r1
  40284c:	eb44 0402 	adc.w	r4, r4, r2
  402850:	0166      	lsls	r6, r4, #5
  402852:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  402856:	015d      	lsls	r5, r3, #5
  402858:	195b      	adds	r3, r3, r5
  40285a:	eb44 0406 	adc.w	r4, r4, r6
  40285e:	185b      	adds	r3, r3, r1
  402860:	eb44 0402 	adc.w	r4, r4, r2
  402864:	f243 61af 	movw	r1, #13999	; 0x36af
  402868:	f04f 0200 	mov.w	r2, #0
  40286c:	185d      	adds	r5, r3, r1
  40286e:	eb44 0602 	adc.w	r6, r4, r2
  402872:	4628      	mov	r0, r5
  402874:	4631      	mov	r1, r6
  402876:	4c3f      	ldr	r4, [pc, #252]	; (402974 <write_image_to_file+0x18c>)
  402878:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40287c:	f04f 0300 	mov.w	r3, #0
  402880:	47a0      	blx	r4
  402882:	4603      	mov	r3, r0
  402884:	460c      	mov	r4, r1
  402886:	4618      	mov	r0, r3
  402888:	4b3b      	ldr	r3, [pc, #236]	; (402978 <write_image_to_file+0x190>)
  40288a:	4798      	blx	r3
	
 	while(!start_image_transfer){}
  40288c:	bf00      	nop
  40288e:	4b3b      	ldr	r3, [pc, #236]	; (40297c <write_image_to_file+0x194>)
  402890:	681b      	ldr	r3, [r3, #0]
  402892:	2b00      	cmp	r3, #0
  402894:	d0fb      	beq.n	40288e <write_image_to_file+0xa6>
	
	uint32_t img = start_of_image;
  402896:	4b30      	ldr	r3, [pc, #192]	; (402958 <write_image_to_file+0x170>)
  402898:	681b      	ldr	r3, [r3, #0]
  40289a:	66fb      	str	r3, [r7, #108]	; 0x6c
	while (img < end_of_image)
  40289c:	e00a      	b.n	4028b4 <write_image_to_file+0xcc>
	{
		usart_putchar(WIFI_USART, image_buffer[img]);
  40289e:	4a38      	ldr	r2, [pc, #224]	; (402980 <write_image_to_file+0x198>)
  4028a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  4028a2:	4413      	add	r3, r2
  4028a4:	781b      	ldrb	r3, [r3, #0]
  4028a6:	4619      	mov	r1, r3
  4028a8:	4836      	ldr	r0, [pc, #216]	; (402984 <write_image_to_file+0x19c>)
  4028aa:	4b37      	ldr	r3, [pc, #220]	; (402988 <write_image_to_file+0x1a0>)
  4028ac:	4798      	blx	r3
		img++;
  4028ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  4028b0:	3301      	adds	r3, #1
  4028b2:	66fb      	str	r3, [r7, #108]	; 0x6c
	while (img < end_of_image)
  4028b4:	4b27      	ldr	r3, [pc, #156]	; (402954 <write_image_to_file+0x16c>)
  4028b6:	681b      	ldr	r3, [r3, #0]
  4028b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
  4028ba:	429a      	cmp	r2, r3
  4028bc:	d3ef      	bcc.n	40289e <write_image_to_file+0xb6>
	}
	
	usart_write_line(WIFI_USART, "Complete\r\n");
  4028be:	4933      	ldr	r1, [pc, #204]	; (40298c <write_image_to_file+0x1a4>)
  4028c0:	4830      	ldr	r0, [pc, #192]	; (402984 <write_image_to_file+0x19c>)
  4028c2:	4b33      	ldr	r3, [pc, #204]	; (402990 <write_image_to_file+0x1a8>)
  4028c4:	4798      	blx	r3
	delay_s(2);
  4028c6:	4b2a      	ldr	r3, [pc, #168]	; (402970 <write_image_to_file+0x188>)
  4028c8:	4798      	blx	r3
  4028ca:	4603      	mov	r3, r0
  4028cc:	4619      	mov	r1, r3
  4028ce:	f04f 0200 	mov.w	r2, #0
  4028d2:	460b      	mov	r3, r1
  4028d4:	4614      	mov	r4, r2
  4028d6:	0160      	lsls	r0, r4, #5
  4028d8:	6078      	str	r0, [r7, #4]
  4028da:	6878      	ldr	r0, [r7, #4]
  4028dc:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  4028e0:	6078      	str	r0, [r7, #4]
  4028e2:	015b      	lsls	r3, r3, #5
  4028e4:	603b      	str	r3, [r7, #0]
  4028e6:	e9d7 3400 	ldrd	r3, r4, [r7]
  4028ea:	1a5b      	subs	r3, r3, r1
  4028ec:	eb64 0402 	sbc.w	r4, r4, r2
  4028f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  4028f4:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  4028f8:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  4028fc:	4653      	mov	r3, sl
  4028fe:	465c      	mov	r4, fp
  402900:	185b      	adds	r3, r3, r1
  402902:	eb44 0402 	adc.w	r4, r4, r2
  402906:	ea4f 1904 	mov.w	r9, r4, lsl #4
  40290a:	ea49 7913 	orr.w	r9, r9, r3, lsr #28
  40290e:	ea4f 1803 	mov.w	r8, r3, lsl #4
  402912:	4643      	mov	r3, r8
  402914:	464c      	mov	r4, r9
  402916:	4619      	mov	r1, r3
  402918:	4622      	mov	r2, r4
  40291a:	f243 63af 	movw	r3, #13999	; 0x36af
  40291e:	f04f 0400 	mov.w	r4, #0
  402922:	18cd      	adds	r5, r1, r3
  402924:	eb42 0604 	adc.w	r6, r2, r4
  402928:	4628      	mov	r0, r5
  40292a:	4631      	mov	r1, r6
  40292c:	4c11      	ldr	r4, [pc, #68]	; (402974 <write_image_to_file+0x18c>)
  40292e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402932:	f04f 0300 	mov.w	r3, #0
  402936:	47a0      	blx	r4
  402938:	4603      	mov	r3, r0
  40293a:	460c      	mov	r4, r1
  40293c:	4618      	mov	r0, r3
  40293e:	4b0e      	ldr	r3, [pc, #56]	; (402978 <write_image_to_file+0x190>)
  402940:	4798      	blx	r3
  402942:	e000      	b.n	402946 <write_image_to_file+0x15e>
		return;
  402944:	bf00      	nop
	
}
  402946:	3774      	adds	r7, #116	; 0x74
  402948:	46bd      	mov	sp, r7
  40294a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40294e:	bf00      	nop
  402950:	00401cf9 	.word	0x00401cf9
  402954:	20000ac0 	.word	0x20000ac0
  402958:	20000ab8 	.word	0x20000ab8
  40295c:	20000a68 	.word	0x20000a68
  402960:	00403869 	.word	0x00403869
  402964:	00408ff4 	.word	0x00408ff4
  402968:	00403905 	.word	0x00403905
  40296c:	00402791 	.word	0x00402791
  402970:	00402525 	.word	0x00402525
  402974:	00403509 	.word	0x00403509
  402978:	20000001 	.word	0x20000001
  40297c:	20000a6c 	.word	0x20000a6c
  402980:	20000ac4 	.word	0x20000ac4
  402984:	40024000 	.word	0x40024000
  402988:	00401685 	.word	0x00401685
  40298c:	0040900c 	.word	0x0040900c
  402990:	004016b5 	.word	0x004016b5

00402994 <process_incoming_byte_wifi>:

void process_incoming_byte_wifi(uint8_t in_byte) {
  402994:	b480      	push	{r7}
  402996:	b083      	sub	sp, #12
  402998:	af00      	add	r7, sp, #0
  40299a:	4603      	mov	r3, r0
  40299c:	71fb      	strb	r3, [r7, #7]
	
	input_line_wifi[input_pos_wifi] = in_byte;
  40299e:	4b07      	ldr	r3, [pc, #28]	; (4029bc <process_incoming_byte_wifi+0x28>)
  4029a0:	681b      	ldr	r3, [r3, #0]
  4029a2:	4907      	ldr	r1, [pc, #28]	; (4029c0 <process_incoming_byte_wifi+0x2c>)
  4029a4:	79fa      	ldrb	r2, [r7, #7]
  4029a6:	54ca      	strb	r2, [r1, r3]
	input_pos_wifi++;
  4029a8:	4b04      	ldr	r3, [pc, #16]	; (4029bc <process_incoming_byte_wifi+0x28>)
  4029aa:	681b      	ldr	r3, [r3, #0]
  4029ac:	3301      	adds	r3, #1
  4029ae:	4a03      	ldr	r2, [pc, #12]	; (4029bc <process_incoming_byte_wifi+0x28>)
  4029b0:	6013      	str	r3, [r2, #0]
}
  4029b2:	bf00      	nop
  4029b4:	370c      	adds	r7, #12
  4029b6:	46bd      	mov	sp, r7
  4029b8:	bc80      	pop	{r7}
  4029ba:	4770      	bx	lr
  4029bc:	20000a5c 	.word	0x20000a5c
  4029c0:	2000ce14 	.word	0x2000ce14

004029c4 <process_data_wifi>:

void process_data_wifi(void) {
  4029c4:	b580      	push	{r7, lr}
  4029c6:	af00      	add	r7, sp, #0
	
	if (strstr(input_line_wifi, "None")) {
  4029c8:	490a      	ldr	r1, [pc, #40]	; (4029f4 <process_data_wifi+0x30>)
  4029ca:	480b      	ldr	r0, [pc, #44]	; (4029f8 <process_data_wifi+0x34>)
  4029cc:	4b0b      	ldr	r3, [pc, #44]	; (4029fc <process_data_wifi+0x38>)
  4029ce:	4798      	blx	r3
  4029d0:	4603      	mov	r3, r0
  4029d2:	2b00      	cmp	r3, #0
  4029d4:	d002      	beq.n	4029dc <process_data_wifi+0x18>
		wait_flag = 1;
  4029d6:	4b0a      	ldr	r3, [pc, #40]	; (402a00 <process_data_wifi+0x3c>)
  4029d8:	2201      	movs	r2, #1
  4029da:	601a      	str	r2, [r3, #0]
	} 
	if (strstr(input_line_wifi, "image_transfer")){
  4029dc:	4909      	ldr	r1, [pc, #36]	; (402a04 <process_data_wifi+0x40>)
  4029de:	4806      	ldr	r0, [pc, #24]	; (4029f8 <process_data_wifi+0x34>)
  4029e0:	4b06      	ldr	r3, [pc, #24]	; (4029fc <process_data_wifi+0x38>)
  4029e2:	4798      	blx	r3
  4029e4:	4603      	mov	r3, r0
  4029e6:	2b00      	cmp	r3, #0
  4029e8:	d002      	beq.n	4029f0 <process_data_wifi+0x2c>
		start_image_transfer = 1;
  4029ea:	4b07      	ldr	r3, [pc, #28]	; (402a08 <process_data_wifi+0x44>)
  4029ec:	2201      	movs	r2, #1
  4029ee:	601a      	str	r2, [r3, #0]
	}
  4029f0:	bf00      	nop
  4029f2:	bd80      	pop	{r7, pc}
  4029f4:	00409018 	.word	0x00409018
  4029f8:	2000ce14 	.word	0x2000ce14
  4029fc:	00403c01 	.word	0x00403c01
  402a00:	20000a70 	.word	0x20000a70
  402a04:	00409020 	.word	0x00409020
  402a08:	20000a6c 	.word	0x20000a6c

00402a0c <sysclk_enable_peripheral_clock>:
{
  402a0c:	b580      	push	{r7, lr}
  402a0e:	b082      	sub	sp, #8
  402a10:	af00      	add	r7, sp, #0
  402a12:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402a14:	6878      	ldr	r0, [r7, #4]
  402a16:	4b03      	ldr	r3, [pc, #12]	; (402a24 <sysclk_enable_peripheral_clock+0x18>)
  402a18:	4798      	blx	r3
}
  402a1a:	bf00      	nop
  402a1c:	3708      	adds	r7, #8
  402a1e:	46bd      	mov	sp, r7
  402a20:	bd80      	pop	{r7, pc}
  402a22:	bf00      	nop
  402a24:	00400e1d 	.word	0x00400e1d

00402a28 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  402a28:	b580      	push	{r7, lr}
  402a2a:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  402a2c:	200b      	movs	r0, #11
  402a2e:	4b03      	ldr	r3, [pc, #12]	; (402a3c <ioport_init+0x14>)
  402a30:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  402a32:	200c      	movs	r0, #12
  402a34:	4b01      	ldr	r3, [pc, #4]	; (402a3c <ioport_init+0x14>)
  402a36:	4798      	blx	r3
	arch_ioport_init();
}
  402a38:	bf00      	nop
  402a3a:	bd80      	pop	{r7, pc}
  402a3c:	00402a0d 	.word	0x00402a0d

00402a40 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  402a40:	b480      	push	{r7}
  402a42:	b08d      	sub	sp, #52	; 0x34
  402a44:	af00      	add	r7, sp, #0
  402a46:	6078      	str	r0, [r7, #4]
  402a48:	460b      	mov	r3, r1
  402a4a:	70fb      	strb	r3, [r7, #3]
  402a4c:	687b      	ldr	r3, [r7, #4]
  402a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  402a50:	78fb      	ldrb	r3, [r7, #3]
  402a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402a58:	627b      	str	r3, [r7, #36]	; 0x24
  402a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402a5c:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  402a5e:	6a3b      	ldr	r3, [r7, #32]
  402a60:	095b      	lsrs	r3, r3, #5
  402a62:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402a64:	69fb      	ldr	r3, [r7, #28]
  402a66:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402a6a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402a6e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402a70:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  402a72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402a76:	2b01      	cmp	r3, #1
  402a78:	d109      	bne.n	402a8e <ioport_set_pin_dir+0x4e>
  402a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402a7c:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  402a7e:	697b      	ldr	r3, [r7, #20]
  402a80:	f003 031f 	and.w	r3, r3, #31
  402a84:	2201      	movs	r2, #1
  402a86:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402a88:	69bb      	ldr	r3, [r7, #24]
  402a8a:	611a      	str	r2, [r3, #16]
  402a8c:	e00c      	b.n	402aa8 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  402a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402a92:	2b00      	cmp	r3, #0
  402a94:	d108      	bne.n	402aa8 <ioport_set_pin_dir+0x68>
  402a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402a98:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  402a9a:	693b      	ldr	r3, [r7, #16]
  402a9c:	f003 031f 	and.w	r3, r3, #31
  402aa0:	2201      	movs	r2, #1
  402aa2:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402aa4:	69bb      	ldr	r3, [r7, #24]
  402aa6:	615a      	str	r2, [r3, #20]
  402aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402aaa:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402aac:	68fb      	ldr	r3, [r7, #12]
  402aae:	f003 031f 	and.w	r3, r3, #31
  402ab2:	2201      	movs	r2, #1
  402ab4:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402ab6:	69bb      	ldr	r3, [r7, #24]
  402ab8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402abc:	bf00      	nop
  402abe:	3734      	adds	r7, #52	; 0x34
  402ac0:	46bd      	mov	sp, r7
  402ac2:	bc80      	pop	{r7}
  402ac4:	4770      	bx	lr

00402ac6 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402ac6:	b480      	push	{r7}
  402ac8:	b08b      	sub	sp, #44	; 0x2c
  402aca:	af00      	add	r7, sp, #0
  402acc:	6078      	str	r0, [r7, #4]
  402ace:	460b      	mov	r3, r1
  402ad0:	70fb      	strb	r3, [r7, #3]
  402ad2:	687b      	ldr	r3, [r7, #4]
  402ad4:	627b      	str	r3, [r7, #36]	; 0x24
  402ad6:	78fb      	ldrb	r3, [r7, #3]
  402ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402ade:	61fb      	str	r3, [r7, #28]
  402ae0:	69fb      	ldr	r3, [r7, #28]
  402ae2:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  402ae4:	69bb      	ldr	r3, [r7, #24]
  402ae6:	095b      	lsrs	r3, r3, #5
  402ae8:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402aea:	697b      	ldr	r3, [r7, #20]
  402aec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402af0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402af4:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402af6:	613b      	str	r3, [r7, #16]

	if (level) {
  402af8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402afc:	2b00      	cmp	r3, #0
  402afe:	d009      	beq.n	402b14 <ioport_set_pin_level+0x4e>
  402b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b02:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402b04:	68fb      	ldr	r3, [r7, #12]
  402b06:	f003 031f 	and.w	r3, r3, #31
  402b0a:	2201      	movs	r2, #1
  402b0c:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402b0e:	693b      	ldr	r3, [r7, #16]
  402b10:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  402b12:	e008      	b.n	402b26 <ioport_set_pin_level+0x60>
  402b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b16:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  402b18:	68bb      	ldr	r3, [r7, #8]
  402b1a:	f003 031f 	and.w	r3, r3, #31
  402b1e:	2201      	movs	r2, #1
  402b20:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402b22:	693b      	ldr	r3, [r7, #16]
  402b24:	635a      	str	r2, [r3, #52]	; 0x34
  402b26:	bf00      	nop
  402b28:	372c      	adds	r7, #44	; 0x2c
  402b2a:	46bd      	mov	sp, r7
  402b2c:	bc80      	pop	{r7}
  402b2e:	4770      	bx	lr

00402b30 <board_init>:
#include <board.h>
#include <conf_board.h>
#include "wifi.h"

void board_init(void)
{
  402b30:	b580      	push	{r7, lr}
  402b32:	af00      	add	r7, sp, #0
	
	ioport_init();
  402b34:	4b0f      	ldr	r3, [pc, #60]	; (402b74 <board_init+0x44>)
  402b36:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_RESET_PIN, IOPORT_DIR_OUTPUT);
  402b38:	2101      	movs	r1, #1
  402b3a:	2000      	movs	r0, #0
  402b3c:	4b0e      	ldr	r3, [pc, #56]	; (402b78 <board_init+0x48>)
  402b3e:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET_PIN, true);
  402b40:	2101      	movs	r1, #1
  402b42:	2000      	movs	r0, #0
  402b44:	4b0d      	ldr	r3, [pc, #52]	; (402b7c <board_init+0x4c>)
  402b46:	4798      	blx	r3
	
	//ioport_set_pin_dir(PIN_LED, IOPORT_DIR_OUTPUT);
	//ioport_set_pin_level(PIN_LED, false);
	
	ioport_set_pin_dir(WIFI_CTS_PIN, IOPORT_DIR_OUTPUT);
  402b48:	2101      	movs	r1, #1
  402b4a:	2007      	movs	r0, #7
  402b4c:	4b0a      	ldr	r3, [pc, #40]	; (402b78 <board_init+0x48>)
  402b4e:	4798      	blx	r3
	ioport_set_pin_level(WIFI_CTS_PIN, false);
  402b50:	2100      	movs	r1, #0
  402b52:	2007      	movs	r0, #7
  402b54:	4b09      	ldr	r3, [pc, #36]	; (402b7c <board_init+0x4c>)
  402b56:	4798      	blx	r3
	
	ioport_set_pin_dir(CAM_RST, IOPORT_DIR_OUTPUT);
  402b58:	2101      	movs	r1, #1
  402b5a:	2014      	movs	r0, #20
  402b5c:	4b06      	ldr	r3, [pc, #24]	; (402b78 <board_init+0x48>)
  402b5e:	4798      	blx	r3
	ioport_set_pin_dir(CAM_RST, false);
  402b60:	2100      	movs	r1, #0
  402b62:	2014      	movs	r0, #20
  402b64:	4b04      	ldr	r3, [pc, #16]	; (402b78 <board_init+0x48>)
  402b66:	4798      	blx	r3
	
	ioport_set_pin_dir(WIFI_STATUS, IOPORT_DIR_INPUT);
  402b68:	2100      	movs	r1, #0
  402b6a:	200a      	movs	r0, #10
  402b6c:	4b02      	ldr	r3, [pc, #8]	; (402b78 <board_init+0x48>)
  402b6e:	4798      	blx	r3
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
}
  402b70:	bf00      	nop
  402b72:	bd80      	pop	{r7, pc}
  402b74:	00402a29 	.word	0x00402a29
  402b78:	00402a41 	.word	0x00402a41
  402b7c:	00402ac7 	.word	0x00402ac7

00402b80 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402b80:	b580      	push	{r7, lr}
  402b82:	b084      	sub	sp, #16
  402b84:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  402b86:	4b27      	ldr	r3, [pc, #156]	; (402c24 <Reset_Handler+0xa4>)
  402b88:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  402b8a:	4b27      	ldr	r3, [pc, #156]	; (402c28 <Reset_Handler+0xa8>)
  402b8c:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  402b8e:	68fa      	ldr	r2, [r7, #12]
  402b90:	68bb      	ldr	r3, [r7, #8]
  402b92:	429a      	cmp	r2, r3
  402b94:	d90d      	bls.n	402bb2 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  402b96:	e007      	b.n	402ba8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  402b98:	68bb      	ldr	r3, [r7, #8]
  402b9a:	1d1a      	adds	r2, r3, #4
  402b9c:	60ba      	str	r2, [r7, #8]
  402b9e:	68fa      	ldr	r2, [r7, #12]
  402ba0:	1d11      	adds	r1, r2, #4
  402ba2:	60f9      	str	r1, [r7, #12]
  402ba4:	6812      	ldr	r2, [r2, #0]
  402ba6:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  402ba8:	68bb      	ldr	r3, [r7, #8]
  402baa:	4a20      	ldr	r2, [pc, #128]	; (402c2c <Reset_Handler+0xac>)
  402bac:	4293      	cmp	r3, r2
  402bae:	d3f3      	bcc.n	402b98 <Reset_Handler+0x18>
  402bb0:	e020      	b.n	402bf4 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  402bb2:	68fa      	ldr	r2, [r7, #12]
  402bb4:	68bb      	ldr	r3, [r7, #8]
  402bb6:	429a      	cmp	r2, r3
  402bb8:	d21c      	bcs.n	402bf4 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402bba:	4a1c      	ldr	r2, [pc, #112]	; (402c2c <Reset_Handler+0xac>)
  402bbc:	4b1a      	ldr	r3, [pc, #104]	; (402c28 <Reset_Handler+0xa8>)
  402bbe:	1ad3      	subs	r3, r2, r3
  402bc0:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402bc2:	68fa      	ldr	r2, [r7, #12]
  402bc4:	687b      	ldr	r3, [r7, #4]
  402bc6:	4413      	add	r3, r2
  402bc8:	3b04      	subs	r3, #4
  402bca:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  402bcc:	68ba      	ldr	r2, [r7, #8]
  402bce:	687b      	ldr	r3, [r7, #4]
  402bd0:	4413      	add	r3, r2
  402bd2:	3b04      	subs	r3, #4
  402bd4:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  402bd6:	e00a      	b.n	402bee <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  402bd8:	68bb      	ldr	r3, [r7, #8]
  402bda:	1f1a      	subs	r2, r3, #4
  402bdc:	60ba      	str	r2, [r7, #8]
  402bde:	68fa      	ldr	r2, [r7, #12]
  402be0:	1f11      	subs	r1, r2, #4
  402be2:	60f9      	str	r1, [r7, #12]
  402be4:	6812      	ldr	r2, [r2, #0]
  402be6:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  402be8:	687b      	ldr	r3, [r7, #4]
  402bea:	3b04      	subs	r3, #4
  402bec:	607b      	str	r3, [r7, #4]
  402bee:	687b      	ldr	r3, [r7, #4]
  402bf0:	2b00      	cmp	r3, #0
  402bf2:	d1f1      	bne.n	402bd8 <Reset_Handler+0x58>
		}
	}
	__NOP();
  402bf4:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402bf6:	4b0e      	ldr	r3, [pc, #56]	; (402c30 <Reset_Handler+0xb0>)
  402bf8:	60bb      	str	r3, [r7, #8]
  402bfa:	e004      	b.n	402c06 <Reset_Handler+0x86>
		*pDest++ = 0;
  402bfc:	68bb      	ldr	r3, [r7, #8]
  402bfe:	1d1a      	adds	r2, r3, #4
  402c00:	60ba      	str	r2, [r7, #8]
  402c02:	2200      	movs	r2, #0
  402c04:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  402c06:	68bb      	ldr	r3, [r7, #8]
  402c08:	4a0a      	ldr	r2, [pc, #40]	; (402c34 <Reset_Handler+0xb4>)
  402c0a:	4293      	cmp	r3, r2
  402c0c:	d3f6      	bcc.n	402bfc <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  402c0e:	4b0a      	ldr	r3, [pc, #40]	; (402c38 <Reset_Handler+0xb8>)
  402c10:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  402c12:	4a0a      	ldr	r2, [pc, #40]	; (402c3c <Reset_Handler+0xbc>)
  402c14:	68fb      	ldr	r3, [r7, #12]
  402c16:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  402c18:	4b09      	ldr	r3, [pc, #36]	; (402c40 <Reset_Handler+0xc0>)
  402c1a:	4798      	blx	r3

	/* Branch to main function */
	main();
  402c1c:	4b09      	ldr	r3, [pc, #36]	; (402c44 <Reset_Handler+0xc4>)
  402c1e:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402c20:	e7fe      	b.n	402c20 <Reset_Handler+0xa0>
  402c22:	bf00      	nop
  402c24:	004093dc 	.word	0x004093dc
  402c28:	20000000 	.word	0x20000000
  402c2c:	200009bc 	.word	0x200009bc
  402c30:	200009bc 	.word	0x200009bc
  402c34:	2000d200 	.word	0x2000d200
  402c38:	00400000 	.word	0x00400000
  402c3c:	e000ed00 	.word	0xe000ed00
  402c40:	00403819 	.word	0x00403819
  402c44:	00403031 	.word	0x00403031

00402c48 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402c48:	b480      	push	{r7}
  402c4a:	af00      	add	r7, sp, #0
	while (1) {
  402c4c:	e7fe      	b.n	402c4c <Dummy_Handler+0x4>
	...

00402c50 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  402c50:	b480      	push	{r7}
  402c52:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402c54:	4b5d      	ldr	r3, [pc, #372]	; (402dcc <SystemCoreClockUpdate+0x17c>)
  402c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c58:	f003 0303 	and.w	r3, r3, #3
  402c5c:	2b03      	cmp	r3, #3
  402c5e:	f200 8096 	bhi.w	402d8e <SystemCoreClockUpdate+0x13e>
  402c62:	a201      	add	r2, pc, #4	; (adr r2, 402c68 <SystemCoreClockUpdate+0x18>)
  402c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402c68:	00402c79 	.word	0x00402c79
  402c6c:	00402c99 	.word	0x00402c99
  402c70:	00402ce3 	.word	0x00402ce3
  402c74:	00402ce3 	.word	0x00402ce3
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402c78:	4b55      	ldr	r3, [pc, #340]	; (402dd0 <SystemCoreClockUpdate+0x180>)
  402c7a:	695b      	ldr	r3, [r3, #20]
  402c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402c80:	2b00      	cmp	r3, #0
  402c82:	d004      	beq.n	402c8e <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402c84:	4b53      	ldr	r3, [pc, #332]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402c86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402c8a:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  402c8c:	e080      	b.n	402d90 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402c8e:	4b51      	ldr	r3, [pc, #324]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402c90:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402c94:	601a      	str	r2, [r3, #0]
		break;
  402c96:	e07b      	b.n	402d90 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402c98:	4b4c      	ldr	r3, [pc, #304]	; (402dcc <SystemCoreClockUpdate+0x17c>)
  402c9a:	6a1b      	ldr	r3, [r3, #32]
  402c9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402ca0:	2b00      	cmp	r3, #0
  402ca2:	d003      	beq.n	402cac <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402ca4:	4b4b      	ldr	r3, [pc, #300]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402ca6:	4a4c      	ldr	r2, [pc, #304]	; (402dd8 <SystemCoreClockUpdate+0x188>)
  402ca8:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  402caa:	e071      	b.n	402d90 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402cac:	4b49      	ldr	r3, [pc, #292]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402cae:	4a4b      	ldr	r2, [pc, #300]	; (402ddc <SystemCoreClockUpdate+0x18c>)
  402cb0:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402cb2:	4b46      	ldr	r3, [pc, #280]	; (402dcc <SystemCoreClockUpdate+0x17c>)
  402cb4:	6a1b      	ldr	r3, [r3, #32]
  402cb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402cba:	2b10      	cmp	r3, #16
  402cbc:	d008      	beq.n	402cd0 <SystemCoreClockUpdate+0x80>
  402cbe:	2b20      	cmp	r3, #32
  402cc0:	d00a      	beq.n	402cd8 <SystemCoreClockUpdate+0x88>
  402cc2:	2b00      	cmp	r3, #0
  402cc4:	d000      	beq.n	402cc8 <SystemCoreClockUpdate+0x78>
			break;
  402cc6:	e00b      	b.n	402ce0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402cc8:	4b42      	ldr	r3, [pc, #264]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402cca:	4a44      	ldr	r2, [pc, #272]	; (402ddc <SystemCoreClockUpdate+0x18c>)
  402ccc:	601a      	str	r2, [r3, #0]
			break;
  402cce:	e007      	b.n	402ce0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402cd0:	4b40      	ldr	r3, [pc, #256]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402cd2:	4a43      	ldr	r2, [pc, #268]	; (402de0 <SystemCoreClockUpdate+0x190>)
  402cd4:	601a      	str	r2, [r3, #0]
			break;
  402cd6:	e003      	b.n	402ce0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402cd8:	4b3e      	ldr	r3, [pc, #248]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402cda:	4a3f      	ldr	r2, [pc, #252]	; (402dd8 <SystemCoreClockUpdate+0x188>)
  402cdc:	601a      	str	r2, [r3, #0]
			break;
  402cde:	bf00      	nop
		break;
  402ce0:	e056      	b.n	402d90 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402ce2:	4b3a      	ldr	r3, [pc, #232]	; (402dcc <SystemCoreClockUpdate+0x17c>)
  402ce4:	6a1b      	ldr	r3, [r3, #32]
  402ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402cea:	2b00      	cmp	r3, #0
  402cec:	d003      	beq.n	402cf6 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402cee:	4b39      	ldr	r3, [pc, #228]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402cf0:	4a39      	ldr	r2, [pc, #228]	; (402dd8 <SystemCoreClockUpdate+0x188>)
  402cf2:	601a      	str	r2, [r3, #0]
  402cf4:	e019      	b.n	402d2a <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402cf6:	4b37      	ldr	r3, [pc, #220]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402cf8:	4a38      	ldr	r2, [pc, #224]	; (402ddc <SystemCoreClockUpdate+0x18c>)
  402cfa:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402cfc:	4b33      	ldr	r3, [pc, #204]	; (402dcc <SystemCoreClockUpdate+0x17c>)
  402cfe:	6a1b      	ldr	r3, [r3, #32]
  402d00:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402d04:	2b10      	cmp	r3, #16
  402d06:	d008      	beq.n	402d1a <SystemCoreClockUpdate+0xca>
  402d08:	2b20      	cmp	r3, #32
  402d0a:	d00a      	beq.n	402d22 <SystemCoreClockUpdate+0xd2>
  402d0c:	2b00      	cmp	r3, #0
  402d0e:	d000      	beq.n	402d12 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402d10:	e00b      	b.n	402d2a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402d12:	4b30      	ldr	r3, [pc, #192]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402d14:	4a31      	ldr	r2, [pc, #196]	; (402ddc <SystemCoreClockUpdate+0x18c>)
  402d16:	601a      	str	r2, [r3, #0]
					break;
  402d18:	e007      	b.n	402d2a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402d1a:	4b2e      	ldr	r3, [pc, #184]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402d1c:	4a30      	ldr	r2, [pc, #192]	; (402de0 <SystemCoreClockUpdate+0x190>)
  402d1e:	601a      	str	r2, [r3, #0]
					break;
  402d20:	e003      	b.n	402d2a <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402d22:	4b2c      	ldr	r3, [pc, #176]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402d24:	4a2c      	ldr	r2, [pc, #176]	; (402dd8 <SystemCoreClockUpdate+0x188>)
  402d26:	601a      	str	r2, [r3, #0]
					break;
  402d28:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402d2a:	4b28      	ldr	r3, [pc, #160]	; (402dcc <SystemCoreClockUpdate+0x17c>)
  402d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d2e:	f003 0303 	and.w	r3, r3, #3
  402d32:	2b02      	cmp	r3, #2
  402d34:	d115      	bne.n	402d62 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402d36:	4b25      	ldr	r3, [pc, #148]	; (402dcc <SystemCoreClockUpdate+0x17c>)
  402d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  402d3a:	0c1b      	lsrs	r3, r3, #16
  402d3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402d40:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402d42:	4a24      	ldr	r2, [pc, #144]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402d44:	6812      	ldr	r2, [r2, #0]
  402d46:	fb02 f303 	mul.w	r3, r2, r3
  402d4a:	4a22      	ldr	r2, [pc, #136]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402d4c:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402d4e:	4b1f      	ldr	r3, [pc, #124]	; (402dcc <SystemCoreClockUpdate+0x17c>)
  402d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  402d52:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402d54:	4a1f      	ldr	r2, [pc, #124]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402d56:	6812      	ldr	r2, [r2, #0]
  402d58:	fbb2 f3f3 	udiv	r3, r2, r3
  402d5c:	4a1d      	ldr	r2, [pc, #116]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402d5e:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402d60:	e016      	b.n	402d90 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402d62:	4b1a      	ldr	r3, [pc, #104]	; (402dcc <SystemCoreClockUpdate+0x17c>)
  402d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402d66:	0c1b      	lsrs	r3, r3, #16
  402d68:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402d6c:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402d6e:	4a19      	ldr	r2, [pc, #100]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402d70:	6812      	ldr	r2, [r2, #0]
  402d72:	fb02 f303 	mul.w	r3, r2, r3
  402d76:	4a17      	ldr	r2, [pc, #92]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402d78:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402d7a:	4b14      	ldr	r3, [pc, #80]	; (402dcc <SystemCoreClockUpdate+0x17c>)
  402d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  402d7e:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402d80:	4a14      	ldr	r2, [pc, #80]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402d82:	6812      	ldr	r2, [r2, #0]
  402d84:	fbb2 f3f3 	udiv	r3, r2, r3
  402d88:	4a12      	ldr	r2, [pc, #72]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402d8a:	6013      	str	r3, [r2, #0]
		break;
  402d8c:	e000      	b.n	402d90 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  402d8e:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402d90:	4b0e      	ldr	r3, [pc, #56]	; (402dcc <SystemCoreClockUpdate+0x17c>)
  402d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d94:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402d98:	2b70      	cmp	r3, #112	; 0x70
  402d9a:	d108      	bne.n	402dae <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  402d9c:	4b0d      	ldr	r3, [pc, #52]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402d9e:	681b      	ldr	r3, [r3, #0]
  402da0:	4a10      	ldr	r2, [pc, #64]	; (402de4 <SystemCoreClockUpdate+0x194>)
  402da2:	fba2 2303 	umull	r2, r3, r2, r3
  402da6:	085b      	lsrs	r3, r3, #1
  402da8:	4a0a      	ldr	r2, [pc, #40]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402daa:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  402dac:	e00a      	b.n	402dc4 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402dae:	4b07      	ldr	r3, [pc, #28]	; (402dcc <SystemCoreClockUpdate+0x17c>)
  402db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402db2:	091b      	lsrs	r3, r3, #4
  402db4:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  402db8:	4a06      	ldr	r2, [pc, #24]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402dba:	6812      	ldr	r2, [r2, #0]
  402dbc:	fa22 f303 	lsr.w	r3, r2, r3
  402dc0:	4a04      	ldr	r2, [pc, #16]	; (402dd4 <SystemCoreClockUpdate+0x184>)
  402dc2:	6013      	str	r3, [r2, #0]
}
  402dc4:	bf00      	nop
  402dc6:	46bd      	mov	sp, r7
  402dc8:	bc80      	pop	{r7}
  402dca:	4770      	bx	lr
  402dcc:	400e0400 	.word	0x400e0400
  402dd0:	400e1410 	.word	0x400e1410
  402dd4:	2000000c 	.word	0x2000000c
  402dd8:	00b71b00 	.word	0x00b71b00
  402ddc:	003d0900 	.word	0x003d0900
  402de0:	007a1200 	.word	0x007a1200
  402de4:	aaaaaaab 	.word	0xaaaaaaab

00402de8 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402de8:	b480      	push	{r7}
  402dea:	b083      	sub	sp, #12
  402dec:	af00      	add	r7, sp, #0
  402dee:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402df0:	687b      	ldr	r3, [r7, #4]
  402df2:	4a18      	ldr	r2, [pc, #96]	; (402e54 <system_init_flash+0x6c>)
  402df4:	4293      	cmp	r3, r2
  402df6:	d804      	bhi.n	402e02 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402df8:	4b17      	ldr	r3, [pc, #92]	; (402e58 <system_init_flash+0x70>)
  402dfa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402dfe:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402e00:	e023      	b.n	402e4a <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402e02:	687b      	ldr	r3, [r7, #4]
  402e04:	4a15      	ldr	r2, [pc, #84]	; (402e5c <system_init_flash+0x74>)
  402e06:	4293      	cmp	r3, r2
  402e08:	d803      	bhi.n	402e12 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402e0a:	4b13      	ldr	r3, [pc, #76]	; (402e58 <system_init_flash+0x70>)
  402e0c:	4a14      	ldr	r2, [pc, #80]	; (402e60 <system_init_flash+0x78>)
  402e0e:	601a      	str	r2, [r3, #0]
}
  402e10:	e01b      	b.n	402e4a <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402e12:	687b      	ldr	r3, [r7, #4]
  402e14:	4a13      	ldr	r2, [pc, #76]	; (402e64 <system_init_flash+0x7c>)
  402e16:	4293      	cmp	r3, r2
  402e18:	d803      	bhi.n	402e22 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402e1a:	4b0f      	ldr	r3, [pc, #60]	; (402e58 <system_init_flash+0x70>)
  402e1c:	4a12      	ldr	r2, [pc, #72]	; (402e68 <system_init_flash+0x80>)
  402e1e:	601a      	str	r2, [r3, #0]
}
  402e20:	e013      	b.n	402e4a <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402e22:	687b      	ldr	r3, [r7, #4]
  402e24:	4a11      	ldr	r2, [pc, #68]	; (402e6c <system_init_flash+0x84>)
  402e26:	4293      	cmp	r3, r2
  402e28:	d803      	bhi.n	402e32 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402e2a:	4b0b      	ldr	r3, [pc, #44]	; (402e58 <system_init_flash+0x70>)
  402e2c:	4a10      	ldr	r2, [pc, #64]	; (402e70 <system_init_flash+0x88>)
  402e2e:	601a      	str	r2, [r3, #0]
}
  402e30:	e00b      	b.n	402e4a <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402e32:	687b      	ldr	r3, [r7, #4]
  402e34:	4a0f      	ldr	r2, [pc, #60]	; (402e74 <system_init_flash+0x8c>)
  402e36:	4293      	cmp	r3, r2
  402e38:	d804      	bhi.n	402e44 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402e3a:	4b07      	ldr	r3, [pc, #28]	; (402e58 <system_init_flash+0x70>)
  402e3c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402e40:	601a      	str	r2, [r3, #0]
}
  402e42:	e002      	b.n	402e4a <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402e44:	4b04      	ldr	r3, [pc, #16]	; (402e58 <system_init_flash+0x70>)
  402e46:	4a0c      	ldr	r2, [pc, #48]	; (402e78 <system_init_flash+0x90>)
  402e48:	601a      	str	r2, [r3, #0]
}
  402e4a:	bf00      	nop
  402e4c:	370c      	adds	r7, #12
  402e4e:	46bd      	mov	sp, r7
  402e50:	bc80      	pop	{r7}
  402e52:	4770      	bx	lr
  402e54:	01312cff 	.word	0x01312cff
  402e58:	400e0a00 	.word	0x400e0a00
  402e5c:	026259ff 	.word	0x026259ff
  402e60:	04000100 	.word	0x04000100
  402e64:	039386ff 	.word	0x039386ff
  402e68:	04000200 	.word	0x04000200
  402e6c:	04c4b3ff 	.word	0x04c4b3ff
  402e70:	04000300 	.word	0x04000300
  402e74:	05f5e0ff 	.word	0x05f5e0ff
  402e78:	04000500 	.word	0x04000500

00402e7c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  402e7c:	b480      	push	{r7}
  402e7e:	b085      	sub	sp, #20
  402e80:	af00      	add	r7, sp, #0
  402e82:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  402e84:	4b10      	ldr	r3, [pc, #64]	; (402ec8 <_sbrk+0x4c>)
  402e86:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  402e88:	4b10      	ldr	r3, [pc, #64]	; (402ecc <_sbrk+0x50>)
  402e8a:	681b      	ldr	r3, [r3, #0]
  402e8c:	2b00      	cmp	r3, #0
  402e8e:	d102      	bne.n	402e96 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402e90:	4b0e      	ldr	r3, [pc, #56]	; (402ecc <_sbrk+0x50>)
  402e92:	4a0f      	ldr	r2, [pc, #60]	; (402ed0 <_sbrk+0x54>)
  402e94:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402e96:	4b0d      	ldr	r3, [pc, #52]	; (402ecc <_sbrk+0x50>)
  402e98:	681b      	ldr	r3, [r3, #0]
  402e9a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  402e9c:	68ba      	ldr	r2, [r7, #8]
  402e9e:	687b      	ldr	r3, [r7, #4]
  402ea0:	441a      	add	r2, r3
  402ea2:	68fb      	ldr	r3, [r7, #12]
  402ea4:	429a      	cmp	r2, r3
  402ea6:	dd02      	ble.n	402eae <_sbrk+0x32>
		return (caddr_t) -1;	
  402ea8:	f04f 33ff 	mov.w	r3, #4294967295
  402eac:	e006      	b.n	402ebc <_sbrk+0x40>
	}

	heap += incr;
  402eae:	4b07      	ldr	r3, [pc, #28]	; (402ecc <_sbrk+0x50>)
  402eb0:	681a      	ldr	r2, [r3, #0]
  402eb2:	687b      	ldr	r3, [r7, #4]
  402eb4:	4413      	add	r3, r2
  402eb6:	4a05      	ldr	r2, [pc, #20]	; (402ecc <_sbrk+0x50>)
  402eb8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402eba:	68bb      	ldr	r3, [r7, #8]
}
  402ebc:	4618      	mov	r0, r3
  402ebe:	3714      	adds	r7, #20
  402ec0:	46bd      	mov	sp, r7
  402ec2:	bc80      	pop	{r7}
  402ec4:	4770      	bx	lr
  402ec6:	bf00      	nop
  402ec8:	2001fffc 	.word	0x2001fffc
  402ecc:	20000a7c 	.word	0x20000a7c
  402ed0:	20010200 	.word	0x20010200

00402ed4 <osc_get_rate>:
{
  402ed4:	b480      	push	{r7}
  402ed6:	b083      	sub	sp, #12
  402ed8:	af00      	add	r7, sp, #0
  402eda:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402edc:	687b      	ldr	r3, [r7, #4]
  402ede:	2b07      	cmp	r3, #7
  402ee0:	d825      	bhi.n	402f2e <osc_get_rate+0x5a>
  402ee2:	a201      	add	r2, pc, #4	; (adr r2, 402ee8 <osc_get_rate+0x14>)
  402ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402ee8:	00402f09 	.word	0x00402f09
  402eec:	00402f0f 	.word	0x00402f0f
  402ef0:	00402f15 	.word	0x00402f15
  402ef4:	00402f1b 	.word	0x00402f1b
  402ef8:	00402f1f 	.word	0x00402f1f
  402efc:	00402f23 	.word	0x00402f23
  402f00:	00402f27 	.word	0x00402f27
  402f04:	00402f2b 	.word	0x00402f2b
		return OSC_SLCK_32K_RC_HZ;
  402f08:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402f0c:	e010      	b.n	402f30 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402f12:	e00d      	b.n	402f30 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402f18:	e00a      	b.n	402f30 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402f1a:	4b08      	ldr	r3, [pc, #32]	; (402f3c <osc_get_rate+0x68>)
  402f1c:	e008      	b.n	402f30 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402f1e:	4b08      	ldr	r3, [pc, #32]	; (402f40 <osc_get_rate+0x6c>)
  402f20:	e006      	b.n	402f30 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402f22:	4b08      	ldr	r3, [pc, #32]	; (402f44 <osc_get_rate+0x70>)
  402f24:	e004      	b.n	402f30 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402f26:	4b07      	ldr	r3, [pc, #28]	; (402f44 <osc_get_rate+0x70>)
  402f28:	e002      	b.n	402f30 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402f2a:	4b06      	ldr	r3, [pc, #24]	; (402f44 <osc_get_rate+0x70>)
  402f2c:	e000      	b.n	402f30 <osc_get_rate+0x5c>
	return 0;
  402f2e:	2300      	movs	r3, #0
}
  402f30:	4618      	mov	r0, r3
  402f32:	370c      	adds	r7, #12
  402f34:	46bd      	mov	sp, r7
  402f36:	bc80      	pop	{r7}
  402f38:	4770      	bx	lr
  402f3a:	bf00      	nop
  402f3c:	003d0900 	.word	0x003d0900
  402f40:	007a1200 	.word	0x007a1200
  402f44:	00b71b00 	.word	0x00b71b00

00402f48 <sysclk_get_main_hz>:
{
  402f48:	b580      	push	{r7, lr}
  402f4a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402f4c:	2006      	movs	r0, #6
  402f4e:	4b04      	ldr	r3, [pc, #16]	; (402f60 <sysclk_get_main_hz+0x18>)
  402f50:	4798      	blx	r3
  402f52:	4602      	mov	r2, r0
  402f54:	4613      	mov	r3, r2
  402f56:	009b      	lsls	r3, r3, #2
  402f58:	4413      	add	r3, r2
  402f5a:	009b      	lsls	r3, r3, #2
}
  402f5c:	4618      	mov	r0, r3
  402f5e:	bd80      	pop	{r7, pc}
  402f60:	00402ed5 	.word	0x00402ed5

00402f64 <sysclk_get_cpu_hz>:
{
  402f64:	b580      	push	{r7, lr}
  402f66:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402f68:	4b02      	ldr	r3, [pc, #8]	; (402f74 <sysclk_get_cpu_hz+0x10>)
  402f6a:	4798      	blx	r3
  402f6c:	4603      	mov	r3, r0
  402f6e:	085b      	lsrs	r3, r3, #1
}
  402f70:	4618      	mov	r0, r3
  402f72:	bd80      	pop	{r7, pc}
  402f74:	00402f49 	.word	0x00402f49

00402f78 <ioport_set_pin_level>:
{
  402f78:	b480      	push	{r7}
  402f7a:	b08b      	sub	sp, #44	; 0x2c
  402f7c:	af00      	add	r7, sp, #0
  402f7e:	6078      	str	r0, [r7, #4]
  402f80:	460b      	mov	r3, r1
  402f82:	70fb      	strb	r3, [r7, #3]
  402f84:	687b      	ldr	r3, [r7, #4]
  402f86:	627b      	str	r3, [r7, #36]	; 0x24
  402f88:	78fb      	ldrb	r3, [r7, #3]
  402f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402f90:	61fb      	str	r3, [r7, #28]
  402f92:	69fb      	ldr	r3, [r7, #28]
  402f94:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  402f96:	69bb      	ldr	r3, [r7, #24]
  402f98:	095b      	lsrs	r3, r3, #5
  402f9a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402f9c:	697b      	ldr	r3, [r7, #20]
  402f9e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402fa2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402fa6:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  402fa8:	613b      	str	r3, [r7, #16]
	if (level) {
  402faa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402fae:	2b00      	cmp	r3, #0
  402fb0:	d009      	beq.n	402fc6 <ioport_set_pin_level+0x4e>
  402fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402fb4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402fb6:	68fb      	ldr	r3, [r7, #12]
  402fb8:	f003 031f 	and.w	r3, r3, #31
  402fbc:	2201      	movs	r2, #1
  402fbe:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402fc0:	693b      	ldr	r3, [r7, #16]
  402fc2:	631a      	str	r2, [r3, #48]	; 0x30
}
  402fc4:	e008      	b.n	402fd8 <ioport_set_pin_level+0x60>
  402fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402fc8:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  402fca:	68bb      	ldr	r3, [r7, #8]
  402fcc:	f003 031f 	and.w	r3, r3, #31
  402fd0:	2201      	movs	r2, #1
  402fd2:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402fd4:	693b      	ldr	r3, [r7, #16]
  402fd6:	635a      	str	r2, [r3, #52]	; 0x34
  402fd8:	bf00      	nop
  402fda:	372c      	adds	r7, #44	; 0x2c
  402fdc:	46bd      	mov	sp, r7
  402fde:	bc80      	pop	{r7}
  402fe0:	4770      	bx	lr

00402fe2 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  402fe2:	b480      	push	{r7}
  402fe4:	b089      	sub	sp, #36	; 0x24
  402fe6:	af00      	add	r7, sp, #0
  402fe8:	6078      	str	r0, [r7, #4]
  402fea:	687b      	ldr	r3, [r7, #4]
  402fec:	61fb      	str	r3, [r7, #28]
  402fee:	69fb      	ldr	r3, [r7, #28]
  402ff0:	61bb      	str	r3, [r7, #24]
  402ff2:	69bb      	ldr	r3, [r7, #24]
  402ff4:	617b      	str	r3, [r7, #20]
	return pin >> 5;
  402ff6:	697b      	ldr	r3, [r7, #20]
  402ff8:	095b      	lsrs	r3, r3, #5
  402ffa:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402ffc:	693b      	ldr	r3, [r7, #16]
  402ffe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403002:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403006:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  403008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  40300a:	69fb      	ldr	r3, [r7, #28]
  40300c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40300e:	68fb      	ldr	r3, [r7, #12]
  403010:	f003 031f 	and.w	r3, r3, #31
  403014:	2101      	movs	r1, #1
  403016:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40301a:	4013      	ands	r3, r2
  40301c:	2b00      	cmp	r3, #0
  40301e:	bf14      	ite	ne
  403020:	2301      	movne	r3, #1
  403022:	2300      	moveq	r3, #0
  403024:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  403026:	4618      	mov	r0, r3
  403028:	3724      	adds	r7, #36	; 0x24
  40302a:	46bd      	mov	sp, r7
  40302c:	bc80      	pop	{r7}
  40302e:	4770      	bx	lr

00403030 <main>:
#include "conf_board.h"
#include "conf_clock.h"
#include "timer_interface.h"

int main (void)
{
  403030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403034:	b093      	sub	sp, #76	; 0x4c
  403036:	af00      	add	r7, sp, #0
	//Initialize clock and board definitions
	sysclk_init();
  403038:	4b9e      	ldr	r3, [pc, #632]	; (4032b4 <main+0x284>)
  40303a:	4798      	blx	r3
	wdt_disable(WDT);
  40303c:	489e      	ldr	r0, [pc, #632]	; (4032b8 <main+0x288>)
  40303e:	4b9f      	ldr	r3, [pc, #636]	; (4032bc <main+0x28c>)
  403040:	4798      	blx	r3
	board_init();
  403042:	4b9f      	ldr	r3, [pc, #636]	; (4032c0 <main+0x290>)
  403044:	4798      	blx	r3

	//Configure and start the Timer
	configure_tc();
  403046:	4b9f      	ldr	r3, [pc, #636]	; (4032c4 <main+0x294>)
  403048:	4798      	blx	r3
	
	//Configure the WiFi USART, Command pin, and Web Setup pin
	configure_usart_wifi();
  40304a:	4b9f      	ldr	r3, [pc, #636]	; (4032c8 <main+0x298>)
  40304c:	4798      	blx	r3
	configure_wifi_command_pin();
  40304e:	4b9f      	ldr	r3, [pc, #636]	; (4032cc <main+0x29c>)
  403050:	4798      	blx	r3
	configure_wifi_web_setup_pin();
  403052:	4b9f      	ldr	r3, [pc, #636]	; (4032d0 <main+0x2a0>)
  403054:	4798      	blx	r3
	
	//Reset wiFi module

	
	//Initialize and configure the camera
	init_camera();
  403056:	4b9f      	ldr	r3, [pc, #636]	; (4032d4 <main+0x2a4>)
  403058:	4798      	blx	r3
	configure_camera();
  40305a:	4b9f      	ldr	r3, [pc, #636]	; (4032d8 <main+0x2a8>)
  40305c:	4798      	blx	r3
	
	write_wifi_command("set uart.flow 0 on \r\n", 2);
  40305e:	2102      	movs	r1, #2
  403060:	489e      	ldr	r0, [pc, #632]	; (4032dc <main+0x2ac>)
  403062:	4b9f      	ldr	r3, [pc, #636]	; (4032e0 <main+0x2b0>)
  403064:	4798      	blx	r3
	write_wifi_command("set bus.command.rx_bufsize 5000\r\n", 2);
  403066:	2102      	movs	r1, #2
  403068:	489e      	ldr	r0, [pc, #632]	; (4032e4 <main+0x2b4>)
  40306a:	4b9d      	ldr	r3, [pc, #628]	; (4032e0 <main+0x2b0>)
  40306c:	4798      	blx	r3
	write_wifi_command("set sy i g wlan 20\r\n", 2);
  40306e:	2102      	movs	r1, #2
  403070:	489d      	ldr	r0, [pc, #628]	; (4032e8 <main+0x2b8>)
  403072:	4b9b      	ldr	r3, [pc, #620]	; (4032e0 <main+0x2b0>)
  403074:	4798      	blx	r3
	write_wifi_command("set sy i g network 19\r\n", 2);
  403076:	2102      	movs	r1, #2
  403078:	489c      	ldr	r0, [pc, #624]	; (4032ec <main+0x2bc>)
  40307a:	4b99      	ldr	r3, [pc, #612]	; (4032e0 <main+0x2b0>)
  40307c:	4798      	blx	r3
	write_wifi_command("set sy i g softap 21\r\n" ,2);
  40307e:	2102      	movs	r1, #2
  403080:	489b      	ldr	r0, [pc, #620]	; (4032f0 <main+0x2c0>)
  403082:	4b97      	ldr	r3, [pc, #604]	; (4032e0 <main+0x2b0>)
  403084:	4798      	blx	r3
	write_wifi_command("set system.cmd.gpio 13\r\n", 2);
  403086:	2102      	movs	r1, #2
  403088:	489a      	ldr	r0, [pc, #616]	; (4032f4 <main+0x2c4>)
  40308a:	4b95      	ldr	r3, [pc, #596]	; (4032e0 <main+0x2b0>)
  40308c:	4798      	blx	r3
	write_wifi_command("set wl n o 14\r\n", 2);
  40308e:	2102      	movs	r1, #2
  403090:	4899      	ldr	r0, [pc, #612]	; (4032f8 <main+0x2c8>)
  403092:	4b93      	ldr	r3, [pc, #588]	; (4032e0 <main+0x2b0>)
  403094:	4798      	blx	r3
	write_wifi_command("set sy c p off\r\n", 2);
  403096:	2102      	movs	r1, #2
  403098:	4898      	ldr	r0, [pc, #608]	; (4032fc <main+0x2cc>)
  40309a:	4b91      	ldr	r3, [pc, #580]	; (4032e0 <main+0x2b0>)
  40309c:	4798      	blx	r3
	write_wifi_command("set sy c e off\r\n", 2);
  40309e:	2102      	movs	r1, #2
  4030a0:	4897      	ldr	r0, [pc, #604]	; (403300 <main+0x2d0>)
  4030a2:	4b8f      	ldr	r3, [pc, #572]	; (4032e0 <main+0x2b0>)
  4030a4:	4798      	blx	r3
	write_wifi_command("save\r\n", 2);
  4030a6:	2102      	movs	r1, #2
  4030a8:	4896      	ldr	r0, [pc, #600]	; (403304 <main+0x2d4>)
  4030aa:	4b8d      	ldr	r3, [pc, #564]	; (4032e0 <main+0x2b0>)
  4030ac:	4798      	blx	r3
	//write_wifi_command("reboot\r\n", 2);
	
	ioport_set_pin_level(WIFI_RESET_PIN, 0);
  4030ae:	2100      	movs	r1, #0
  4030b0:	2000      	movs	r0, #0
  4030b2:	4b95      	ldr	r3, [pc, #596]	; (403308 <main+0x2d8>)
  4030b4:	4798      	blx	r3
	delay_ms(100);
  4030b6:	4b95      	ldr	r3, [pc, #596]	; (40330c <main+0x2dc>)
  4030b8:	4798      	blx	r3
  4030ba:	4603      	mov	r3, r0
  4030bc:	4619      	mov	r1, r3
  4030be:	f04f 0200 	mov.w	r2, #0
  4030c2:	460b      	mov	r3, r1
  4030c4:	4614      	mov	r4, r2
  4030c6:	18db      	adds	r3, r3, r3
  4030c8:	eb44 0404 	adc.w	r4, r4, r4
  4030cc:	185b      	adds	r3, r3, r1
  4030ce:	eb44 0402 	adc.w	r4, r4, r2
  4030d2:	0166      	lsls	r6, r4, #5
  4030d4:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  4030d8:	015d      	lsls	r5, r3, #5
  4030da:	195b      	adds	r3, r3, r5
  4030dc:	eb44 0406 	adc.w	r4, r4, r6
  4030e0:	185b      	adds	r3, r3, r1
  4030e2:	eb44 0402 	adc.w	r4, r4, r2
  4030e6:	f243 61af 	movw	r1, #13999	; 0x36af
  4030ea:	f04f 0200 	mov.w	r2, #0
  4030ee:	185d      	adds	r5, r3, r1
  4030f0:	eb44 0602 	adc.w	r6, r4, r2
  4030f4:	4628      	mov	r0, r5
  4030f6:	4631      	mov	r1, r6
  4030f8:	4c85      	ldr	r4, [pc, #532]	; (403310 <main+0x2e0>)
  4030fa:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4030fe:	f04f 0300 	mov.w	r3, #0
  403102:	47a0      	blx	r4
  403104:	4603      	mov	r3, r0
  403106:	460c      	mov	r4, r1
  403108:	4618      	mov	r0, r3
  40310a:	4b82      	ldr	r3, [pc, #520]	; (403314 <main+0x2e4>)
  40310c:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET_PIN, 1);
  40310e:	2101      	movs	r1, #1
  403110:	2000      	movs	r0, #0
  403112:	4b7d      	ldr	r3, [pc, #500]	; (403308 <main+0x2d8>)
  403114:	4798      	blx	r3
		
	wifi_setup_button_flag=false;
  403116:	4a80      	ldr	r2, [pc, #512]	; (403318 <main+0x2e8>)
  403118:	2300      	movs	r3, #0
  40311a:	6013      	str	r3, [r2, #0]
	
	while (ioport_get_pin_level(WIFI_STATUS)==0) { //wait for network connection
  40311c:	e039      	b.n	403192 <main+0x162>
		if (wifi_setup_button_flag){
  40311e:	4b7e      	ldr	r3, [pc, #504]	; (403318 <main+0x2e8>)
  403120:	681b      	ldr	r3, [r3, #0]
  403122:	2b00      	cmp	r3, #0
  403124:	d035      	beq.n	403192 <main+0x162>
			write_wifi_command("setup web\r\n", 1);
  403126:	2101      	movs	r1, #1
  403128:	487c      	ldr	r0, [pc, #496]	; (40331c <main+0x2ec>)
  40312a:	4b6d      	ldr	r3, [pc, #436]	; (4032e0 <main+0x2b0>)
  40312c:	4798      	blx	r3
			delay_ms(100);
  40312e:	4b77      	ldr	r3, [pc, #476]	; (40330c <main+0x2dc>)
  403130:	4798      	blx	r3
  403132:	4603      	mov	r3, r0
  403134:	4619      	mov	r1, r3
  403136:	f04f 0200 	mov.w	r2, #0
  40313a:	460b      	mov	r3, r1
  40313c:	4614      	mov	r4, r2
  40313e:	18db      	adds	r3, r3, r3
  403140:	eb44 0404 	adc.w	r4, r4, r4
  403144:	185b      	adds	r3, r3, r1
  403146:	eb44 0402 	adc.w	r4, r4, r2
  40314a:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  40314e:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
  403152:	ea4f 1a43 	mov.w	sl, r3, lsl #5
  403156:	eb13 030a 	adds.w	r3, r3, sl
  40315a:	eb44 040b 	adc.w	r4, r4, fp
  40315e:	185b      	adds	r3, r3, r1
  403160:	eb44 0402 	adc.w	r4, r4, r2
  403164:	f243 61af 	movw	r1, #13999	; 0x36af
  403168:	f04f 0200 	mov.w	r2, #0
  40316c:	185d      	adds	r5, r3, r1
  40316e:	eb44 0602 	adc.w	r6, r4, r2
  403172:	4628      	mov	r0, r5
  403174:	4631      	mov	r1, r6
  403176:	4c66      	ldr	r4, [pc, #408]	; (403310 <main+0x2e0>)
  403178:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40317c:	f04f 0300 	mov.w	r3, #0
  403180:	47a0      	blx	r4
  403182:	4603      	mov	r3, r0
  403184:	460c      	mov	r4, r1
  403186:	4618      	mov	r0, r3
  403188:	4b62      	ldr	r3, [pc, #392]	; (403314 <main+0x2e4>)
  40318a:	4798      	blx	r3
			wifi_setup_button_flag = 0;
  40318c:	4a62      	ldr	r2, [pc, #392]	; (403318 <main+0x2e8>)
  40318e:	2300      	movs	r3, #0
  403190:	6013      	str	r3, [r2, #0]
	while (ioport_get_pin_level(WIFI_STATUS)==0) { //wait for network connection
  403192:	200a      	movs	r0, #10
  403194:	4b62      	ldr	r3, [pc, #392]	; (403320 <main+0x2f0>)
  403196:	4798      	blx	r3
  403198:	4603      	mov	r3, r0
  40319a:	f083 0301 	eor.w	r3, r3, #1
  40319e:	b2db      	uxtb	r3, r3
  4031a0:	2b00      	cmp	r3, #0
  4031a2:	d1bc      	bne.n	40311e <main+0xee>


	// tell wifi to turn off command prompt and echo
	
	// tell Wifi to turn off command prompt and echo
	wifi_setup_button_flag=false;
  4031a4:	4a5c      	ldr	r2, [pc, #368]	; (403318 <main+0x2e8>)
  4031a6:	2300      	movs	r3, #0
  4031a8:	6013      	str	r3, [r2, #0]
	
	while(1) {
		if(wifi_setup_button_flag){
  4031aa:	4b5b      	ldr	r3, [pc, #364]	; (403318 <main+0x2e8>)
  4031ac:	681b      	ldr	r3, [r3, #0]
  4031ae:	2b00      	cmp	r3, #0
  4031b0:	f000 8136 	beq.w	403420 <main+0x3f0>
			write_wifi_command("setup web\r\n", 1);
  4031b4:	2101      	movs	r1, #1
  4031b6:	4859      	ldr	r0, [pc, #356]	; (40331c <main+0x2ec>)
  4031b8:	4b49      	ldr	r3, [pc, #292]	; (4032e0 <main+0x2b0>)
  4031ba:	4798      	blx	r3
			delay_ms(100);
  4031bc:	4b53      	ldr	r3, [pc, #332]	; (40330c <main+0x2dc>)
  4031be:	4798      	blx	r3
  4031c0:	4603      	mov	r3, r0
  4031c2:	4619      	mov	r1, r3
  4031c4:	f04f 0200 	mov.w	r2, #0
  4031c8:	460b      	mov	r3, r1
  4031ca:	4614      	mov	r4, r2
  4031cc:	18db      	adds	r3, r3, r3
  4031ce:	eb44 0404 	adc.w	r4, r4, r4
  4031d2:	185b      	adds	r3, r3, r1
  4031d4:	eb44 0402 	adc.w	r4, r4, r2
  4031d8:	ea4f 1944 	mov.w	r9, r4, lsl #5
  4031dc:	ea49 69d3 	orr.w	r9, r9, r3, lsr #27
  4031e0:	ea4f 1843 	mov.w	r8, r3, lsl #5
  4031e4:	eb13 0308 	adds.w	r3, r3, r8
  4031e8:	eb44 0409 	adc.w	r4, r4, r9
  4031ec:	185b      	adds	r3, r3, r1
  4031ee:	eb44 0402 	adc.w	r4, r4, r2
  4031f2:	f243 61af 	movw	r1, #13999	; 0x36af
  4031f6:	f04f 0200 	mov.w	r2, #0
  4031fa:	185d      	adds	r5, r3, r1
  4031fc:	eb44 0602 	adc.w	r6, r4, r2
  403200:	4628      	mov	r0, r5
  403202:	4631      	mov	r1, r6
  403204:	4c42      	ldr	r4, [pc, #264]	; (403310 <main+0x2e0>)
  403206:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40320a:	f04f 0300 	mov.w	r3, #0
  40320e:	47a0      	blx	r4
  403210:	4603      	mov	r3, r0
  403212:	460c      	mov	r4, r1
  403214:	4618      	mov	r0, r3
  403216:	4b3f      	ldr	r3, [pc, #252]	; (403314 <main+0x2e4>)
  403218:	4798      	blx	r3
			wifi_setup_button_flag=0;
  40321a:	4a3f      	ldr	r2, [pc, #252]	; (403318 <main+0x2e8>)
  40321c:	2300      	movs	r3, #0
  40321e:	6013      	str	r3, [r2, #0]
			while (ioport_get_pin_level(WIFI_STATUS)==0) { //wait for network connection
  403220:	e03e      	b.n	4032a0 <main+0x270>
				if (wifi_setup_button_flag){
  403222:	4b3d      	ldr	r3, [pc, #244]	; (403318 <main+0x2e8>)
  403224:	681b      	ldr	r3, [r3, #0]
  403226:	2b00      	cmp	r3, #0
  403228:	d03a      	beq.n	4032a0 <main+0x270>
					write_wifi_command("setup web\r\n", 1);
  40322a:	2101      	movs	r1, #1
  40322c:	483b      	ldr	r0, [pc, #236]	; (40331c <main+0x2ec>)
  40322e:	4b2c      	ldr	r3, [pc, #176]	; (4032e0 <main+0x2b0>)
  403230:	4798      	blx	r3
					delay_ms(100);
  403232:	4b36      	ldr	r3, [pc, #216]	; (40330c <main+0x2dc>)
  403234:	4798      	blx	r3
  403236:	4603      	mov	r3, r0
  403238:	4619      	mov	r1, r3
  40323a:	f04f 0200 	mov.w	r2, #0
  40323e:	460b      	mov	r3, r1
  403240:	4614      	mov	r4, r2
  403242:	18db      	adds	r3, r3, r3
  403244:	eb44 0404 	adc.w	r4, r4, r4
  403248:	185b      	adds	r3, r3, r1
  40324a:	eb44 0402 	adc.w	r4, r4, r2
  40324e:	0160      	lsls	r0, r4, #5
  403250:	63f8      	str	r0, [r7, #60]	; 0x3c
  403252:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
  403254:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  403258:	63f8      	str	r0, [r7, #60]	; 0x3c
  40325a:	0158      	lsls	r0, r3, #5
  40325c:	63b8      	str	r0, [r7, #56]	; 0x38
  40325e:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
  403262:	18ed      	adds	r5, r5, r3
  403264:	eb46 0604 	adc.w	r6, r6, r4
  403268:	462b      	mov	r3, r5
  40326a:	4634      	mov	r4, r6
  40326c:	185b      	adds	r3, r3, r1
  40326e:	eb44 0402 	adc.w	r4, r4, r2
  403272:	f243 61af 	movw	r1, #13999	; 0x36af
  403276:	f04f 0200 	mov.w	r2, #0
  40327a:	185d      	adds	r5, r3, r1
  40327c:	eb44 0602 	adc.w	r6, r4, r2
  403280:	4628      	mov	r0, r5
  403282:	4631      	mov	r1, r6
  403284:	4c22      	ldr	r4, [pc, #136]	; (403310 <main+0x2e0>)
  403286:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40328a:	f04f 0300 	mov.w	r3, #0
  40328e:	47a0      	blx	r4
  403290:	4603      	mov	r3, r0
  403292:	460c      	mov	r4, r1
  403294:	4618      	mov	r0, r3
  403296:	4b1f      	ldr	r3, [pc, #124]	; (403314 <main+0x2e4>)
  403298:	4798      	blx	r3
					wifi_setup_button_flag = 0;
  40329a:	4a1f      	ldr	r2, [pc, #124]	; (403318 <main+0x2e8>)
  40329c:	2300      	movs	r3, #0
  40329e:	6013      	str	r3, [r2, #0]
			while (ioport_get_pin_level(WIFI_STATUS)==0) { //wait for network connection
  4032a0:	200a      	movs	r0, #10
  4032a2:	4b1f      	ldr	r3, [pc, #124]	; (403320 <main+0x2f0>)
  4032a4:	4798      	blx	r3
  4032a6:	4603      	mov	r3, r0
  4032a8:	f083 0301 	eor.w	r3, r3, #1
  4032ac:	b2db      	uxtb	r3, r3
  4032ae:	2b00      	cmp	r3, #0
  4032b0:	d1b7      	bne.n	403222 <main+0x1f2>
				}
				
			}
		}
		while(ioport_get_pin_level(WIFI_STATUS)==0){
  4032b2:	e0b5      	b.n	403420 <main+0x3f0>
  4032b4:	00400421 	.word	0x00400421
  4032b8:	400e1450 	.word	0x400e1450
  4032bc:	00401739 	.word	0x00401739
  4032c0:	00402b31 	.word	0x00402b31
  4032c4:	004023d1 	.word	0x004023d1
  4032c8:	00402621 	.word	0x00402621
  4032cc:	004026d1 	.word	0x004026d1
  4032d0:	00402731 	.word	0x00402731
  4032d4:	00401acd 	.word	0x00401acd
  4032d8:	00401b91 	.word	0x00401b91
  4032dc:	00409030 	.word	0x00409030
  4032e0:	00402791 	.word	0x00402791
  4032e4:	00409048 	.word	0x00409048
  4032e8:	0040906c 	.word	0x0040906c
  4032ec:	00409084 	.word	0x00409084
  4032f0:	0040909c 	.word	0x0040909c
  4032f4:	004090b4 	.word	0x004090b4
  4032f8:	004090d0 	.word	0x004090d0
  4032fc:	004090e0 	.word	0x004090e0
  403300:	004090f4 	.word	0x004090f4
  403304:	00409108 	.word	0x00409108
  403308:	00402f79 	.word	0x00402f79
  40330c:	00402f65 	.word	0x00402f65
  403310:	00403509 	.word	0x00403509
  403314:	20000001 	.word	0x20000001
  403318:	20000a60 	.word	0x20000a60
  40331c:	00409110 	.word	0x00409110
  403320:	00402fe3 	.word	0x00402fe3
			ioport_set_pin_level(WIFI_RESET_PIN, 0);
  403324:	2100      	movs	r1, #0
  403326:	2000      	movs	r0, #0
  403328:	4b6d      	ldr	r3, [pc, #436]	; (4034e0 <main+0x4b0>)
  40332a:	4798      	blx	r3
			delay_ms(100);
  40332c:	4b6d      	ldr	r3, [pc, #436]	; (4034e4 <main+0x4b4>)
  40332e:	4798      	blx	r3
  403330:	4603      	mov	r3, r0
  403332:	4619      	mov	r1, r3
  403334:	f04f 0200 	mov.w	r2, #0
  403338:	460b      	mov	r3, r1
  40333a:	4614      	mov	r4, r2
  40333c:	18db      	adds	r3, r3, r3
  40333e:	eb44 0404 	adc.w	r4, r4, r4
  403342:	185b      	adds	r3, r3, r1
  403344:	eb44 0402 	adc.w	r4, r4, r2
  403348:	0160      	lsls	r0, r4, #5
  40334a:	6378      	str	r0, [r7, #52]	; 0x34
  40334c:	6b78      	ldr	r0, [r7, #52]	; 0x34
  40334e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  403352:	6378      	str	r0, [r7, #52]	; 0x34
  403354:	0158      	lsls	r0, r3, #5
  403356:	6338      	str	r0, [r7, #48]	; 0x30
  403358:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
  40335c:	18ed      	adds	r5, r5, r3
  40335e:	eb46 0604 	adc.w	r6, r6, r4
  403362:	462b      	mov	r3, r5
  403364:	4634      	mov	r4, r6
  403366:	185b      	adds	r3, r3, r1
  403368:	eb44 0402 	adc.w	r4, r4, r2
  40336c:	f243 61af 	movw	r1, #13999	; 0x36af
  403370:	f04f 0200 	mov.w	r2, #0
  403374:	185d      	adds	r5, r3, r1
  403376:	eb44 0602 	adc.w	r6, r4, r2
  40337a:	4628      	mov	r0, r5
  40337c:	4631      	mov	r1, r6
  40337e:	4c5a      	ldr	r4, [pc, #360]	; (4034e8 <main+0x4b8>)
  403380:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403384:	f04f 0300 	mov.w	r3, #0
  403388:	47a0      	blx	r4
  40338a:	4603      	mov	r3, r0
  40338c:	460c      	mov	r4, r1
  40338e:	4618      	mov	r0, r3
  403390:	4b56      	ldr	r3, [pc, #344]	; (4034ec <main+0x4bc>)
  403392:	4798      	blx	r3
			ioport_set_pin_level(WIFI_RESET_PIN, 1);
  403394:	2101      	movs	r1, #1
  403396:	2000      	movs	r0, #0
  403398:	4b51      	ldr	r3, [pc, #324]	; (4034e0 <main+0x4b0>)
  40339a:	4798      	blx	r3
			delay_ms(500);
  40339c:	4b51      	ldr	r3, [pc, #324]	; (4034e4 <main+0x4b4>)
  40339e:	4798      	blx	r3
  4033a0:	4603      	mov	r3, r0
  4033a2:	4619      	mov	r1, r3
  4033a4:	f04f 0200 	mov.w	r2, #0
  4033a8:	460b      	mov	r3, r1
  4033aa:	4614      	mov	r4, r2
  4033ac:	0160      	lsls	r0, r4, #5
  4033ae:	62f8      	str	r0, [r7, #44]	; 0x2c
  4033b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  4033b2:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  4033b6:	62f8      	str	r0, [r7, #44]	; 0x2c
  4033b8:	015b      	lsls	r3, r3, #5
  4033ba:	62bb      	str	r3, [r7, #40]	; 0x28
  4033bc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
  4033c0:	1a5b      	subs	r3, r3, r1
  4033c2:	eb64 0402 	sbc.w	r4, r4, r2
  4033c6:	00a0      	lsls	r0, r4, #2
  4033c8:	6278      	str	r0, [r7, #36]	; 0x24
  4033ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
  4033cc:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  4033d0:	6278      	str	r0, [r7, #36]	; 0x24
  4033d2:	009b      	lsls	r3, r3, #2
  4033d4:	623b      	str	r3, [r7, #32]
  4033d6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
  4033da:	185b      	adds	r3, r3, r1
  4033dc:	eb44 0402 	adc.w	r4, r4, r2
  4033e0:	00a2      	lsls	r2, r4, #2
  4033e2:	61fa      	str	r2, [r7, #28]
  4033e4:	69fa      	ldr	r2, [r7, #28]
  4033e6:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
  4033ea:	61fa      	str	r2, [r7, #28]
  4033ec:	009b      	lsls	r3, r3, #2
  4033ee:	61bb      	str	r3, [r7, #24]
  4033f0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  4033f4:	4619      	mov	r1, r3
  4033f6:	4622      	mov	r2, r4
  4033f8:	f243 63af 	movw	r3, #13999	; 0x36af
  4033fc:	f04f 0400 	mov.w	r4, #0
  403400:	18cd      	adds	r5, r1, r3
  403402:	eb42 0604 	adc.w	r6, r2, r4
  403406:	4628      	mov	r0, r5
  403408:	4631      	mov	r1, r6
  40340a:	4c37      	ldr	r4, [pc, #220]	; (4034e8 <main+0x4b8>)
  40340c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403410:	f04f 0300 	mov.w	r3, #0
  403414:	47a0      	blx	r4
  403416:	4603      	mov	r3, r0
  403418:	460c      	mov	r4, r1
  40341a:	4618      	mov	r0, r3
  40341c:	4b33      	ldr	r3, [pc, #204]	; (4034ec <main+0x4bc>)
  40341e:	4798      	blx	r3
		while(ioport_get_pin_level(WIFI_STATUS)==0){
  403420:	200a      	movs	r0, #10
  403422:	4b33      	ldr	r3, [pc, #204]	; (4034f0 <main+0x4c0>)
  403424:	4798      	blx	r3
  403426:	4603      	mov	r3, r0
  403428:	f083 0301 	eor.w	r3, r3, #1
  40342c:	b2db      	uxtb	r3, r3
  40342e:	2b00      	cmp	r3, #0
  403430:	f47f af78 	bne.w	403324 <main+0x2f4>
		}
		write_wifi_command("poll all\r\n", 1);
  403434:	2101      	movs	r1, #1
  403436:	482f      	ldr	r0, [pc, #188]	; (4034f4 <main+0x4c4>)
  403438:	4b2f      	ldr	r3, [pc, #188]	; (4034f8 <main+0x4c8>)
  40343a:	4798      	blx	r3
		
		while(1) {
			if(wait_flag){
  40343c:	4b2f      	ldr	r3, [pc, #188]	; (4034fc <main+0x4cc>)
  40343e:	681b      	ldr	r3, [r3, #0]
  403440:	2b00      	cmp	r3, #0
  403442:	d045      	beq.n	4034d0 <main+0x4a0>
				delay_ms(1000);
  403444:	4b27      	ldr	r3, [pc, #156]	; (4034e4 <main+0x4b4>)
  403446:	4798      	blx	r3
  403448:	4603      	mov	r3, r0
  40344a:	4619      	mov	r1, r3
  40344c:	f04f 0200 	mov.w	r2, #0
  403450:	460b      	mov	r3, r1
  403452:	4614      	mov	r4, r2
  403454:	0160      	lsls	r0, r4, #5
  403456:	6178      	str	r0, [r7, #20]
  403458:	6978      	ldr	r0, [r7, #20]
  40345a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  40345e:	6178      	str	r0, [r7, #20]
  403460:	015b      	lsls	r3, r3, #5
  403462:	613b      	str	r3, [r7, #16]
  403464:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  403468:	1a5b      	subs	r3, r3, r1
  40346a:	eb64 0402 	sbc.w	r4, r4, r2
  40346e:	00a0      	lsls	r0, r4, #2
  403470:	60f8      	str	r0, [r7, #12]
  403472:	68f8      	ldr	r0, [r7, #12]
  403474:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  403478:	60f8      	str	r0, [r7, #12]
  40347a:	009b      	lsls	r3, r3, #2
  40347c:	60bb      	str	r3, [r7, #8]
  40347e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  403482:	185b      	adds	r3, r3, r1
  403484:	eb44 0402 	adc.w	r4, r4, r2
  403488:	00e2      	lsls	r2, r4, #3
  40348a:	607a      	str	r2, [r7, #4]
  40348c:	687a      	ldr	r2, [r7, #4]
  40348e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  403492:	607a      	str	r2, [r7, #4]
  403494:	00db      	lsls	r3, r3, #3
  403496:	603b      	str	r3, [r7, #0]
  403498:	e9d7 3400 	ldrd	r3, r4, [r7]
  40349c:	4619      	mov	r1, r3
  40349e:	4622      	mov	r2, r4
  4034a0:	f243 63af 	movw	r3, #13999	; 0x36af
  4034a4:	f04f 0400 	mov.w	r4, #0
  4034a8:	18cd      	adds	r5, r1, r3
  4034aa:	eb42 0604 	adc.w	r6, r2, r4
  4034ae:	4628      	mov	r0, r5
  4034b0:	4631      	mov	r1, r6
  4034b2:	4c0d      	ldr	r4, [pc, #52]	; (4034e8 <main+0x4b8>)
  4034b4:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4034b8:	f04f 0300 	mov.w	r3, #0
  4034bc:	47a0      	blx	r4
  4034be:	4603      	mov	r3, r0
  4034c0:	460c      	mov	r4, r1
  4034c2:	4618      	mov	r0, r3
  4034c4:	4b09      	ldr	r3, [pc, #36]	; (4034ec <main+0x4bc>)
  4034c6:	4798      	blx	r3
				wait_flag=0;
  4034c8:	4b0c      	ldr	r3, [pc, #48]	; (4034fc <main+0x4cc>)
  4034ca:	2200      	movs	r2, #0
  4034cc:	601a      	str	r2, [r3, #0]
  4034ce:	e7b5      	b.n	40343c <main+0x40c>
				} else{
					uint8_t get_image = start_capture();
  4034d0:	4b0b      	ldr	r3, [pc, #44]	; (403500 <main+0x4d0>)
  4034d2:	4798      	blx	r3
  4034d4:	4603      	mov	r3, r0
  4034d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					write_image_to_file();
  4034da:	4b0a      	ldr	r3, [pc, #40]	; (403504 <main+0x4d4>)
  4034dc:	4798      	blx	r3
			if(wait_flag){
  4034de:	e7ad      	b.n	40343c <main+0x40c>
  4034e0:	00402f79 	.word	0x00402f79
  4034e4:	00402f65 	.word	0x00402f65
  4034e8:	00403509 	.word	0x00403509
  4034ec:	20000001 	.word	0x20000001
  4034f0:	00402fe3 	.word	0x00402fe3
  4034f4:	0040911c 	.word	0x0040911c
  4034f8:	00402791 	.word	0x00402791
  4034fc:	20000a70 	.word	0x20000a70
  403500:	00401c65 	.word	0x00401c65
  403504:	004027e9 	.word	0x004027e9

00403508 <__aeabi_uldivmod>:
  403508:	b953      	cbnz	r3, 403520 <__aeabi_uldivmod+0x18>
  40350a:	b94a      	cbnz	r2, 403520 <__aeabi_uldivmod+0x18>
  40350c:	2900      	cmp	r1, #0
  40350e:	bf08      	it	eq
  403510:	2800      	cmpeq	r0, #0
  403512:	bf1c      	itt	ne
  403514:	f04f 31ff 	movne.w	r1, #4294967295
  403518:	f04f 30ff 	movne.w	r0, #4294967295
  40351c:	f000 b97a 	b.w	403814 <__aeabi_idiv0>
  403520:	f1ad 0c08 	sub.w	ip, sp, #8
  403524:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403528:	f000 f806 	bl	403538 <__udivmoddi4>
  40352c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403534:	b004      	add	sp, #16
  403536:	4770      	bx	lr

00403538 <__udivmoddi4>:
  403538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40353c:	468c      	mov	ip, r1
  40353e:	460d      	mov	r5, r1
  403540:	4604      	mov	r4, r0
  403542:	9e08      	ldr	r6, [sp, #32]
  403544:	2b00      	cmp	r3, #0
  403546:	d151      	bne.n	4035ec <__udivmoddi4+0xb4>
  403548:	428a      	cmp	r2, r1
  40354a:	4617      	mov	r7, r2
  40354c:	d96d      	bls.n	40362a <__udivmoddi4+0xf2>
  40354e:	fab2 fe82 	clz	lr, r2
  403552:	f1be 0f00 	cmp.w	lr, #0
  403556:	d00b      	beq.n	403570 <__udivmoddi4+0x38>
  403558:	f1ce 0c20 	rsb	ip, lr, #32
  40355c:	fa01 f50e 	lsl.w	r5, r1, lr
  403560:	fa20 fc0c 	lsr.w	ip, r0, ip
  403564:	fa02 f70e 	lsl.w	r7, r2, lr
  403568:	ea4c 0c05 	orr.w	ip, ip, r5
  40356c:	fa00 f40e 	lsl.w	r4, r0, lr
  403570:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403574:	0c25      	lsrs	r5, r4, #16
  403576:	fbbc f8fa 	udiv	r8, ip, sl
  40357a:	fa1f f987 	uxth.w	r9, r7
  40357e:	fb0a cc18 	mls	ip, sl, r8, ip
  403582:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403586:	fb08 f309 	mul.w	r3, r8, r9
  40358a:	42ab      	cmp	r3, r5
  40358c:	d90a      	bls.n	4035a4 <__udivmoddi4+0x6c>
  40358e:	19ed      	adds	r5, r5, r7
  403590:	f108 32ff 	add.w	r2, r8, #4294967295
  403594:	f080 8123 	bcs.w	4037de <__udivmoddi4+0x2a6>
  403598:	42ab      	cmp	r3, r5
  40359a:	f240 8120 	bls.w	4037de <__udivmoddi4+0x2a6>
  40359e:	f1a8 0802 	sub.w	r8, r8, #2
  4035a2:	443d      	add	r5, r7
  4035a4:	1aed      	subs	r5, r5, r3
  4035a6:	b2a4      	uxth	r4, r4
  4035a8:	fbb5 f0fa 	udiv	r0, r5, sl
  4035ac:	fb0a 5510 	mls	r5, sl, r0, r5
  4035b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4035b4:	fb00 f909 	mul.w	r9, r0, r9
  4035b8:	45a1      	cmp	r9, r4
  4035ba:	d909      	bls.n	4035d0 <__udivmoddi4+0x98>
  4035bc:	19e4      	adds	r4, r4, r7
  4035be:	f100 33ff 	add.w	r3, r0, #4294967295
  4035c2:	f080 810a 	bcs.w	4037da <__udivmoddi4+0x2a2>
  4035c6:	45a1      	cmp	r9, r4
  4035c8:	f240 8107 	bls.w	4037da <__udivmoddi4+0x2a2>
  4035cc:	3802      	subs	r0, #2
  4035ce:	443c      	add	r4, r7
  4035d0:	eba4 0409 	sub.w	r4, r4, r9
  4035d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4035d8:	2100      	movs	r1, #0
  4035da:	2e00      	cmp	r6, #0
  4035dc:	d061      	beq.n	4036a2 <__udivmoddi4+0x16a>
  4035de:	fa24 f40e 	lsr.w	r4, r4, lr
  4035e2:	2300      	movs	r3, #0
  4035e4:	6034      	str	r4, [r6, #0]
  4035e6:	6073      	str	r3, [r6, #4]
  4035e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4035ec:	428b      	cmp	r3, r1
  4035ee:	d907      	bls.n	403600 <__udivmoddi4+0xc8>
  4035f0:	2e00      	cmp	r6, #0
  4035f2:	d054      	beq.n	40369e <__udivmoddi4+0x166>
  4035f4:	2100      	movs	r1, #0
  4035f6:	e886 0021 	stmia.w	r6, {r0, r5}
  4035fa:	4608      	mov	r0, r1
  4035fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403600:	fab3 f183 	clz	r1, r3
  403604:	2900      	cmp	r1, #0
  403606:	f040 808e 	bne.w	403726 <__udivmoddi4+0x1ee>
  40360a:	42ab      	cmp	r3, r5
  40360c:	d302      	bcc.n	403614 <__udivmoddi4+0xdc>
  40360e:	4282      	cmp	r2, r0
  403610:	f200 80fa 	bhi.w	403808 <__udivmoddi4+0x2d0>
  403614:	1a84      	subs	r4, r0, r2
  403616:	eb65 0503 	sbc.w	r5, r5, r3
  40361a:	2001      	movs	r0, #1
  40361c:	46ac      	mov	ip, r5
  40361e:	2e00      	cmp	r6, #0
  403620:	d03f      	beq.n	4036a2 <__udivmoddi4+0x16a>
  403622:	e886 1010 	stmia.w	r6, {r4, ip}
  403626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40362a:	b912      	cbnz	r2, 403632 <__udivmoddi4+0xfa>
  40362c:	2701      	movs	r7, #1
  40362e:	fbb7 f7f2 	udiv	r7, r7, r2
  403632:	fab7 fe87 	clz	lr, r7
  403636:	f1be 0f00 	cmp.w	lr, #0
  40363a:	d134      	bne.n	4036a6 <__udivmoddi4+0x16e>
  40363c:	1beb      	subs	r3, r5, r7
  40363e:	0c3a      	lsrs	r2, r7, #16
  403640:	fa1f fc87 	uxth.w	ip, r7
  403644:	2101      	movs	r1, #1
  403646:	fbb3 f8f2 	udiv	r8, r3, r2
  40364a:	0c25      	lsrs	r5, r4, #16
  40364c:	fb02 3318 	mls	r3, r2, r8, r3
  403650:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403654:	fb0c f308 	mul.w	r3, ip, r8
  403658:	42ab      	cmp	r3, r5
  40365a:	d907      	bls.n	40366c <__udivmoddi4+0x134>
  40365c:	19ed      	adds	r5, r5, r7
  40365e:	f108 30ff 	add.w	r0, r8, #4294967295
  403662:	d202      	bcs.n	40366a <__udivmoddi4+0x132>
  403664:	42ab      	cmp	r3, r5
  403666:	f200 80d1 	bhi.w	40380c <__udivmoddi4+0x2d4>
  40366a:	4680      	mov	r8, r0
  40366c:	1aed      	subs	r5, r5, r3
  40366e:	b2a3      	uxth	r3, r4
  403670:	fbb5 f0f2 	udiv	r0, r5, r2
  403674:	fb02 5510 	mls	r5, r2, r0, r5
  403678:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40367c:	fb0c fc00 	mul.w	ip, ip, r0
  403680:	45a4      	cmp	ip, r4
  403682:	d907      	bls.n	403694 <__udivmoddi4+0x15c>
  403684:	19e4      	adds	r4, r4, r7
  403686:	f100 33ff 	add.w	r3, r0, #4294967295
  40368a:	d202      	bcs.n	403692 <__udivmoddi4+0x15a>
  40368c:	45a4      	cmp	ip, r4
  40368e:	f200 80b8 	bhi.w	403802 <__udivmoddi4+0x2ca>
  403692:	4618      	mov	r0, r3
  403694:	eba4 040c 	sub.w	r4, r4, ip
  403698:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40369c:	e79d      	b.n	4035da <__udivmoddi4+0xa2>
  40369e:	4631      	mov	r1, r6
  4036a0:	4630      	mov	r0, r6
  4036a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4036a6:	f1ce 0420 	rsb	r4, lr, #32
  4036aa:	fa05 f30e 	lsl.w	r3, r5, lr
  4036ae:	fa07 f70e 	lsl.w	r7, r7, lr
  4036b2:	fa20 f804 	lsr.w	r8, r0, r4
  4036b6:	0c3a      	lsrs	r2, r7, #16
  4036b8:	fa25 f404 	lsr.w	r4, r5, r4
  4036bc:	ea48 0803 	orr.w	r8, r8, r3
  4036c0:	fbb4 f1f2 	udiv	r1, r4, r2
  4036c4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4036c8:	fb02 4411 	mls	r4, r2, r1, r4
  4036cc:	fa1f fc87 	uxth.w	ip, r7
  4036d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4036d4:	fb01 f30c 	mul.w	r3, r1, ip
  4036d8:	42ab      	cmp	r3, r5
  4036da:	fa00 f40e 	lsl.w	r4, r0, lr
  4036de:	d909      	bls.n	4036f4 <__udivmoddi4+0x1bc>
  4036e0:	19ed      	adds	r5, r5, r7
  4036e2:	f101 30ff 	add.w	r0, r1, #4294967295
  4036e6:	f080 808a 	bcs.w	4037fe <__udivmoddi4+0x2c6>
  4036ea:	42ab      	cmp	r3, r5
  4036ec:	f240 8087 	bls.w	4037fe <__udivmoddi4+0x2c6>
  4036f0:	3902      	subs	r1, #2
  4036f2:	443d      	add	r5, r7
  4036f4:	1aeb      	subs	r3, r5, r3
  4036f6:	fa1f f588 	uxth.w	r5, r8
  4036fa:	fbb3 f0f2 	udiv	r0, r3, r2
  4036fe:	fb02 3310 	mls	r3, r2, r0, r3
  403702:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403706:	fb00 f30c 	mul.w	r3, r0, ip
  40370a:	42ab      	cmp	r3, r5
  40370c:	d907      	bls.n	40371e <__udivmoddi4+0x1e6>
  40370e:	19ed      	adds	r5, r5, r7
  403710:	f100 38ff 	add.w	r8, r0, #4294967295
  403714:	d26f      	bcs.n	4037f6 <__udivmoddi4+0x2be>
  403716:	42ab      	cmp	r3, r5
  403718:	d96d      	bls.n	4037f6 <__udivmoddi4+0x2be>
  40371a:	3802      	subs	r0, #2
  40371c:	443d      	add	r5, r7
  40371e:	1aeb      	subs	r3, r5, r3
  403720:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403724:	e78f      	b.n	403646 <__udivmoddi4+0x10e>
  403726:	f1c1 0720 	rsb	r7, r1, #32
  40372a:	fa22 f807 	lsr.w	r8, r2, r7
  40372e:	408b      	lsls	r3, r1
  403730:	fa05 f401 	lsl.w	r4, r5, r1
  403734:	ea48 0303 	orr.w	r3, r8, r3
  403738:	fa20 fe07 	lsr.w	lr, r0, r7
  40373c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403740:	40fd      	lsrs	r5, r7
  403742:	ea4e 0e04 	orr.w	lr, lr, r4
  403746:	fbb5 f9fc 	udiv	r9, r5, ip
  40374a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40374e:	fb0c 5519 	mls	r5, ip, r9, r5
  403752:	fa1f f883 	uxth.w	r8, r3
  403756:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40375a:	fb09 f408 	mul.w	r4, r9, r8
  40375e:	42ac      	cmp	r4, r5
  403760:	fa02 f201 	lsl.w	r2, r2, r1
  403764:	fa00 fa01 	lsl.w	sl, r0, r1
  403768:	d908      	bls.n	40377c <__udivmoddi4+0x244>
  40376a:	18ed      	adds	r5, r5, r3
  40376c:	f109 30ff 	add.w	r0, r9, #4294967295
  403770:	d243      	bcs.n	4037fa <__udivmoddi4+0x2c2>
  403772:	42ac      	cmp	r4, r5
  403774:	d941      	bls.n	4037fa <__udivmoddi4+0x2c2>
  403776:	f1a9 0902 	sub.w	r9, r9, #2
  40377a:	441d      	add	r5, r3
  40377c:	1b2d      	subs	r5, r5, r4
  40377e:	fa1f fe8e 	uxth.w	lr, lr
  403782:	fbb5 f0fc 	udiv	r0, r5, ip
  403786:	fb0c 5510 	mls	r5, ip, r0, r5
  40378a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40378e:	fb00 f808 	mul.w	r8, r0, r8
  403792:	45a0      	cmp	r8, r4
  403794:	d907      	bls.n	4037a6 <__udivmoddi4+0x26e>
  403796:	18e4      	adds	r4, r4, r3
  403798:	f100 35ff 	add.w	r5, r0, #4294967295
  40379c:	d229      	bcs.n	4037f2 <__udivmoddi4+0x2ba>
  40379e:	45a0      	cmp	r8, r4
  4037a0:	d927      	bls.n	4037f2 <__udivmoddi4+0x2ba>
  4037a2:	3802      	subs	r0, #2
  4037a4:	441c      	add	r4, r3
  4037a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4037aa:	eba4 0408 	sub.w	r4, r4, r8
  4037ae:	fba0 8902 	umull	r8, r9, r0, r2
  4037b2:	454c      	cmp	r4, r9
  4037b4:	46c6      	mov	lr, r8
  4037b6:	464d      	mov	r5, r9
  4037b8:	d315      	bcc.n	4037e6 <__udivmoddi4+0x2ae>
  4037ba:	d012      	beq.n	4037e2 <__udivmoddi4+0x2aa>
  4037bc:	b156      	cbz	r6, 4037d4 <__udivmoddi4+0x29c>
  4037be:	ebba 030e 	subs.w	r3, sl, lr
  4037c2:	eb64 0405 	sbc.w	r4, r4, r5
  4037c6:	fa04 f707 	lsl.w	r7, r4, r7
  4037ca:	40cb      	lsrs	r3, r1
  4037cc:	431f      	orrs	r7, r3
  4037ce:	40cc      	lsrs	r4, r1
  4037d0:	6037      	str	r7, [r6, #0]
  4037d2:	6074      	str	r4, [r6, #4]
  4037d4:	2100      	movs	r1, #0
  4037d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4037da:	4618      	mov	r0, r3
  4037dc:	e6f8      	b.n	4035d0 <__udivmoddi4+0x98>
  4037de:	4690      	mov	r8, r2
  4037e0:	e6e0      	b.n	4035a4 <__udivmoddi4+0x6c>
  4037e2:	45c2      	cmp	sl, r8
  4037e4:	d2ea      	bcs.n	4037bc <__udivmoddi4+0x284>
  4037e6:	ebb8 0e02 	subs.w	lr, r8, r2
  4037ea:	eb69 0503 	sbc.w	r5, r9, r3
  4037ee:	3801      	subs	r0, #1
  4037f0:	e7e4      	b.n	4037bc <__udivmoddi4+0x284>
  4037f2:	4628      	mov	r0, r5
  4037f4:	e7d7      	b.n	4037a6 <__udivmoddi4+0x26e>
  4037f6:	4640      	mov	r0, r8
  4037f8:	e791      	b.n	40371e <__udivmoddi4+0x1e6>
  4037fa:	4681      	mov	r9, r0
  4037fc:	e7be      	b.n	40377c <__udivmoddi4+0x244>
  4037fe:	4601      	mov	r1, r0
  403800:	e778      	b.n	4036f4 <__udivmoddi4+0x1bc>
  403802:	3802      	subs	r0, #2
  403804:	443c      	add	r4, r7
  403806:	e745      	b.n	403694 <__udivmoddi4+0x15c>
  403808:	4608      	mov	r0, r1
  40380a:	e708      	b.n	40361e <__udivmoddi4+0xe6>
  40380c:	f1a8 0802 	sub.w	r8, r8, #2
  403810:	443d      	add	r5, r7
  403812:	e72b      	b.n	40366c <__udivmoddi4+0x134>

00403814 <__aeabi_idiv0>:
  403814:	4770      	bx	lr
  403816:	bf00      	nop

00403818 <__libc_init_array>:
  403818:	b570      	push	{r4, r5, r6, lr}
  40381a:	4e0f      	ldr	r6, [pc, #60]	; (403858 <__libc_init_array+0x40>)
  40381c:	4d0f      	ldr	r5, [pc, #60]	; (40385c <__libc_init_array+0x44>)
  40381e:	1b76      	subs	r6, r6, r5
  403820:	10b6      	asrs	r6, r6, #2
  403822:	bf18      	it	ne
  403824:	2400      	movne	r4, #0
  403826:	d005      	beq.n	403834 <__libc_init_array+0x1c>
  403828:	3401      	adds	r4, #1
  40382a:	f855 3b04 	ldr.w	r3, [r5], #4
  40382e:	4798      	blx	r3
  403830:	42a6      	cmp	r6, r4
  403832:	d1f9      	bne.n	403828 <__libc_init_array+0x10>
  403834:	4e0a      	ldr	r6, [pc, #40]	; (403860 <__libc_init_array+0x48>)
  403836:	4d0b      	ldr	r5, [pc, #44]	; (403864 <__libc_init_array+0x4c>)
  403838:	1b76      	subs	r6, r6, r5
  40383a:	f005 fdb9 	bl	4093b0 <_init>
  40383e:	10b6      	asrs	r6, r6, #2
  403840:	bf18      	it	ne
  403842:	2400      	movne	r4, #0
  403844:	d006      	beq.n	403854 <__libc_init_array+0x3c>
  403846:	3401      	adds	r4, #1
  403848:	f855 3b04 	ldr.w	r3, [r5], #4
  40384c:	4798      	blx	r3
  40384e:	42a6      	cmp	r6, r4
  403850:	d1f9      	bne.n	403846 <__libc_init_array+0x2e>
  403852:	bd70      	pop	{r4, r5, r6, pc}
  403854:	bd70      	pop	{r4, r5, r6, pc}
  403856:	bf00      	nop
  403858:	004093bc 	.word	0x004093bc
  40385c:	004093bc 	.word	0x004093bc
  403860:	004093c4 	.word	0x004093c4
  403864:	004093bc 	.word	0x004093bc

00403868 <memset>:
  403868:	b470      	push	{r4, r5, r6}
  40386a:	0786      	lsls	r6, r0, #30
  40386c:	d046      	beq.n	4038fc <memset+0x94>
  40386e:	1e54      	subs	r4, r2, #1
  403870:	2a00      	cmp	r2, #0
  403872:	d041      	beq.n	4038f8 <memset+0x90>
  403874:	b2ca      	uxtb	r2, r1
  403876:	4603      	mov	r3, r0
  403878:	e002      	b.n	403880 <memset+0x18>
  40387a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40387e:	d33b      	bcc.n	4038f8 <memset+0x90>
  403880:	f803 2b01 	strb.w	r2, [r3], #1
  403884:	079d      	lsls	r5, r3, #30
  403886:	d1f8      	bne.n	40387a <memset+0x12>
  403888:	2c03      	cmp	r4, #3
  40388a:	d92e      	bls.n	4038ea <memset+0x82>
  40388c:	b2cd      	uxtb	r5, r1
  40388e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403892:	2c0f      	cmp	r4, #15
  403894:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403898:	d919      	bls.n	4038ce <memset+0x66>
  40389a:	f103 0210 	add.w	r2, r3, #16
  40389e:	4626      	mov	r6, r4
  4038a0:	3e10      	subs	r6, #16
  4038a2:	2e0f      	cmp	r6, #15
  4038a4:	f842 5c10 	str.w	r5, [r2, #-16]
  4038a8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4038ac:	f842 5c08 	str.w	r5, [r2, #-8]
  4038b0:	f842 5c04 	str.w	r5, [r2, #-4]
  4038b4:	f102 0210 	add.w	r2, r2, #16
  4038b8:	d8f2      	bhi.n	4038a0 <memset+0x38>
  4038ba:	f1a4 0210 	sub.w	r2, r4, #16
  4038be:	f022 020f 	bic.w	r2, r2, #15
  4038c2:	f004 040f 	and.w	r4, r4, #15
  4038c6:	3210      	adds	r2, #16
  4038c8:	2c03      	cmp	r4, #3
  4038ca:	4413      	add	r3, r2
  4038cc:	d90d      	bls.n	4038ea <memset+0x82>
  4038ce:	461e      	mov	r6, r3
  4038d0:	4622      	mov	r2, r4
  4038d2:	3a04      	subs	r2, #4
  4038d4:	2a03      	cmp	r2, #3
  4038d6:	f846 5b04 	str.w	r5, [r6], #4
  4038da:	d8fa      	bhi.n	4038d2 <memset+0x6a>
  4038dc:	1f22      	subs	r2, r4, #4
  4038de:	f022 0203 	bic.w	r2, r2, #3
  4038e2:	3204      	adds	r2, #4
  4038e4:	4413      	add	r3, r2
  4038e6:	f004 0403 	and.w	r4, r4, #3
  4038ea:	b12c      	cbz	r4, 4038f8 <memset+0x90>
  4038ec:	b2c9      	uxtb	r1, r1
  4038ee:	441c      	add	r4, r3
  4038f0:	f803 1b01 	strb.w	r1, [r3], #1
  4038f4:	429c      	cmp	r4, r3
  4038f6:	d1fb      	bne.n	4038f0 <memset+0x88>
  4038f8:	bc70      	pop	{r4, r5, r6}
  4038fa:	4770      	bx	lr
  4038fc:	4614      	mov	r4, r2
  4038fe:	4603      	mov	r3, r0
  403900:	e7c2      	b.n	403888 <memset+0x20>
  403902:	bf00      	nop

00403904 <sprintf>:
  403904:	b40e      	push	{r1, r2, r3}
  403906:	b5f0      	push	{r4, r5, r6, r7, lr}
  403908:	b09c      	sub	sp, #112	; 0x70
  40390a:	ab21      	add	r3, sp, #132	; 0x84
  40390c:	490f      	ldr	r1, [pc, #60]	; (40394c <sprintf+0x48>)
  40390e:	f853 2b04 	ldr.w	r2, [r3], #4
  403912:	9301      	str	r3, [sp, #4]
  403914:	4605      	mov	r5, r0
  403916:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40391a:	6808      	ldr	r0, [r1, #0]
  40391c:	9502      	str	r5, [sp, #8]
  40391e:	f44f 7702 	mov.w	r7, #520	; 0x208
  403922:	f64f 76ff 	movw	r6, #65535	; 0xffff
  403926:	a902      	add	r1, sp, #8
  403928:	9506      	str	r5, [sp, #24]
  40392a:	f8ad 7014 	strh.w	r7, [sp, #20]
  40392e:	9404      	str	r4, [sp, #16]
  403930:	9407      	str	r4, [sp, #28]
  403932:	f8ad 6016 	strh.w	r6, [sp, #22]
  403936:	f000 fa6f 	bl	403e18 <_svfprintf_r>
  40393a:	9b02      	ldr	r3, [sp, #8]
  40393c:	2200      	movs	r2, #0
  40393e:	701a      	strb	r2, [r3, #0]
  403940:	b01c      	add	sp, #112	; 0x70
  403942:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403946:	b003      	add	sp, #12
  403948:	4770      	bx	lr
  40394a:	bf00      	nop
  40394c:	20000010 	.word	0x20000010

00403950 <critical_factorization>:
  403950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403954:	f04f 0e01 	mov.w	lr, #1
  403958:	4674      	mov	r4, lr
  40395a:	2500      	movs	r5, #0
  40395c:	f04f 36ff 	mov.w	r6, #4294967295
  403960:	192b      	adds	r3, r5, r4
  403962:	428b      	cmp	r3, r1
  403964:	eb00 0706 	add.w	r7, r0, r6
  403968:	d20d      	bcs.n	403986 <critical_factorization+0x36>
  40396a:	5d3f      	ldrb	r7, [r7, r4]
  40396c:	f810 c003 	ldrb.w	ip, [r0, r3]
  403970:	45bc      	cmp	ip, r7
  403972:	d22d      	bcs.n	4039d0 <critical_factorization+0x80>
  403974:	461d      	mov	r5, r3
  403976:	2401      	movs	r4, #1
  403978:	eba3 0e06 	sub.w	lr, r3, r6
  40397c:	192b      	adds	r3, r5, r4
  40397e:	428b      	cmp	r3, r1
  403980:	eb00 0706 	add.w	r7, r0, r6
  403984:	d3f1      	bcc.n	40396a <critical_factorization+0x1a>
  403986:	f04f 0801 	mov.w	r8, #1
  40398a:	f8c2 e000 	str.w	lr, [r2]
  40398e:	4644      	mov	r4, r8
  403990:	2500      	movs	r5, #0
  403992:	f04f 37ff 	mov.w	r7, #4294967295
  403996:	192b      	adds	r3, r5, r4
  403998:	4299      	cmp	r1, r3
  40399a:	eb00 0e07 	add.w	lr, r0, r7
  40399e:	d90e      	bls.n	4039be <critical_factorization+0x6e>
  4039a0:	f81e e004 	ldrb.w	lr, [lr, r4]
  4039a4:	f810 c003 	ldrb.w	ip, [r0, r3]
  4039a8:	45f4      	cmp	ip, lr
  4039aa:	d918      	bls.n	4039de <critical_factorization+0x8e>
  4039ac:	461d      	mov	r5, r3
  4039ae:	2401      	movs	r4, #1
  4039b0:	eba3 0807 	sub.w	r8, r3, r7
  4039b4:	192b      	adds	r3, r5, r4
  4039b6:	4299      	cmp	r1, r3
  4039b8:	eb00 0e07 	add.w	lr, r0, r7
  4039bc:	d8f0      	bhi.n	4039a0 <critical_factorization+0x50>
  4039be:	3701      	adds	r7, #1
  4039c0:	1c70      	adds	r0, r6, #1
  4039c2:	4287      	cmp	r7, r0
  4039c4:	bf24      	itt	cs
  4039c6:	f8c2 8000 	strcs.w	r8, [r2]
  4039ca:	4638      	movcs	r0, r7
  4039cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4039d0:	d00c      	beq.n	4039ec <critical_factorization+0x9c>
  4039d2:	f04f 0e01 	mov.w	lr, #1
  4039d6:	462e      	mov	r6, r5
  4039d8:	4674      	mov	r4, lr
  4039da:	4475      	add	r5, lr
  4039dc:	e7c0      	b.n	403960 <critical_factorization+0x10>
  4039de:	d00b      	beq.n	4039f8 <critical_factorization+0xa8>
  4039e0:	f04f 0801 	mov.w	r8, #1
  4039e4:	462f      	mov	r7, r5
  4039e6:	4644      	mov	r4, r8
  4039e8:	4445      	add	r5, r8
  4039ea:	e7d4      	b.n	403996 <critical_factorization+0x46>
  4039ec:	4574      	cmp	r4, lr
  4039ee:	bf12      	itee	ne
  4039f0:	3401      	addne	r4, #1
  4039f2:	461d      	moveq	r5, r3
  4039f4:	2401      	moveq	r4, #1
  4039f6:	e7b3      	b.n	403960 <critical_factorization+0x10>
  4039f8:	4544      	cmp	r4, r8
  4039fa:	bf12      	itee	ne
  4039fc:	3401      	addne	r4, #1
  4039fe:	461d      	moveq	r5, r3
  403a00:	2401      	moveq	r4, #1
  403a02:	e7c8      	b.n	403996 <critical_factorization+0x46>

00403a04 <two_way_long_needle>:
  403a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a08:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  403a0c:	4616      	mov	r6, r2
  403a0e:	4605      	mov	r5, r0
  403a10:	468b      	mov	fp, r1
  403a12:	4610      	mov	r0, r2
  403a14:	4619      	mov	r1, r3
  403a16:	aa03      	add	r2, sp, #12
  403a18:	461c      	mov	r4, r3
  403a1a:	f7ff ff99 	bl	403950 <critical_factorization>
  403a1e:	ab03      	add	r3, sp, #12
  403a20:	4681      	mov	r9, r0
  403a22:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  403a26:	f843 4f04 	str.w	r4, [r3, #4]!
  403a2a:	4293      	cmp	r3, r2
  403a2c:	d1fb      	bne.n	403a26 <two_way_long_needle+0x22>
  403a2e:	b14c      	cbz	r4, 403a44 <two_way_long_needle+0x40>
  403a30:	1e63      	subs	r3, r4, #1
  403a32:	1e72      	subs	r2, r6, #1
  403a34:	a804      	add	r0, sp, #16
  403a36:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403a3a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  403a3e:	f113 33ff 	adds.w	r3, r3, #4294967295
  403a42:	d2f8      	bcs.n	403a36 <two_way_long_needle+0x32>
  403a44:	9903      	ldr	r1, [sp, #12]
  403a46:	464a      	mov	r2, r9
  403a48:	4431      	add	r1, r6
  403a4a:	4630      	mov	r0, r6
  403a4c:	f002 ff08 	bl	406860 <memcmp>
  403a50:	2800      	cmp	r0, #0
  403a52:	d16f      	bne.n	403b34 <two_way_long_needle+0x130>
  403a54:	f109 33ff 	add.w	r3, r9, #4294967295
  403a58:	9300      	str	r3, [sp, #0]
  403a5a:	18f3      	adds	r3, r6, r3
  403a5c:	4682      	mov	sl, r0
  403a5e:	9301      	str	r3, [sp, #4]
  403a60:	4623      	mov	r3, r4
  403a62:	4680      	mov	r8, r0
  403a64:	4654      	mov	r4, sl
  403a66:	4658      	mov	r0, fp
  403a68:	469a      	mov	sl, r3
  403a6a:	eb08 070a 	add.w	r7, r8, sl
  403a6e:	1a3a      	subs	r2, r7, r0
  403a70:	2100      	movs	r1, #0
  403a72:	4428      	add	r0, r5
  403a74:	f002 fea4 	bl	4067c0 <memchr>
  403a78:	2800      	cmp	r0, #0
  403a7a:	d156      	bne.n	403b2a <two_way_long_needle+0x126>
  403a7c:	2f00      	cmp	r7, #0
  403a7e:	d054      	beq.n	403b2a <two_way_long_needle+0x126>
  403a80:	19eb      	adds	r3, r5, r7
  403a82:	aa04      	add	r2, sp, #16
  403a84:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403a8c:	b14b      	cbz	r3, 403aa2 <two_way_long_needle+0x9e>
  403a8e:	b124      	cbz	r4, 403a9a <two_way_long_needle+0x96>
  403a90:	9a03      	ldr	r2, [sp, #12]
  403a92:	4293      	cmp	r3, r2
  403a94:	d201      	bcs.n	403a9a <two_way_long_needle+0x96>
  403a96:	ebaa 0302 	sub.w	r3, sl, r2
  403a9a:	4498      	add	r8, r3
  403a9c:	2400      	movs	r4, #0
  403a9e:	4638      	mov	r0, r7
  403aa0:	e7e3      	b.n	403a6a <two_way_long_needle+0x66>
  403aa2:	454c      	cmp	r4, r9
  403aa4:	4623      	mov	r3, r4
  403aa6:	f10a 3eff 	add.w	lr, sl, #4294967295
  403aaa:	bf38      	it	cc
  403aac:	464b      	movcc	r3, r9
  403aae:	4573      	cmp	r3, lr
  403ab0:	d213      	bcs.n	403ada <two_way_long_needle+0xd6>
  403ab2:	eb08 0203 	add.w	r2, r8, r3
  403ab6:	f816 c003 	ldrb.w	ip, [r6, r3]
  403aba:	5ca8      	ldrb	r0, [r5, r2]
  403abc:	4584      	cmp	ip, r0
  403abe:	442a      	add	r2, r5
  403ac0:	eb06 0103 	add.w	r1, r6, r3
  403ac4:	d006      	beq.n	403ad4 <two_way_long_needle+0xd0>
  403ac6:	e02c      	b.n	403b22 <two_way_long_needle+0x11e>
  403ac8:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  403acc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403ad0:	4584      	cmp	ip, r0
  403ad2:	d126      	bne.n	403b22 <two_way_long_needle+0x11e>
  403ad4:	3301      	adds	r3, #1
  403ad6:	4573      	cmp	r3, lr
  403ad8:	d3f6      	bcc.n	403ac8 <two_way_long_needle+0xc4>
  403ada:	454c      	cmp	r4, r9
  403adc:	9900      	ldr	r1, [sp, #0]
  403ade:	f080 8089 	bcs.w	403bf4 <two_way_long_needle+0x1f0>
  403ae2:	9b00      	ldr	r3, [sp, #0]
  403ae4:	eb08 0203 	add.w	r2, r8, r3
  403ae8:	9b01      	ldr	r3, [sp, #4]
  403aea:	5ca8      	ldrb	r0, [r5, r2]
  403aec:	781b      	ldrb	r3, [r3, #0]
  403aee:	4298      	cmp	r0, r3
  403af0:	442a      	add	r2, r5
  403af2:	d17f      	bne.n	403bf4 <two_way_long_needle+0x1f0>
  403af4:	9801      	ldr	r0, [sp, #4]
  403af6:	f104 3bff 	add.w	fp, r4, #4294967295
  403afa:	e006      	b.n	403b0a <two_way_long_needle+0x106>
  403afc:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  403b00:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  403b04:	45f4      	cmp	ip, lr
  403b06:	d103      	bne.n	403b10 <two_way_long_needle+0x10c>
  403b08:	4619      	mov	r1, r3
  403b0a:	1e4b      	subs	r3, r1, #1
  403b0c:	459b      	cmp	fp, r3
  403b0e:	d1f5      	bne.n	403afc <two_way_long_needle+0xf8>
  403b10:	3401      	adds	r4, #1
  403b12:	428c      	cmp	r4, r1
  403b14:	d870      	bhi.n	403bf8 <two_way_long_needle+0x1f4>
  403b16:	9c03      	ldr	r4, [sp, #12]
  403b18:	4638      	mov	r0, r7
  403b1a:	44a0      	add	r8, r4
  403b1c:	ebaa 0404 	sub.w	r4, sl, r4
  403b20:	e7a3      	b.n	403a6a <two_way_long_needle+0x66>
  403b22:	f1c9 0201 	rsb	r2, r9, #1
  403b26:	4490      	add	r8, r2
  403b28:	e7b7      	b.n	403a9a <two_way_long_needle+0x96>
  403b2a:	2000      	movs	r0, #0
  403b2c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b34:	eba4 0309 	sub.w	r3, r4, r9
  403b38:	454b      	cmp	r3, r9
  403b3a:	bf38      	it	cc
  403b3c:	464b      	movcc	r3, r9
  403b3e:	3301      	adds	r3, #1
  403b40:	f109 38ff 	add.w	r8, r9, #4294967295
  403b44:	9303      	str	r3, [sp, #12]
  403b46:	eb06 0308 	add.w	r3, r6, r8
  403b4a:	4658      	mov	r0, fp
  403b4c:	f04f 0a00 	mov.w	sl, #0
  403b50:	46cb      	mov	fp, r9
  403b52:	4699      	mov	r9, r3
  403b54:	eb0a 0704 	add.w	r7, sl, r4
  403b58:	1a3a      	subs	r2, r7, r0
  403b5a:	2100      	movs	r1, #0
  403b5c:	4428      	add	r0, r5
  403b5e:	f002 fe2f 	bl	4067c0 <memchr>
  403b62:	2800      	cmp	r0, #0
  403b64:	d1e1      	bne.n	403b2a <two_way_long_needle+0x126>
  403b66:	2f00      	cmp	r7, #0
  403b68:	d0df      	beq.n	403b2a <two_way_long_needle+0x126>
  403b6a:	19eb      	adds	r3, r5, r7
  403b6c:	aa04      	add	r2, sp, #16
  403b6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403b76:	bba3      	cbnz	r3, 403be2 <two_way_long_needle+0x1de>
  403b78:	1e61      	subs	r1, r4, #1
  403b7a:	458b      	cmp	fp, r1
  403b7c:	d215      	bcs.n	403baa <two_way_long_needle+0x1a6>
  403b7e:	eb0a 020b 	add.w	r2, sl, fp
  403b82:	f816 300b 	ldrb.w	r3, [r6, fp]
  403b86:	f815 e002 	ldrb.w	lr, [r5, r2]
  403b8a:	459e      	cmp	lr, r3
  403b8c:	442a      	add	r2, r5
  403b8e:	eb06 000b 	add.w	r0, r6, fp
  403b92:	465b      	mov	r3, fp
  403b94:	d006      	beq.n	403ba4 <two_way_long_needle+0x1a0>
  403b96:	e027      	b.n	403be8 <two_way_long_needle+0x1e4>
  403b98:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  403b9c:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  403ba0:	45f4      	cmp	ip, lr
  403ba2:	d121      	bne.n	403be8 <two_way_long_needle+0x1e4>
  403ba4:	3301      	adds	r3, #1
  403ba6:	428b      	cmp	r3, r1
  403ba8:	d3f6      	bcc.n	403b98 <two_way_long_needle+0x194>
  403baa:	f1b8 3fff 	cmp.w	r8, #4294967295
  403bae:	d011      	beq.n	403bd4 <two_way_long_needle+0x1d0>
  403bb0:	eb0a 0208 	add.w	r2, sl, r8
  403bb4:	f899 1000 	ldrb.w	r1, [r9]
  403bb8:	5cab      	ldrb	r3, [r5, r2]
  403bba:	4299      	cmp	r1, r3
  403bbc:	442a      	add	r2, r5
  403bbe:	d10f      	bne.n	403be0 <two_way_long_needle+0x1dc>
  403bc0:	464b      	mov	r3, r9
  403bc2:	e005      	b.n	403bd0 <two_way_long_needle+0x1cc>
  403bc4:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403bc8:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403bcc:	4288      	cmp	r0, r1
  403bce:	d107      	bne.n	403be0 <two_way_long_needle+0x1dc>
  403bd0:	42b3      	cmp	r3, r6
  403bd2:	d1f7      	bne.n	403bc4 <two_way_long_needle+0x1c0>
  403bd4:	eb05 000a 	add.w	r0, r5, sl
  403bd8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403be0:	9b03      	ldr	r3, [sp, #12]
  403be2:	449a      	add	sl, r3
  403be4:	4638      	mov	r0, r7
  403be6:	e7b5      	b.n	403b54 <two_way_long_needle+0x150>
  403be8:	f1cb 0201 	rsb	r2, fp, #1
  403bec:	4492      	add	sl, r2
  403bee:	449a      	add	sl, r3
  403bf0:	4638      	mov	r0, r7
  403bf2:	e7af      	b.n	403b54 <two_way_long_needle+0x150>
  403bf4:	4649      	mov	r1, r9
  403bf6:	e78b      	b.n	403b10 <two_way_long_needle+0x10c>
  403bf8:	eb05 0008 	add.w	r0, r5, r8
  403bfc:	e796      	b.n	403b2c <two_way_long_needle+0x128>
  403bfe:	bf00      	nop

00403c00 <strstr>:
  403c00:	7802      	ldrb	r2, [r0, #0]
  403c02:	2a00      	cmp	r2, #0
  403c04:	f000 8101 	beq.w	403e0a <strstr+0x20a>
  403c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c0c:	f891 8000 	ldrb.w	r8, [r1]
  403c10:	b085      	sub	sp, #20
  403c12:	4644      	mov	r4, r8
  403c14:	f1b8 0f00 	cmp.w	r8, #0
  403c18:	d016      	beq.n	403c48 <strstr+0x48>
  403c1a:	4686      	mov	lr, r0
  403c1c:	f101 0c01 	add.w	ip, r1, #1
  403c20:	2701      	movs	r7, #1
  403c22:	e003      	b.n	403c2c <strstr+0x2c>
  403c24:	f813 4b01 	ldrb.w	r4, [r3], #1
  403c28:	b16c      	cbz	r4, 403c46 <strstr+0x46>
  403c2a:	469c      	mov	ip, r3
  403c2c:	42a2      	cmp	r2, r4
  403c2e:	bf14      	ite	ne
  403c30:	2700      	movne	r7, #0
  403c32:	f007 0701 	andeq.w	r7, r7, #1
  403c36:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  403c3a:	4663      	mov	r3, ip
  403c3c:	2a00      	cmp	r2, #0
  403c3e:	d1f1      	bne.n	403c24 <strstr+0x24>
  403c40:	f89c 3000 	ldrb.w	r3, [ip]
  403c44:	b9fb      	cbnz	r3, 403c86 <strstr+0x86>
  403c46:	b117      	cbz	r7, 403c4e <strstr+0x4e>
  403c48:	b005      	add	sp, #20
  403c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c4e:	460e      	mov	r6, r1
  403c50:	4605      	mov	r5, r0
  403c52:	4641      	mov	r1, r8
  403c54:	3001      	adds	r0, #1
  403c56:	ebac 0406 	sub.w	r4, ip, r6
  403c5a:	f003 f9db 	bl	407014 <strchr>
  403c5e:	4607      	mov	r7, r0
  403c60:	b188      	cbz	r0, 403c86 <strstr+0x86>
  403c62:	2c01      	cmp	r4, #1
  403c64:	d0f0      	beq.n	403c48 <strstr+0x48>
  403c66:	1928      	adds	r0, r5, r4
  403c68:	4287      	cmp	r7, r0
  403c6a:	bf94      	ite	ls
  403c6c:	1bc1      	subls	r1, r0, r7
  403c6e:	2101      	movhi	r1, #1
  403c70:	2c1f      	cmp	r4, #31
  403c72:	468b      	mov	fp, r1
  403c74:	d90b      	bls.n	403c8e <strstr+0x8e>
  403c76:	4623      	mov	r3, r4
  403c78:	4632      	mov	r2, r6
  403c7a:	4638      	mov	r0, r7
  403c7c:	f7ff fec2 	bl	403a04 <two_way_long_needle>
  403c80:	b005      	add	sp, #20
  403c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c86:	2000      	movs	r0, #0
  403c88:	b005      	add	sp, #20
  403c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c8e:	aa03      	add	r2, sp, #12
  403c90:	4621      	mov	r1, r4
  403c92:	4630      	mov	r0, r6
  403c94:	f7ff fe5c 	bl	403950 <critical_factorization>
  403c98:	9903      	ldr	r1, [sp, #12]
  403c9a:	4680      	mov	r8, r0
  403c9c:	4602      	mov	r2, r0
  403c9e:	4431      	add	r1, r6
  403ca0:	4630      	mov	r0, r6
  403ca2:	f002 fddd 	bl	406860 <memcmp>
  403ca6:	2800      	cmp	r0, #0
  403ca8:	d157      	bne.n	403d5a <strstr+0x15a>
  403caa:	f108 33ff 	add.w	r3, r8, #4294967295
  403cae:	9300      	str	r3, [sp, #0]
  403cb0:	18f3      	adds	r3, r6, r3
  403cb2:	4681      	mov	r9, r0
  403cb4:	4605      	mov	r5, r0
  403cb6:	9301      	str	r3, [sp, #4]
  403cb8:	4658      	mov	r0, fp
  403cba:	46b2      	mov	sl, r6
  403cbc:	1966      	adds	r6, r4, r5
  403cbe:	1a32      	subs	r2, r6, r0
  403cc0:	2100      	movs	r1, #0
  403cc2:	4438      	add	r0, r7
  403cc4:	f002 fd7c 	bl	4067c0 <memchr>
  403cc8:	2800      	cmp	r0, #0
  403cca:	d1dc      	bne.n	403c86 <strstr+0x86>
  403ccc:	2e00      	cmp	r6, #0
  403cce:	d0da      	beq.n	403c86 <strstr+0x86>
  403cd0:	45c8      	cmp	r8, r9
  403cd2:	4643      	mov	r3, r8
  403cd4:	bf38      	it	cc
  403cd6:	464b      	movcc	r3, r9
  403cd8:	429c      	cmp	r4, r3
  403cda:	d912      	bls.n	403d02 <strstr+0x102>
  403cdc:	195a      	adds	r2, r3, r5
  403cde:	f81a 1003 	ldrb.w	r1, [sl, r3]
  403ce2:	5cb8      	ldrb	r0, [r7, r2]
  403ce4:	4281      	cmp	r1, r0
  403ce6:	443a      	add	r2, r7
  403ce8:	eb0a 0e03 	add.w	lr, sl, r3
  403cec:	d006      	beq.n	403cfc <strstr+0xfc>
  403cee:	e02c      	b.n	403d4a <strstr+0x14a>
  403cf0:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  403cf4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403cf8:	4288      	cmp	r0, r1
  403cfa:	d126      	bne.n	403d4a <strstr+0x14a>
  403cfc:	3301      	adds	r3, #1
  403cfe:	429c      	cmp	r4, r3
  403d00:	d1f6      	bne.n	403cf0 <strstr+0xf0>
  403d02:	45c8      	cmp	r8, r9
  403d04:	9900      	ldr	r1, [sp, #0]
  403d06:	f240 8083 	bls.w	403e10 <strstr+0x210>
  403d0a:	9b00      	ldr	r3, [sp, #0]
  403d0c:	18ea      	adds	r2, r5, r3
  403d0e:	9b01      	ldr	r3, [sp, #4]
  403d10:	5cb8      	ldrb	r0, [r7, r2]
  403d12:	781b      	ldrb	r3, [r3, #0]
  403d14:	4298      	cmp	r0, r3
  403d16:	443a      	add	r2, r7
  403d18:	d17a      	bne.n	403e10 <strstr+0x210>
  403d1a:	9801      	ldr	r0, [sp, #4]
  403d1c:	f109 3bff 	add.w	fp, r9, #4294967295
  403d20:	e006      	b.n	403d30 <strstr+0x130>
  403d22:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  403d26:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  403d2a:	45f4      	cmp	ip, lr
  403d2c:	d103      	bne.n	403d36 <strstr+0x136>
  403d2e:	4619      	mov	r1, r3
  403d30:	1e4b      	subs	r3, r1, #1
  403d32:	455b      	cmp	r3, fp
  403d34:	d1f5      	bne.n	403d22 <strstr+0x122>
  403d36:	f109 0901 	add.w	r9, r9, #1
  403d3a:	4589      	cmp	r9, r1
  403d3c:	d857      	bhi.n	403dee <strstr+0x1ee>
  403d3e:	9b03      	ldr	r3, [sp, #12]
  403d40:	4630      	mov	r0, r6
  403d42:	441d      	add	r5, r3
  403d44:	eba4 0903 	sub.w	r9, r4, r3
  403d48:	e7b8      	b.n	403cbc <strstr+0xbc>
  403d4a:	f1c8 0201 	rsb	r2, r8, #1
  403d4e:	4415      	add	r5, r2
  403d50:	441d      	add	r5, r3
  403d52:	f04f 0900 	mov.w	r9, #0
  403d56:	4630      	mov	r0, r6
  403d58:	e7b0      	b.n	403cbc <strstr+0xbc>
  403d5a:	eba4 0308 	sub.w	r3, r4, r8
  403d5e:	4543      	cmp	r3, r8
  403d60:	bf38      	it	cc
  403d62:	4643      	movcc	r3, r8
  403d64:	3301      	adds	r3, #1
  403d66:	f108 39ff 	add.w	r9, r8, #4294967295
  403d6a:	9303      	str	r3, [sp, #12]
  403d6c:	eb06 0309 	add.w	r3, r6, r9
  403d70:	4658      	mov	r0, fp
  403d72:	2500      	movs	r5, #0
  403d74:	46bb      	mov	fp, r7
  403d76:	469a      	mov	sl, r3
  403d78:	1967      	adds	r7, r4, r5
  403d7a:	1a3a      	subs	r2, r7, r0
  403d7c:	2100      	movs	r1, #0
  403d7e:	4458      	add	r0, fp
  403d80:	f002 fd1e 	bl	4067c0 <memchr>
  403d84:	2800      	cmp	r0, #0
  403d86:	f47f af7e 	bne.w	403c86 <strstr+0x86>
  403d8a:	2f00      	cmp	r7, #0
  403d8c:	f43f af7b 	beq.w	403c86 <strstr+0x86>
  403d90:	4544      	cmp	r4, r8
  403d92:	d915      	bls.n	403dc0 <strstr+0x1c0>
  403d94:	eb08 0205 	add.w	r2, r8, r5
  403d98:	f816 3008 	ldrb.w	r3, [r6, r8]
  403d9c:	f81b 0002 	ldrb.w	r0, [fp, r2]
  403da0:	4298      	cmp	r0, r3
  403da2:	445a      	add	r2, fp
  403da4:	eb06 0108 	add.w	r1, r6, r8
  403da8:	4643      	mov	r3, r8
  403daa:	d006      	beq.n	403dba <strstr+0x1ba>
  403dac:	e023      	b.n	403df6 <strstr+0x1f6>
  403dae:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  403db2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403db6:	4586      	cmp	lr, r0
  403db8:	d11d      	bne.n	403df6 <strstr+0x1f6>
  403dba:	3301      	adds	r3, #1
  403dbc:	429c      	cmp	r4, r3
  403dbe:	d1f6      	bne.n	403dae <strstr+0x1ae>
  403dc0:	f1b9 3fff 	cmp.w	r9, #4294967295
  403dc4:	d012      	beq.n	403dec <strstr+0x1ec>
  403dc6:	eb05 0209 	add.w	r2, r5, r9
  403dca:	f89a 3000 	ldrb.w	r3, [sl]
  403dce:	f81b 1002 	ldrb.w	r1, [fp, r2]
  403dd2:	4299      	cmp	r1, r3
  403dd4:	445a      	add	r2, fp
  403dd6:	d114      	bne.n	403e02 <strstr+0x202>
  403dd8:	4653      	mov	r3, sl
  403dda:	e005      	b.n	403de8 <strstr+0x1e8>
  403ddc:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403de0:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403de4:	4288      	cmp	r0, r1
  403de6:	d10c      	bne.n	403e02 <strstr+0x202>
  403de8:	42b3      	cmp	r3, r6
  403dea:	d1f7      	bne.n	403ddc <strstr+0x1dc>
  403dec:	465f      	mov	r7, fp
  403dee:	1978      	adds	r0, r7, r5
  403df0:	b005      	add	sp, #20
  403df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403df6:	f1c8 0201 	rsb	r2, r8, #1
  403dfa:	4415      	add	r5, r2
  403dfc:	441d      	add	r5, r3
  403dfe:	4638      	mov	r0, r7
  403e00:	e7ba      	b.n	403d78 <strstr+0x178>
  403e02:	9b03      	ldr	r3, [sp, #12]
  403e04:	4638      	mov	r0, r7
  403e06:	441d      	add	r5, r3
  403e08:	e7b6      	b.n	403d78 <strstr+0x178>
  403e0a:	780b      	ldrb	r3, [r1, #0]
  403e0c:	b913      	cbnz	r3, 403e14 <strstr+0x214>
  403e0e:	4770      	bx	lr
  403e10:	4641      	mov	r1, r8
  403e12:	e790      	b.n	403d36 <strstr+0x136>
  403e14:	2000      	movs	r0, #0
  403e16:	4770      	bx	lr

00403e18 <_svfprintf_r>:
  403e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e1c:	b0c3      	sub	sp, #268	; 0x10c
  403e1e:	460c      	mov	r4, r1
  403e20:	910b      	str	r1, [sp, #44]	; 0x2c
  403e22:	4692      	mov	sl, r2
  403e24:	930f      	str	r3, [sp, #60]	; 0x3c
  403e26:	900c      	str	r0, [sp, #48]	; 0x30
  403e28:	f002 fa06 	bl	406238 <_localeconv_r>
  403e2c:	6803      	ldr	r3, [r0, #0]
  403e2e:	931a      	str	r3, [sp, #104]	; 0x68
  403e30:	4618      	mov	r0, r3
  403e32:	f003 f965 	bl	407100 <strlen>
  403e36:	89a3      	ldrh	r3, [r4, #12]
  403e38:	9019      	str	r0, [sp, #100]	; 0x64
  403e3a:	0619      	lsls	r1, r3, #24
  403e3c:	d503      	bpl.n	403e46 <_svfprintf_r+0x2e>
  403e3e:	6923      	ldr	r3, [r4, #16]
  403e40:	2b00      	cmp	r3, #0
  403e42:	f001 8001 	beq.w	404e48 <_svfprintf_r+0x1030>
  403e46:	2300      	movs	r3, #0
  403e48:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403e4c:	9313      	str	r3, [sp, #76]	; 0x4c
  403e4e:	9314      	str	r3, [sp, #80]	; 0x50
  403e50:	9315      	str	r3, [sp, #84]	; 0x54
  403e52:	9327      	str	r3, [sp, #156]	; 0x9c
  403e54:	9326      	str	r3, [sp, #152]	; 0x98
  403e56:	9318      	str	r3, [sp, #96]	; 0x60
  403e58:	931b      	str	r3, [sp, #108]	; 0x6c
  403e5a:	9309      	str	r3, [sp, #36]	; 0x24
  403e5c:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403e60:	46c8      	mov	r8, r9
  403e62:	9316      	str	r3, [sp, #88]	; 0x58
  403e64:	9317      	str	r3, [sp, #92]	; 0x5c
  403e66:	f89a 3000 	ldrb.w	r3, [sl]
  403e6a:	4654      	mov	r4, sl
  403e6c:	b1e3      	cbz	r3, 403ea8 <_svfprintf_r+0x90>
  403e6e:	2b25      	cmp	r3, #37	; 0x25
  403e70:	d102      	bne.n	403e78 <_svfprintf_r+0x60>
  403e72:	e019      	b.n	403ea8 <_svfprintf_r+0x90>
  403e74:	2b25      	cmp	r3, #37	; 0x25
  403e76:	d003      	beq.n	403e80 <_svfprintf_r+0x68>
  403e78:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403e7c:	2b00      	cmp	r3, #0
  403e7e:	d1f9      	bne.n	403e74 <_svfprintf_r+0x5c>
  403e80:	eba4 050a 	sub.w	r5, r4, sl
  403e84:	b185      	cbz	r5, 403ea8 <_svfprintf_r+0x90>
  403e86:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e88:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403e8a:	f8c8 a000 	str.w	sl, [r8]
  403e8e:	3301      	adds	r3, #1
  403e90:	442a      	add	r2, r5
  403e92:	2b07      	cmp	r3, #7
  403e94:	f8c8 5004 	str.w	r5, [r8, #4]
  403e98:	9227      	str	r2, [sp, #156]	; 0x9c
  403e9a:	9326      	str	r3, [sp, #152]	; 0x98
  403e9c:	dc7f      	bgt.n	403f9e <_svfprintf_r+0x186>
  403e9e:	f108 0808 	add.w	r8, r8, #8
  403ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403ea4:	442b      	add	r3, r5
  403ea6:	9309      	str	r3, [sp, #36]	; 0x24
  403ea8:	7823      	ldrb	r3, [r4, #0]
  403eaa:	2b00      	cmp	r3, #0
  403eac:	d07f      	beq.n	403fae <_svfprintf_r+0x196>
  403eae:	2300      	movs	r3, #0
  403eb0:	461a      	mov	r2, r3
  403eb2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403eb6:	4619      	mov	r1, r3
  403eb8:	930d      	str	r3, [sp, #52]	; 0x34
  403eba:	469b      	mov	fp, r3
  403ebc:	f04f 30ff 	mov.w	r0, #4294967295
  403ec0:	7863      	ldrb	r3, [r4, #1]
  403ec2:	900a      	str	r0, [sp, #40]	; 0x28
  403ec4:	f104 0a01 	add.w	sl, r4, #1
  403ec8:	f10a 0a01 	add.w	sl, sl, #1
  403ecc:	f1a3 0020 	sub.w	r0, r3, #32
  403ed0:	2858      	cmp	r0, #88	; 0x58
  403ed2:	f200 83c0 	bhi.w	404656 <_svfprintf_r+0x83e>
  403ed6:	e8df f010 	tbh	[pc, r0, lsl #1]
  403eda:	0238      	.short	0x0238
  403edc:	03be03be 	.word	0x03be03be
  403ee0:	03be0240 	.word	0x03be0240
  403ee4:	03be03be 	.word	0x03be03be
  403ee8:	03be03be 	.word	0x03be03be
  403eec:	024503be 	.word	0x024503be
  403ef0:	03be0203 	.word	0x03be0203
  403ef4:	026b005d 	.word	0x026b005d
  403ef8:	028603be 	.word	0x028603be
  403efc:	039c039c 	.word	0x039c039c
  403f00:	039c039c 	.word	0x039c039c
  403f04:	039c039c 	.word	0x039c039c
  403f08:	039c039c 	.word	0x039c039c
  403f0c:	03be039c 	.word	0x03be039c
  403f10:	03be03be 	.word	0x03be03be
  403f14:	03be03be 	.word	0x03be03be
  403f18:	03be03be 	.word	0x03be03be
  403f1c:	03be03be 	.word	0x03be03be
  403f20:	033703be 	.word	0x033703be
  403f24:	03be0357 	.word	0x03be0357
  403f28:	03be0357 	.word	0x03be0357
  403f2c:	03be03be 	.word	0x03be03be
  403f30:	039703be 	.word	0x039703be
  403f34:	03be03be 	.word	0x03be03be
  403f38:	03be03ac 	.word	0x03be03ac
  403f3c:	03be03be 	.word	0x03be03be
  403f40:	03be03be 	.word	0x03be03be
  403f44:	03be0259 	.word	0x03be0259
  403f48:	031e03be 	.word	0x031e03be
  403f4c:	03be03be 	.word	0x03be03be
  403f50:	03be03be 	.word	0x03be03be
  403f54:	03be03be 	.word	0x03be03be
  403f58:	03be03be 	.word	0x03be03be
  403f5c:	03be03be 	.word	0x03be03be
  403f60:	02db02c6 	.word	0x02db02c6
  403f64:	03570357 	.word	0x03570357
  403f68:	028b0357 	.word	0x028b0357
  403f6c:	03be02db 	.word	0x03be02db
  403f70:	029003be 	.word	0x029003be
  403f74:	029d03be 	.word	0x029d03be
  403f78:	02b401cc 	.word	0x02b401cc
  403f7c:	03be0208 	.word	0x03be0208
  403f80:	03be01e1 	.word	0x03be01e1
  403f84:	03be007e 	.word	0x03be007e
  403f88:	020d03be 	.word	0x020d03be
  403f8c:	980d      	ldr	r0, [sp, #52]	; 0x34
  403f8e:	930f      	str	r3, [sp, #60]	; 0x3c
  403f90:	4240      	negs	r0, r0
  403f92:	900d      	str	r0, [sp, #52]	; 0x34
  403f94:	f04b 0b04 	orr.w	fp, fp, #4
  403f98:	f89a 3000 	ldrb.w	r3, [sl]
  403f9c:	e794      	b.n	403ec8 <_svfprintf_r+0xb0>
  403f9e:	aa25      	add	r2, sp, #148	; 0x94
  403fa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403fa2:	980c      	ldr	r0, [sp, #48]	; 0x30
  403fa4:	f003 f91a 	bl	4071dc <__ssprint_r>
  403fa8:	b940      	cbnz	r0, 403fbc <_svfprintf_r+0x1a4>
  403faa:	46c8      	mov	r8, r9
  403fac:	e779      	b.n	403ea2 <_svfprintf_r+0x8a>
  403fae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403fb0:	b123      	cbz	r3, 403fbc <_svfprintf_r+0x1a4>
  403fb2:	980c      	ldr	r0, [sp, #48]	; 0x30
  403fb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403fb6:	aa25      	add	r2, sp, #148	; 0x94
  403fb8:	f003 f910 	bl	4071dc <__ssprint_r>
  403fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403fbe:	899b      	ldrh	r3, [r3, #12]
  403fc0:	f013 0f40 	tst.w	r3, #64	; 0x40
  403fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403fc6:	bf18      	it	ne
  403fc8:	f04f 33ff 	movne.w	r3, #4294967295
  403fcc:	9309      	str	r3, [sp, #36]	; 0x24
  403fce:	9809      	ldr	r0, [sp, #36]	; 0x24
  403fd0:	b043      	add	sp, #268	; 0x10c
  403fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fd6:	f01b 0f20 	tst.w	fp, #32
  403fda:	9311      	str	r3, [sp, #68]	; 0x44
  403fdc:	f040 81dd 	bne.w	40439a <_svfprintf_r+0x582>
  403fe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403fe2:	f01b 0f10 	tst.w	fp, #16
  403fe6:	4613      	mov	r3, r2
  403fe8:	f040 856c 	bne.w	404ac4 <_svfprintf_r+0xcac>
  403fec:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403ff0:	f000 8568 	beq.w	404ac4 <_svfprintf_r+0xcac>
  403ff4:	8814      	ldrh	r4, [r2, #0]
  403ff6:	3204      	adds	r2, #4
  403ff8:	2500      	movs	r5, #0
  403ffa:	2301      	movs	r3, #1
  403ffc:	920f      	str	r2, [sp, #60]	; 0x3c
  403ffe:	2700      	movs	r7, #0
  404000:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404004:	990a      	ldr	r1, [sp, #40]	; 0x28
  404006:	1c4a      	adds	r2, r1, #1
  404008:	f000 8265 	beq.w	4044d6 <_svfprintf_r+0x6be>
  40400c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404010:	9207      	str	r2, [sp, #28]
  404012:	ea54 0205 	orrs.w	r2, r4, r5
  404016:	f040 8264 	bne.w	4044e2 <_svfprintf_r+0x6ca>
  40401a:	2900      	cmp	r1, #0
  40401c:	f040 8439 	bne.w	404892 <_svfprintf_r+0xa7a>
  404020:	2b00      	cmp	r3, #0
  404022:	f040 84d4 	bne.w	4049ce <_svfprintf_r+0xbb6>
  404026:	f01b 0301 	ands.w	r3, fp, #1
  40402a:	930e      	str	r3, [sp, #56]	; 0x38
  40402c:	f000 8602 	beq.w	404c34 <_svfprintf_r+0xe1c>
  404030:	ae42      	add	r6, sp, #264	; 0x108
  404032:	2330      	movs	r3, #48	; 0x30
  404034:	f806 3d41 	strb.w	r3, [r6, #-65]!
  404038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40403a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40403c:	4293      	cmp	r3, r2
  40403e:	bfb8      	it	lt
  404040:	4613      	movlt	r3, r2
  404042:	9308      	str	r3, [sp, #32]
  404044:	2300      	movs	r3, #0
  404046:	9312      	str	r3, [sp, #72]	; 0x48
  404048:	b117      	cbz	r7, 404050 <_svfprintf_r+0x238>
  40404a:	9b08      	ldr	r3, [sp, #32]
  40404c:	3301      	adds	r3, #1
  40404e:	9308      	str	r3, [sp, #32]
  404050:	9b07      	ldr	r3, [sp, #28]
  404052:	f013 0302 	ands.w	r3, r3, #2
  404056:	9310      	str	r3, [sp, #64]	; 0x40
  404058:	d002      	beq.n	404060 <_svfprintf_r+0x248>
  40405a:	9b08      	ldr	r3, [sp, #32]
  40405c:	3302      	adds	r3, #2
  40405e:	9308      	str	r3, [sp, #32]
  404060:	9b07      	ldr	r3, [sp, #28]
  404062:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  404066:	f040 830d 	bne.w	404684 <_svfprintf_r+0x86c>
  40406a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40406c:	9a08      	ldr	r2, [sp, #32]
  40406e:	eba3 0b02 	sub.w	fp, r3, r2
  404072:	f1bb 0f00 	cmp.w	fp, #0
  404076:	f340 8305 	ble.w	404684 <_svfprintf_r+0x86c>
  40407a:	f1bb 0f10 	cmp.w	fp, #16
  40407e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404080:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404082:	dd29      	ble.n	4040d8 <_svfprintf_r+0x2c0>
  404084:	4643      	mov	r3, r8
  404086:	4621      	mov	r1, r4
  404088:	46a8      	mov	r8, r5
  40408a:	2710      	movs	r7, #16
  40408c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40408e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404090:	e006      	b.n	4040a0 <_svfprintf_r+0x288>
  404092:	f1ab 0b10 	sub.w	fp, fp, #16
  404096:	f1bb 0f10 	cmp.w	fp, #16
  40409a:	f103 0308 	add.w	r3, r3, #8
  40409e:	dd18      	ble.n	4040d2 <_svfprintf_r+0x2ba>
  4040a0:	3201      	adds	r2, #1
  4040a2:	48b7      	ldr	r0, [pc, #732]	; (404380 <_svfprintf_r+0x568>)
  4040a4:	9226      	str	r2, [sp, #152]	; 0x98
  4040a6:	3110      	adds	r1, #16
  4040a8:	2a07      	cmp	r2, #7
  4040aa:	9127      	str	r1, [sp, #156]	; 0x9c
  4040ac:	e883 0081 	stmia.w	r3, {r0, r7}
  4040b0:	ddef      	ble.n	404092 <_svfprintf_r+0x27a>
  4040b2:	aa25      	add	r2, sp, #148	; 0x94
  4040b4:	4629      	mov	r1, r5
  4040b6:	4620      	mov	r0, r4
  4040b8:	f003 f890 	bl	4071dc <__ssprint_r>
  4040bc:	2800      	cmp	r0, #0
  4040be:	f47f af7d 	bne.w	403fbc <_svfprintf_r+0x1a4>
  4040c2:	f1ab 0b10 	sub.w	fp, fp, #16
  4040c6:	f1bb 0f10 	cmp.w	fp, #16
  4040ca:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4040cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4040ce:	464b      	mov	r3, r9
  4040d0:	dce6      	bgt.n	4040a0 <_svfprintf_r+0x288>
  4040d2:	4645      	mov	r5, r8
  4040d4:	460c      	mov	r4, r1
  4040d6:	4698      	mov	r8, r3
  4040d8:	3201      	adds	r2, #1
  4040da:	4ba9      	ldr	r3, [pc, #676]	; (404380 <_svfprintf_r+0x568>)
  4040dc:	9226      	str	r2, [sp, #152]	; 0x98
  4040de:	445c      	add	r4, fp
  4040e0:	2a07      	cmp	r2, #7
  4040e2:	9427      	str	r4, [sp, #156]	; 0x9c
  4040e4:	e888 0808 	stmia.w	r8, {r3, fp}
  4040e8:	f300 8495 	bgt.w	404a16 <_svfprintf_r+0xbfe>
  4040ec:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4040f0:	f108 0808 	add.w	r8, r8, #8
  4040f4:	b177      	cbz	r7, 404114 <_svfprintf_r+0x2fc>
  4040f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040f8:	3301      	adds	r3, #1
  4040fa:	3401      	adds	r4, #1
  4040fc:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  404100:	2201      	movs	r2, #1
  404102:	2b07      	cmp	r3, #7
  404104:	9427      	str	r4, [sp, #156]	; 0x9c
  404106:	9326      	str	r3, [sp, #152]	; 0x98
  404108:	e888 0006 	stmia.w	r8, {r1, r2}
  40410c:	f300 83d8 	bgt.w	4048c0 <_svfprintf_r+0xaa8>
  404110:	f108 0808 	add.w	r8, r8, #8
  404114:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404116:	b16b      	cbz	r3, 404134 <_svfprintf_r+0x31c>
  404118:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40411a:	3301      	adds	r3, #1
  40411c:	3402      	adds	r4, #2
  40411e:	a91e      	add	r1, sp, #120	; 0x78
  404120:	2202      	movs	r2, #2
  404122:	2b07      	cmp	r3, #7
  404124:	9427      	str	r4, [sp, #156]	; 0x9c
  404126:	9326      	str	r3, [sp, #152]	; 0x98
  404128:	e888 0006 	stmia.w	r8, {r1, r2}
  40412c:	f300 83d3 	bgt.w	4048d6 <_svfprintf_r+0xabe>
  404130:	f108 0808 	add.w	r8, r8, #8
  404134:	2d80      	cmp	r5, #128	; 0x80
  404136:	f000 8313 	beq.w	404760 <_svfprintf_r+0x948>
  40413a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40413c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40413e:	1a9f      	subs	r7, r3, r2
  404140:	2f00      	cmp	r7, #0
  404142:	dd36      	ble.n	4041b2 <_svfprintf_r+0x39a>
  404144:	2f10      	cmp	r7, #16
  404146:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404148:	4d8e      	ldr	r5, [pc, #568]	; (404384 <_svfprintf_r+0x56c>)
  40414a:	dd27      	ble.n	40419c <_svfprintf_r+0x384>
  40414c:	4642      	mov	r2, r8
  40414e:	4621      	mov	r1, r4
  404150:	46b0      	mov	r8, r6
  404152:	f04f 0b10 	mov.w	fp, #16
  404156:	462e      	mov	r6, r5
  404158:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40415a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40415c:	e004      	b.n	404168 <_svfprintf_r+0x350>
  40415e:	3f10      	subs	r7, #16
  404160:	2f10      	cmp	r7, #16
  404162:	f102 0208 	add.w	r2, r2, #8
  404166:	dd15      	ble.n	404194 <_svfprintf_r+0x37c>
  404168:	3301      	adds	r3, #1
  40416a:	3110      	adds	r1, #16
  40416c:	2b07      	cmp	r3, #7
  40416e:	9127      	str	r1, [sp, #156]	; 0x9c
  404170:	9326      	str	r3, [sp, #152]	; 0x98
  404172:	e882 0840 	stmia.w	r2, {r6, fp}
  404176:	ddf2      	ble.n	40415e <_svfprintf_r+0x346>
  404178:	aa25      	add	r2, sp, #148	; 0x94
  40417a:	4629      	mov	r1, r5
  40417c:	4620      	mov	r0, r4
  40417e:	f003 f82d 	bl	4071dc <__ssprint_r>
  404182:	2800      	cmp	r0, #0
  404184:	f47f af1a 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404188:	3f10      	subs	r7, #16
  40418a:	2f10      	cmp	r7, #16
  40418c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40418e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404190:	464a      	mov	r2, r9
  404192:	dce9      	bgt.n	404168 <_svfprintf_r+0x350>
  404194:	4635      	mov	r5, r6
  404196:	460c      	mov	r4, r1
  404198:	4646      	mov	r6, r8
  40419a:	4690      	mov	r8, r2
  40419c:	3301      	adds	r3, #1
  40419e:	443c      	add	r4, r7
  4041a0:	2b07      	cmp	r3, #7
  4041a2:	9427      	str	r4, [sp, #156]	; 0x9c
  4041a4:	9326      	str	r3, [sp, #152]	; 0x98
  4041a6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4041aa:	f300 837e 	bgt.w	4048aa <_svfprintf_r+0xa92>
  4041ae:	f108 0808 	add.w	r8, r8, #8
  4041b2:	9b07      	ldr	r3, [sp, #28]
  4041b4:	05df      	lsls	r7, r3, #23
  4041b6:	f100 8267 	bmi.w	404688 <_svfprintf_r+0x870>
  4041ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4041bc:	990e      	ldr	r1, [sp, #56]	; 0x38
  4041be:	f8c8 6000 	str.w	r6, [r8]
  4041c2:	3301      	adds	r3, #1
  4041c4:	440c      	add	r4, r1
  4041c6:	2b07      	cmp	r3, #7
  4041c8:	9427      	str	r4, [sp, #156]	; 0x9c
  4041ca:	f8c8 1004 	str.w	r1, [r8, #4]
  4041ce:	9326      	str	r3, [sp, #152]	; 0x98
  4041d0:	f300 834a 	bgt.w	404868 <_svfprintf_r+0xa50>
  4041d4:	f108 0808 	add.w	r8, r8, #8
  4041d8:	9b07      	ldr	r3, [sp, #28]
  4041da:	075b      	lsls	r3, r3, #29
  4041dc:	d53a      	bpl.n	404254 <_svfprintf_r+0x43c>
  4041de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4041e0:	9a08      	ldr	r2, [sp, #32]
  4041e2:	1a9d      	subs	r5, r3, r2
  4041e4:	2d00      	cmp	r5, #0
  4041e6:	dd35      	ble.n	404254 <_svfprintf_r+0x43c>
  4041e8:	2d10      	cmp	r5, #16
  4041ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4041ec:	dd20      	ble.n	404230 <_svfprintf_r+0x418>
  4041ee:	2610      	movs	r6, #16
  4041f0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4041f2:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4041f6:	e004      	b.n	404202 <_svfprintf_r+0x3ea>
  4041f8:	3d10      	subs	r5, #16
  4041fa:	2d10      	cmp	r5, #16
  4041fc:	f108 0808 	add.w	r8, r8, #8
  404200:	dd16      	ble.n	404230 <_svfprintf_r+0x418>
  404202:	3301      	adds	r3, #1
  404204:	4a5e      	ldr	r2, [pc, #376]	; (404380 <_svfprintf_r+0x568>)
  404206:	9326      	str	r3, [sp, #152]	; 0x98
  404208:	3410      	adds	r4, #16
  40420a:	2b07      	cmp	r3, #7
  40420c:	9427      	str	r4, [sp, #156]	; 0x9c
  40420e:	e888 0044 	stmia.w	r8, {r2, r6}
  404212:	ddf1      	ble.n	4041f8 <_svfprintf_r+0x3e0>
  404214:	aa25      	add	r2, sp, #148	; 0x94
  404216:	4659      	mov	r1, fp
  404218:	4638      	mov	r0, r7
  40421a:	f002 ffdf 	bl	4071dc <__ssprint_r>
  40421e:	2800      	cmp	r0, #0
  404220:	f47f aecc 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404224:	3d10      	subs	r5, #16
  404226:	2d10      	cmp	r5, #16
  404228:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40422a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40422c:	46c8      	mov	r8, r9
  40422e:	dce8      	bgt.n	404202 <_svfprintf_r+0x3ea>
  404230:	3301      	adds	r3, #1
  404232:	4a53      	ldr	r2, [pc, #332]	; (404380 <_svfprintf_r+0x568>)
  404234:	9326      	str	r3, [sp, #152]	; 0x98
  404236:	442c      	add	r4, r5
  404238:	2b07      	cmp	r3, #7
  40423a:	9427      	str	r4, [sp, #156]	; 0x9c
  40423c:	e888 0024 	stmia.w	r8, {r2, r5}
  404240:	dd08      	ble.n	404254 <_svfprintf_r+0x43c>
  404242:	aa25      	add	r2, sp, #148	; 0x94
  404244:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404246:	980c      	ldr	r0, [sp, #48]	; 0x30
  404248:	f002 ffc8 	bl	4071dc <__ssprint_r>
  40424c:	2800      	cmp	r0, #0
  40424e:	f47f aeb5 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404252:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404254:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404256:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404258:	9908      	ldr	r1, [sp, #32]
  40425a:	428a      	cmp	r2, r1
  40425c:	bfac      	ite	ge
  40425e:	189b      	addge	r3, r3, r2
  404260:	185b      	addlt	r3, r3, r1
  404262:	9309      	str	r3, [sp, #36]	; 0x24
  404264:	2c00      	cmp	r4, #0
  404266:	f040 830a 	bne.w	40487e <_svfprintf_r+0xa66>
  40426a:	2300      	movs	r3, #0
  40426c:	9326      	str	r3, [sp, #152]	; 0x98
  40426e:	46c8      	mov	r8, r9
  404270:	e5f9      	b.n	403e66 <_svfprintf_r+0x4e>
  404272:	9311      	str	r3, [sp, #68]	; 0x44
  404274:	f01b 0320 	ands.w	r3, fp, #32
  404278:	f040 81e2 	bne.w	404640 <_svfprintf_r+0x828>
  40427c:	f01b 0210 	ands.w	r2, fp, #16
  404280:	f040 842c 	bne.w	404adc <_svfprintf_r+0xcc4>
  404284:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404288:	f000 8428 	beq.w	404adc <_svfprintf_r+0xcc4>
  40428c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40428e:	4613      	mov	r3, r2
  404290:	460a      	mov	r2, r1
  404292:	3204      	adds	r2, #4
  404294:	880c      	ldrh	r4, [r1, #0]
  404296:	920f      	str	r2, [sp, #60]	; 0x3c
  404298:	2500      	movs	r5, #0
  40429a:	e6b0      	b.n	403ffe <_svfprintf_r+0x1e6>
  40429c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40429e:	9311      	str	r3, [sp, #68]	; 0x44
  4042a0:	6816      	ldr	r6, [r2, #0]
  4042a2:	2400      	movs	r4, #0
  4042a4:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4042a8:	1d15      	adds	r5, r2, #4
  4042aa:	2e00      	cmp	r6, #0
  4042ac:	f000 86a5 	beq.w	404ffa <_svfprintf_r+0x11e2>
  4042b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4042b2:	1c53      	adds	r3, r2, #1
  4042b4:	f000 8607 	beq.w	404ec6 <_svfprintf_r+0x10ae>
  4042b8:	4621      	mov	r1, r4
  4042ba:	4630      	mov	r0, r6
  4042bc:	f002 fa80 	bl	4067c0 <memchr>
  4042c0:	2800      	cmp	r0, #0
  4042c2:	f000 86df 	beq.w	405084 <_svfprintf_r+0x126c>
  4042c6:	1b83      	subs	r3, r0, r6
  4042c8:	930e      	str	r3, [sp, #56]	; 0x38
  4042ca:	940a      	str	r4, [sp, #40]	; 0x28
  4042cc:	950f      	str	r5, [sp, #60]	; 0x3c
  4042ce:	f8cd b01c 	str.w	fp, [sp, #28]
  4042d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4042d6:	9308      	str	r3, [sp, #32]
  4042d8:	9412      	str	r4, [sp, #72]	; 0x48
  4042da:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4042de:	e6b3      	b.n	404048 <_svfprintf_r+0x230>
  4042e0:	f89a 3000 	ldrb.w	r3, [sl]
  4042e4:	2201      	movs	r2, #1
  4042e6:	212b      	movs	r1, #43	; 0x2b
  4042e8:	e5ee      	b.n	403ec8 <_svfprintf_r+0xb0>
  4042ea:	f04b 0b20 	orr.w	fp, fp, #32
  4042ee:	f89a 3000 	ldrb.w	r3, [sl]
  4042f2:	e5e9      	b.n	403ec8 <_svfprintf_r+0xb0>
  4042f4:	9311      	str	r3, [sp, #68]	; 0x44
  4042f6:	2a00      	cmp	r2, #0
  4042f8:	f040 878d 	bne.w	405216 <_svfprintf_r+0x13fe>
  4042fc:	4b22      	ldr	r3, [pc, #136]	; (404388 <_svfprintf_r+0x570>)
  4042fe:	9318      	str	r3, [sp, #96]	; 0x60
  404300:	f01b 0f20 	tst.w	fp, #32
  404304:	f040 8111 	bne.w	40452a <_svfprintf_r+0x712>
  404308:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40430a:	f01b 0f10 	tst.w	fp, #16
  40430e:	4613      	mov	r3, r2
  404310:	f040 83df 	bne.w	404ad2 <_svfprintf_r+0xcba>
  404314:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404318:	f000 83db 	beq.w	404ad2 <_svfprintf_r+0xcba>
  40431c:	3304      	adds	r3, #4
  40431e:	8814      	ldrh	r4, [r2, #0]
  404320:	930f      	str	r3, [sp, #60]	; 0x3c
  404322:	2500      	movs	r5, #0
  404324:	f01b 0f01 	tst.w	fp, #1
  404328:	f000 810c 	beq.w	404544 <_svfprintf_r+0x72c>
  40432c:	ea54 0305 	orrs.w	r3, r4, r5
  404330:	f000 8108 	beq.w	404544 <_svfprintf_r+0x72c>
  404334:	2330      	movs	r3, #48	; 0x30
  404336:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40433a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  40433e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  404342:	f04b 0b02 	orr.w	fp, fp, #2
  404346:	2302      	movs	r3, #2
  404348:	e659      	b.n	403ffe <_svfprintf_r+0x1e6>
  40434a:	f89a 3000 	ldrb.w	r3, [sl]
  40434e:	2900      	cmp	r1, #0
  404350:	f47f adba 	bne.w	403ec8 <_svfprintf_r+0xb0>
  404354:	2201      	movs	r2, #1
  404356:	2120      	movs	r1, #32
  404358:	e5b6      	b.n	403ec8 <_svfprintf_r+0xb0>
  40435a:	f04b 0b01 	orr.w	fp, fp, #1
  40435e:	f89a 3000 	ldrb.w	r3, [sl]
  404362:	e5b1      	b.n	403ec8 <_svfprintf_r+0xb0>
  404364:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404366:	6823      	ldr	r3, [r4, #0]
  404368:	930d      	str	r3, [sp, #52]	; 0x34
  40436a:	4618      	mov	r0, r3
  40436c:	2800      	cmp	r0, #0
  40436e:	4623      	mov	r3, r4
  404370:	f103 0304 	add.w	r3, r3, #4
  404374:	f6ff ae0a 	blt.w	403f8c <_svfprintf_r+0x174>
  404378:	930f      	str	r3, [sp, #60]	; 0x3c
  40437a:	f89a 3000 	ldrb.w	r3, [sl]
  40437e:	e5a3      	b.n	403ec8 <_svfprintf_r+0xb0>
  404380:	00409170 	.word	0x00409170
  404384:	00409180 	.word	0x00409180
  404388:	00409150 	.word	0x00409150
  40438c:	f04b 0b10 	orr.w	fp, fp, #16
  404390:	f01b 0f20 	tst.w	fp, #32
  404394:	9311      	str	r3, [sp, #68]	; 0x44
  404396:	f43f ae23 	beq.w	403fe0 <_svfprintf_r+0x1c8>
  40439a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40439c:	3507      	adds	r5, #7
  40439e:	f025 0307 	bic.w	r3, r5, #7
  4043a2:	f103 0208 	add.w	r2, r3, #8
  4043a6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4043aa:	920f      	str	r2, [sp, #60]	; 0x3c
  4043ac:	2301      	movs	r3, #1
  4043ae:	e626      	b.n	403ffe <_svfprintf_r+0x1e6>
  4043b0:	f89a 3000 	ldrb.w	r3, [sl]
  4043b4:	2b2a      	cmp	r3, #42	; 0x2a
  4043b6:	f10a 0401 	add.w	r4, sl, #1
  4043ba:	f000 871f 	beq.w	4051fc <_svfprintf_r+0x13e4>
  4043be:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4043c2:	2809      	cmp	r0, #9
  4043c4:	46a2      	mov	sl, r4
  4043c6:	f200 86ab 	bhi.w	405120 <_svfprintf_r+0x1308>
  4043ca:	2300      	movs	r3, #0
  4043cc:	461c      	mov	r4, r3
  4043ce:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4043d2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4043d6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4043da:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4043de:	2809      	cmp	r0, #9
  4043e0:	d9f5      	bls.n	4043ce <_svfprintf_r+0x5b6>
  4043e2:	940a      	str	r4, [sp, #40]	; 0x28
  4043e4:	e572      	b.n	403ecc <_svfprintf_r+0xb4>
  4043e6:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4043ea:	f89a 3000 	ldrb.w	r3, [sl]
  4043ee:	e56b      	b.n	403ec8 <_svfprintf_r+0xb0>
  4043f0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4043f4:	f89a 3000 	ldrb.w	r3, [sl]
  4043f8:	e566      	b.n	403ec8 <_svfprintf_r+0xb0>
  4043fa:	f89a 3000 	ldrb.w	r3, [sl]
  4043fe:	2b6c      	cmp	r3, #108	; 0x6c
  404400:	bf03      	ittte	eq
  404402:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404406:	f04b 0b20 	orreq.w	fp, fp, #32
  40440a:	f10a 0a01 	addeq.w	sl, sl, #1
  40440e:	f04b 0b10 	orrne.w	fp, fp, #16
  404412:	e559      	b.n	403ec8 <_svfprintf_r+0xb0>
  404414:	2a00      	cmp	r2, #0
  404416:	f040 8709 	bne.w	40522c <_svfprintf_r+0x1414>
  40441a:	f01b 0f20 	tst.w	fp, #32
  40441e:	f040 84f7 	bne.w	404e10 <_svfprintf_r+0xff8>
  404422:	f01b 0f10 	tst.w	fp, #16
  404426:	f040 84aa 	bne.w	404d7e <_svfprintf_r+0xf66>
  40442a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40442e:	f000 84a6 	beq.w	404d7e <_svfprintf_r+0xf66>
  404432:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404434:	6813      	ldr	r3, [r2, #0]
  404436:	3204      	adds	r2, #4
  404438:	920f      	str	r2, [sp, #60]	; 0x3c
  40443a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40443e:	801a      	strh	r2, [r3, #0]
  404440:	e511      	b.n	403e66 <_svfprintf_r+0x4e>
  404442:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404444:	4bb2      	ldr	r3, [pc, #712]	; (404710 <_svfprintf_r+0x8f8>)
  404446:	680c      	ldr	r4, [r1, #0]
  404448:	9318      	str	r3, [sp, #96]	; 0x60
  40444a:	2230      	movs	r2, #48	; 0x30
  40444c:	2378      	movs	r3, #120	; 0x78
  40444e:	3104      	adds	r1, #4
  404450:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404454:	9311      	str	r3, [sp, #68]	; 0x44
  404456:	f04b 0b02 	orr.w	fp, fp, #2
  40445a:	910f      	str	r1, [sp, #60]	; 0x3c
  40445c:	2500      	movs	r5, #0
  40445e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  404462:	2302      	movs	r3, #2
  404464:	e5cb      	b.n	403ffe <_svfprintf_r+0x1e6>
  404466:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404468:	9311      	str	r3, [sp, #68]	; 0x44
  40446a:	680a      	ldr	r2, [r1, #0]
  40446c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404470:	2300      	movs	r3, #0
  404472:	460a      	mov	r2, r1
  404474:	461f      	mov	r7, r3
  404476:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40447a:	3204      	adds	r2, #4
  40447c:	2301      	movs	r3, #1
  40447e:	9308      	str	r3, [sp, #32]
  404480:	f8cd b01c 	str.w	fp, [sp, #28]
  404484:	970a      	str	r7, [sp, #40]	; 0x28
  404486:	9712      	str	r7, [sp, #72]	; 0x48
  404488:	920f      	str	r2, [sp, #60]	; 0x3c
  40448a:	930e      	str	r3, [sp, #56]	; 0x38
  40448c:	ae28      	add	r6, sp, #160	; 0xa0
  40448e:	e5df      	b.n	404050 <_svfprintf_r+0x238>
  404490:	9311      	str	r3, [sp, #68]	; 0x44
  404492:	2a00      	cmp	r2, #0
  404494:	f040 86e2 	bne.w	40525c <_svfprintf_r+0x1444>
  404498:	f01b 0f20 	tst.w	fp, #32
  40449c:	d15d      	bne.n	40455a <_svfprintf_r+0x742>
  40449e:	f01b 0f10 	tst.w	fp, #16
  4044a2:	f040 8306 	bne.w	404ab2 <_svfprintf_r+0xc9a>
  4044a6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4044aa:	f000 8302 	beq.w	404ab2 <_svfprintf_r+0xc9a>
  4044ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4044b0:	f9b1 4000 	ldrsh.w	r4, [r1]
  4044b4:	3104      	adds	r1, #4
  4044b6:	17e5      	asrs	r5, r4, #31
  4044b8:	4622      	mov	r2, r4
  4044ba:	462b      	mov	r3, r5
  4044bc:	910f      	str	r1, [sp, #60]	; 0x3c
  4044be:	2a00      	cmp	r2, #0
  4044c0:	f173 0300 	sbcs.w	r3, r3, #0
  4044c4:	db58      	blt.n	404578 <_svfprintf_r+0x760>
  4044c6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4044c8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4044cc:	1c4a      	adds	r2, r1, #1
  4044ce:	f04f 0301 	mov.w	r3, #1
  4044d2:	f47f ad9b 	bne.w	40400c <_svfprintf_r+0x1f4>
  4044d6:	ea54 0205 	orrs.w	r2, r4, r5
  4044da:	f000 81dc 	beq.w	404896 <_svfprintf_r+0xa7e>
  4044de:	f8cd b01c 	str.w	fp, [sp, #28]
  4044e2:	2b01      	cmp	r3, #1
  4044e4:	f000 8278 	beq.w	4049d8 <_svfprintf_r+0xbc0>
  4044e8:	2b02      	cmp	r3, #2
  4044ea:	f040 8203 	bne.w	4048f4 <_svfprintf_r+0xadc>
  4044ee:	9818      	ldr	r0, [sp, #96]	; 0x60
  4044f0:	464e      	mov	r6, r9
  4044f2:	0923      	lsrs	r3, r4, #4
  4044f4:	f004 010f 	and.w	r1, r4, #15
  4044f8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4044fc:	092a      	lsrs	r2, r5, #4
  4044fe:	461c      	mov	r4, r3
  404500:	4615      	mov	r5, r2
  404502:	5c43      	ldrb	r3, [r0, r1]
  404504:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404508:	ea54 0305 	orrs.w	r3, r4, r5
  40450c:	d1f1      	bne.n	4044f2 <_svfprintf_r+0x6da>
  40450e:	eba9 0306 	sub.w	r3, r9, r6
  404512:	930e      	str	r3, [sp, #56]	; 0x38
  404514:	e590      	b.n	404038 <_svfprintf_r+0x220>
  404516:	9311      	str	r3, [sp, #68]	; 0x44
  404518:	2a00      	cmp	r2, #0
  40451a:	f040 869b 	bne.w	405254 <_svfprintf_r+0x143c>
  40451e:	4b7d      	ldr	r3, [pc, #500]	; (404714 <_svfprintf_r+0x8fc>)
  404520:	9318      	str	r3, [sp, #96]	; 0x60
  404522:	f01b 0f20 	tst.w	fp, #32
  404526:	f43f aeef 	beq.w	404308 <_svfprintf_r+0x4f0>
  40452a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40452c:	3507      	adds	r5, #7
  40452e:	f025 0307 	bic.w	r3, r5, #7
  404532:	f103 0208 	add.w	r2, r3, #8
  404536:	f01b 0f01 	tst.w	fp, #1
  40453a:	920f      	str	r2, [sp, #60]	; 0x3c
  40453c:	e9d3 4500 	ldrd	r4, r5, [r3]
  404540:	f47f aef4 	bne.w	40432c <_svfprintf_r+0x514>
  404544:	2302      	movs	r3, #2
  404546:	e55a      	b.n	403ffe <_svfprintf_r+0x1e6>
  404548:	9311      	str	r3, [sp, #68]	; 0x44
  40454a:	2a00      	cmp	r2, #0
  40454c:	f040 867e 	bne.w	40524c <_svfprintf_r+0x1434>
  404550:	f04b 0b10 	orr.w	fp, fp, #16
  404554:	f01b 0f20 	tst.w	fp, #32
  404558:	d0a1      	beq.n	40449e <_svfprintf_r+0x686>
  40455a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40455c:	3507      	adds	r5, #7
  40455e:	f025 0507 	bic.w	r5, r5, #7
  404562:	e9d5 2300 	ldrd	r2, r3, [r5]
  404566:	2a00      	cmp	r2, #0
  404568:	f105 0108 	add.w	r1, r5, #8
  40456c:	461d      	mov	r5, r3
  40456e:	f173 0300 	sbcs.w	r3, r3, #0
  404572:	910f      	str	r1, [sp, #60]	; 0x3c
  404574:	4614      	mov	r4, r2
  404576:	daa6      	bge.n	4044c6 <_svfprintf_r+0x6ae>
  404578:	272d      	movs	r7, #45	; 0x2d
  40457a:	4264      	negs	r4, r4
  40457c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404580:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404584:	2301      	movs	r3, #1
  404586:	e53d      	b.n	404004 <_svfprintf_r+0x1ec>
  404588:	9311      	str	r3, [sp, #68]	; 0x44
  40458a:	2a00      	cmp	r2, #0
  40458c:	f040 865a 	bne.w	405244 <_svfprintf_r+0x142c>
  404590:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404592:	3507      	adds	r5, #7
  404594:	f025 0307 	bic.w	r3, r5, #7
  404598:	f103 0208 	add.w	r2, r3, #8
  40459c:	920f      	str	r2, [sp, #60]	; 0x3c
  40459e:	681a      	ldr	r2, [r3, #0]
  4045a0:	9214      	str	r2, [sp, #80]	; 0x50
  4045a2:	685b      	ldr	r3, [r3, #4]
  4045a4:	9315      	str	r3, [sp, #84]	; 0x54
  4045a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4045a8:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4045aa:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4045ae:	4628      	mov	r0, r5
  4045b0:	4621      	mov	r1, r4
  4045b2:	f04f 32ff 	mov.w	r2, #4294967295
  4045b6:	4b58      	ldr	r3, [pc, #352]	; (404718 <_svfprintf_r+0x900>)
  4045b8:	f003 fec6 	bl	408348 <__aeabi_dcmpun>
  4045bc:	2800      	cmp	r0, #0
  4045be:	f040 8348 	bne.w	404c52 <_svfprintf_r+0xe3a>
  4045c2:	4628      	mov	r0, r5
  4045c4:	4621      	mov	r1, r4
  4045c6:	f04f 32ff 	mov.w	r2, #4294967295
  4045ca:	4b53      	ldr	r3, [pc, #332]	; (404718 <_svfprintf_r+0x900>)
  4045cc:	f003 fe9e 	bl	40830c <__aeabi_dcmple>
  4045d0:	2800      	cmp	r0, #0
  4045d2:	f040 833e 	bne.w	404c52 <_svfprintf_r+0xe3a>
  4045d6:	a814      	add	r0, sp, #80	; 0x50
  4045d8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  4045da:	f003 fe8d 	bl	4082f8 <__aeabi_dcmplt>
  4045de:	2800      	cmp	r0, #0
  4045e0:	f040 852f 	bne.w	405042 <_svfprintf_r+0x122a>
  4045e4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4045e8:	4e4c      	ldr	r6, [pc, #304]	; (40471c <_svfprintf_r+0x904>)
  4045ea:	4b4d      	ldr	r3, [pc, #308]	; (404720 <_svfprintf_r+0x908>)
  4045ec:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4045f0:	9007      	str	r0, [sp, #28]
  4045f2:	9811      	ldr	r0, [sp, #68]	; 0x44
  4045f4:	2203      	movs	r2, #3
  4045f6:	2100      	movs	r1, #0
  4045f8:	9208      	str	r2, [sp, #32]
  4045fa:	910a      	str	r1, [sp, #40]	; 0x28
  4045fc:	2847      	cmp	r0, #71	; 0x47
  4045fe:	bfd8      	it	le
  404600:	461e      	movle	r6, r3
  404602:	920e      	str	r2, [sp, #56]	; 0x38
  404604:	9112      	str	r1, [sp, #72]	; 0x48
  404606:	e51f      	b.n	404048 <_svfprintf_r+0x230>
  404608:	f04b 0b08 	orr.w	fp, fp, #8
  40460c:	f89a 3000 	ldrb.w	r3, [sl]
  404610:	e45a      	b.n	403ec8 <_svfprintf_r+0xb0>
  404612:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404616:	2300      	movs	r3, #0
  404618:	461c      	mov	r4, r3
  40461a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40461e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404622:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404626:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40462a:	2809      	cmp	r0, #9
  40462c:	d9f5      	bls.n	40461a <_svfprintf_r+0x802>
  40462e:	940d      	str	r4, [sp, #52]	; 0x34
  404630:	e44c      	b.n	403ecc <_svfprintf_r+0xb4>
  404632:	f04b 0b10 	orr.w	fp, fp, #16
  404636:	9311      	str	r3, [sp, #68]	; 0x44
  404638:	f01b 0320 	ands.w	r3, fp, #32
  40463c:	f43f ae1e 	beq.w	40427c <_svfprintf_r+0x464>
  404640:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404642:	3507      	adds	r5, #7
  404644:	f025 0307 	bic.w	r3, r5, #7
  404648:	f103 0208 	add.w	r2, r3, #8
  40464c:	e9d3 4500 	ldrd	r4, r5, [r3]
  404650:	920f      	str	r2, [sp, #60]	; 0x3c
  404652:	2300      	movs	r3, #0
  404654:	e4d3      	b.n	403ffe <_svfprintf_r+0x1e6>
  404656:	9311      	str	r3, [sp, #68]	; 0x44
  404658:	2a00      	cmp	r2, #0
  40465a:	f040 85e0 	bne.w	40521e <_svfprintf_r+0x1406>
  40465e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404660:	2a00      	cmp	r2, #0
  404662:	f43f aca4 	beq.w	403fae <_svfprintf_r+0x196>
  404666:	2300      	movs	r3, #0
  404668:	2101      	movs	r1, #1
  40466a:	461f      	mov	r7, r3
  40466c:	9108      	str	r1, [sp, #32]
  40466e:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404672:	f8cd b01c 	str.w	fp, [sp, #28]
  404676:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40467a:	930a      	str	r3, [sp, #40]	; 0x28
  40467c:	9312      	str	r3, [sp, #72]	; 0x48
  40467e:	910e      	str	r1, [sp, #56]	; 0x38
  404680:	ae28      	add	r6, sp, #160	; 0xa0
  404682:	e4e5      	b.n	404050 <_svfprintf_r+0x238>
  404684:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404686:	e535      	b.n	4040f4 <_svfprintf_r+0x2dc>
  404688:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40468a:	2b65      	cmp	r3, #101	; 0x65
  40468c:	f340 80a6 	ble.w	4047dc <_svfprintf_r+0x9c4>
  404690:	a814      	add	r0, sp, #80	; 0x50
  404692:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  404694:	f003 fe26 	bl	4082e4 <__aeabi_dcmpeq>
  404698:	2800      	cmp	r0, #0
  40469a:	f000 814f 	beq.w	40493c <_svfprintf_r+0xb24>
  40469e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4046a0:	4a20      	ldr	r2, [pc, #128]	; (404724 <_svfprintf_r+0x90c>)
  4046a2:	f8c8 2000 	str.w	r2, [r8]
  4046a6:	3301      	adds	r3, #1
  4046a8:	3401      	adds	r4, #1
  4046aa:	2201      	movs	r2, #1
  4046ac:	2b07      	cmp	r3, #7
  4046ae:	9427      	str	r4, [sp, #156]	; 0x9c
  4046b0:	9326      	str	r3, [sp, #152]	; 0x98
  4046b2:	f8c8 2004 	str.w	r2, [r8, #4]
  4046b6:	f300 836a 	bgt.w	404d8e <_svfprintf_r+0xf76>
  4046ba:	f108 0808 	add.w	r8, r8, #8
  4046be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4046c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4046c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4046c4:	4293      	cmp	r3, r2
  4046c6:	db03      	blt.n	4046d0 <_svfprintf_r+0x8b8>
  4046c8:	9b07      	ldr	r3, [sp, #28]
  4046ca:	07dd      	lsls	r5, r3, #31
  4046cc:	f57f ad84 	bpl.w	4041d8 <_svfprintf_r+0x3c0>
  4046d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4046d2:	9919      	ldr	r1, [sp, #100]	; 0x64
  4046d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4046d6:	f8c8 2000 	str.w	r2, [r8]
  4046da:	3301      	adds	r3, #1
  4046dc:	440c      	add	r4, r1
  4046de:	2b07      	cmp	r3, #7
  4046e0:	f8c8 1004 	str.w	r1, [r8, #4]
  4046e4:	9427      	str	r4, [sp, #156]	; 0x9c
  4046e6:	9326      	str	r3, [sp, #152]	; 0x98
  4046e8:	f300 839e 	bgt.w	404e28 <_svfprintf_r+0x1010>
  4046ec:	f108 0808 	add.w	r8, r8, #8
  4046f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4046f2:	1e5e      	subs	r6, r3, #1
  4046f4:	2e00      	cmp	r6, #0
  4046f6:	f77f ad6f 	ble.w	4041d8 <_svfprintf_r+0x3c0>
  4046fa:	2e10      	cmp	r6, #16
  4046fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4046fe:	4d0a      	ldr	r5, [pc, #40]	; (404728 <_svfprintf_r+0x910>)
  404700:	f340 81f5 	ble.w	404aee <_svfprintf_r+0xcd6>
  404704:	4622      	mov	r2, r4
  404706:	2710      	movs	r7, #16
  404708:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40470c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40470e:	e013      	b.n	404738 <_svfprintf_r+0x920>
  404710:	00409150 	.word	0x00409150
  404714:	0040913c 	.word	0x0040913c
  404718:	7fefffff 	.word	0x7fefffff
  40471c:	00409130 	.word	0x00409130
  404720:	0040912c 	.word	0x0040912c
  404724:	0040916c 	.word	0x0040916c
  404728:	00409180 	.word	0x00409180
  40472c:	f108 0808 	add.w	r8, r8, #8
  404730:	3e10      	subs	r6, #16
  404732:	2e10      	cmp	r6, #16
  404734:	f340 81da 	ble.w	404aec <_svfprintf_r+0xcd4>
  404738:	3301      	adds	r3, #1
  40473a:	3210      	adds	r2, #16
  40473c:	2b07      	cmp	r3, #7
  40473e:	9227      	str	r2, [sp, #156]	; 0x9c
  404740:	9326      	str	r3, [sp, #152]	; 0x98
  404742:	e888 00a0 	stmia.w	r8, {r5, r7}
  404746:	ddf1      	ble.n	40472c <_svfprintf_r+0x914>
  404748:	aa25      	add	r2, sp, #148	; 0x94
  40474a:	4621      	mov	r1, r4
  40474c:	4658      	mov	r0, fp
  40474e:	f002 fd45 	bl	4071dc <__ssprint_r>
  404752:	2800      	cmp	r0, #0
  404754:	f47f ac32 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404758:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40475a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40475c:	46c8      	mov	r8, r9
  40475e:	e7e7      	b.n	404730 <_svfprintf_r+0x918>
  404760:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404762:	9a08      	ldr	r2, [sp, #32]
  404764:	1a9f      	subs	r7, r3, r2
  404766:	2f00      	cmp	r7, #0
  404768:	f77f ace7 	ble.w	40413a <_svfprintf_r+0x322>
  40476c:	2f10      	cmp	r7, #16
  40476e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404770:	4db6      	ldr	r5, [pc, #728]	; (404a4c <_svfprintf_r+0xc34>)
  404772:	dd27      	ble.n	4047c4 <_svfprintf_r+0x9ac>
  404774:	4642      	mov	r2, r8
  404776:	4621      	mov	r1, r4
  404778:	46b0      	mov	r8, r6
  40477a:	f04f 0b10 	mov.w	fp, #16
  40477e:	462e      	mov	r6, r5
  404780:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404782:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404784:	e004      	b.n	404790 <_svfprintf_r+0x978>
  404786:	3f10      	subs	r7, #16
  404788:	2f10      	cmp	r7, #16
  40478a:	f102 0208 	add.w	r2, r2, #8
  40478e:	dd15      	ble.n	4047bc <_svfprintf_r+0x9a4>
  404790:	3301      	adds	r3, #1
  404792:	3110      	adds	r1, #16
  404794:	2b07      	cmp	r3, #7
  404796:	9127      	str	r1, [sp, #156]	; 0x9c
  404798:	9326      	str	r3, [sp, #152]	; 0x98
  40479a:	e882 0840 	stmia.w	r2, {r6, fp}
  40479e:	ddf2      	ble.n	404786 <_svfprintf_r+0x96e>
  4047a0:	aa25      	add	r2, sp, #148	; 0x94
  4047a2:	4629      	mov	r1, r5
  4047a4:	4620      	mov	r0, r4
  4047a6:	f002 fd19 	bl	4071dc <__ssprint_r>
  4047aa:	2800      	cmp	r0, #0
  4047ac:	f47f ac06 	bne.w	403fbc <_svfprintf_r+0x1a4>
  4047b0:	3f10      	subs	r7, #16
  4047b2:	2f10      	cmp	r7, #16
  4047b4:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4047b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4047b8:	464a      	mov	r2, r9
  4047ba:	dce9      	bgt.n	404790 <_svfprintf_r+0x978>
  4047bc:	4635      	mov	r5, r6
  4047be:	460c      	mov	r4, r1
  4047c0:	4646      	mov	r6, r8
  4047c2:	4690      	mov	r8, r2
  4047c4:	3301      	adds	r3, #1
  4047c6:	443c      	add	r4, r7
  4047c8:	2b07      	cmp	r3, #7
  4047ca:	9427      	str	r4, [sp, #156]	; 0x9c
  4047cc:	9326      	str	r3, [sp, #152]	; 0x98
  4047ce:	e888 00a0 	stmia.w	r8, {r5, r7}
  4047d2:	f300 8232 	bgt.w	404c3a <_svfprintf_r+0xe22>
  4047d6:	f108 0808 	add.w	r8, r8, #8
  4047da:	e4ae      	b.n	40413a <_svfprintf_r+0x322>
  4047dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4047de:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4047e0:	2b01      	cmp	r3, #1
  4047e2:	f340 81fe 	ble.w	404be2 <_svfprintf_r+0xdca>
  4047e6:	3701      	adds	r7, #1
  4047e8:	3401      	adds	r4, #1
  4047ea:	2301      	movs	r3, #1
  4047ec:	2f07      	cmp	r7, #7
  4047ee:	9427      	str	r4, [sp, #156]	; 0x9c
  4047f0:	9726      	str	r7, [sp, #152]	; 0x98
  4047f2:	f8c8 6000 	str.w	r6, [r8]
  4047f6:	f8c8 3004 	str.w	r3, [r8, #4]
  4047fa:	f300 8203 	bgt.w	404c04 <_svfprintf_r+0xdec>
  4047fe:	f108 0808 	add.w	r8, r8, #8
  404802:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404804:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  404806:	f8c8 3000 	str.w	r3, [r8]
  40480a:	3701      	adds	r7, #1
  40480c:	4414      	add	r4, r2
  40480e:	2f07      	cmp	r7, #7
  404810:	9427      	str	r4, [sp, #156]	; 0x9c
  404812:	9726      	str	r7, [sp, #152]	; 0x98
  404814:	f8c8 2004 	str.w	r2, [r8, #4]
  404818:	f300 8200 	bgt.w	404c1c <_svfprintf_r+0xe04>
  40481c:	f108 0808 	add.w	r8, r8, #8
  404820:	a814      	add	r0, sp, #80	; 0x50
  404822:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  404824:	f003 fd5e 	bl	4082e4 <__aeabi_dcmpeq>
  404828:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40482a:	2800      	cmp	r0, #0
  40482c:	f040 8101 	bne.w	404a32 <_svfprintf_r+0xc1a>
  404830:	3b01      	subs	r3, #1
  404832:	3701      	adds	r7, #1
  404834:	3601      	adds	r6, #1
  404836:	441c      	add	r4, r3
  404838:	2f07      	cmp	r7, #7
  40483a:	9726      	str	r7, [sp, #152]	; 0x98
  40483c:	9427      	str	r4, [sp, #156]	; 0x9c
  40483e:	f8c8 6000 	str.w	r6, [r8]
  404842:	f8c8 3004 	str.w	r3, [r8, #4]
  404846:	f300 8128 	bgt.w	404a9a <_svfprintf_r+0xc82>
  40484a:	f108 0808 	add.w	r8, r8, #8
  40484e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  404850:	f8c8 2004 	str.w	r2, [r8, #4]
  404854:	3701      	adds	r7, #1
  404856:	4414      	add	r4, r2
  404858:	ab21      	add	r3, sp, #132	; 0x84
  40485a:	2f07      	cmp	r7, #7
  40485c:	9427      	str	r4, [sp, #156]	; 0x9c
  40485e:	9726      	str	r7, [sp, #152]	; 0x98
  404860:	f8c8 3000 	str.w	r3, [r8]
  404864:	f77f acb6 	ble.w	4041d4 <_svfprintf_r+0x3bc>
  404868:	aa25      	add	r2, sp, #148	; 0x94
  40486a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40486c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40486e:	f002 fcb5 	bl	4071dc <__ssprint_r>
  404872:	2800      	cmp	r0, #0
  404874:	f47f aba2 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404878:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40487a:	46c8      	mov	r8, r9
  40487c:	e4ac      	b.n	4041d8 <_svfprintf_r+0x3c0>
  40487e:	aa25      	add	r2, sp, #148	; 0x94
  404880:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404882:	980c      	ldr	r0, [sp, #48]	; 0x30
  404884:	f002 fcaa 	bl	4071dc <__ssprint_r>
  404888:	2800      	cmp	r0, #0
  40488a:	f43f acee 	beq.w	40426a <_svfprintf_r+0x452>
  40488e:	f7ff bb95 	b.w	403fbc <_svfprintf_r+0x1a4>
  404892:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404896:	2b01      	cmp	r3, #1
  404898:	f000 8135 	beq.w	404b06 <_svfprintf_r+0xcee>
  40489c:	2b02      	cmp	r3, #2
  40489e:	d125      	bne.n	4048ec <_svfprintf_r+0xad4>
  4048a0:	f8cd b01c 	str.w	fp, [sp, #28]
  4048a4:	2400      	movs	r4, #0
  4048a6:	2500      	movs	r5, #0
  4048a8:	e621      	b.n	4044ee <_svfprintf_r+0x6d6>
  4048aa:	aa25      	add	r2, sp, #148	; 0x94
  4048ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048ae:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048b0:	f002 fc94 	bl	4071dc <__ssprint_r>
  4048b4:	2800      	cmp	r0, #0
  4048b6:	f47f ab81 	bne.w	403fbc <_svfprintf_r+0x1a4>
  4048ba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4048bc:	46c8      	mov	r8, r9
  4048be:	e478      	b.n	4041b2 <_svfprintf_r+0x39a>
  4048c0:	aa25      	add	r2, sp, #148	; 0x94
  4048c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048c4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048c6:	f002 fc89 	bl	4071dc <__ssprint_r>
  4048ca:	2800      	cmp	r0, #0
  4048cc:	f47f ab76 	bne.w	403fbc <_svfprintf_r+0x1a4>
  4048d0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4048d2:	46c8      	mov	r8, r9
  4048d4:	e41e      	b.n	404114 <_svfprintf_r+0x2fc>
  4048d6:	aa25      	add	r2, sp, #148	; 0x94
  4048d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048da:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048dc:	f002 fc7e 	bl	4071dc <__ssprint_r>
  4048e0:	2800      	cmp	r0, #0
  4048e2:	f47f ab6b 	bne.w	403fbc <_svfprintf_r+0x1a4>
  4048e6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4048e8:	46c8      	mov	r8, r9
  4048ea:	e423      	b.n	404134 <_svfprintf_r+0x31c>
  4048ec:	f8cd b01c 	str.w	fp, [sp, #28]
  4048f0:	2400      	movs	r4, #0
  4048f2:	2500      	movs	r5, #0
  4048f4:	4649      	mov	r1, r9
  4048f6:	e000      	b.n	4048fa <_svfprintf_r+0xae2>
  4048f8:	4631      	mov	r1, r6
  4048fa:	08e2      	lsrs	r2, r4, #3
  4048fc:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404900:	08e8      	lsrs	r0, r5, #3
  404902:	f004 0307 	and.w	r3, r4, #7
  404906:	4605      	mov	r5, r0
  404908:	4614      	mov	r4, r2
  40490a:	3330      	adds	r3, #48	; 0x30
  40490c:	ea54 0205 	orrs.w	r2, r4, r5
  404910:	f801 3c01 	strb.w	r3, [r1, #-1]
  404914:	f101 36ff 	add.w	r6, r1, #4294967295
  404918:	d1ee      	bne.n	4048f8 <_svfprintf_r+0xae0>
  40491a:	9a07      	ldr	r2, [sp, #28]
  40491c:	07d2      	lsls	r2, r2, #31
  40491e:	f57f adf6 	bpl.w	40450e <_svfprintf_r+0x6f6>
  404922:	2b30      	cmp	r3, #48	; 0x30
  404924:	f43f adf3 	beq.w	40450e <_svfprintf_r+0x6f6>
  404928:	3902      	subs	r1, #2
  40492a:	2330      	movs	r3, #48	; 0x30
  40492c:	f806 3c01 	strb.w	r3, [r6, #-1]
  404930:	eba9 0301 	sub.w	r3, r9, r1
  404934:	930e      	str	r3, [sp, #56]	; 0x38
  404936:	460e      	mov	r6, r1
  404938:	f7ff bb7e 	b.w	404038 <_svfprintf_r+0x220>
  40493c:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40493e:	2900      	cmp	r1, #0
  404940:	f340 822f 	ble.w	404da2 <_svfprintf_r+0xf8a>
  404944:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404946:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404948:	4293      	cmp	r3, r2
  40494a:	bfa8      	it	ge
  40494c:	4613      	movge	r3, r2
  40494e:	2b00      	cmp	r3, #0
  404950:	461f      	mov	r7, r3
  404952:	dd0d      	ble.n	404970 <_svfprintf_r+0xb58>
  404954:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404956:	f8c8 6000 	str.w	r6, [r8]
  40495a:	3301      	adds	r3, #1
  40495c:	443c      	add	r4, r7
  40495e:	2b07      	cmp	r3, #7
  404960:	9427      	str	r4, [sp, #156]	; 0x9c
  404962:	f8c8 7004 	str.w	r7, [r8, #4]
  404966:	9326      	str	r3, [sp, #152]	; 0x98
  404968:	f300 8320 	bgt.w	404fac <_svfprintf_r+0x1194>
  40496c:	f108 0808 	add.w	r8, r8, #8
  404970:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404972:	2f00      	cmp	r7, #0
  404974:	bfa8      	it	ge
  404976:	1bdb      	subge	r3, r3, r7
  404978:	2b00      	cmp	r3, #0
  40497a:	461f      	mov	r7, r3
  40497c:	f340 80d7 	ble.w	404b2e <_svfprintf_r+0xd16>
  404980:	2f10      	cmp	r7, #16
  404982:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404984:	4d31      	ldr	r5, [pc, #196]	; (404a4c <_svfprintf_r+0xc34>)
  404986:	f340 81ee 	ble.w	404d66 <_svfprintf_r+0xf4e>
  40498a:	4642      	mov	r2, r8
  40498c:	4621      	mov	r1, r4
  40498e:	46b0      	mov	r8, r6
  404990:	f04f 0b10 	mov.w	fp, #16
  404994:	462e      	mov	r6, r5
  404996:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404998:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40499a:	e004      	b.n	4049a6 <_svfprintf_r+0xb8e>
  40499c:	3208      	adds	r2, #8
  40499e:	3f10      	subs	r7, #16
  4049a0:	2f10      	cmp	r7, #16
  4049a2:	f340 81dc 	ble.w	404d5e <_svfprintf_r+0xf46>
  4049a6:	3301      	adds	r3, #1
  4049a8:	3110      	adds	r1, #16
  4049aa:	2b07      	cmp	r3, #7
  4049ac:	9127      	str	r1, [sp, #156]	; 0x9c
  4049ae:	9326      	str	r3, [sp, #152]	; 0x98
  4049b0:	e882 0840 	stmia.w	r2, {r6, fp}
  4049b4:	ddf2      	ble.n	40499c <_svfprintf_r+0xb84>
  4049b6:	aa25      	add	r2, sp, #148	; 0x94
  4049b8:	4629      	mov	r1, r5
  4049ba:	4620      	mov	r0, r4
  4049bc:	f002 fc0e 	bl	4071dc <__ssprint_r>
  4049c0:	2800      	cmp	r0, #0
  4049c2:	f47f aafb 	bne.w	403fbc <_svfprintf_r+0x1a4>
  4049c6:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4049c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4049ca:	464a      	mov	r2, r9
  4049cc:	e7e7      	b.n	40499e <_svfprintf_r+0xb86>
  4049ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4049d0:	930e      	str	r3, [sp, #56]	; 0x38
  4049d2:	464e      	mov	r6, r9
  4049d4:	f7ff bb30 	b.w	404038 <_svfprintf_r+0x220>
  4049d8:	2d00      	cmp	r5, #0
  4049da:	bf08      	it	eq
  4049dc:	2c0a      	cmpeq	r4, #10
  4049de:	f0c0 8090 	bcc.w	404b02 <_svfprintf_r+0xcea>
  4049e2:	464e      	mov	r6, r9
  4049e4:	4620      	mov	r0, r4
  4049e6:	4629      	mov	r1, r5
  4049e8:	220a      	movs	r2, #10
  4049ea:	2300      	movs	r3, #0
  4049ec:	f7fe fd8c 	bl	403508 <__aeabi_uldivmod>
  4049f0:	3230      	adds	r2, #48	; 0x30
  4049f2:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4049f6:	4620      	mov	r0, r4
  4049f8:	4629      	mov	r1, r5
  4049fa:	2300      	movs	r3, #0
  4049fc:	220a      	movs	r2, #10
  4049fe:	f7fe fd83 	bl	403508 <__aeabi_uldivmod>
  404a02:	4604      	mov	r4, r0
  404a04:	460d      	mov	r5, r1
  404a06:	ea54 0305 	orrs.w	r3, r4, r5
  404a0a:	d1eb      	bne.n	4049e4 <_svfprintf_r+0xbcc>
  404a0c:	eba9 0306 	sub.w	r3, r9, r6
  404a10:	930e      	str	r3, [sp, #56]	; 0x38
  404a12:	f7ff bb11 	b.w	404038 <_svfprintf_r+0x220>
  404a16:	aa25      	add	r2, sp, #148	; 0x94
  404a18:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a1a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a1c:	f002 fbde 	bl	4071dc <__ssprint_r>
  404a20:	2800      	cmp	r0, #0
  404a22:	f47f aacb 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404a26:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404a2a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404a2c:	46c8      	mov	r8, r9
  404a2e:	f7ff bb61 	b.w	4040f4 <_svfprintf_r+0x2dc>
  404a32:	1e5e      	subs	r6, r3, #1
  404a34:	2e00      	cmp	r6, #0
  404a36:	f77f af0a 	ble.w	40484e <_svfprintf_r+0xa36>
  404a3a:	2e10      	cmp	r6, #16
  404a3c:	4d03      	ldr	r5, [pc, #12]	; (404a4c <_svfprintf_r+0xc34>)
  404a3e:	dd23      	ble.n	404a88 <_svfprintf_r+0xc70>
  404a40:	4622      	mov	r2, r4
  404a42:	f04f 0b10 	mov.w	fp, #16
  404a46:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404a48:	e007      	b.n	404a5a <_svfprintf_r+0xc42>
  404a4a:	bf00      	nop
  404a4c:	00409180 	.word	0x00409180
  404a50:	3e10      	subs	r6, #16
  404a52:	2e10      	cmp	r6, #16
  404a54:	f108 0808 	add.w	r8, r8, #8
  404a58:	dd15      	ble.n	404a86 <_svfprintf_r+0xc6e>
  404a5a:	3701      	adds	r7, #1
  404a5c:	3210      	adds	r2, #16
  404a5e:	2f07      	cmp	r7, #7
  404a60:	9227      	str	r2, [sp, #156]	; 0x9c
  404a62:	9726      	str	r7, [sp, #152]	; 0x98
  404a64:	e888 0820 	stmia.w	r8, {r5, fp}
  404a68:	ddf2      	ble.n	404a50 <_svfprintf_r+0xc38>
  404a6a:	aa25      	add	r2, sp, #148	; 0x94
  404a6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a6e:	4620      	mov	r0, r4
  404a70:	f002 fbb4 	bl	4071dc <__ssprint_r>
  404a74:	2800      	cmp	r0, #0
  404a76:	f47f aaa1 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404a7a:	3e10      	subs	r6, #16
  404a7c:	2e10      	cmp	r6, #16
  404a7e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404a80:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404a82:	46c8      	mov	r8, r9
  404a84:	dce9      	bgt.n	404a5a <_svfprintf_r+0xc42>
  404a86:	4614      	mov	r4, r2
  404a88:	3701      	adds	r7, #1
  404a8a:	4434      	add	r4, r6
  404a8c:	2f07      	cmp	r7, #7
  404a8e:	9427      	str	r4, [sp, #156]	; 0x9c
  404a90:	9726      	str	r7, [sp, #152]	; 0x98
  404a92:	e888 0060 	stmia.w	r8, {r5, r6}
  404a96:	f77f aed8 	ble.w	40484a <_svfprintf_r+0xa32>
  404a9a:	aa25      	add	r2, sp, #148	; 0x94
  404a9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a9e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404aa0:	f002 fb9c 	bl	4071dc <__ssprint_r>
  404aa4:	2800      	cmp	r0, #0
  404aa6:	f47f aa89 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404aaa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404aac:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404aae:	46c8      	mov	r8, r9
  404ab0:	e6cd      	b.n	40484e <_svfprintf_r+0xa36>
  404ab2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404ab4:	6814      	ldr	r4, [r2, #0]
  404ab6:	4613      	mov	r3, r2
  404ab8:	3304      	adds	r3, #4
  404aba:	17e5      	asrs	r5, r4, #31
  404abc:	930f      	str	r3, [sp, #60]	; 0x3c
  404abe:	4622      	mov	r2, r4
  404ac0:	462b      	mov	r3, r5
  404ac2:	e4fc      	b.n	4044be <_svfprintf_r+0x6a6>
  404ac4:	3204      	adds	r2, #4
  404ac6:	681c      	ldr	r4, [r3, #0]
  404ac8:	920f      	str	r2, [sp, #60]	; 0x3c
  404aca:	2301      	movs	r3, #1
  404acc:	2500      	movs	r5, #0
  404ace:	f7ff ba96 	b.w	403ffe <_svfprintf_r+0x1e6>
  404ad2:	681c      	ldr	r4, [r3, #0]
  404ad4:	3304      	adds	r3, #4
  404ad6:	930f      	str	r3, [sp, #60]	; 0x3c
  404ad8:	2500      	movs	r5, #0
  404ada:	e423      	b.n	404324 <_svfprintf_r+0x50c>
  404adc:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404ade:	460a      	mov	r2, r1
  404ae0:	3204      	adds	r2, #4
  404ae2:	680c      	ldr	r4, [r1, #0]
  404ae4:	920f      	str	r2, [sp, #60]	; 0x3c
  404ae6:	2500      	movs	r5, #0
  404ae8:	f7ff ba89 	b.w	403ffe <_svfprintf_r+0x1e6>
  404aec:	4614      	mov	r4, r2
  404aee:	3301      	adds	r3, #1
  404af0:	4434      	add	r4, r6
  404af2:	2b07      	cmp	r3, #7
  404af4:	9427      	str	r4, [sp, #156]	; 0x9c
  404af6:	9326      	str	r3, [sp, #152]	; 0x98
  404af8:	e888 0060 	stmia.w	r8, {r5, r6}
  404afc:	f77f ab6a 	ble.w	4041d4 <_svfprintf_r+0x3bc>
  404b00:	e6b2      	b.n	404868 <_svfprintf_r+0xa50>
  404b02:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404b06:	f8cd b01c 	str.w	fp, [sp, #28]
  404b0a:	ae42      	add	r6, sp, #264	; 0x108
  404b0c:	3430      	adds	r4, #48	; 0x30
  404b0e:	2301      	movs	r3, #1
  404b10:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404b14:	930e      	str	r3, [sp, #56]	; 0x38
  404b16:	f7ff ba8f 	b.w	404038 <_svfprintf_r+0x220>
  404b1a:	aa25      	add	r2, sp, #148	; 0x94
  404b1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b1e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b20:	f002 fb5c 	bl	4071dc <__ssprint_r>
  404b24:	2800      	cmp	r0, #0
  404b26:	f47f aa49 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404b2a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b2c:	46c8      	mov	r8, r9
  404b2e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404b30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404b32:	429a      	cmp	r2, r3
  404b34:	db44      	blt.n	404bc0 <_svfprintf_r+0xda8>
  404b36:	9b07      	ldr	r3, [sp, #28]
  404b38:	07d9      	lsls	r1, r3, #31
  404b3a:	d441      	bmi.n	404bc0 <_svfprintf_r+0xda8>
  404b3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404b3e:	9812      	ldr	r0, [sp, #72]	; 0x48
  404b40:	1a9a      	subs	r2, r3, r2
  404b42:	1a1d      	subs	r5, r3, r0
  404b44:	4295      	cmp	r5, r2
  404b46:	bfa8      	it	ge
  404b48:	4615      	movge	r5, r2
  404b4a:	2d00      	cmp	r5, #0
  404b4c:	dd0e      	ble.n	404b6c <_svfprintf_r+0xd54>
  404b4e:	9926      	ldr	r1, [sp, #152]	; 0x98
  404b50:	f8c8 5004 	str.w	r5, [r8, #4]
  404b54:	3101      	adds	r1, #1
  404b56:	4406      	add	r6, r0
  404b58:	442c      	add	r4, r5
  404b5a:	2907      	cmp	r1, #7
  404b5c:	f8c8 6000 	str.w	r6, [r8]
  404b60:	9427      	str	r4, [sp, #156]	; 0x9c
  404b62:	9126      	str	r1, [sp, #152]	; 0x98
  404b64:	f300 823b 	bgt.w	404fde <_svfprintf_r+0x11c6>
  404b68:	f108 0808 	add.w	r8, r8, #8
  404b6c:	2d00      	cmp	r5, #0
  404b6e:	bfac      	ite	ge
  404b70:	1b56      	subge	r6, r2, r5
  404b72:	4616      	movlt	r6, r2
  404b74:	2e00      	cmp	r6, #0
  404b76:	f77f ab2f 	ble.w	4041d8 <_svfprintf_r+0x3c0>
  404b7a:	2e10      	cmp	r6, #16
  404b7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b7e:	4db0      	ldr	r5, [pc, #704]	; (404e40 <_svfprintf_r+0x1028>)
  404b80:	ddb5      	ble.n	404aee <_svfprintf_r+0xcd6>
  404b82:	4622      	mov	r2, r4
  404b84:	2710      	movs	r7, #16
  404b86:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404b8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404b8c:	e004      	b.n	404b98 <_svfprintf_r+0xd80>
  404b8e:	f108 0808 	add.w	r8, r8, #8
  404b92:	3e10      	subs	r6, #16
  404b94:	2e10      	cmp	r6, #16
  404b96:	dda9      	ble.n	404aec <_svfprintf_r+0xcd4>
  404b98:	3301      	adds	r3, #1
  404b9a:	3210      	adds	r2, #16
  404b9c:	2b07      	cmp	r3, #7
  404b9e:	9227      	str	r2, [sp, #156]	; 0x9c
  404ba0:	9326      	str	r3, [sp, #152]	; 0x98
  404ba2:	e888 00a0 	stmia.w	r8, {r5, r7}
  404ba6:	ddf2      	ble.n	404b8e <_svfprintf_r+0xd76>
  404ba8:	aa25      	add	r2, sp, #148	; 0x94
  404baa:	4621      	mov	r1, r4
  404bac:	4658      	mov	r0, fp
  404bae:	f002 fb15 	bl	4071dc <__ssprint_r>
  404bb2:	2800      	cmp	r0, #0
  404bb4:	f47f aa02 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404bb8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404bba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404bbc:	46c8      	mov	r8, r9
  404bbe:	e7e8      	b.n	404b92 <_svfprintf_r+0xd7a>
  404bc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404bc2:	9819      	ldr	r0, [sp, #100]	; 0x64
  404bc4:	991a      	ldr	r1, [sp, #104]	; 0x68
  404bc6:	f8c8 1000 	str.w	r1, [r8]
  404bca:	3301      	adds	r3, #1
  404bcc:	4404      	add	r4, r0
  404bce:	2b07      	cmp	r3, #7
  404bd0:	9427      	str	r4, [sp, #156]	; 0x9c
  404bd2:	f8c8 0004 	str.w	r0, [r8, #4]
  404bd6:	9326      	str	r3, [sp, #152]	; 0x98
  404bd8:	f300 81f5 	bgt.w	404fc6 <_svfprintf_r+0x11ae>
  404bdc:	f108 0808 	add.w	r8, r8, #8
  404be0:	e7ac      	b.n	404b3c <_svfprintf_r+0xd24>
  404be2:	9b07      	ldr	r3, [sp, #28]
  404be4:	07da      	lsls	r2, r3, #31
  404be6:	f53f adfe 	bmi.w	4047e6 <_svfprintf_r+0x9ce>
  404bea:	3701      	adds	r7, #1
  404bec:	3401      	adds	r4, #1
  404bee:	2301      	movs	r3, #1
  404bf0:	2f07      	cmp	r7, #7
  404bf2:	9427      	str	r4, [sp, #156]	; 0x9c
  404bf4:	9726      	str	r7, [sp, #152]	; 0x98
  404bf6:	f8c8 6000 	str.w	r6, [r8]
  404bfa:	f8c8 3004 	str.w	r3, [r8, #4]
  404bfe:	f77f ae24 	ble.w	40484a <_svfprintf_r+0xa32>
  404c02:	e74a      	b.n	404a9a <_svfprintf_r+0xc82>
  404c04:	aa25      	add	r2, sp, #148	; 0x94
  404c06:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c08:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c0a:	f002 fae7 	bl	4071dc <__ssprint_r>
  404c0e:	2800      	cmp	r0, #0
  404c10:	f47f a9d4 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404c14:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404c16:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404c18:	46c8      	mov	r8, r9
  404c1a:	e5f2      	b.n	404802 <_svfprintf_r+0x9ea>
  404c1c:	aa25      	add	r2, sp, #148	; 0x94
  404c1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c20:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c22:	f002 fadb 	bl	4071dc <__ssprint_r>
  404c26:	2800      	cmp	r0, #0
  404c28:	f47f a9c8 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404c2c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404c2e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404c30:	46c8      	mov	r8, r9
  404c32:	e5f5      	b.n	404820 <_svfprintf_r+0xa08>
  404c34:	464e      	mov	r6, r9
  404c36:	f7ff b9ff 	b.w	404038 <_svfprintf_r+0x220>
  404c3a:	aa25      	add	r2, sp, #148	; 0x94
  404c3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c3e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c40:	f002 facc 	bl	4071dc <__ssprint_r>
  404c44:	2800      	cmp	r0, #0
  404c46:	f47f a9b9 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404c4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404c4c:	46c8      	mov	r8, r9
  404c4e:	f7ff ba74 	b.w	40413a <_svfprintf_r+0x322>
  404c52:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404c54:	4622      	mov	r2, r4
  404c56:	4620      	mov	r0, r4
  404c58:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404c5a:	4623      	mov	r3, r4
  404c5c:	4621      	mov	r1, r4
  404c5e:	f003 fb73 	bl	408348 <__aeabi_dcmpun>
  404c62:	2800      	cmp	r0, #0
  404c64:	f040 8286 	bne.w	405174 <_svfprintf_r+0x135c>
  404c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404c6a:	3301      	adds	r3, #1
  404c6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404c6e:	f023 0320 	bic.w	r3, r3, #32
  404c72:	930e      	str	r3, [sp, #56]	; 0x38
  404c74:	f000 81e2 	beq.w	40503c <_svfprintf_r+0x1224>
  404c78:	2b47      	cmp	r3, #71	; 0x47
  404c7a:	f000 811e 	beq.w	404eba <_svfprintf_r+0x10a2>
  404c7e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  404c82:	9307      	str	r3, [sp, #28]
  404c84:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404c86:	1e1f      	subs	r7, r3, #0
  404c88:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404c8a:	9308      	str	r3, [sp, #32]
  404c8c:	bfbb      	ittet	lt
  404c8e:	463b      	movlt	r3, r7
  404c90:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404c94:	2300      	movge	r3, #0
  404c96:	232d      	movlt	r3, #45	; 0x2d
  404c98:	9310      	str	r3, [sp, #64]	; 0x40
  404c9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404c9c:	2b66      	cmp	r3, #102	; 0x66
  404c9e:	f000 81bb 	beq.w	405018 <_svfprintf_r+0x1200>
  404ca2:	2b46      	cmp	r3, #70	; 0x46
  404ca4:	f000 80df 	beq.w	404e66 <_svfprintf_r+0x104e>
  404ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404caa:	9a08      	ldr	r2, [sp, #32]
  404cac:	2b45      	cmp	r3, #69	; 0x45
  404cae:	bf0c      	ite	eq
  404cb0:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  404cb2:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404cb4:	a823      	add	r0, sp, #140	; 0x8c
  404cb6:	a920      	add	r1, sp, #128	; 0x80
  404cb8:	bf08      	it	eq
  404cba:	1c5d      	addeq	r5, r3, #1
  404cbc:	9004      	str	r0, [sp, #16]
  404cbe:	9103      	str	r1, [sp, #12]
  404cc0:	a81f      	add	r0, sp, #124	; 0x7c
  404cc2:	2102      	movs	r1, #2
  404cc4:	463b      	mov	r3, r7
  404cc6:	9002      	str	r0, [sp, #8]
  404cc8:	9501      	str	r5, [sp, #4]
  404cca:	9100      	str	r1, [sp, #0]
  404ccc:	980c      	ldr	r0, [sp, #48]	; 0x30
  404cce:	f000 fb6f 	bl	4053b0 <_dtoa_r>
  404cd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404cd4:	2b67      	cmp	r3, #103	; 0x67
  404cd6:	4606      	mov	r6, r0
  404cd8:	f040 81e0 	bne.w	40509c <_svfprintf_r+0x1284>
  404cdc:	f01b 0f01 	tst.w	fp, #1
  404ce0:	f000 8246 	beq.w	405170 <_svfprintf_r+0x1358>
  404ce4:	1974      	adds	r4, r6, r5
  404ce6:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404ce8:	9808      	ldr	r0, [sp, #32]
  404cea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404cec:	4639      	mov	r1, r7
  404cee:	f003 faf9 	bl	4082e4 <__aeabi_dcmpeq>
  404cf2:	2800      	cmp	r0, #0
  404cf4:	f040 8165 	bne.w	404fc2 <_svfprintf_r+0x11aa>
  404cf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404cfa:	42a3      	cmp	r3, r4
  404cfc:	d206      	bcs.n	404d0c <_svfprintf_r+0xef4>
  404cfe:	2130      	movs	r1, #48	; 0x30
  404d00:	1c5a      	adds	r2, r3, #1
  404d02:	9223      	str	r2, [sp, #140]	; 0x8c
  404d04:	7019      	strb	r1, [r3, #0]
  404d06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404d08:	429c      	cmp	r4, r3
  404d0a:	d8f9      	bhi.n	404d00 <_svfprintf_r+0xee8>
  404d0c:	1b9b      	subs	r3, r3, r6
  404d0e:	9313      	str	r3, [sp, #76]	; 0x4c
  404d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404d12:	2b47      	cmp	r3, #71	; 0x47
  404d14:	f000 80e9 	beq.w	404eea <_svfprintf_r+0x10d2>
  404d18:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d1a:	2b65      	cmp	r3, #101	; 0x65
  404d1c:	f340 81cd 	ble.w	4050ba <_svfprintf_r+0x12a2>
  404d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d22:	2b66      	cmp	r3, #102	; 0x66
  404d24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404d26:	9312      	str	r3, [sp, #72]	; 0x48
  404d28:	f000 819e 	beq.w	405068 <_svfprintf_r+0x1250>
  404d2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404d2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404d30:	4619      	mov	r1, r3
  404d32:	4291      	cmp	r1, r2
  404d34:	f300 818a 	bgt.w	40504c <_svfprintf_r+0x1234>
  404d38:	f01b 0f01 	tst.w	fp, #1
  404d3c:	f040 8213 	bne.w	405166 <_svfprintf_r+0x134e>
  404d40:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404d44:	9308      	str	r3, [sp, #32]
  404d46:	2367      	movs	r3, #103	; 0x67
  404d48:	920e      	str	r2, [sp, #56]	; 0x38
  404d4a:	9311      	str	r3, [sp, #68]	; 0x44
  404d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404d4e:	2b00      	cmp	r3, #0
  404d50:	f040 80c4 	bne.w	404edc <_svfprintf_r+0x10c4>
  404d54:	930a      	str	r3, [sp, #40]	; 0x28
  404d56:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404d5a:	f7ff b975 	b.w	404048 <_svfprintf_r+0x230>
  404d5e:	4635      	mov	r5, r6
  404d60:	460c      	mov	r4, r1
  404d62:	4646      	mov	r6, r8
  404d64:	4690      	mov	r8, r2
  404d66:	3301      	adds	r3, #1
  404d68:	443c      	add	r4, r7
  404d6a:	2b07      	cmp	r3, #7
  404d6c:	9427      	str	r4, [sp, #156]	; 0x9c
  404d6e:	9326      	str	r3, [sp, #152]	; 0x98
  404d70:	e888 00a0 	stmia.w	r8, {r5, r7}
  404d74:	f73f aed1 	bgt.w	404b1a <_svfprintf_r+0xd02>
  404d78:	f108 0808 	add.w	r8, r8, #8
  404d7c:	e6d7      	b.n	404b2e <_svfprintf_r+0xd16>
  404d7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404d80:	6813      	ldr	r3, [r2, #0]
  404d82:	3204      	adds	r2, #4
  404d84:	920f      	str	r2, [sp, #60]	; 0x3c
  404d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404d88:	601a      	str	r2, [r3, #0]
  404d8a:	f7ff b86c 	b.w	403e66 <_svfprintf_r+0x4e>
  404d8e:	aa25      	add	r2, sp, #148	; 0x94
  404d90:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d92:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d94:	f002 fa22 	bl	4071dc <__ssprint_r>
  404d98:	2800      	cmp	r0, #0
  404d9a:	f47f a90f 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404d9e:	46c8      	mov	r8, r9
  404da0:	e48d      	b.n	4046be <_svfprintf_r+0x8a6>
  404da2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404da4:	4a27      	ldr	r2, [pc, #156]	; (404e44 <_svfprintf_r+0x102c>)
  404da6:	f8c8 2000 	str.w	r2, [r8]
  404daa:	3301      	adds	r3, #1
  404dac:	3401      	adds	r4, #1
  404dae:	2201      	movs	r2, #1
  404db0:	2b07      	cmp	r3, #7
  404db2:	9427      	str	r4, [sp, #156]	; 0x9c
  404db4:	9326      	str	r3, [sp, #152]	; 0x98
  404db6:	f8c8 2004 	str.w	r2, [r8, #4]
  404dba:	dc72      	bgt.n	404ea2 <_svfprintf_r+0x108a>
  404dbc:	f108 0808 	add.w	r8, r8, #8
  404dc0:	b929      	cbnz	r1, 404dce <_svfprintf_r+0xfb6>
  404dc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404dc4:	b91b      	cbnz	r3, 404dce <_svfprintf_r+0xfb6>
  404dc6:	9b07      	ldr	r3, [sp, #28]
  404dc8:	07d8      	lsls	r0, r3, #31
  404dca:	f57f aa05 	bpl.w	4041d8 <_svfprintf_r+0x3c0>
  404dce:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404dd0:	9819      	ldr	r0, [sp, #100]	; 0x64
  404dd2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404dd4:	f8c8 2000 	str.w	r2, [r8]
  404dd8:	3301      	adds	r3, #1
  404dda:	4602      	mov	r2, r0
  404ddc:	4422      	add	r2, r4
  404dde:	2b07      	cmp	r3, #7
  404de0:	9227      	str	r2, [sp, #156]	; 0x9c
  404de2:	f8c8 0004 	str.w	r0, [r8, #4]
  404de6:	9326      	str	r3, [sp, #152]	; 0x98
  404de8:	f300 818d 	bgt.w	405106 <_svfprintf_r+0x12ee>
  404dec:	f108 0808 	add.w	r8, r8, #8
  404df0:	2900      	cmp	r1, #0
  404df2:	f2c0 8165 	blt.w	4050c0 <_svfprintf_r+0x12a8>
  404df6:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404df8:	f8c8 6000 	str.w	r6, [r8]
  404dfc:	3301      	adds	r3, #1
  404dfe:	188c      	adds	r4, r1, r2
  404e00:	2b07      	cmp	r3, #7
  404e02:	9427      	str	r4, [sp, #156]	; 0x9c
  404e04:	9326      	str	r3, [sp, #152]	; 0x98
  404e06:	f8c8 1004 	str.w	r1, [r8, #4]
  404e0a:	f77f a9e3 	ble.w	4041d4 <_svfprintf_r+0x3bc>
  404e0e:	e52b      	b.n	404868 <_svfprintf_r+0xa50>
  404e10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404e12:	9909      	ldr	r1, [sp, #36]	; 0x24
  404e14:	6813      	ldr	r3, [r2, #0]
  404e16:	17cd      	asrs	r5, r1, #31
  404e18:	4608      	mov	r0, r1
  404e1a:	3204      	adds	r2, #4
  404e1c:	4629      	mov	r1, r5
  404e1e:	920f      	str	r2, [sp, #60]	; 0x3c
  404e20:	e9c3 0100 	strd	r0, r1, [r3]
  404e24:	f7ff b81f 	b.w	403e66 <_svfprintf_r+0x4e>
  404e28:	aa25      	add	r2, sp, #148	; 0x94
  404e2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e2c:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e2e:	f002 f9d5 	bl	4071dc <__ssprint_r>
  404e32:	2800      	cmp	r0, #0
  404e34:	f47f a8c2 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404e38:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404e3a:	46c8      	mov	r8, r9
  404e3c:	e458      	b.n	4046f0 <_svfprintf_r+0x8d8>
  404e3e:	bf00      	nop
  404e40:	00409180 	.word	0x00409180
  404e44:	0040916c 	.word	0x0040916c
  404e48:	2140      	movs	r1, #64	; 0x40
  404e4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e4c:	f001 fa02 	bl	406254 <_malloc_r>
  404e50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404e52:	6010      	str	r0, [r2, #0]
  404e54:	6110      	str	r0, [r2, #16]
  404e56:	2800      	cmp	r0, #0
  404e58:	f000 81ec 	beq.w	405234 <_svfprintf_r+0x141c>
  404e5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404e5e:	2340      	movs	r3, #64	; 0x40
  404e60:	6153      	str	r3, [r2, #20]
  404e62:	f7fe bff0 	b.w	403e46 <_svfprintf_r+0x2e>
  404e66:	a823      	add	r0, sp, #140	; 0x8c
  404e68:	a920      	add	r1, sp, #128	; 0x80
  404e6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404e6c:	9004      	str	r0, [sp, #16]
  404e6e:	9103      	str	r1, [sp, #12]
  404e70:	a81f      	add	r0, sp, #124	; 0x7c
  404e72:	2103      	movs	r1, #3
  404e74:	9002      	str	r0, [sp, #8]
  404e76:	9a08      	ldr	r2, [sp, #32]
  404e78:	9401      	str	r4, [sp, #4]
  404e7a:	463b      	mov	r3, r7
  404e7c:	9100      	str	r1, [sp, #0]
  404e7e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e80:	f000 fa96 	bl	4053b0 <_dtoa_r>
  404e84:	4625      	mov	r5, r4
  404e86:	4606      	mov	r6, r0
  404e88:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e8a:	2b46      	cmp	r3, #70	; 0x46
  404e8c:	eb06 0405 	add.w	r4, r6, r5
  404e90:	f47f af29 	bne.w	404ce6 <_svfprintf_r+0xece>
  404e94:	7833      	ldrb	r3, [r6, #0]
  404e96:	2b30      	cmp	r3, #48	; 0x30
  404e98:	f000 8172 	beq.w	405180 <_svfprintf_r+0x1368>
  404e9c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  404e9e:	442c      	add	r4, r5
  404ea0:	e721      	b.n	404ce6 <_svfprintf_r+0xece>
  404ea2:	aa25      	add	r2, sp, #148	; 0x94
  404ea4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404ea6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ea8:	f002 f998 	bl	4071dc <__ssprint_r>
  404eac:	2800      	cmp	r0, #0
  404eae:	f47f a885 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404eb2:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404eb4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404eb6:	46c8      	mov	r8, r9
  404eb8:	e782      	b.n	404dc0 <_svfprintf_r+0xfa8>
  404eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ebc:	2b00      	cmp	r3, #0
  404ebe:	bf08      	it	eq
  404ec0:	2301      	moveq	r3, #1
  404ec2:	930a      	str	r3, [sp, #40]	; 0x28
  404ec4:	e6db      	b.n	404c7e <_svfprintf_r+0xe66>
  404ec6:	4630      	mov	r0, r6
  404ec8:	940a      	str	r4, [sp, #40]	; 0x28
  404eca:	f002 f919 	bl	407100 <strlen>
  404ece:	950f      	str	r5, [sp, #60]	; 0x3c
  404ed0:	900e      	str	r0, [sp, #56]	; 0x38
  404ed2:	f8cd b01c 	str.w	fp, [sp, #28]
  404ed6:	4603      	mov	r3, r0
  404ed8:	f7ff b9fb 	b.w	4042d2 <_svfprintf_r+0x4ba>
  404edc:	272d      	movs	r7, #45	; 0x2d
  404ede:	2300      	movs	r3, #0
  404ee0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404ee4:	930a      	str	r3, [sp, #40]	; 0x28
  404ee6:	f7ff b8b0 	b.w	40404a <_svfprintf_r+0x232>
  404eea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404eec:	9312      	str	r3, [sp, #72]	; 0x48
  404eee:	461a      	mov	r2, r3
  404ef0:	3303      	adds	r3, #3
  404ef2:	db04      	blt.n	404efe <_svfprintf_r+0x10e6>
  404ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ef6:	4619      	mov	r1, r3
  404ef8:	4291      	cmp	r1, r2
  404efa:	f6bf af17 	bge.w	404d2c <_svfprintf_r+0xf14>
  404efe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f00:	3b02      	subs	r3, #2
  404f02:	9311      	str	r3, [sp, #68]	; 0x44
  404f04:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404f08:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404f0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404f0e:	3b01      	subs	r3, #1
  404f10:	2b00      	cmp	r3, #0
  404f12:	931f      	str	r3, [sp, #124]	; 0x7c
  404f14:	bfbd      	ittte	lt
  404f16:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  404f18:	f1c3 0301 	rsblt	r3, r3, #1
  404f1c:	222d      	movlt	r2, #45	; 0x2d
  404f1e:	222b      	movge	r2, #43	; 0x2b
  404f20:	2b09      	cmp	r3, #9
  404f22:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  404f26:	f340 8116 	ble.w	405156 <_svfprintf_r+0x133e>
  404f2a:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  404f2e:	4620      	mov	r0, r4
  404f30:	4dad      	ldr	r5, [pc, #692]	; (4051e8 <_svfprintf_r+0x13d0>)
  404f32:	e000      	b.n	404f36 <_svfprintf_r+0x111e>
  404f34:	4610      	mov	r0, r2
  404f36:	fb85 1203 	smull	r1, r2, r5, r3
  404f3a:	17d9      	asrs	r1, r3, #31
  404f3c:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404f40:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404f44:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404f48:	3230      	adds	r2, #48	; 0x30
  404f4a:	2909      	cmp	r1, #9
  404f4c:	f800 2c01 	strb.w	r2, [r0, #-1]
  404f50:	460b      	mov	r3, r1
  404f52:	f100 32ff 	add.w	r2, r0, #4294967295
  404f56:	dced      	bgt.n	404f34 <_svfprintf_r+0x111c>
  404f58:	3330      	adds	r3, #48	; 0x30
  404f5a:	3802      	subs	r0, #2
  404f5c:	b2d9      	uxtb	r1, r3
  404f5e:	4284      	cmp	r4, r0
  404f60:	f802 1c01 	strb.w	r1, [r2, #-1]
  404f64:	f240 815f 	bls.w	405226 <_svfprintf_r+0x140e>
  404f68:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  404f6c:	4613      	mov	r3, r2
  404f6e:	e001      	b.n	404f74 <_svfprintf_r+0x115c>
  404f70:	f813 1b01 	ldrb.w	r1, [r3], #1
  404f74:	f800 1b01 	strb.w	r1, [r0], #1
  404f78:	42a3      	cmp	r3, r4
  404f7a:	d1f9      	bne.n	404f70 <_svfprintf_r+0x1158>
  404f7c:	3301      	adds	r3, #1
  404f7e:	1a9b      	subs	r3, r3, r2
  404f80:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404f84:	4413      	add	r3, r2
  404f86:	aa21      	add	r2, sp, #132	; 0x84
  404f88:	1a9b      	subs	r3, r3, r2
  404f8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404f8c:	931b      	str	r3, [sp, #108]	; 0x6c
  404f8e:	2a01      	cmp	r2, #1
  404f90:	4413      	add	r3, r2
  404f92:	930e      	str	r3, [sp, #56]	; 0x38
  404f94:	f340 8113 	ble.w	4051be <_svfprintf_r+0x13a6>
  404f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404f9a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404f9c:	4413      	add	r3, r2
  404f9e:	930e      	str	r3, [sp, #56]	; 0x38
  404fa0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404fa4:	9308      	str	r3, [sp, #32]
  404fa6:	2300      	movs	r3, #0
  404fa8:	9312      	str	r3, [sp, #72]	; 0x48
  404faa:	e6cf      	b.n	404d4c <_svfprintf_r+0xf34>
  404fac:	aa25      	add	r2, sp, #148	; 0x94
  404fae:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fb0:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fb2:	f002 f913 	bl	4071dc <__ssprint_r>
  404fb6:	2800      	cmp	r0, #0
  404fb8:	f47f a800 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404fbc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404fbe:	46c8      	mov	r8, r9
  404fc0:	e4d6      	b.n	404970 <_svfprintf_r+0xb58>
  404fc2:	4623      	mov	r3, r4
  404fc4:	e6a2      	b.n	404d0c <_svfprintf_r+0xef4>
  404fc6:	aa25      	add	r2, sp, #148	; 0x94
  404fc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fca:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fcc:	f002 f906 	bl	4071dc <__ssprint_r>
  404fd0:	2800      	cmp	r0, #0
  404fd2:	f47e aff3 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404fd6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404fd8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404fda:	46c8      	mov	r8, r9
  404fdc:	e5ae      	b.n	404b3c <_svfprintf_r+0xd24>
  404fde:	aa25      	add	r2, sp, #148	; 0x94
  404fe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fe2:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fe4:	f002 f8fa 	bl	4071dc <__ssprint_r>
  404fe8:	2800      	cmp	r0, #0
  404fea:	f47e afe7 	bne.w	403fbc <_svfprintf_r+0x1a4>
  404fee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404ff0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404ff2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404ff4:	1a9a      	subs	r2, r3, r2
  404ff6:	46c8      	mov	r8, r9
  404ff8:	e5b8      	b.n	404b6c <_svfprintf_r+0xd54>
  404ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ffc:	9612      	str	r6, [sp, #72]	; 0x48
  404ffe:	2b06      	cmp	r3, #6
  405000:	bf28      	it	cs
  405002:	2306      	movcs	r3, #6
  405004:	960a      	str	r6, [sp, #40]	; 0x28
  405006:	4637      	mov	r7, r6
  405008:	9308      	str	r3, [sp, #32]
  40500a:	950f      	str	r5, [sp, #60]	; 0x3c
  40500c:	f8cd b01c 	str.w	fp, [sp, #28]
  405010:	930e      	str	r3, [sp, #56]	; 0x38
  405012:	4e76      	ldr	r6, [pc, #472]	; (4051ec <_svfprintf_r+0x13d4>)
  405014:	f7ff b818 	b.w	404048 <_svfprintf_r+0x230>
  405018:	a823      	add	r0, sp, #140	; 0x8c
  40501a:	a920      	add	r1, sp, #128	; 0x80
  40501c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40501e:	9004      	str	r0, [sp, #16]
  405020:	9103      	str	r1, [sp, #12]
  405022:	a81f      	add	r0, sp, #124	; 0x7c
  405024:	2103      	movs	r1, #3
  405026:	9002      	str	r0, [sp, #8]
  405028:	9a08      	ldr	r2, [sp, #32]
  40502a:	9501      	str	r5, [sp, #4]
  40502c:	463b      	mov	r3, r7
  40502e:	9100      	str	r1, [sp, #0]
  405030:	980c      	ldr	r0, [sp, #48]	; 0x30
  405032:	f000 f9bd 	bl	4053b0 <_dtoa_r>
  405036:	4606      	mov	r6, r0
  405038:	1944      	adds	r4, r0, r5
  40503a:	e72b      	b.n	404e94 <_svfprintf_r+0x107c>
  40503c:	2306      	movs	r3, #6
  40503e:	930a      	str	r3, [sp, #40]	; 0x28
  405040:	e61d      	b.n	404c7e <_svfprintf_r+0xe66>
  405042:	272d      	movs	r7, #45	; 0x2d
  405044:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405048:	f7ff bace 	b.w	4045e8 <_svfprintf_r+0x7d0>
  40504c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40504e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405050:	4413      	add	r3, r2
  405052:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405054:	930e      	str	r3, [sp, #56]	; 0x38
  405056:	2a00      	cmp	r2, #0
  405058:	f340 80aa 	ble.w	4051b0 <_svfprintf_r+0x1398>
  40505c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405060:	9308      	str	r3, [sp, #32]
  405062:	2367      	movs	r3, #103	; 0x67
  405064:	9311      	str	r3, [sp, #68]	; 0x44
  405066:	e671      	b.n	404d4c <_svfprintf_r+0xf34>
  405068:	2b00      	cmp	r3, #0
  40506a:	f340 80b2 	ble.w	4051d2 <_svfprintf_r+0x13ba>
  40506e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405070:	2a00      	cmp	r2, #0
  405072:	f040 8093 	bne.w	40519c <_svfprintf_r+0x1384>
  405076:	f01b 0f01 	tst.w	fp, #1
  40507a:	f040 808f 	bne.w	40519c <_svfprintf_r+0x1384>
  40507e:	9308      	str	r3, [sp, #32]
  405080:	930e      	str	r3, [sp, #56]	; 0x38
  405082:	e663      	b.n	404d4c <_svfprintf_r+0xf34>
  405084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405086:	9308      	str	r3, [sp, #32]
  405088:	930e      	str	r3, [sp, #56]	; 0x38
  40508a:	900a      	str	r0, [sp, #40]	; 0x28
  40508c:	950f      	str	r5, [sp, #60]	; 0x3c
  40508e:	f8cd b01c 	str.w	fp, [sp, #28]
  405092:	9012      	str	r0, [sp, #72]	; 0x48
  405094:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405098:	f7fe bfd6 	b.w	404048 <_svfprintf_r+0x230>
  40509c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40509e:	2b47      	cmp	r3, #71	; 0x47
  4050a0:	f47f ae20 	bne.w	404ce4 <_svfprintf_r+0xecc>
  4050a4:	f01b 0f01 	tst.w	fp, #1
  4050a8:	f47f aeee 	bne.w	404e88 <_svfprintf_r+0x1070>
  4050ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4050ae:	1b9b      	subs	r3, r3, r6
  4050b0:	9313      	str	r3, [sp, #76]	; 0x4c
  4050b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4050b4:	2b47      	cmp	r3, #71	; 0x47
  4050b6:	f43f af18 	beq.w	404eea <_svfprintf_r+0x10d2>
  4050ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4050bc:	9312      	str	r3, [sp, #72]	; 0x48
  4050be:	e721      	b.n	404f04 <_svfprintf_r+0x10ec>
  4050c0:	424f      	negs	r7, r1
  4050c2:	3110      	adds	r1, #16
  4050c4:	4d4a      	ldr	r5, [pc, #296]	; (4051f0 <_svfprintf_r+0x13d8>)
  4050c6:	da2f      	bge.n	405128 <_svfprintf_r+0x1310>
  4050c8:	2410      	movs	r4, #16
  4050ca:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4050ce:	e004      	b.n	4050da <_svfprintf_r+0x12c2>
  4050d0:	f108 0808 	add.w	r8, r8, #8
  4050d4:	3f10      	subs	r7, #16
  4050d6:	2f10      	cmp	r7, #16
  4050d8:	dd26      	ble.n	405128 <_svfprintf_r+0x1310>
  4050da:	3301      	adds	r3, #1
  4050dc:	3210      	adds	r2, #16
  4050de:	2b07      	cmp	r3, #7
  4050e0:	9227      	str	r2, [sp, #156]	; 0x9c
  4050e2:	9326      	str	r3, [sp, #152]	; 0x98
  4050e4:	f8c8 5000 	str.w	r5, [r8]
  4050e8:	f8c8 4004 	str.w	r4, [r8, #4]
  4050ec:	ddf0      	ble.n	4050d0 <_svfprintf_r+0x12b8>
  4050ee:	aa25      	add	r2, sp, #148	; 0x94
  4050f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4050f2:	4658      	mov	r0, fp
  4050f4:	f002 f872 	bl	4071dc <__ssprint_r>
  4050f8:	2800      	cmp	r0, #0
  4050fa:	f47e af5f 	bne.w	403fbc <_svfprintf_r+0x1a4>
  4050fe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405100:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405102:	46c8      	mov	r8, r9
  405104:	e7e6      	b.n	4050d4 <_svfprintf_r+0x12bc>
  405106:	aa25      	add	r2, sp, #148	; 0x94
  405108:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40510a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40510c:	f002 f866 	bl	4071dc <__ssprint_r>
  405110:	2800      	cmp	r0, #0
  405112:	f47e af53 	bne.w	403fbc <_svfprintf_r+0x1a4>
  405116:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405118:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40511a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40511c:	46c8      	mov	r8, r9
  40511e:	e667      	b.n	404df0 <_svfprintf_r+0xfd8>
  405120:	2000      	movs	r0, #0
  405122:	900a      	str	r0, [sp, #40]	; 0x28
  405124:	f7fe bed2 	b.w	403ecc <_svfprintf_r+0xb4>
  405128:	3301      	adds	r3, #1
  40512a:	443a      	add	r2, r7
  40512c:	2b07      	cmp	r3, #7
  40512e:	e888 00a0 	stmia.w	r8, {r5, r7}
  405132:	9227      	str	r2, [sp, #156]	; 0x9c
  405134:	9326      	str	r3, [sp, #152]	; 0x98
  405136:	f108 0808 	add.w	r8, r8, #8
  40513a:	f77f ae5c 	ble.w	404df6 <_svfprintf_r+0xfde>
  40513e:	aa25      	add	r2, sp, #148	; 0x94
  405140:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405142:	980c      	ldr	r0, [sp, #48]	; 0x30
  405144:	f002 f84a 	bl	4071dc <__ssprint_r>
  405148:	2800      	cmp	r0, #0
  40514a:	f47e af37 	bne.w	403fbc <_svfprintf_r+0x1a4>
  40514e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405150:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405152:	46c8      	mov	r8, r9
  405154:	e64f      	b.n	404df6 <_svfprintf_r+0xfde>
  405156:	3330      	adds	r3, #48	; 0x30
  405158:	2230      	movs	r2, #48	; 0x30
  40515a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40515e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  405162:	ab22      	add	r3, sp, #136	; 0x88
  405164:	e70f      	b.n	404f86 <_svfprintf_r+0x116e>
  405166:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405168:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40516a:	4413      	add	r3, r2
  40516c:	930e      	str	r3, [sp, #56]	; 0x38
  40516e:	e775      	b.n	40505c <_svfprintf_r+0x1244>
  405170:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405172:	e5cb      	b.n	404d0c <_svfprintf_r+0xef4>
  405174:	4e1f      	ldr	r6, [pc, #124]	; (4051f4 <_svfprintf_r+0x13dc>)
  405176:	4b20      	ldr	r3, [pc, #128]	; (4051f8 <_svfprintf_r+0x13e0>)
  405178:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40517c:	f7ff ba36 	b.w	4045ec <_svfprintf_r+0x7d4>
  405180:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405182:	9808      	ldr	r0, [sp, #32]
  405184:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405186:	4639      	mov	r1, r7
  405188:	f003 f8ac 	bl	4082e4 <__aeabi_dcmpeq>
  40518c:	2800      	cmp	r0, #0
  40518e:	f47f ae85 	bne.w	404e9c <_svfprintf_r+0x1084>
  405192:	f1c5 0501 	rsb	r5, r5, #1
  405196:	951f      	str	r5, [sp, #124]	; 0x7c
  405198:	442c      	add	r4, r5
  40519a:	e5a4      	b.n	404ce6 <_svfprintf_r+0xece>
  40519c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40519e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4051a0:	4413      	add	r3, r2
  4051a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4051a4:	441a      	add	r2, r3
  4051a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4051aa:	920e      	str	r2, [sp, #56]	; 0x38
  4051ac:	9308      	str	r3, [sp, #32]
  4051ae:	e5cd      	b.n	404d4c <_svfprintf_r+0xf34>
  4051b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4051b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4051b4:	f1c3 0301 	rsb	r3, r3, #1
  4051b8:	441a      	add	r2, r3
  4051ba:	4613      	mov	r3, r2
  4051bc:	e7d6      	b.n	40516c <_svfprintf_r+0x1354>
  4051be:	f01b 0301 	ands.w	r3, fp, #1
  4051c2:	9312      	str	r3, [sp, #72]	; 0x48
  4051c4:	f47f aee8 	bne.w	404f98 <_svfprintf_r+0x1180>
  4051c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4051ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4051ce:	9308      	str	r3, [sp, #32]
  4051d0:	e5bc      	b.n	404d4c <_svfprintf_r+0xf34>
  4051d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4051d4:	b913      	cbnz	r3, 4051dc <_svfprintf_r+0x13c4>
  4051d6:	f01b 0f01 	tst.w	fp, #1
  4051da:	d002      	beq.n	4051e2 <_svfprintf_r+0x13ca>
  4051dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4051de:	3301      	adds	r3, #1
  4051e0:	e7df      	b.n	4051a2 <_svfprintf_r+0x138a>
  4051e2:	2301      	movs	r3, #1
  4051e4:	e74b      	b.n	40507e <_svfprintf_r+0x1266>
  4051e6:	bf00      	nop
  4051e8:	66666667 	.word	0x66666667
  4051ec:	00409164 	.word	0x00409164
  4051f0:	00409180 	.word	0x00409180
  4051f4:	00409138 	.word	0x00409138
  4051f8:	00409134 	.word	0x00409134
  4051fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4051fe:	f89a 3001 	ldrb.w	r3, [sl, #1]
  405202:	6828      	ldr	r0, [r5, #0]
  405204:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  405208:	900a      	str	r0, [sp, #40]	; 0x28
  40520a:	4628      	mov	r0, r5
  40520c:	3004      	adds	r0, #4
  40520e:	46a2      	mov	sl, r4
  405210:	900f      	str	r0, [sp, #60]	; 0x3c
  405212:	f7fe be59 	b.w	403ec8 <_svfprintf_r+0xb0>
  405216:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40521a:	f7ff b86f 	b.w	4042fc <_svfprintf_r+0x4e4>
  40521e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405222:	f7ff ba1c 	b.w	40465e <_svfprintf_r+0x846>
  405226:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40522a:	e6ac      	b.n	404f86 <_svfprintf_r+0x116e>
  40522c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405230:	f7ff b8f3 	b.w	40441a <_svfprintf_r+0x602>
  405234:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405236:	230c      	movs	r3, #12
  405238:	6013      	str	r3, [r2, #0]
  40523a:	f04f 33ff 	mov.w	r3, #4294967295
  40523e:	9309      	str	r3, [sp, #36]	; 0x24
  405240:	f7fe bec5 	b.w	403fce <_svfprintf_r+0x1b6>
  405244:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405248:	f7ff b9a2 	b.w	404590 <_svfprintf_r+0x778>
  40524c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405250:	f7ff b97e 	b.w	404550 <_svfprintf_r+0x738>
  405254:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405258:	f7ff b961 	b.w	40451e <_svfprintf_r+0x706>
  40525c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405260:	f7ff b91a 	b.w	404498 <_svfprintf_r+0x680>

00405264 <register_fini>:
  405264:	4b02      	ldr	r3, [pc, #8]	; (405270 <register_fini+0xc>)
  405266:	b113      	cbz	r3, 40526e <register_fini+0xa>
  405268:	4802      	ldr	r0, [pc, #8]	; (405274 <register_fini+0x10>)
  40526a:	f000 b805 	b.w	405278 <atexit>
  40526e:	4770      	bx	lr
  405270:	00000000 	.word	0x00000000
  405274:	00406205 	.word	0x00406205

00405278 <atexit>:
  405278:	2300      	movs	r3, #0
  40527a:	4601      	mov	r1, r0
  40527c:	461a      	mov	r2, r3
  40527e:	4618      	mov	r0, r3
  405280:	f002 b82a 	b.w	4072d8 <__register_exitproc>

00405284 <quorem>:
  405284:	6902      	ldr	r2, [r0, #16]
  405286:	690b      	ldr	r3, [r1, #16]
  405288:	4293      	cmp	r3, r2
  40528a:	f300 808d 	bgt.w	4053a8 <quorem+0x124>
  40528e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405292:	f103 38ff 	add.w	r8, r3, #4294967295
  405296:	f101 0714 	add.w	r7, r1, #20
  40529a:	f100 0b14 	add.w	fp, r0, #20
  40529e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4052a2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4052a6:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4052aa:	b083      	sub	sp, #12
  4052ac:	3201      	adds	r2, #1
  4052ae:	fbb3 f9f2 	udiv	r9, r3, r2
  4052b2:	eb0b 0304 	add.w	r3, fp, r4
  4052b6:	9400      	str	r4, [sp, #0]
  4052b8:	eb07 0a04 	add.w	sl, r7, r4
  4052bc:	9301      	str	r3, [sp, #4]
  4052be:	f1b9 0f00 	cmp.w	r9, #0
  4052c2:	d039      	beq.n	405338 <quorem+0xb4>
  4052c4:	2500      	movs	r5, #0
  4052c6:	462e      	mov	r6, r5
  4052c8:	46bc      	mov	ip, r7
  4052ca:	46de      	mov	lr, fp
  4052cc:	f85c 4b04 	ldr.w	r4, [ip], #4
  4052d0:	f8de 3000 	ldr.w	r3, [lr]
  4052d4:	b2a2      	uxth	r2, r4
  4052d6:	fb09 5502 	mla	r5, r9, r2, r5
  4052da:	0c22      	lsrs	r2, r4, #16
  4052dc:	0c2c      	lsrs	r4, r5, #16
  4052de:	fb09 4202 	mla	r2, r9, r2, r4
  4052e2:	b2ad      	uxth	r5, r5
  4052e4:	1b75      	subs	r5, r6, r5
  4052e6:	b296      	uxth	r6, r2
  4052e8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4052ec:	fa15 f383 	uxtah	r3, r5, r3
  4052f0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4052f4:	b29b      	uxth	r3, r3
  4052f6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4052fa:	45e2      	cmp	sl, ip
  4052fc:	ea4f 4512 	mov.w	r5, r2, lsr #16
  405300:	f84e 3b04 	str.w	r3, [lr], #4
  405304:	ea4f 4626 	mov.w	r6, r6, asr #16
  405308:	d2e0      	bcs.n	4052cc <quorem+0x48>
  40530a:	9b00      	ldr	r3, [sp, #0]
  40530c:	f85b 3003 	ldr.w	r3, [fp, r3]
  405310:	b993      	cbnz	r3, 405338 <quorem+0xb4>
  405312:	9c01      	ldr	r4, [sp, #4]
  405314:	1f23      	subs	r3, r4, #4
  405316:	459b      	cmp	fp, r3
  405318:	d20c      	bcs.n	405334 <quorem+0xb0>
  40531a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40531e:	b94b      	cbnz	r3, 405334 <quorem+0xb0>
  405320:	f1a4 0308 	sub.w	r3, r4, #8
  405324:	e002      	b.n	40532c <quorem+0xa8>
  405326:	681a      	ldr	r2, [r3, #0]
  405328:	3b04      	subs	r3, #4
  40532a:	b91a      	cbnz	r2, 405334 <quorem+0xb0>
  40532c:	459b      	cmp	fp, r3
  40532e:	f108 38ff 	add.w	r8, r8, #4294967295
  405332:	d3f8      	bcc.n	405326 <quorem+0xa2>
  405334:	f8c0 8010 	str.w	r8, [r0, #16]
  405338:	4604      	mov	r4, r0
  40533a:	f001 fd5d 	bl	406df8 <__mcmp>
  40533e:	2800      	cmp	r0, #0
  405340:	db2e      	blt.n	4053a0 <quorem+0x11c>
  405342:	f109 0901 	add.w	r9, r9, #1
  405346:	465d      	mov	r5, fp
  405348:	2300      	movs	r3, #0
  40534a:	f857 1b04 	ldr.w	r1, [r7], #4
  40534e:	6828      	ldr	r0, [r5, #0]
  405350:	b28a      	uxth	r2, r1
  405352:	1a9a      	subs	r2, r3, r2
  405354:	0c0b      	lsrs	r3, r1, #16
  405356:	fa12 f280 	uxtah	r2, r2, r0
  40535a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40535e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405362:	b292      	uxth	r2, r2
  405364:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405368:	45ba      	cmp	sl, r7
  40536a:	f845 2b04 	str.w	r2, [r5], #4
  40536e:	ea4f 4323 	mov.w	r3, r3, asr #16
  405372:	d2ea      	bcs.n	40534a <quorem+0xc6>
  405374:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405378:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40537c:	b982      	cbnz	r2, 4053a0 <quorem+0x11c>
  40537e:	1f1a      	subs	r2, r3, #4
  405380:	4593      	cmp	fp, r2
  405382:	d20b      	bcs.n	40539c <quorem+0x118>
  405384:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405388:	b942      	cbnz	r2, 40539c <quorem+0x118>
  40538a:	3b08      	subs	r3, #8
  40538c:	e002      	b.n	405394 <quorem+0x110>
  40538e:	681a      	ldr	r2, [r3, #0]
  405390:	3b04      	subs	r3, #4
  405392:	b91a      	cbnz	r2, 40539c <quorem+0x118>
  405394:	459b      	cmp	fp, r3
  405396:	f108 38ff 	add.w	r8, r8, #4294967295
  40539a:	d3f8      	bcc.n	40538e <quorem+0x10a>
  40539c:	f8c4 8010 	str.w	r8, [r4, #16]
  4053a0:	4648      	mov	r0, r9
  4053a2:	b003      	add	sp, #12
  4053a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4053a8:	2000      	movs	r0, #0
  4053aa:	4770      	bx	lr
  4053ac:	0000      	movs	r0, r0
	...

004053b0 <_dtoa_r>:
  4053b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4053b4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4053b6:	b09b      	sub	sp, #108	; 0x6c
  4053b8:	4604      	mov	r4, r0
  4053ba:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4053bc:	4692      	mov	sl, r2
  4053be:	469b      	mov	fp, r3
  4053c0:	b141      	cbz	r1, 4053d4 <_dtoa_r+0x24>
  4053c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4053c4:	604a      	str	r2, [r1, #4]
  4053c6:	2301      	movs	r3, #1
  4053c8:	4093      	lsls	r3, r2
  4053ca:	608b      	str	r3, [r1, #8]
  4053cc:	f001 fb3c 	bl	406a48 <_Bfree>
  4053d0:	2300      	movs	r3, #0
  4053d2:	6423      	str	r3, [r4, #64]	; 0x40
  4053d4:	f1bb 0f00 	cmp.w	fp, #0
  4053d8:	465d      	mov	r5, fp
  4053da:	db35      	blt.n	405448 <_dtoa_r+0x98>
  4053dc:	2300      	movs	r3, #0
  4053de:	6033      	str	r3, [r6, #0]
  4053e0:	4b9d      	ldr	r3, [pc, #628]	; (405658 <_dtoa_r+0x2a8>)
  4053e2:	43ab      	bics	r3, r5
  4053e4:	d015      	beq.n	405412 <_dtoa_r+0x62>
  4053e6:	4650      	mov	r0, sl
  4053e8:	4659      	mov	r1, fp
  4053ea:	2200      	movs	r2, #0
  4053ec:	2300      	movs	r3, #0
  4053ee:	f002 ff79 	bl	4082e4 <__aeabi_dcmpeq>
  4053f2:	4680      	mov	r8, r0
  4053f4:	2800      	cmp	r0, #0
  4053f6:	d02d      	beq.n	405454 <_dtoa_r+0xa4>
  4053f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4053fa:	2301      	movs	r3, #1
  4053fc:	6013      	str	r3, [r2, #0]
  4053fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405400:	2b00      	cmp	r3, #0
  405402:	f000 80bd 	beq.w	405580 <_dtoa_r+0x1d0>
  405406:	4895      	ldr	r0, [pc, #596]	; (40565c <_dtoa_r+0x2ac>)
  405408:	6018      	str	r0, [r3, #0]
  40540a:	3801      	subs	r0, #1
  40540c:	b01b      	add	sp, #108	; 0x6c
  40540e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405412:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405414:	f242 730f 	movw	r3, #9999	; 0x270f
  405418:	6013      	str	r3, [r2, #0]
  40541a:	f1ba 0f00 	cmp.w	sl, #0
  40541e:	d10d      	bne.n	40543c <_dtoa_r+0x8c>
  405420:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405424:	b955      	cbnz	r5, 40543c <_dtoa_r+0x8c>
  405426:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405428:	488d      	ldr	r0, [pc, #564]	; (405660 <_dtoa_r+0x2b0>)
  40542a:	2b00      	cmp	r3, #0
  40542c:	d0ee      	beq.n	40540c <_dtoa_r+0x5c>
  40542e:	f100 0308 	add.w	r3, r0, #8
  405432:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405434:	6013      	str	r3, [r2, #0]
  405436:	b01b      	add	sp, #108	; 0x6c
  405438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40543c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40543e:	4889      	ldr	r0, [pc, #548]	; (405664 <_dtoa_r+0x2b4>)
  405440:	2b00      	cmp	r3, #0
  405442:	d0e3      	beq.n	40540c <_dtoa_r+0x5c>
  405444:	1cc3      	adds	r3, r0, #3
  405446:	e7f4      	b.n	405432 <_dtoa_r+0x82>
  405448:	2301      	movs	r3, #1
  40544a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40544e:	6033      	str	r3, [r6, #0]
  405450:	46ab      	mov	fp, r5
  405452:	e7c5      	b.n	4053e0 <_dtoa_r+0x30>
  405454:	aa18      	add	r2, sp, #96	; 0x60
  405456:	ab19      	add	r3, sp, #100	; 0x64
  405458:	9201      	str	r2, [sp, #4]
  40545a:	9300      	str	r3, [sp, #0]
  40545c:	4652      	mov	r2, sl
  40545e:	465b      	mov	r3, fp
  405460:	4620      	mov	r0, r4
  405462:	f001 fd69 	bl	406f38 <__d2b>
  405466:	0d2b      	lsrs	r3, r5, #20
  405468:	4681      	mov	r9, r0
  40546a:	d071      	beq.n	405550 <_dtoa_r+0x1a0>
  40546c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405470:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405474:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405476:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40547a:	4650      	mov	r0, sl
  40547c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405480:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405484:	2200      	movs	r2, #0
  405486:	4b78      	ldr	r3, [pc, #480]	; (405668 <_dtoa_r+0x2b8>)
  405488:	f002 fb10 	bl	407aac <__aeabi_dsub>
  40548c:	a36c      	add	r3, pc, #432	; (adr r3, 405640 <_dtoa_r+0x290>)
  40548e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405492:	f002 fcbf 	bl	407e14 <__aeabi_dmul>
  405496:	a36c      	add	r3, pc, #432	; (adr r3, 405648 <_dtoa_r+0x298>)
  405498:	e9d3 2300 	ldrd	r2, r3, [r3]
  40549c:	f002 fb08 	bl	407ab0 <__adddf3>
  4054a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4054a4:	4630      	mov	r0, r6
  4054a6:	f002 fc4f 	bl	407d48 <__aeabi_i2d>
  4054aa:	a369      	add	r3, pc, #420	; (adr r3, 405650 <_dtoa_r+0x2a0>)
  4054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4054b0:	f002 fcb0 	bl	407e14 <__aeabi_dmul>
  4054b4:	4602      	mov	r2, r0
  4054b6:	460b      	mov	r3, r1
  4054b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4054bc:	f002 faf8 	bl	407ab0 <__adddf3>
  4054c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4054c4:	f002 ff56 	bl	408374 <__aeabi_d2iz>
  4054c8:	2200      	movs	r2, #0
  4054ca:	9002      	str	r0, [sp, #8]
  4054cc:	2300      	movs	r3, #0
  4054ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4054d2:	f002 ff11 	bl	4082f8 <__aeabi_dcmplt>
  4054d6:	2800      	cmp	r0, #0
  4054d8:	f040 8173 	bne.w	4057c2 <_dtoa_r+0x412>
  4054dc:	9d02      	ldr	r5, [sp, #8]
  4054de:	2d16      	cmp	r5, #22
  4054e0:	f200 815d 	bhi.w	40579e <_dtoa_r+0x3ee>
  4054e4:	4b61      	ldr	r3, [pc, #388]	; (40566c <_dtoa_r+0x2bc>)
  4054e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4054ea:	e9d3 0100 	ldrd	r0, r1, [r3]
  4054ee:	4652      	mov	r2, sl
  4054f0:	465b      	mov	r3, fp
  4054f2:	f002 ff1f 	bl	408334 <__aeabi_dcmpgt>
  4054f6:	2800      	cmp	r0, #0
  4054f8:	f000 81c5 	beq.w	405886 <_dtoa_r+0x4d6>
  4054fc:	1e6b      	subs	r3, r5, #1
  4054fe:	9302      	str	r3, [sp, #8]
  405500:	2300      	movs	r3, #0
  405502:	930e      	str	r3, [sp, #56]	; 0x38
  405504:	1bbf      	subs	r7, r7, r6
  405506:	1e7b      	subs	r3, r7, #1
  405508:	9306      	str	r3, [sp, #24]
  40550a:	f100 8154 	bmi.w	4057b6 <_dtoa_r+0x406>
  40550e:	2300      	movs	r3, #0
  405510:	9308      	str	r3, [sp, #32]
  405512:	9b02      	ldr	r3, [sp, #8]
  405514:	2b00      	cmp	r3, #0
  405516:	f2c0 8145 	blt.w	4057a4 <_dtoa_r+0x3f4>
  40551a:	9a06      	ldr	r2, [sp, #24]
  40551c:	930d      	str	r3, [sp, #52]	; 0x34
  40551e:	4611      	mov	r1, r2
  405520:	4419      	add	r1, r3
  405522:	2300      	movs	r3, #0
  405524:	9106      	str	r1, [sp, #24]
  405526:	930c      	str	r3, [sp, #48]	; 0x30
  405528:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40552a:	2b09      	cmp	r3, #9
  40552c:	d82a      	bhi.n	405584 <_dtoa_r+0x1d4>
  40552e:	2b05      	cmp	r3, #5
  405530:	f340 865b 	ble.w	4061ea <_dtoa_r+0xe3a>
  405534:	3b04      	subs	r3, #4
  405536:	9324      	str	r3, [sp, #144]	; 0x90
  405538:	2500      	movs	r5, #0
  40553a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40553c:	3b02      	subs	r3, #2
  40553e:	2b03      	cmp	r3, #3
  405540:	f200 8642 	bhi.w	4061c8 <_dtoa_r+0xe18>
  405544:	e8df f013 	tbh	[pc, r3, lsl #1]
  405548:	02c903d4 	.word	0x02c903d4
  40554c:	046103df 	.word	0x046103df
  405550:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405552:	9e19      	ldr	r6, [sp, #100]	; 0x64
  405554:	443e      	add	r6, r7
  405556:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40555a:	2b20      	cmp	r3, #32
  40555c:	f340 818e 	ble.w	40587c <_dtoa_r+0x4cc>
  405560:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405564:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405568:	409d      	lsls	r5, r3
  40556a:	fa2a f000 	lsr.w	r0, sl, r0
  40556e:	4328      	orrs	r0, r5
  405570:	f002 fbda 	bl	407d28 <__aeabi_ui2d>
  405574:	2301      	movs	r3, #1
  405576:	3e01      	subs	r6, #1
  405578:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40557c:	9314      	str	r3, [sp, #80]	; 0x50
  40557e:	e781      	b.n	405484 <_dtoa_r+0xd4>
  405580:	483b      	ldr	r0, [pc, #236]	; (405670 <_dtoa_r+0x2c0>)
  405582:	e743      	b.n	40540c <_dtoa_r+0x5c>
  405584:	2100      	movs	r1, #0
  405586:	6461      	str	r1, [r4, #68]	; 0x44
  405588:	4620      	mov	r0, r4
  40558a:	9125      	str	r1, [sp, #148]	; 0x94
  40558c:	f001 fa36 	bl	4069fc <_Balloc>
  405590:	f04f 33ff 	mov.w	r3, #4294967295
  405594:	930a      	str	r3, [sp, #40]	; 0x28
  405596:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405598:	930f      	str	r3, [sp, #60]	; 0x3c
  40559a:	2301      	movs	r3, #1
  40559c:	9004      	str	r0, [sp, #16]
  40559e:	6420      	str	r0, [r4, #64]	; 0x40
  4055a0:	9224      	str	r2, [sp, #144]	; 0x90
  4055a2:	930b      	str	r3, [sp, #44]	; 0x2c
  4055a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4055a6:	2b00      	cmp	r3, #0
  4055a8:	f2c0 80d9 	blt.w	40575e <_dtoa_r+0x3ae>
  4055ac:	9a02      	ldr	r2, [sp, #8]
  4055ae:	2a0e      	cmp	r2, #14
  4055b0:	f300 80d5 	bgt.w	40575e <_dtoa_r+0x3ae>
  4055b4:	4b2d      	ldr	r3, [pc, #180]	; (40566c <_dtoa_r+0x2bc>)
  4055b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4055be:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4055c2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4055c4:	2b00      	cmp	r3, #0
  4055c6:	f2c0 83ba 	blt.w	405d3e <_dtoa_r+0x98e>
  4055ca:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4055ce:	4650      	mov	r0, sl
  4055d0:	462a      	mov	r2, r5
  4055d2:	4633      	mov	r3, r6
  4055d4:	4659      	mov	r1, fp
  4055d6:	f002 fd47 	bl	408068 <__aeabi_ddiv>
  4055da:	f002 fecb 	bl	408374 <__aeabi_d2iz>
  4055de:	4680      	mov	r8, r0
  4055e0:	f002 fbb2 	bl	407d48 <__aeabi_i2d>
  4055e4:	462a      	mov	r2, r5
  4055e6:	4633      	mov	r3, r6
  4055e8:	f002 fc14 	bl	407e14 <__aeabi_dmul>
  4055ec:	460b      	mov	r3, r1
  4055ee:	4602      	mov	r2, r0
  4055f0:	4659      	mov	r1, fp
  4055f2:	4650      	mov	r0, sl
  4055f4:	f002 fa5a 	bl	407aac <__aeabi_dsub>
  4055f8:	9d04      	ldr	r5, [sp, #16]
  4055fa:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4055fe:	702b      	strb	r3, [r5, #0]
  405600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405602:	2b01      	cmp	r3, #1
  405604:	4606      	mov	r6, r0
  405606:	460f      	mov	r7, r1
  405608:	f105 0501 	add.w	r5, r5, #1
  40560c:	d068      	beq.n	4056e0 <_dtoa_r+0x330>
  40560e:	2200      	movs	r2, #0
  405610:	4b18      	ldr	r3, [pc, #96]	; (405674 <_dtoa_r+0x2c4>)
  405612:	f002 fbff 	bl	407e14 <__aeabi_dmul>
  405616:	2200      	movs	r2, #0
  405618:	2300      	movs	r3, #0
  40561a:	4606      	mov	r6, r0
  40561c:	460f      	mov	r7, r1
  40561e:	f002 fe61 	bl	4082e4 <__aeabi_dcmpeq>
  405622:	2800      	cmp	r0, #0
  405624:	f040 8088 	bne.w	405738 <_dtoa_r+0x388>
  405628:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40562c:	f04f 0a00 	mov.w	sl, #0
  405630:	f8df b040 	ldr.w	fp, [pc, #64]	; 405674 <_dtoa_r+0x2c4>
  405634:	940c      	str	r4, [sp, #48]	; 0x30
  405636:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40563a:	e028      	b.n	40568e <_dtoa_r+0x2de>
  40563c:	f3af 8000 	nop.w
  405640:	636f4361 	.word	0x636f4361
  405644:	3fd287a7 	.word	0x3fd287a7
  405648:	8b60c8b3 	.word	0x8b60c8b3
  40564c:	3fc68a28 	.word	0x3fc68a28
  405650:	509f79fb 	.word	0x509f79fb
  405654:	3fd34413 	.word	0x3fd34413
  405658:	7ff00000 	.word	0x7ff00000
  40565c:	0040916d 	.word	0x0040916d
  405660:	00409190 	.word	0x00409190
  405664:	0040919c 	.word	0x0040919c
  405668:	3ff80000 	.word	0x3ff80000
  40566c:	004091c8 	.word	0x004091c8
  405670:	0040916c 	.word	0x0040916c
  405674:	40240000 	.word	0x40240000
  405678:	f002 fbcc 	bl	407e14 <__aeabi_dmul>
  40567c:	2200      	movs	r2, #0
  40567e:	2300      	movs	r3, #0
  405680:	4606      	mov	r6, r0
  405682:	460f      	mov	r7, r1
  405684:	f002 fe2e 	bl	4082e4 <__aeabi_dcmpeq>
  405688:	2800      	cmp	r0, #0
  40568a:	f040 83c1 	bne.w	405e10 <_dtoa_r+0xa60>
  40568e:	4642      	mov	r2, r8
  405690:	464b      	mov	r3, r9
  405692:	4630      	mov	r0, r6
  405694:	4639      	mov	r1, r7
  405696:	f002 fce7 	bl	408068 <__aeabi_ddiv>
  40569a:	f002 fe6b 	bl	408374 <__aeabi_d2iz>
  40569e:	4604      	mov	r4, r0
  4056a0:	f002 fb52 	bl	407d48 <__aeabi_i2d>
  4056a4:	4642      	mov	r2, r8
  4056a6:	464b      	mov	r3, r9
  4056a8:	f002 fbb4 	bl	407e14 <__aeabi_dmul>
  4056ac:	4602      	mov	r2, r0
  4056ae:	460b      	mov	r3, r1
  4056b0:	4630      	mov	r0, r6
  4056b2:	4639      	mov	r1, r7
  4056b4:	f002 f9fa 	bl	407aac <__aeabi_dsub>
  4056b8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4056bc:	9e04      	ldr	r6, [sp, #16]
  4056be:	f805 eb01 	strb.w	lr, [r5], #1
  4056c2:	eba5 0e06 	sub.w	lr, r5, r6
  4056c6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4056c8:	45b6      	cmp	lr, r6
  4056ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4056ce:	4652      	mov	r2, sl
  4056d0:	465b      	mov	r3, fp
  4056d2:	d1d1      	bne.n	405678 <_dtoa_r+0x2c8>
  4056d4:	46a0      	mov	r8, r4
  4056d6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4056da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4056dc:	4606      	mov	r6, r0
  4056de:	460f      	mov	r7, r1
  4056e0:	4632      	mov	r2, r6
  4056e2:	463b      	mov	r3, r7
  4056e4:	4630      	mov	r0, r6
  4056e6:	4639      	mov	r1, r7
  4056e8:	f002 f9e2 	bl	407ab0 <__adddf3>
  4056ec:	4606      	mov	r6, r0
  4056ee:	460f      	mov	r7, r1
  4056f0:	4602      	mov	r2, r0
  4056f2:	460b      	mov	r3, r1
  4056f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4056f8:	f002 fdfe 	bl	4082f8 <__aeabi_dcmplt>
  4056fc:	b948      	cbnz	r0, 405712 <_dtoa_r+0x362>
  4056fe:	4632      	mov	r2, r6
  405700:	463b      	mov	r3, r7
  405702:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405706:	f002 fded 	bl	4082e4 <__aeabi_dcmpeq>
  40570a:	b1a8      	cbz	r0, 405738 <_dtoa_r+0x388>
  40570c:	f018 0f01 	tst.w	r8, #1
  405710:	d012      	beq.n	405738 <_dtoa_r+0x388>
  405712:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405716:	9a04      	ldr	r2, [sp, #16]
  405718:	1e6b      	subs	r3, r5, #1
  40571a:	e004      	b.n	405726 <_dtoa_r+0x376>
  40571c:	429a      	cmp	r2, r3
  40571e:	f000 8401 	beq.w	405f24 <_dtoa_r+0xb74>
  405722:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  405726:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40572a:	f103 0501 	add.w	r5, r3, #1
  40572e:	d0f5      	beq.n	40571c <_dtoa_r+0x36c>
  405730:	f108 0801 	add.w	r8, r8, #1
  405734:	f883 8000 	strb.w	r8, [r3]
  405738:	4649      	mov	r1, r9
  40573a:	4620      	mov	r0, r4
  40573c:	f001 f984 	bl	406a48 <_Bfree>
  405740:	2200      	movs	r2, #0
  405742:	9b02      	ldr	r3, [sp, #8]
  405744:	702a      	strb	r2, [r5, #0]
  405746:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405748:	3301      	adds	r3, #1
  40574a:	6013      	str	r3, [r2, #0]
  40574c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40574e:	2b00      	cmp	r3, #0
  405750:	f000 839e 	beq.w	405e90 <_dtoa_r+0xae0>
  405754:	9804      	ldr	r0, [sp, #16]
  405756:	601d      	str	r5, [r3, #0]
  405758:	b01b      	add	sp, #108	; 0x6c
  40575a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40575e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405760:	2a00      	cmp	r2, #0
  405762:	d03e      	beq.n	4057e2 <_dtoa_r+0x432>
  405764:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405766:	2a01      	cmp	r2, #1
  405768:	f340 8311 	ble.w	405d8e <_dtoa_r+0x9de>
  40576c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40576e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405770:	1e5f      	subs	r7, r3, #1
  405772:	42ba      	cmp	r2, r7
  405774:	f2c0 838f 	blt.w	405e96 <_dtoa_r+0xae6>
  405778:	1bd7      	subs	r7, r2, r7
  40577a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40577c:	2b00      	cmp	r3, #0
  40577e:	f2c0 848b 	blt.w	406098 <_dtoa_r+0xce8>
  405782:	9d08      	ldr	r5, [sp, #32]
  405784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405786:	9a08      	ldr	r2, [sp, #32]
  405788:	441a      	add	r2, r3
  40578a:	9208      	str	r2, [sp, #32]
  40578c:	9a06      	ldr	r2, [sp, #24]
  40578e:	2101      	movs	r1, #1
  405790:	441a      	add	r2, r3
  405792:	4620      	mov	r0, r4
  405794:	9206      	str	r2, [sp, #24]
  405796:	f001 f9f1 	bl	406b7c <__i2b>
  40579a:	4606      	mov	r6, r0
  40579c:	e024      	b.n	4057e8 <_dtoa_r+0x438>
  40579e:	2301      	movs	r3, #1
  4057a0:	930e      	str	r3, [sp, #56]	; 0x38
  4057a2:	e6af      	b.n	405504 <_dtoa_r+0x154>
  4057a4:	9a08      	ldr	r2, [sp, #32]
  4057a6:	9b02      	ldr	r3, [sp, #8]
  4057a8:	1ad2      	subs	r2, r2, r3
  4057aa:	425b      	negs	r3, r3
  4057ac:	930c      	str	r3, [sp, #48]	; 0x30
  4057ae:	2300      	movs	r3, #0
  4057b0:	9208      	str	r2, [sp, #32]
  4057b2:	930d      	str	r3, [sp, #52]	; 0x34
  4057b4:	e6b8      	b.n	405528 <_dtoa_r+0x178>
  4057b6:	f1c7 0301 	rsb	r3, r7, #1
  4057ba:	9308      	str	r3, [sp, #32]
  4057bc:	2300      	movs	r3, #0
  4057be:	9306      	str	r3, [sp, #24]
  4057c0:	e6a7      	b.n	405512 <_dtoa_r+0x162>
  4057c2:	9d02      	ldr	r5, [sp, #8]
  4057c4:	4628      	mov	r0, r5
  4057c6:	f002 fabf 	bl	407d48 <__aeabi_i2d>
  4057ca:	4602      	mov	r2, r0
  4057cc:	460b      	mov	r3, r1
  4057ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4057d2:	f002 fd87 	bl	4082e4 <__aeabi_dcmpeq>
  4057d6:	2800      	cmp	r0, #0
  4057d8:	f47f ae80 	bne.w	4054dc <_dtoa_r+0x12c>
  4057dc:	1e6b      	subs	r3, r5, #1
  4057de:	9302      	str	r3, [sp, #8]
  4057e0:	e67c      	b.n	4054dc <_dtoa_r+0x12c>
  4057e2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4057e4:	9d08      	ldr	r5, [sp, #32]
  4057e6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4057e8:	2d00      	cmp	r5, #0
  4057ea:	dd0c      	ble.n	405806 <_dtoa_r+0x456>
  4057ec:	9906      	ldr	r1, [sp, #24]
  4057ee:	2900      	cmp	r1, #0
  4057f0:	460b      	mov	r3, r1
  4057f2:	dd08      	ble.n	405806 <_dtoa_r+0x456>
  4057f4:	42a9      	cmp	r1, r5
  4057f6:	9a08      	ldr	r2, [sp, #32]
  4057f8:	bfa8      	it	ge
  4057fa:	462b      	movge	r3, r5
  4057fc:	1ad2      	subs	r2, r2, r3
  4057fe:	1aed      	subs	r5, r5, r3
  405800:	1acb      	subs	r3, r1, r3
  405802:	9208      	str	r2, [sp, #32]
  405804:	9306      	str	r3, [sp, #24]
  405806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405808:	b1d3      	cbz	r3, 405840 <_dtoa_r+0x490>
  40580a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40580c:	2b00      	cmp	r3, #0
  40580e:	f000 82b7 	beq.w	405d80 <_dtoa_r+0x9d0>
  405812:	2f00      	cmp	r7, #0
  405814:	dd10      	ble.n	405838 <_dtoa_r+0x488>
  405816:	4631      	mov	r1, r6
  405818:	463a      	mov	r2, r7
  40581a:	4620      	mov	r0, r4
  40581c:	f001 fa4a 	bl	406cb4 <__pow5mult>
  405820:	464a      	mov	r2, r9
  405822:	4601      	mov	r1, r0
  405824:	4606      	mov	r6, r0
  405826:	4620      	mov	r0, r4
  405828:	f001 f9b2 	bl	406b90 <__multiply>
  40582c:	4649      	mov	r1, r9
  40582e:	4680      	mov	r8, r0
  405830:	4620      	mov	r0, r4
  405832:	f001 f909 	bl	406a48 <_Bfree>
  405836:	46c1      	mov	r9, r8
  405838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40583a:	1bda      	subs	r2, r3, r7
  40583c:	f040 82a1 	bne.w	405d82 <_dtoa_r+0x9d2>
  405840:	2101      	movs	r1, #1
  405842:	4620      	mov	r0, r4
  405844:	f001 f99a 	bl	406b7c <__i2b>
  405848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40584a:	2b00      	cmp	r3, #0
  40584c:	4680      	mov	r8, r0
  40584e:	dd1c      	ble.n	40588a <_dtoa_r+0x4da>
  405850:	4601      	mov	r1, r0
  405852:	461a      	mov	r2, r3
  405854:	4620      	mov	r0, r4
  405856:	f001 fa2d 	bl	406cb4 <__pow5mult>
  40585a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40585c:	2b01      	cmp	r3, #1
  40585e:	4680      	mov	r8, r0
  405860:	f340 8254 	ble.w	405d0c <_dtoa_r+0x95c>
  405864:	2300      	movs	r3, #0
  405866:	930c      	str	r3, [sp, #48]	; 0x30
  405868:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40586c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405870:	6918      	ldr	r0, [r3, #16]
  405872:	f001 f933 	bl	406adc <__hi0bits>
  405876:	f1c0 0020 	rsb	r0, r0, #32
  40587a:	e010      	b.n	40589e <_dtoa_r+0x4ee>
  40587c:	f1c3 0520 	rsb	r5, r3, #32
  405880:	fa0a f005 	lsl.w	r0, sl, r5
  405884:	e674      	b.n	405570 <_dtoa_r+0x1c0>
  405886:	900e      	str	r0, [sp, #56]	; 0x38
  405888:	e63c      	b.n	405504 <_dtoa_r+0x154>
  40588a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40588c:	2b01      	cmp	r3, #1
  40588e:	f340 8287 	ble.w	405da0 <_dtoa_r+0x9f0>
  405892:	2300      	movs	r3, #0
  405894:	930c      	str	r3, [sp, #48]	; 0x30
  405896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405898:	2001      	movs	r0, #1
  40589a:	2b00      	cmp	r3, #0
  40589c:	d1e4      	bne.n	405868 <_dtoa_r+0x4b8>
  40589e:	9a06      	ldr	r2, [sp, #24]
  4058a0:	4410      	add	r0, r2
  4058a2:	f010 001f 	ands.w	r0, r0, #31
  4058a6:	f000 80a1 	beq.w	4059ec <_dtoa_r+0x63c>
  4058aa:	f1c0 0320 	rsb	r3, r0, #32
  4058ae:	2b04      	cmp	r3, #4
  4058b0:	f340 849e 	ble.w	4061f0 <_dtoa_r+0xe40>
  4058b4:	9b08      	ldr	r3, [sp, #32]
  4058b6:	f1c0 001c 	rsb	r0, r0, #28
  4058ba:	4403      	add	r3, r0
  4058bc:	9308      	str	r3, [sp, #32]
  4058be:	4613      	mov	r3, r2
  4058c0:	4403      	add	r3, r0
  4058c2:	4405      	add	r5, r0
  4058c4:	9306      	str	r3, [sp, #24]
  4058c6:	9b08      	ldr	r3, [sp, #32]
  4058c8:	2b00      	cmp	r3, #0
  4058ca:	dd05      	ble.n	4058d8 <_dtoa_r+0x528>
  4058cc:	4649      	mov	r1, r9
  4058ce:	461a      	mov	r2, r3
  4058d0:	4620      	mov	r0, r4
  4058d2:	f001 fa3f 	bl	406d54 <__lshift>
  4058d6:	4681      	mov	r9, r0
  4058d8:	9b06      	ldr	r3, [sp, #24]
  4058da:	2b00      	cmp	r3, #0
  4058dc:	dd05      	ble.n	4058ea <_dtoa_r+0x53a>
  4058de:	4641      	mov	r1, r8
  4058e0:	461a      	mov	r2, r3
  4058e2:	4620      	mov	r0, r4
  4058e4:	f001 fa36 	bl	406d54 <__lshift>
  4058e8:	4680      	mov	r8, r0
  4058ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4058ec:	2b00      	cmp	r3, #0
  4058ee:	f040 8086 	bne.w	4059fe <_dtoa_r+0x64e>
  4058f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4058f4:	2b00      	cmp	r3, #0
  4058f6:	f340 8266 	ble.w	405dc6 <_dtoa_r+0xa16>
  4058fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4058fc:	2b00      	cmp	r3, #0
  4058fe:	f000 8098 	beq.w	405a32 <_dtoa_r+0x682>
  405902:	2d00      	cmp	r5, #0
  405904:	dd05      	ble.n	405912 <_dtoa_r+0x562>
  405906:	4631      	mov	r1, r6
  405908:	462a      	mov	r2, r5
  40590a:	4620      	mov	r0, r4
  40590c:	f001 fa22 	bl	406d54 <__lshift>
  405910:	4606      	mov	r6, r0
  405912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405914:	2b00      	cmp	r3, #0
  405916:	f040 8337 	bne.w	405f88 <_dtoa_r+0xbd8>
  40591a:	9606      	str	r6, [sp, #24]
  40591c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40591e:	9a04      	ldr	r2, [sp, #16]
  405920:	f8dd b018 	ldr.w	fp, [sp, #24]
  405924:	3b01      	subs	r3, #1
  405926:	18d3      	adds	r3, r2, r3
  405928:	930b      	str	r3, [sp, #44]	; 0x2c
  40592a:	f00a 0301 	and.w	r3, sl, #1
  40592e:	930c      	str	r3, [sp, #48]	; 0x30
  405930:	4617      	mov	r7, r2
  405932:	46c2      	mov	sl, r8
  405934:	4651      	mov	r1, sl
  405936:	4648      	mov	r0, r9
  405938:	f7ff fca4 	bl	405284 <quorem>
  40593c:	4631      	mov	r1, r6
  40593e:	4605      	mov	r5, r0
  405940:	4648      	mov	r0, r9
  405942:	f001 fa59 	bl	406df8 <__mcmp>
  405946:	465a      	mov	r2, fp
  405948:	900a      	str	r0, [sp, #40]	; 0x28
  40594a:	4651      	mov	r1, sl
  40594c:	4620      	mov	r0, r4
  40594e:	f001 fa6f 	bl	406e30 <__mdiff>
  405952:	68c2      	ldr	r2, [r0, #12]
  405954:	4680      	mov	r8, r0
  405956:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40595a:	2a00      	cmp	r2, #0
  40595c:	f040 822b 	bne.w	405db6 <_dtoa_r+0xa06>
  405960:	4601      	mov	r1, r0
  405962:	4648      	mov	r0, r9
  405964:	9308      	str	r3, [sp, #32]
  405966:	f001 fa47 	bl	406df8 <__mcmp>
  40596a:	4641      	mov	r1, r8
  40596c:	9006      	str	r0, [sp, #24]
  40596e:	4620      	mov	r0, r4
  405970:	f001 f86a 	bl	406a48 <_Bfree>
  405974:	9a06      	ldr	r2, [sp, #24]
  405976:	9b08      	ldr	r3, [sp, #32]
  405978:	b932      	cbnz	r2, 405988 <_dtoa_r+0x5d8>
  40597a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40597c:	b921      	cbnz	r1, 405988 <_dtoa_r+0x5d8>
  40597e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405980:	2a00      	cmp	r2, #0
  405982:	f000 83ef 	beq.w	406164 <_dtoa_r+0xdb4>
  405986:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405988:	990a      	ldr	r1, [sp, #40]	; 0x28
  40598a:	2900      	cmp	r1, #0
  40598c:	f2c0 829f 	blt.w	405ece <_dtoa_r+0xb1e>
  405990:	d105      	bne.n	40599e <_dtoa_r+0x5ee>
  405992:	9924      	ldr	r1, [sp, #144]	; 0x90
  405994:	b919      	cbnz	r1, 40599e <_dtoa_r+0x5ee>
  405996:	990c      	ldr	r1, [sp, #48]	; 0x30
  405998:	2900      	cmp	r1, #0
  40599a:	f000 8298 	beq.w	405ece <_dtoa_r+0xb1e>
  40599e:	2a00      	cmp	r2, #0
  4059a0:	f300 8306 	bgt.w	405fb0 <_dtoa_r+0xc00>
  4059a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4059a6:	703b      	strb	r3, [r7, #0]
  4059a8:	f107 0801 	add.w	r8, r7, #1
  4059ac:	4297      	cmp	r7, r2
  4059ae:	4645      	mov	r5, r8
  4059b0:	f000 830c 	beq.w	405fcc <_dtoa_r+0xc1c>
  4059b4:	4649      	mov	r1, r9
  4059b6:	2300      	movs	r3, #0
  4059b8:	220a      	movs	r2, #10
  4059ba:	4620      	mov	r0, r4
  4059bc:	f001 f84e 	bl	406a5c <__multadd>
  4059c0:	455e      	cmp	r6, fp
  4059c2:	4681      	mov	r9, r0
  4059c4:	4631      	mov	r1, r6
  4059c6:	f04f 0300 	mov.w	r3, #0
  4059ca:	f04f 020a 	mov.w	r2, #10
  4059ce:	4620      	mov	r0, r4
  4059d0:	f000 81eb 	beq.w	405daa <_dtoa_r+0x9fa>
  4059d4:	f001 f842 	bl	406a5c <__multadd>
  4059d8:	4659      	mov	r1, fp
  4059da:	4606      	mov	r6, r0
  4059dc:	2300      	movs	r3, #0
  4059de:	220a      	movs	r2, #10
  4059e0:	4620      	mov	r0, r4
  4059e2:	f001 f83b 	bl	406a5c <__multadd>
  4059e6:	4647      	mov	r7, r8
  4059e8:	4683      	mov	fp, r0
  4059ea:	e7a3      	b.n	405934 <_dtoa_r+0x584>
  4059ec:	201c      	movs	r0, #28
  4059ee:	9b08      	ldr	r3, [sp, #32]
  4059f0:	4403      	add	r3, r0
  4059f2:	9308      	str	r3, [sp, #32]
  4059f4:	9b06      	ldr	r3, [sp, #24]
  4059f6:	4403      	add	r3, r0
  4059f8:	4405      	add	r5, r0
  4059fa:	9306      	str	r3, [sp, #24]
  4059fc:	e763      	b.n	4058c6 <_dtoa_r+0x516>
  4059fe:	4641      	mov	r1, r8
  405a00:	4648      	mov	r0, r9
  405a02:	f001 f9f9 	bl	406df8 <__mcmp>
  405a06:	2800      	cmp	r0, #0
  405a08:	f6bf af73 	bge.w	4058f2 <_dtoa_r+0x542>
  405a0c:	9f02      	ldr	r7, [sp, #8]
  405a0e:	4649      	mov	r1, r9
  405a10:	2300      	movs	r3, #0
  405a12:	220a      	movs	r2, #10
  405a14:	4620      	mov	r0, r4
  405a16:	3f01      	subs	r7, #1
  405a18:	9702      	str	r7, [sp, #8]
  405a1a:	f001 f81f 	bl	406a5c <__multadd>
  405a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405a20:	4681      	mov	r9, r0
  405a22:	2b00      	cmp	r3, #0
  405a24:	f040 83b6 	bne.w	406194 <_dtoa_r+0xde4>
  405a28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405a2a:	2b00      	cmp	r3, #0
  405a2c:	f340 83bf 	ble.w	4061ae <_dtoa_r+0xdfe>
  405a30:	930a      	str	r3, [sp, #40]	; 0x28
  405a32:	f8dd b010 	ldr.w	fp, [sp, #16]
  405a36:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405a38:	465d      	mov	r5, fp
  405a3a:	e002      	b.n	405a42 <_dtoa_r+0x692>
  405a3c:	f001 f80e 	bl	406a5c <__multadd>
  405a40:	4681      	mov	r9, r0
  405a42:	4641      	mov	r1, r8
  405a44:	4648      	mov	r0, r9
  405a46:	f7ff fc1d 	bl	405284 <quorem>
  405a4a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  405a4e:	f805 ab01 	strb.w	sl, [r5], #1
  405a52:	eba5 030b 	sub.w	r3, r5, fp
  405a56:	42bb      	cmp	r3, r7
  405a58:	f04f 020a 	mov.w	r2, #10
  405a5c:	f04f 0300 	mov.w	r3, #0
  405a60:	4649      	mov	r1, r9
  405a62:	4620      	mov	r0, r4
  405a64:	dbea      	blt.n	405a3c <_dtoa_r+0x68c>
  405a66:	9b04      	ldr	r3, [sp, #16]
  405a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405a6a:	2a01      	cmp	r2, #1
  405a6c:	bfac      	ite	ge
  405a6e:	189b      	addge	r3, r3, r2
  405a70:	3301      	addlt	r3, #1
  405a72:	461d      	mov	r5, r3
  405a74:	f04f 0b00 	mov.w	fp, #0
  405a78:	4649      	mov	r1, r9
  405a7a:	2201      	movs	r2, #1
  405a7c:	4620      	mov	r0, r4
  405a7e:	f001 f969 	bl	406d54 <__lshift>
  405a82:	4641      	mov	r1, r8
  405a84:	4681      	mov	r9, r0
  405a86:	f001 f9b7 	bl	406df8 <__mcmp>
  405a8a:	2800      	cmp	r0, #0
  405a8c:	f340 823d 	ble.w	405f0a <_dtoa_r+0xb5a>
  405a90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405a94:	9904      	ldr	r1, [sp, #16]
  405a96:	1e6b      	subs	r3, r5, #1
  405a98:	e004      	b.n	405aa4 <_dtoa_r+0x6f4>
  405a9a:	428b      	cmp	r3, r1
  405a9c:	f000 81ae 	beq.w	405dfc <_dtoa_r+0xa4c>
  405aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405aa4:	2a39      	cmp	r2, #57	; 0x39
  405aa6:	f103 0501 	add.w	r5, r3, #1
  405aaa:	d0f6      	beq.n	405a9a <_dtoa_r+0x6ea>
  405aac:	3201      	adds	r2, #1
  405aae:	701a      	strb	r2, [r3, #0]
  405ab0:	4641      	mov	r1, r8
  405ab2:	4620      	mov	r0, r4
  405ab4:	f000 ffc8 	bl	406a48 <_Bfree>
  405ab8:	2e00      	cmp	r6, #0
  405aba:	f43f ae3d 	beq.w	405738 <_dtoa_r+0x388>
  405abe:	f1bb 0f00 	cmp.w	fp, #0
  405ac2:	d005      	beq.n	405ad0 <_dtoa_r+0x720>
  405ac4:	45b3      	cmp	fp, r6
  405ac6:	d003      	beq.n	405ad0 <_dtoa_r+0x720>
  405ac8:	4659      	mov	r1, fp
  405aca:	4620      	mov	r0, r4
  405acc:	f000 ffbc 	bl	406a48 <_Bfree>
  405ad0:	4631      	mov	r1, r6
  405ad2:	4620      	mov	r0, r4
  405ad4:	f000 ffb8 	bl	406a48 <_Bfree>
  405ad8:	e62e      	b.n	405738 <_dtoa_r+0x388>
  405ada:	2300      	movs	r3, #0
  405adc:	930b      	str	r3, [sp, #44]	; 0x2c
  405ade:	9b02      	ldr	r3, [sp, #8]
  405ae0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405ae2:	4413      	add	r3, r2
  405ae4:	930f      	str	r3, [sp, #60]	; 0x3c
  405ae6:	3301      	adds	r3, #1
  405ae8:	2b01      	cmp	r3, #1
  405aea:	461f      	mov	r7, r3
  405aec:	461e      	mov	r6, r3
  405aee:	930a      	str	r3, [sp, #40]	; 0x28
  405af0:	bfb8      	it	lt
  405af2:	2701      	movlt	r7, #1
  405af4:	2100      	movs	r1, #0
  405af6:	2f17      	cmp	r7, #23
  405af8:	6461      	str	r1, [r4, #68]	; 0x44
  405afa:	d90a      	bls.n	405b12 <_dtoa_r+0x762>
  405afc:	2201      	movs	r2, #1
  405afe:	2304      	movs	r3, #4
  405b00:	005b      	lsls	r3, r3, #1
  405b02:	f103 0014 	add.w	r0, r3, #20
  405b06:	4287      	cmp	r7, r0
  405b08:	4611      	mov	r1, r2
  405b0a:	f102 0201 	add.w	r2, r2, #1
  405b0e:	d2f7      	bcs.n	405b00 <_dtoa_r+0x750>
  405b10:	6461      	str	r1, [r4, #68]	; 0x44
  405b12:	4620      	mov	r0, r4
  405b14:	f000 ff72 	bl	4069fc <_Balloc>
  405b18:	2e0e      	cmp	r6, #14
  405b1a:	9004      	str	r0, [sp, #16]
  405b1c:	6420      	str	r0, [r4, #64]	; 0x40
  405b1e:	f63f ad41 	bhi.w	4055a4 <_dtoa_r+0x1f4>
  405b22:	2d00      	cmp	r5, #0
  405b24:	f43f ad3e 	beq.w	4055a4 <_dtoa_r+0x1f4>
  405b28:	9902      	ldr	r1, [sp, #8]
  405b2a:	2900      	cmp	r1, #0
  405b2c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405b30:	f340 8202 	ble.w	405f38 <_dtoa_r+0xb88>
  405b34:	4bb8      	ldr	r3, [pc, #736]	; (405e18 <_dtoa_r+0xa68>)
  405b36:	f001 020f 	and.w	r2, r1, #15
  405b3a:	110d      	asrs	r5, r1, #4
  405b3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405b40:	06e9      	lsls	r1, r5, #27
  405b42:	e9d3 6700 	ldrd	r6, r7, [r3]
  405b46:	f140 81ae 	bpl.w	405ea6 <_dtoa_r+0xaf6>
  405b4a:	4bb4      	ldr	r3, [pc, #720]	; (405e1c <_dtoa_r+0xa6c>)
  405b4c:	4650      	mov	r0, sl
  405b4e:	4659      	mov	r1, fp
  405b50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405b54:	f002 fa88 	bl	408068 <__aeabi_ddiv>
  405b58:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  405b5c:	f005 050f 	and.w	r5, r5, #15
  405b60:	f04f 0a03 	mov.w	sl, #3
  405b64:	b18d      	cbz	r5, 405b8a <_dtoa_r+0x7da>
  405b66:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 405e1c <_dtoa_r+0xa6c>
  405b6a:	07ea      	lsls	r2, r5, #31
  405b6c:	d509      	bpl.n	405b82 <_dtoa_r+0x7d2>
  405b6e:	4630      	mov	r0, r6
  405b70:	4639      	mov	r1, r7
  405b72:	e9d8 2300 	ldrd	r2, r3, [r8]
  405b76:	f002 f94d 	bl	407e14 <__aeabi_dmul>
  405b7a:	f10a 0a01 	add.w	sl, sl, #1
  405b7e:	4606      	mov	r6, r0
  405b80:	460f      	mov	r7, r1
  405b82:	106d      	asrs	r5, r5, #1
  405b84:	f108 0808 	add.w	r8, r8, #8
  405b88:	d1ef      	bne.n	405b6a <_dtoa_r+0x7ba>
  405b8a:	463b      	mov	r3, r7
  405b8c:	4632      	mov	r2, r6
  405b8e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  405b92:	f002 fa69 	bl	408068 <__aeabi_ddiv>
  405b96:	4607      	mov	r7, r0
  405b98:	4688      	mov	r8, r1
  405b9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405b9c:	b143      	cbz	r3, 405bb0 <_dtoa_r+0x800>
  405b9e:	2200      	movs	r2, #0
  405ba0:	4b9f      	ldr	r3, [pc, #636]	; (405e20 <_dtoa_r+0xa70>)
  405ba2:	4638      	mov	r0, r7
  405ba4:	4641      	mov	r1, r8
  405ba6:	f002 fba7 	bl	4082f8 <__aeabi_dcmplt>
  405baa:	2800      	cmp	r0, #0
  405bac:	f040 8286 	bne.w	4060bc <_dtoa_r+0xd0c>
  405bb0:	4650      	mov	r0, sl
  405bb2:	f002 f8c9 	bl	407d48 <__aeabi_i2d>
  405bb6:	463a      	mov	r2, r7
  405bb8:	4643      	mov	r3, r8
  405bba:	f002 f92b 	bl	407e14 <__aeabi_dmul>
  405bbe:	4b99      	ldr	r3, [pc, #612]	; (405e24 <_dtoa_r+0xa74>)
  405bc0:	2200      	movs	r2, #0
  405bc2:	f001 ff75 	bl	407ab0 <__adddf3>
  405bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405bc8:	4605      	mov	r5, r0
  405bca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405bce:	2b00      	cmp	r3, #0
  405bd0:	f000 813e 	beq.w	405e50 <_dtoa_r+0xaa0>
  405bd4:	9b02      	ldr	r3, [sp, #8]
  405bd6:	9315      	str	r3, [sp, #84]	; 0x54
  405bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405bda:	9312      	str	r3, [sp, #72]	; 0x48
  405bdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405bde:	2b00      	cmp	r3, #0
  405be0:	f000 81fa 	beq.w	405fd8 <_dtoa_r+0xc28>
  405be4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405be6:	4b8c      	ldr	r3, [pc, #560]	; (405e18 <_dtoa_r+0xa68>)
  405be8:	498f      	ldr	r1, [pc, #572]	; (405e28 <_dtoa_r+0xa78>)
  405bea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405bee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405bf2:	2000      	movs	r0, #0
  405bf4:	f002 fa38 	bl	408068 <__aeabi_ddiv>
  405bf8:	462a      	mov	r2, r5
  405bfa:	4633      	mov	r3, r6
  405bfc:	f001 ff56 	bl	407aac <__aeabi_dsub>
  405c00:	4682      	mov	sl, r0
  405c02:	468b      	mov	fp, r1
  405c04:	4638      	mov	r0, r7
  405c06:	4641      	mov	r1, r8
  405c08:	f002 fbb4 	bl	408374 <__aeabi_d2iz>
  405c0c:	4605      	mov	r5, r0
  405c0e:	f002 f89b 	bl	407d48 <__aeabi_i2d>
  405c12:	4602      	mov	r2, r0
  405c14:	460b      	mov	r3, r1
  405c16:	4638      	mov	r0, r7
  405c18:	4641      	mov	r1, r8
  405c1a:	f001 ff47 	bl	407aac <__aeabi_dsub>
  405c1e:	3530      	adds	r5, #48	; 0x30
  405c20:	fa5f f885 	uxtb.w	r8, r5
  405c24:	9d04      	ldr	r5, [sp, #16]
  405c26:	4606      	mov	r6, r0
  405c28:	460f      	mov	r7, r1
  405c2a:	f885 8000 	strb.w	r8, [r5]
  405c2e:	4602      	mov	r2, r0
  405c30:	460b      	mov	r3, r1
  405c32:	4650      	mov	r0, sl
  405c34:	4659      	mov	r1, fp
  405c36:	3501      	adds	r5, #1
  405c38:	f002 fb7c 	bl	408334 <__aeabi_dcmpgt>
  405c3c:	2800      	cmp	r0, #0
  405c3e:	d154      	bne.n	405cea <_dtoa_r+0x93a>
  405c40:	4632      	mov	r2, r6
  405c42:	463b      	mov	r3, r7
  405c44:	2000      	movs	r0, #0
  405c46:	4976      	ldr	r1, [pc, #472]	; (405e20 <_dtoa_r+0xa70>)
  405c48:	f001 ff30 	bl	407aac <__aeabi_dsub>
  405c4c:	4602      	mov	r2, r0
  405c4e:	460b      	mov	r3, r1
  405c50:	4650      	mov	r0, sl
  405c52:	4659      	mov	r1, fp
  405c54:	f002 fb6e 	bl	408334 <__aeabi_dcmpgt>
  405c58:	2800      	cmp	r0, #0
  405c5a:	f040 8270 	bne.w	40613e <_dtoa_r+0xd8e>
  405c5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405c60:	2a01      	cmp	r2, #1
  405c62:	f000 8111 	beq.w	405e88 <_dtoa_r+0xad8>
  405c66:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405c68:	9a04      	ldr	r2, [sp, #16]
  405c6a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405c6e:	4413      	add	r3, r2
  405c70:	4699      	mov	r9, r3
  405c72:	e00d      	b.n	405c90 <_dtoa_r+0x8e0>
  405c74:	2000      	movs	r0, #0
  405c76:	496a      	ldr	r1, [pc, #424]	; (405e20 <_dtoa_r+0xa70>)
  405c78:	f001 ff18 	bl	407aac <__aeabi_dsub>
  405c7c:	4652      	mov	r2, sl
  405c7e:	465b      	mov	r3, fp
  405c80:	f002 fb3a 	bl	4082f8 <__aeabi_dcmplt>
  405c84:	2800      	cmp	r0, #0
  405c86:	f040 8258 	bne.w	40613a <_dtoa_r+0xd8a>
  405c8a:	454d      	cmp	r5, r9
  405c8c:	f000 80fa 	beq.w	405e84 <_dtoa_r+0xad4>
  405c90:	4650      	mov	r0, sl
  405c92:	4659      	mov	r1, fp
  405c94:	2200      	movs	r2, #0
  405c96:	4b65      	ldr	r3, [pc, #404]	; (405e2c <_dtoa_r+0xa7c>)
  405c98:	f002 f8bc 	bl	407e14 <__aeabi_dmul>
  405c9c:	2200      	movs	r2, #0
  405c9e:	4b63      	ldr	r3, [pc, #396]	; (405e2c <_dtoa_r+0xa7c>)
  405ca0:	4682      	mov	sl, r0
  405ca2:	468b      	mov	fp, r1
  405ca4:	4630      	mov	r0, r6
  405ca6:	4639      	mov	r1, r7
  405ca8:	f002 f8b4 	bl	407e14 <__aeabi_dmul>
  405cac:	460f      	mov	r7, r1
  405cae:	4606      	mov	r6, r0
  405cb0:	f002 fb60 	bl	408374 <__aeabi_d2iz>
  405cb4:	4680      	mov	r8, r0
  405cb6:	f002 f847 	bl	407d48 <__aeabi_i2d>
  405cba:	4602      	mov	r2, r0
  405cbc:	460b      	mov	r3, r1
  405cbe:	4630      	mov	r0, r6
  405cc0:	4639      	mov	r1, r7
  405cc2:	f001 fef3 	bl	407aac <__aeabi_dsub>
  405cc6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405cca:	fa5f f888 	uxtb.w	r8, r8
  405cce:	4652      	mov	r2, sl
  405cd0:	465b      	mov	r3, fp
  405cd2:	f805 8b01 	strb.w	r8, [r5], #1
  405cd6:	4606      	mov	r6, r0
  405cd8:	460f      	mov	r7, r1
  405cda:	f002 fb0d 	bl	4082f8 <__aeabi_dcmplt>
  405cde:	4632      	mov	r2, r6
  405ce0:	463b      	mov	r3, r7
  405ce2:	2800      	cmp	r0, #0
  405ce4:	d0c6      	beq.n	405c74 <_dtoa_r+0x8c4>
  405ce6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405cea:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405cec:	9302      	str	r3, [sp, #8]
  405cee:	e523      	b.n	405738 <_dtoa_r+0x388>
  405cf0:	2300      	movs	r3, #0
  405cf2:	930b      	str	r3, [sp, #44]	; 0x2c
  405cf4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405cf6:	2b00      	cmp	r3, #0
  405cf8:	f340 80dc 	ble.w	405eb4 <_dtoa_r+0xb04>
  405cfc:	461f      	mov	r7, r3
  405cfe:	461e      	mov	r6, r3
  405d00:	930f      	str	r3, [sp, #60]	; 0x3c
  405d02:	930a      	str	r3, [sp, #40]	; 0x28
  405d04:	e6f6      	b.n	405af4 <_dtoa_r+0x744>
  405d06:	2301      	movs	r3, #1
  405d08:	930b      	str	r3, [sp, #44]	; 0x2c
  405d0a:	e7f3      	b.n	405cf4 <_dtoa_r+0x944>
  405d0c:	f1ba 0f00 	cmp.w	sl, #0
  405d10:	f47f ada8 	bne.w	405864 <_dtoa_r+0x4b4>
  405d14:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405d18:	2b00      	cmp	r3, #0
  405d1a:	f47f adba 	bne.w	405892 <_dtoa_r+0x4e2>
  405d1e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405d22:	0d3f      	lsrs	r7, r7, #20
  405d24:	053f      	lsls	r7, r7, #20
  405d26:	2f00      	cmp	r7, #0
  405d28:	f000 820d 	beq.w	406146 <_dtoa_r+0xd96>
  405d2c:	9b08      	ldr	r3, [sp, #32]
  405d2e:	3301      	adds	r3, #1
  405d30:	9308      	str	r3, [sp, #32]
  405d32:	9b06      	ldr	r3, [sp, #24]
  405d34:	3301      	adds	r3, #1
  405d36:	9306      	str	r3, [sp, #24]
  405d38:	2301      	movs	r3, #1
  405d3a:	930c      	str	r3, [sp, #48]	; 0x30
  405d3c:	e5ab      	b.n	405896 <_dtoa_r+0x4e6>
  405d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d40:	2b00      	cmp	r3, #0
  405d42:	f73f ac42 	bgt.w	4055ca <_dtoa_r+0x21a>
  405d46:	f040 8221 	bne.w	40618c <_dtoa_r+0xddc>
  405d4a:	2200      	movs	r2, #0
  405d4c:	4b38      	ldr	r3, [pc, #224]	; (405e30 <_dtoa_r+0xa80>)
  405d4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405d52:	f002 f85f 	bl	407e14 <__aeabi_dmul>
  405d56:	4652      	mov	r2, sl
  405d58:	465b      	mov	r3, fp
  405d5a:	f002 fae1 	bl	408320 <__aeabi_dcmpge>
  405d5e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  405d62:	4646      	mov	r6, r8
  405d64:	2800      	cmp	r0, #0
  405d66:	d041      	beq.n	405dec <_dtoa_r+0xa3c>
  405d68:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405d6a:	9d04      	ldr	r5, [sp, #16]
  405d6c:	43db      	mvns	r3, r3
  405d6e:	9302      	str	r3, [sp, #8]
  405d70:	4641      	mov	r1, r8
  405d72:	4620      	mov	r0, r4
  405d74:	f000 fe68 	bl	406a48 <_Bfree>
  405d78:	2e00      	cmp	r6, #0
  405d7a:	f43f acdd 	beq.w	405738 <_dtoa_r+0x388>
  405d7e:	e6a7      	b.n	405ad0 <_dtoa_r+0x720>
  405d80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405d82:	4649      	mov	r1, r9
  405d84:	4620      	mov	r0, r4
  405d86:	f000 ff95 	bl	406cb4 <__pow5mult>
  405d8a:	4681      	mov	r9, r0
  405d8c:	e558      	b.n	405840 <_dtoa_r+0x490>
  405d8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405d90:	2a00      	cmp	r2, #0
  405d92:	f000 8187 	beq.w	4060a4 <_dtoa_r+0xcf4>
  405d96:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405d9a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405d9c:	9d08      	ldr	r5, [sp, #32]
  405d9e:	e4f2      	b.n	405786 <_dtoa_r+0x3d6>
  405da0:	f1ba 0f00 	cmp.w	sl, #0
  405da4:	f47f ad75 	bne.w	405892 <_dtoa_r+0x4e2>
  405da8:	e7b4      	b.n	405d14 <_dtoa_r+0x964>
  405daa:	f000 fe57 	bl	406a5c <__multadd>
  405dae:	4647      	mov	r7, r8
  405db0:	4606      	mov	r6, r0
  405db2:	4683      	mov	fp, r0
  405db4:	e5be      	b.n	405934 <_dtoa_r+0x584>
  405db6:	4601      	mov	r1, r0
  405db8:	4620      	mov	r0, r4
  405dba:	9306      	str	r3, [sp, #24]
  405dbc:	f000 fe44 	bl	406a48 <_Bfree>
  405dc0:	2201      	movs	r2, #1
  405dc2:	9b06      	ldr	r3, [sp, #24]
  405dc4:	e5e0      	b.n	405988 <_dtoa_r+0x5d8>
  405dc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405dc8:	2b02      	cmp	r3, #2
  405dca:	f77f ad96 	ble.w	4058fa <_dtoa_r+0x54a>
  405dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405dd0:	2b00      	cmp	r3, #0
  405dd2:	d1c9      	bne.n	405d68 <_dtoa_r+0x9b8>
  405dd4:	4641      	mov	r1, r8
  405dd6:	2205      	movs	r2, #5
  405dd8:	4620      	mov	r0, r4
  405dda:	f000 fe3f 	bl	406a5c <__multadd>
  405dde:	4601      	mov	r1, r0
  405de0:	4680      	mov	r8, r0
  405de2:	4648      	mov	r0, r9
  405de4:	f001 f808 	bl	406df8 <__mcmp>
  405de8:	2800      	cmp	r0, #0
  405dea:	ddbd      	ble.n	405d68 <_dtoa_r+0x9b8>
  405dec:	9a02      	ldr	r2, [sp, #8]
  405dee:	9904      	ldr	r1, [sp, #16]
  405df0:	2331      	movs	r3, #49	; 0x31
  405df2:	3201      	adds	r2, #1
  405df4:	9202      	str	r2, [sp, #8]
  405df6:	700b      	strb	r3, [r1, #0]
  405df8:	1c4d      	adds	r5, r1, #1
  405dfa:	e7b9      	b.n	405d70 <_dtoa_r+0x9c0>
  405dfc:	9a02      	ldr	r2, [sp, #8]
  405dfe:	3201      	adds	r2, #1
  405e00:	9202      	str	r2, [sp, #8]
  405e02:	9a04      	ldr	r2, [sp, #16]
  405e04:	2331      	movs	r3, #49	; 0x31
  405e06:	7013      	strb	r3, [r2, #0]
  405e08:	e652      	b.n	405ab0 <_dtoa_r+0x700>
  405e0a:	2301      	movs	r3, #1
  405e0c:	930b      	str	r3, [sp, #44]	; 0x2c
  405e0e:	e666      	b.n	405ade <_dtoa_r+0x72e>
  405e10:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405e14:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405e16:	e48f      	b.n	405738 <_dtoa_r+0x388>
  405e18:	004091c8 	.word	0x004091c8
  405e1c:	004091a0 	.word	0x004091a0
  405e20:	3ff00000 	.word	0x3ff00000
  405e24:	401c0000 	.word	0x401c0000
  405e28:	3fe00000 	.word	0x3fe00000
  405e2c:	40240000 	.word	0x40240000
  405e30:	40140000 	.word	0x40140000
  405e34:	4650      	mov	r0, sl
  405e36:	f001 ff87 	bl	407d48 <__aeabi_i2d>
  405e3a:	463a      	mov	r2, r7
  405e3c:	4643      	mov	r3, r8
  405e3e:	f001 ffe9 	bl	407e14 <__aeabi_dmul>
  405e42:	2200      	movs	r2, #0
  405e44:	4bc1      	ldr	r3, [pc, #772]	; (40614c <_dtoa_r+0xd9c>)
  405e46:	f001 fe33 	bl	407ab0 <__adddf3>
  405e4a:	4605      	mov	r5, r0
  405e4c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405e50:	4641      	mov	r1, r8
  405e52:	2200      	movs	r2, #0
  405e54:	4bbe      	ldr	r3, [pc, #760]	; (406150 <_dtoa_r+0xda0>)
  405e56:	4638      	mov	r0, r7
  405e58:	f001 fe28 	bl	407aac <__aeabi_dsub>
  405e5c:	462a      	mov	r2, r5
  405e5e:	4633      	mov	r3, r6
  405e60:	4682      	mov	sl, r0
  405e62:	468b      	mov	fp, r1
  405e64:	f002 fa66 	bl	408334 <__aeabi_dcmpgt>
  405e68:	4680      	mov	r8, r0
  405e6a:	2800      	cmp	r0, #0
  405e6c:	f040 8110 	bne.w	406090 <_dtoa_r+0xce0>
  405e70:	462a      	mov	r2, r5
  405e72:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  405e76:	4650      	mov	r0, sl
  405e78:	4659      	mov	r1, fp
  405e7a:	f002 fa3d 	bl	4082f8 <__aeabi_dcmplt>
  405e7e:	b118      	cbz	r0, 405e88 <_dtoa_r+0xad8>
  405e80:	4646      	mov	r6, r8
  405e82:	e771      	b.n	405d68 <_dtoa_r+0x9b8>
  405e84:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405e88:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405e8c:	f7ff bb8a 	b.w	4055a4 <_dtoa_r+0x1f4>
  405e90:	9804      	ldr	r0, [sp, #16]
  405e92:	f7ff babb 	b.w	40540c <_dtoa_r+0x5c>
  405e96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405e98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405e9a:	970c      	str	r7, [sp, #48]	; 0x30
  405e9c:	1afb      	subs	r3, r7, r3
  405e9e:	441a      	add	r2, r3
  405ea0:	920d      	str	r2, [sp, #52]	; 0x34
  405ea2:	2700      	movs	r7, #0
  405ea4:	e469      	b.n	40577a <_dtoa_r+0x3ca>
  405ea6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405eaa:	f04f 0a02 	mov.w	sl, #2
  405eae:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  405eb2:	e657      	b.n	405b64 <_dtoa_r+0x7b4>
  405eb4:	2100      	movs	r1, #0
  405eb6:	2301      	movs	r3, #1
  405eb8:	6461      	str	r1, [r4, #68]	; 0x44
  405eba:	4620      	mov	r0, r4
  405ebc:	9325      	str	r3, [sp, #148]	; 0x94
  405ebe:	f000 fd9d 	bl	4069fc <_Balloc>
  405ec2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405ec4:	9004      	str	r0, [sp, #16]
  405ec6:	6420      	str	r0, [r4, #64]	; 0x40
  405ec8:	930a      	str	r3, [sp, #40]	; 0x28
  405eca:	930f      	str	r3, [sp, #60]	; 0x3c
  405ecc:	e629      	b.n	405b22 <_dtoa_r+0x772>
  405ece:	2a00      	cmp	r2, #0
  405ed0:	46d0      	mov	r8, sl
  405ed2:	f8cd b018 	str.w	fp, [sp, #24]
  405ed6:	469a      	mov	sl, r3
  405ed8:	dd11      	ble.n	405efe <_dtoa_r+0xb4e>
  405eda:	4649      	mov	r1, r9
  405edc:	2201      	movs	r2, #1
  405ede:	4620      	mov	r0, r4
  405ee0:	f000 ff38 	bl	406d54 <__lshift>
  405ee4:	4641      	mov	r1, r8
  405ee6:	4681      	mov	r9, r0
  405ee8:	f000 ff86 	bl	406df8 <__mcmp>
  405eec:	2800      	cmp	r0, #0
  405eee:	f340 8146 	ble.w	40617e <_dtoa_r+0xdce>
  405ef2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405ef6:	f000 8106 	beq.w	406106 <_dtoa_r+0xd56>
  405efa:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  405efe:	46b3      	mov	fp, r6
  405f00:	f887 a000 	strb.w	sl, [r7]
  405f04:	1c7d      	adds	r5, r7, #1
  405f06:	9e06      	ldr	r6, [sp, #24]
  405f08:	e5d2      	b.n	405ab0 <_dtoa_r+0x700>
  405f0a:	d104      	bne.n	405f16 <_dtoa_r+0xb66>
  405f0c:	f01a 0f01 	tst.w	sl, #1
  405f10:	d001      	beq.n	405f16 <_dtoa_r+0xb66>
  405f12:	e5bd      	b.n	405a90 <_dtoa_r+0x6e0>
  405f14:	4615      	mov	r5, r2
  405f16:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405f1a:	2b30      	cmp	r3, #48	; 0x30
  405f1c:	f105 32ff 	add.w	r2, r5, #4294967295
  405f20:	d0f8      	beq.n	405f14 <_dtoa_r+0xb64>
  405f22:	e5c5      	b.n	405ab0 <_dtoa_r+0x700>
  405f24:	9904      	ldr	r1, [sp, #16]
  405f26:	2230      	movs	r2, #48	; 0x30
  405f28:	700a      	strb	r2, [r1, #0]
  405f2a:	9a02      	ldr	r2, [sp, #8]
  405f2c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405f30:	3201      	adds	r2, #1
  405f32:	9202      	str	r2, [sp, #8]
  405f34:	f7ff bbfc 	b.w	405730 <_dtoa_r+0x380>
  405f38:	f000 80bb 	beq.w	4060b2 <_dtoa_r+0xd02>
  405f3c:	9b02      	ldr	r3, [sp, #8]
  405f3e:	425d      	negs	r5, r3
  405f40:	4b84      	ldr	r3, [pc, #528]	; (406154 <_dtoa_r+0xda4>)
  405f42:	f005 020f 	and.w	r2, r5, #15
  405f46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405f4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  405f52:	f001 ff5f 	bl	407e14 <__aeabi_dmul>
  405f56:	112d      	asrs	r5, r5, #4
  405f58:	4607      	mov	r7, r0
  405f5a:	4688      	mov	r8, r1
  405f5c:	f000 812c 	beq.w	4061b8 <_dtoa_r+0xe08>
  405f60:	4e7d      	ldr	r6, [pc, #500]	; (406158 <_dtoa_r+0xda8>)
  405f62:	f04f 0a02 	mov.w	sl, #2
  405f66:	07eb      	lsls	r3, r5, #31
  405f68:	d509      	bpl.n	405f7e <_dtoa_r+0xbce>
  405f6a:	4638      	mov	r0, r7
  405f6c:	4641      	mov	r1, r8
  405f6e:	e9d6 2300 	ldrd	r2, r3, [r6]
  405f72:	f001 ff4f 	bl	407e14 <__aeabi_dmul>
  405f76:	f10a 0a01 	add.w	sl, sl, #1
  405f7a:	4607      	mov	r7, r0
  405f7c:	4688      	mov	r8, r1
  405f7e:	106d      	asrs	r5, r5, #1
  405f80:	f106 0608 	add.w	r6, r6, #8
  405f84:	d1ef      	bne.n	405f66 <_dtoa_r+0xbb6>
  405f86:	e608      	b.n	405b9a <_dtoa_r+0x7ea>
  405f88:	6871      	ldr	r1, [r6, #4]
  405f8a:	4620      	mov	r0, r4
  405f8c:	f000 fd36 	bl	4069fc <_Balloc>
  405f90:	6933      	ldr	r3, [r6, #16]
  405f92:	3302      	adds	r3, #2
  405f94:	009a      	lsls	r2, r3, #2
  405f96:	4605      	mov	r5, r0
  405f98:	f106 010c 	add.w	r1, r6, #12
  405f9c:	300c      	adds	r0, #12
  405f9e:	f000 fc8f 	bl	4068c0 <memcpy>
  405fa2:	4629      	mov	r1, r5
  405fa4:	2201      	movs	r2, #1
  405fa6:	4620      	mov	r0, r4
  405fa8:	f000 fed4 	bl	406d54 <__lshift>
  405fac:	9006      	str	r0, [sp, #24]
  405fae:	e4b5      	b.n	40591c <_dtoa_r+0x56c>
  405fb0:	2b39      	cmp	r3, #57	; 0x39
  405fb2:	f8cd b018 	str.w	fp, [sp, #24]
  405fb6:	46d0      	mov	r8, sl
  405fb8:	f000 80a5 	beq.w	406106 <_dtoa_r+0xd56>
  405fbc:	f103 0a01 	add.w	sl, r3, #1
  405fc0:	46b3      	mov	fp, r6
  405fc2:	f887 a000 	strb.w	sl, [r7]
  405fc6:	1c7d      	adds	r5, r7, #1
  405fc8:	9e06      	ldr	r6, [sp, #24]
  405fca:	e571      	b.n	405ab0 <_dtoa_r+0x700>
  405fcc:	465a      	mov	r2, fp
  405fce:	46d0      	mov	r8, sl
  405fd0:	46b3      	mov	fp, r6
  405fd2:	469a      	mov	sl, r3
  405fd4:	4616      	mov	r6, r2
  405fd6:	e54f      	b.n	405a78 <_dtoa_r+0x6c8>
  405fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405fda:	495e      	ldr	r1, [pc, #376]	; (406154 <_dtoa_r+0xda4>)
  405fdc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405fe0:	462a      	mov	r2, r5
  405fe2:	4633      	mov	r3, r6
  405fe4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405fe8:	f001 ff14 	bl	407e14 <__aeabi_dmul>
  405fec:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405ff0:	4638      	mov	r0, r7
  405ff2:	4641      	mov	r1, r8
  405ff4:	f002 f9be 	bl	408374 <__aeabi_d2iz>
  405ff8:	4605      	mov	r5, r0
  405ffa:	f001 fea5 	bl	407d48 <__aeabi_i2d>
  405ffe:	460b      	mov	r3, r1
  406000:	4602      	mov	r2, r0
  406002:	4641      	mov	r1, r8
  406004:	4638      	mov	r0, r7
  406006:	f001 fd51 	bl	407aac <__aeabi_dsub>
  40600a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40600c:	460f      	mov	r7, r1
  40600e:	9904      	ldr	r1, [sp, #16]
  406010:	3530      	adds	r5, #48	; 0x30
  406012:	2b01      	cmp	r3, #1
  406014:	700d      	strb	r5, [r1, #0]
  406016:	4606      	mov	r6, r0
  406018:	f101 0501 	add.w	r5, r1, #1
  40601c:	d026      	beq.n	40606c <_dtoa_r+0xcbc>
  40601e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406020:	9a04      	ldr	r2, [sp, #16]
  406022:	f8df b13c 	ldr.w	fp, [pc, #316]	; 406160 <_dtoa_r+0xdb0>
  406026:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40602a:	4413      	add	r3, r2
  40602c:	f04f 0a00 	mov.w	sl, #0
  406030:	4699      	mov	r9, r3
  406032:	4652      	mov	r2, sl
  406034:	465b      	mov	r3, fp
  406036:	4630      	mov	r0, r6
  406038:	4639      	mov	r1, r7
  40603a:	f001 feeb 	bl	407e14 <__aeabi_dmul>
  40603e:	460f      	mov	r7, r1
  406040:	4606      	mov	r6, r0
  406042:	f002 f997 	bl	408374 <__aeabi_d2iz>
  406046:	4680      	mov	r8, r0
  406048:	f001 fe7e 	bl	407d48 <__aeabi_i2d>
  40604c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406050:	4602      	mov	r2, r0
  406052:	460b      	mov	r3, r1
  406054:	4630      	mov	r0, r6
  406056:	4639      	mov	r1, r7
  406058:	f001 fd28 	bl	407aac <__aeabi_dsub>
  40605c:	f805 8b01 	strb.w	r8, [r5], #1
  406060:	454d      	cmp	r5, r9
  406062:	4606      	mov	r6, r0
  406064:	460f      	mov	r7, r1
  406066:	d1e4      	bne.n	406032 <_dtoa_r+0xc82>
  406068:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40606c:	4b3b      	ldr	r3, [pc, #236]	; (40615c <_dtoa_r+0xdac>)
  40606e:	2200      	movs	r2, #0
  406070:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  406074:	f001 fd1c 	bl	407ab0 <__adddf3>
  406078:	4632      	mov	r2, r6
  40607a:	463b      	mov	r3, r7
  40607c:	f002 f93c 	bl	4082f8 <__aeabi_dcmplt>
  406080:	2800      	cmp	r0, #0
  406082:	d046      	beq.n	406112 <_dtoa_r+0xd62>
  406084:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406086:	9302      	str	r3, [sp, #8]
  406088:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40608c:	f7ff bb43 	b.w	405716 <_dtoa_r+0x366>
  406090:	f04f 0800 	mov.w	r8, #0
  406094:	4646      	mov	r6, r8
  406096:	e6a9      	b.n	405dec <_dtoa_r+0xa3c>
  406098:	9b08      	ldr	r3, [sp, #32]
  40609a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40609c:	1a9d      	subs	r5, r3, r2
  40609e:	2300      	movs	r3, #0
  4060a0:	f7ff bb71 	b.w	405786 <_dtoa_r+0x3d6>
  4060a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4060a6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4060a8:	9d08      	ldr	r5, [sp, #32]
  4060aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4060ae:	f7ff bb6a 	b.w	405786 <_dtoa_r+0x3d6>
  4060b2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4060b6:	f04f 0a02 	mov.w	sl, #2
  4060ba:	e56e      	b.n	405b9a <_dtoa_r+0x7ea>
  4060bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4060be:	2b00      	cmp	r3, #0
  4060c0:	f43f aeb8 	beq.w	405e34 <_dtoa_r+0xa84>
  4060c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4060c6:	2b00      	cmp	r3, #0
  4060c8:	f77f aede 	ble.w	405e88 <_dtoa_r+0xad8>
  4060cc:	2200      	movs	r2, #0
  4060ce:	4b24      	ldr	r3, [pc, #144]	; (406160 <_dtoa_r+0xdb0>)
  4060d0:	4638      	mov	r0, r7
  4060d2:	4641      	mov	r1, r8
  4060d4:	f001 fe9e 	bl	407e14 <__aeabi_dmul>
  4060d8:	4607      	mov	r7, r0
  4060da:	4688      	mov	r8, r1
  4060dc:	f10a 0001 	add.w	r0, sl, #1
  4060e0:	f001 fe32 	bl	407d48 <__aeabi_i2d>
  4060e4:	463a      	mov	r2, r7
  4060e6:	4643      	mov	r3, r8
  4060e8:	f001 fe94 	bl	407e14 <__aeabi_dmul>
  4060ec:	2200      	movs	r2, #0
  4060ee:	4b17      	ldr	r3, [pc, #92]	; (40614c <_dtoa_r+0xd9c>)
  4060f0:	f001 fcde 	bl	407ab0 <__adddf3>
  4060f4:	9a02      	ldr	r2, [sp, #8]
  4060f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4060f8:	9312      	str	r3, [sp, #72]	; 0x48
  4060fa:	3a01      	subs	r2, #1
  4060fc:	4605      	mov	r5, r0
  4060fe:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406102:	9215      	str	r2, [sp, #84]	; 0x54
  406104:	e56a      	b.n	405bdc <_dtoa_r+0x82c>
  406106:	2239      	movs	r2, #57	; 0x39
  406108:	46b3      	mov	fp, r6
  40610a:	703a      	strb	r2, [r7, #0]
  40610c:	9e06      	ldr	r6, [sp, #24]
  40610e:	1c7d      	adds	r5, r7, #1
  406110:	e4c0      	b.n	405a94 <_dtoa_r+0x6e4>
  406112:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  406116:	2000      	movs	r0, #0
  406118:	4910      	ldr	r1, [pc, #64]	; (40615c <_dtoa_r+0xdac>)
  40611a:	f001 fcc7 	bl	407aac <__aeabi_dsub>
  40611e:	4632      	mov	r2, r6
  406120:	463b      	mov	r3, r7
  406122:	f002 f907 	bl	408334 <__aeabi_dcmpgt>
  406126:	b908      	cbnz	r0, 40612c <_dtoa_r+0xd7c>
  406128:	e6ae      	b.n	405e88 <_dtoa_r+0xad8>
  40612a:	4615      	mov	r5, r2
  40612c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406130:	2b30      	cmp	r3, #48	; 0x30
  406132:	f105 32ff 	add.w	r2, r5, #4294967295
  406136:	d0f8      	beq.n	40612a <_dtoa_r+0xd7a>
  406138:	e5d7      	b.n	405cea <_dtoa_r+0x93a>
  40613a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40613e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406140:	9302      	str	r3, [sp, #8]
  406142:	f7ff bae8 	b.w	405716 <_dtoa_r+0x366>
  406146:	970c      	str	r7, [sp, #48]	; 0x30
  406148:	f7ff bba5 	b.w	405896 <_dtoa_r+0x4e6>
  40614c:	401c0000 	.word	0x401c0000
  406150:	40140000 	.word	0x40140000
  406154:	004091c8 	.word	0x004091c8
  406158:	004091a0 	.word	0x004091a0
  40615c:	3fe00000 	.word	0x3fe00000
  406160:	40240000 	.word	0x40240000
  406164:	2b39      	cmp	r3, #57	; 0x39
  406166:	f8cd b018 	str.w	fp, [sp, #24]
  40616a:	46d0      	mov	r8, sl
  40616c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406170:	469a      	mov	sl, r3
  406172:	d0c8      	beq.n	406106 <_dtoa_r+0xd56>
  406174:	f1bb 0f00 	cmp.w	fp, #0
  406178:	f73f aebf 	bgt.w	405efa <_dtoa_r+0xb4a>
  40617c:	e6bf      	b.n	405efe <_dtoa_r+0xb4e>
  40617e:	f47f aebe 	bne.w	405efe <_dtoa_r+0xb4e>
  406182:	f01a 0f01 	tst.w	sl, #1
  406186:	f43f aeba 	beq.w	405efe <_dtoa_r+0xb4e>
  40618a:	e6b2      	b.n	405ef2 <_dtoa_r+0xb42>
  40618c:	f04f 0800 	mov.w	r8, #0
  406190:	4646      	mov	r6, r8
  406192:	e5e9      	b.n	405d68 <_dtoa_r+0x9b8>
  406194:	4631      	mov	r1, r6
  406196:	2300      	movs	r3, #0
  406198:	220a      	movs	r2, #10
  40619a:	4620      	mov	r0, r4
  40619c:	f000 fc5e 	bl	406a5c <__multadd>
  4061a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4061a2:	2b00      	cmp	r3, #0
  4061a4:	4606      	mov	r6, r0
  4061a6:	dd0a      	ble.n	4061be <_dtoa_r+0xe0e>
  4061a8:	930a      	str	r3, [sp, #40]	; 0x28
  4061aa:	f7ff bbaa 	b.w	405902 <_dtoa_r+0x552>
  4061ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4061b0:	2b02      	cmp	r3, #2
  4061b2:	dc23      	bgt.n	4061fc <_dtoa_r+0xe4c>
  4061b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4061b6:	e43b      	b.n	405a30 <_dtoa_r+0x680>
  4061b8:	f04f 0a02 	mov.w	sl, #2
  4061bc:	e4ed      	b.n	405b9a <_dtoa_r+0x7ea>
  4061be:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4061c0:	2b02      	cmp	r3, #2
  4061c2:	dc1b      	bgt.n	4061fc <_dtoa_r+0xe4c>
  4061c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4061c6:	e7ef      	b.n	4061a8 <_dtoa_r+0xdf8>
  4061c8:	2500      	movs	r5, #0
  4061ca:	6465      	str	r5, [r4, #68]	; 0x44
  4061cc:	4629      	mov	r1, r5
  4061ce:	4620      	mov	r0, r4
  4061d0:	f000 fc14 	bl	4069fc <_Balloc>
  4061d4:	f04f 33ff 	mov.w	r3, #4294967295
  4061d8:	930a      	str	r3, [sp, #40]	; 0x28
  4061da:	930f      	str	r3, [sp, #60]	; 0x3c
  4061dc:	2301      	movs	r3, #1
  4061de:	9004      	str	r0, [sp, #16]
  4061e0:	9525      	str	r5, [sp, #148]	; 0x94
  4061e2:	6420      	str	r0, [r4, #64]	; 0x40
  4061e4:	930b      	str	r3, [sp, #44]	; 0x2c
  4061e6:	f7ff b9dd 	b.w	4055a4 <_dtoa_r+0x1f4>
  4061ea:	2501      	movs	r5, #1
  4061ec:	f7ff b9a5 	b.w	40553a <_dtoa_r+0x18a>
  4061f0:	f43f ab69 	beq.w	4058c6 <_dtoa_r+0x516>
  4061f4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4061f8:	f7ff bbf9 	b.w	4059ee <_dtoa_r+0x63e>
  4061fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4061fe:	930a      	str	r3, [sp, #40]	; 0x28
  406200:	e5e5      	b.n	405dce <_dtoa_r+0xa1e>
  406202:	bf00      	nop

00406204 <__libc_fini_array>:
  406204:	b538      	push	{r3, r4, r5, lr}
  406206:	4c0a      	ldr	r4, [pc, #40]	; (406230 <__libc_fini_array+0x2c>)
  406208:	4d0a      	ldr	r5, [pc, #40]	; (406234 <__libc_fini_array+0x30>)
  40620a:	1b64      	subs	r4, r4, r5
  40620c:	10a4      	asrs	r4, r4, #2
  40620e:	d00a      	beq.n	406226 <__libc_fini_array+0x22>
  406210:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406214:	3b01      	subs	r3, #1
  406216:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40621a:	3c01      	subs	r4, #1
  40621c:	f855 3904 	ldr.w	r3, [r5], #-4
  406220:	4798      	blx	r3
  406222:	2c00      	cmp	r4, #0
  406224:	d1f9      	bne.n	40621a <__libc_fini_array+0x16>
  406226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40622a:	f003 b8cb 	b.w	4093c4 <_fini>
  40622e:	bf00      	nop
  406230:	004093d4 	.word	0x004093d4
  406234:	004093d0 	.word	0x004093d0

00406238 <_localeconv_r>:
  406238:	4a04      	ldr	r2, [pc, #16]	; (40624c <_localeconv_r+0x14>)
  40623a:	4b05      	ldr	r3, [pc, #20]	; (406250 <_localeconv_r+0x18>)
  40623c:	6812      	ldr	r2, [r2, #0]
  40623e:	6b50      	ldr	r0, [r2, #52]	; 0x34
  406240:	2800      	cmp	r0, #0
  406242:	bf08      	it	eq
  406244:	4618      	moveq	r0, r3
  406246:	30f0      	adds	r0, #240	; 0xf0
  406248:	4770      	bx	lr
  40624a:	bf00      	nop
  40624c:	20000010 	.word	0x20000010
  406250:	20000850 	.word	0x20000850

00406254 <_malloc_r>:
  406254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406258:	f101 060b 	add.w	r6, r1, #11
  40625c:	2e16      	cmp	r6, #22
  40625e:	b083      	sub	sp, #12
  406260:	4605      	mov	r5, r0
  406262:	f240 809e 	bls.w	4063a2 <_malloc_r+0x14e>
  406266:	f036 0607 	bics.w	r6, r6, #7
  40626a:	f100 80bd 	bmi.w	4063e8 <_malloc_r+0x194>
  40626e:	42b1      	cmp	r1, r6
  406270:	f200 80ba 	bhi.w	4063e8 <_malloc_r+0x194>
  406274:	f000 fbbe 	bl	4069f4 <__malloc_lock>
  406278:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40627c:	f0c0 8293 	bcc.w	4067a6 <_malloc_r+0x552>
  406280:	0a73      	lsrs	r3, r6, #9
  406282:	f000 80b8 	beq.w	4063f6 <_malloc_r+0x1a2>
  406286:	2b04      	cmp	r3, #4
  406288:	f200 8179 	bhi.w	40657e <_malloc_r+0x32a>
  40628c:	09b3      	lsrs	r3, r6, #6
  40628e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  406292:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  406296:	00c3      	lsls	r3, r0, #3
  406298:	4fbf      	ldr	r7, [pc, #764]	; (406598 <_malloc_r+0x344>)
  40629a:	443b      	add	r3, r7
  40629c:	f1a3 0108 	sub.w	r1, r3, #8
  4062a0:	685c      	ldr	r4, [r3, #4]
  4062a2:	42a1      	cmp	r1, r4
  4062a4:	d106      	bne.n	4062b4 <_malloc_r+0x60>
  4062a6:	e00c      	b.n	4062c2 <_malloc_r+0x6e>
  4062a8:	2a00      	cmp	r2, #0
  4062aa:	f280 80aa 	bge.w	406402 <_malloc_r+0x1ae>
  4062ae:	68e4      	ldr	r4, [r4, #12]
  4062b0:	42a1      	cmp	r1, r4
  4062b2:	d006      	beq.n	4062c2 <_malloc_r+0x6e>
  4062b4:	6863      	ldr	r3, [r4, #4]
  4062b6:	f023 0303 	bic.w	r3, r3, #3
  4062ba:	1b9a      	subs	r2, r3, r6
  4062bc:	2a0f      	cmp	r2, #15
  4062be:	ddf3      	ble.n	4062a8 <_malloc_r+0x54>
  4062c0:	4670      	mov	r0, lr
  4062c2:	693c      	ldr	r4, [r7, #16]
  4062c4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4065ac <_malloc_r+0x358>
  4062c8:	4574      	cmp	r4, lr
  4062ca:	f000 81ab 	beq.w	406624 <_malloc_r+0x3d0>
  4062ce:	6863      	ldr	r3, [r4, #4]
  4062d0:	f023 0303 	bic.w	r3, r3, #3
  4062d4:	1b9a      	subs	r2, r3, r6
  4062d6:	2a0f      	cmp	r2, #15
  4062d8:	f300 8190 	bgt.w	4065fc <_malloc_r+0x3a8>
  4062dc:	2a00      	cmp	r2, #0
  4062de:	f8c7 e014 	str.w	lr, [r7, #20]
  4062e2:	f8c7 e010 	str.w	lr, [r7, #16]
  4062e6:	f280 809d 	bge.w	406424 <_malloc_r+0x1d0>
  4062ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4062ee:	f080 8161 	bcs.w	4065b4 <_malloc_r+0x360>
  4062f2:	08db      	lsrs	r3, r3, #3
  4062f4:	f103 0c01 	add.w	ip, r3, #1
  4062f8:	1099      	asrs	r1, r3, #2
  4062fa:	687a      	ldr	r2, [r7, #4]
  4062fc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406300:	f8c4 8008 	str.w	r8, [r4, #8]
  406304:	2301      	movs	r3, #1
  406306:	408b      	lsls	r3, r1
  406308:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40630c:	4313      	orrs	r3, r2
  40630e:	3908      	subs	r1, #8
  406310:	60e1      	str	r1, [r4, #12]
  406312:	607b      	str	r3, [r7, #4]
  406314:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  406318:	f8c8 400c 	str.w	r4, [r8, #12]
  40631c:	1082      	asrs	r2, r0, #2
  40631e:	2401      	movs	r4, #1
  406320:	4094      	lsls	r4, r2
  406322:	429c      	cmp	r4, r3
  406324:	f200 808b 	bhi.w	40643e <_malloc_r+0x1ea>
  406328:	421c      	tst	r4, r3
  40632a:	d106      	bne.n	40633a <_malloc_r+0xe6>
  40632c:	f020 0003 	bic.w	r0, r0, #3
  406330:	0064      	lsls	r4, r4, #1
  406332:	421c      	tst	r4, r3
  406334:	f100 0004 	add.w	r0, r0, #4
  406338:	d0fa      	beq.n	406330 <_malloc_r+0xdc>
  40633a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40633e:	46cc      	mov	ip, r9
  406340:	4680      	mov	r8, r0
  406342:	f8dc 300c 	ldr.w	r3, [ip, #12]
  406346:	459c      	cmp	ip, r3
  406348:	d107      	bne.n	40635a <_malloc_r+0x106>
  40634a:	e16d      	b.n	406628 <_malloc_r+0x3d4>
  40634c:	2a00      	cmp	r2, #0
  40634e:	f280 817b 	bge.w	406648 <_malloc_r+0x3f4>
  406352:	68db      	ldr	r3, [r3, #12]
  406354:	459c      	cmp	ip, r3
  406356:	f000 8167 	beq.w	406628 <_malloc_r+0x3d4>
  40635a:	6859      	ldr	r1, [r3, #4]
  40635c:	f021 0103 	bic.w	r1, r1, #3
  406360:	1b8a      	subs	r2, r1, r6
  406362:	2a0f      	cmp	r2, #15
  406364:	ddf2      	ble.n	40634c <_malloc_r+0xf8>
  406366:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40636a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40636e:	9300      	str	r3, [sp, #0]
  406370:	199c      	adds	r4, r3, r6
  406372:	4628      	mov	r0, r5
  406374:	f046 0601 	orr.w	r6, r6, #1
  406378:	f042 0501 	orr.w	r5, r2, #1
  40637c:	605e      	str	r6, [r3, #4]
  40637e:	f8c8 c00c 	str.w	ip, [r8, #12]
  406382:	f8cc 8008 	str.w	r8, [ip, #8]
  406386:	617c      	str	r4, [r7, #20]
  406388:	613c      	str	r4, [r7, #16]
  40638a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40638e:	f8c4 e008 	str.w	lr, [r4, #8]
  406392:	6065      	str	r5, [r4, #4]
  406394:	505a      	str	r2, [r3, r1]
  406396:	f000 fb2f 	bl	4069f8 <__malloc_unlock>
  40639a:	9b00      	ldr	r3, [sp, #0]
  40639c:	f103 0408 	add.w	r4, r3, #8
  4063a0:	e01e      	b.n	4063e0 <_malloc_r+0x18c>
  4063a2:	2910      	cmp	r1, #16
  4063a4:	d820      	bhi.n	4063e8 <_malloc_r+0x194>
  4063a6:	f000 fb25 	bl	4069f4 <__malloc_lock>
  4063aa:	2610      	movs	r6, #16
  4063ac:	2318      	movs	r3, #24
  4063ae:	2002      	movs	r0, #2
  4063b0:	4f79      	ldr	r7, [pc, #484]	; (406598 <_malloc_r+0x344>)
  4063b2:	443b      	add	r3, r7
  4063b4:	f1a3 0208 	sub.w	r2, r3, #8
  4063b8:	685c      	ldr	r4, [r3, #4]
  4063ba:	4294      	cmp	r4, r2
  4063bc:	f000 813d 	beq.w	40663a <_malloc_r+0x3e6>
  4063c0:	6863      	ldr	r3, [r4, #4]
  4063c2:	68e1      	ldr	r1, [r4, #12]
  4063c4:	68a6      	ldr	r6, [r4, #8]
  4063c6:	f023 0303 	bic.w	r3, r3, #3
  4063ca:	4423      	add	r3, r4
  4063cc:	4628      	mov	r0, r5
  4063ce:	685a      	ldr	r2, [r3, #4]
  4063d0:	60f1      	str	r1, [r6, #12]
  4063d2:	f042 0201 	orr.w	r2, r2, #1
  4063d6:	608e      	str	r6, [r1, #8]
  4063d8:	605a      	str	r2, [r3, #4]
  4063da:	f000 fb0d 	bl	4069f8 <__malloc_unlock>
  4063de:	3408      	adds	r4, #8
  4063e0:	4620      	mov	r0, r4
  4063e2:	b003      	add	sp, #12
  4063e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4063e8:	2400      	movs	r4, #0
  4063ea:	230c      	movs	r3, #12
  4063ec:	4620      	mov	r0, r4
  4063ee:	602b      	str	r3, [r5, #0]
  4063f0:	b003      	add	sp, #12
  4063f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4063f6:	2040      	movs	r0, #64	; 0x40
  4063f8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4063fc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406400:	e74a      	b.n	406298 <_malloc_r+0x44>
  406402:	4423      	add	r3, r4
  406404:	68e1      	ldr	r1, [r4, #12]
  406406:	685a      	ldr	r2, [r3, #4]
  406408:	68a6      	ldr	r6, [r4, #8]
  40640a:	f042 0201 	orr.w	r2, r2, #1
  40640e:	60f1      	str	r1, [r6, #12]
  406410:	4628      	mov	r0, r5
  406412:	608e      	str	r6, [r1, #8]
  406414:	605a      	str	r2, [r3, #4]
  406416:	f000 faef 	bl	4069f8 <__malloc_unlock>
  40641a:	3408      	adds	r4, #8
  40641c:	4620      	mov	r0, r4
  40641e:	b003      	add	sp, #12
  406420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406424:	4423      	add	r3, r4
  406426:	4628      	mov	r0, r5
  406428:	685a      	ldr	r2, [r3, #4]
  40642a:	f042 0201 	orr.w	r2, r2, #1
  40642e:	605a      	str	r2, [r3, #4]
  406430:	f000 fae2 	bl	4069f8 <__malloc_unlock>
  406434:	3408      	adds	r4, #8
  406436:	4620      	mov	r0, r4
  406438:	b003      	add	sp, #12
  40643a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40643e:	68bc      	ldr	r4, [r7, #8]
  406440:	6863      	ldr	r3, [r4, #4]
  406442:	f023 0803 	bic.w	r8, r3, #3
  406446:	45b0      	cmp	r8, r6
  406448:	d304      	bcc.n	406454 <_malloc_r+0x200>
  40644a:	eba8 0306 	sub.w	r3, r8, r6
  40644e:	2b0f      	cmp	r3, #15
  406450:	f300 8085 	bgt.w	40655e <_malloc_r+0x30a>
  406454:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4065b0 <_malloc_r+0x35c>
  406458:	4b50      	ldr	r3, [pc, #320]	; (40659c <_malloc_r+0x348>)
  40645a:	f8d9 2000 	ldr.w	r2, [r9]
  40645e:	681b      	ldr	r3, [r3, #0]
  406460:	3201      	adds	r2, #1
  406462:	4433      	add	r3, r6
  406464:	eb04 0a08 	add.w	sl, r4, r8
  406468:	f000 8155 	beq.w	406716 <_malloc_r+0x4c2>
  40646c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406470:	330f      	adds	r3, #15
  406472:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  406476:	f02b 0b0f 	bic.w	fp, fp, #15
  40647a:	4659      	mov	r1, fp
  40647c:	4628      	mov	r0, r5
  40647e:	f000 fdb7 	bl	406ff0 <_sbrk_r>
  406482:	1c41      	adds	r1, r0, #1
  406484:	4602      	mov	r2, r0
  406486:	f000 80fc 	beq.w	406682 <_malloc_r+0x42e>
  40648a:	4582      	cmp	sl, r0
  40648c:	f200 80f7 	bhi.w	40667e <_malloc_r+0x42a>
  406490:	4b43      	ldr	r3, [pc, #268]	; (4065a0 <_malloc_r+0x34c>)
  406492:	6819      	ldr	r1, [r3, #0]
  406494:	4459      	add	r1, fp
  406496:	6019      	str	r1, [r3, #0]
  406498:	f000 814d 	beq.w	406736 <_malloc_r+0x4e2>
  40649c:	f8d9 0000 	ldr.w	r0, [r9]
  4064a0:	3001      	adds	r0, #1
  4064a2:	bf1b      	ittet	ne
  4064a4:	eba2 0a0a 	subne.w	sl, r2, sl
  4064a8:	4451      	addne	r1, sl
  4064aa:	f8c9 2000 	streq.w	r2, [r9]
  4064ae:	6019      	strne	r1, [r3, #0]
  4064b0:	f012 0107 	ands.w	r1, r2, #7
  4064b4:	f000 8115 	beq.w	4066e2 <_malloc_r+0x48e>
  4064b8:	f1c1 0008 	rsb	r0, r1, #8
  4064bc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4064c0:	4402      	add	r2, r0
  4064c2:	3108      	adds	r1, #8
  4064c4:	eb02 090b 	add.w	r9, r2, fp
  4064c8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4064cc:	eba1 0909 	sub.w	r9, r1, r9
  4064d0:	4649      	mov	r1, r9
  4064d2:	4628      	mov	r0, r5
  4064d4:	9301      	str	r3, [sp, #4]
  4064d6:	9200      	str	r2, [sp, #0]
  4064d8:	f000 fd8a 	bl	406ff0 <_sbrk_r>
  4064dc:	1c43      	adds	r3, r0, #1
  4064de:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4064e2:	f000 8143 	beq.w	40676c <_malloc_r+0x518>
  4064e6:	1a80      	subs	r0, r0, r2
  4064e8:	4448      	add	r0, r9
  4064ea:	f040 0001 	orr.w	r0, r0, #1
  4064ee:	6819      	ldr	r1, [r3, #0]
  4064f0:	60ba      	str	r2, [r7, #8]
  4064f2:	4449      	add	r1, r9
  4064f4:	42bc      	cmp	r4, r7
  4064f6:	6050      	str	r0, [r2, #4]
  4064f8:	6019      	str	r1, [r3, #0]
  4064fa:	d017      	beq.n	40652c <_malloc_r+0x2d8>
  4064fc:	f1b8 0f0f 	cmp.w	r8, #15
  406500:	f240 80fb 	bls.w	4066fa <_malloc_r+0x4a6>
  406504:	6860      	ldr	r0, [r4, #4]
  406506:	f1a8 020c 	sub.w	r2, r8, #12
  40650a:	f022 0207 	bic.w	r2, r2, #7
  40650e:	eb04 0e02 	add.w	lr, r4, r2
  406512:	f000 0001 	and.w	r0, r0, #1
  406516:	f04f 0c05 	mov.w	ip, #5
  40651a:	4310      	orrs	r0, r2
  40651c:	2a0f      	cmp	r2, #15
  40651e:	6060      	str	r0, [r4, #4]
  406520:	f8ce c004 	str.w	ip, [lr, #4]
  406524:	f8ce c008 	str.w	ip, [lr, #8]
  406528:	f200 8117 	bhi.w	40675a <_malloc_r+0x506>
  40652c:	4b1d      	ldr	r3, [pc, #116]	; (4065a4 <_malloc_r+0x350>)
  40652e:	68bc      	ldr	r4, [r7, #8]
  406530:	681a      	ldr	r2, [r3, #0]
  406532:	4291      	cmp	r1, r2
  406534:	bf88      	it	hi
  406536:	6019      	strhi	r1, [r3, #0]
  406538:	4b1b      	ldr	r3, [pc, #108]	; (4065a8 <_malloc_r+0x354>)
  40653a:	681a      	ldr	r2, [r3, #0]
  40653c:	4291      	cmp	r1, r2
  40653e:	6862      	ldr	r2, [r4, #4]
  406540:	bf88      	it	hi
  406542:	6019      	strhi	r1, [r3, #0]
  406544:	f022 0203 	bic.w	r2, r2, #3
  406548:	4296      	cmp	r6, r2
  40654a:	eba2 0306 	sub.w	r3, r2, r6
  40654e:	d801      	bhi.n	406554 <_malloc_r+0x300>
  406550:	2b0f      	cmp	r3, #15
  406552:	dc04      	bgt.n	40655e <_malloc_r+0x30a>
  406554:	4628      	mov	r0, r5
  406556:	f000 fa4f 	bl	4069f8 <__malloc_unlock>
  40655a:	2400      	movs	r4, #0
  40655c:	e740      	b.n	4063e0 <_malloc_r+0x18c>
  40655e:	19a2      	adds	r2, r4, r6
  406560:	f043 0301 	orr.w	r3, r3, #1
  406564:	f046 0601 	orr.w	r6, r6, #1
  406568:	6066      	str	r6, [r4, #4]
  40656a:	4628      	mov	r0, r5
  40656c:	60ba      	str	r2, [r7, #8]
  40656e:	6053      	str	r3, [r2, #4]
  406570:	f000 fa42 	bl	4069f8 <__malloc_unlock>
  406574:	3408      	adds	r4, #8
  406576:	4620      	mov	r0, r4
  406578:	b003      	add	sp, #12
  40657a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40657e:	2b14      	cmp	r3, #20
  406580:	d971      	bls.n	406666 <_malloc_r+0x412>
  406582:	2b54      	cmp	r3, #84	; 0x54
  406584:	f200 80a3 	bhi.w	4066ce <_malloc_r+0x47a>
  406588:	0b33      	lsrs	r3, r6, #12
  40658a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40658e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  406592:	00c3      	lsls	r3, r0, #3
  406594:	e680      	b.n	406298 <_malloc_r+0x44>
  406596:	bf00      	nop
  406598:	20000440 	.word	0x20000440
  40659c:	20000ab0 	.word	0x20000ab0
  4065a0:	20000a80 	.word	0x20000a80
  4065a4:	20000aa8 	.word	0x20000aa8
  4065a8:	20000aac 	.word	0x20000aac
  4065ac:	20000448 	.word	0x20000448
  4065b0:	20000848 	.word	0x20000848
  4065b4:	0a5a      	lsrs	r2, r3, #9
  4065b6:	2a04      	cmp	r2, #4
  4065b8:	d95b      	bls.n	406672 <_malloc_r+0x41e>
  4065ba:	2a14      	cmp	r2, #20
  4065bc:	f200 80ae 	bhi.w	40671c <_malloc_r+0x4c8>
  4065c0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4065c4:	00c9      	lsls	r1, r1, #3
  4065c6:	325b      	adds	r2, #91	; 0x5b
  4065c8:	eb07 0c01 	add.w	ip, r7, r1
  4065cc:	5879      	ldr	r1, [r7, r1]
  4065ce:	f1ac 0c08 	sub.w	ip, ip, #8
  4065d2:	458c      	cmp	ip, r1
  4065d4:	f000 8088 	beq.w	4066e8 <_malloc_r+0x494>
  4065d8:	684a      	ldr	r2, [r1, #4]
  4065da:	f022 0203 	bic.w	r2, r2, #3
  4065de:	4293      	cmp	r3, r2
  4065e0:	d273      	bcs.n	4066ca <_malloc_r+0x476>
  4065e2:	6889      	ldr	r1, [r1, #8]
  4065e4:	458c      	cmp	ip, r1
  4065e6:	d1f7      	bne.n	4065d8 <_malloc_r+0x384>
  4065e8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4065ec:	687b      	ldr	r3, [r7, #4]
  4065ee:	60e2      	str	r2, [r4, #12]
  4065f0:	f8c4 c008 	str.w	ip, [r4, #8]
  4065f4:	6094      	str	r4, [r2, #8]
  4065f6:	f8cc 400c 	str.w	r4, [ip, #12]
  4065fa:	e68f      	b.n	40631c <_malloc_r+0xc8>
  4065fc:	19a1      	adds	r1, r4, r6
  4065fe:	f046 0c01 	orr.w	ip, r6, #1
  406602:	f042 0601 	orr.w	r6, r2, #1
  406606:	f8c4 c004 	str.w	ip, [r4, #4]
  40660a:	4628      	mov	r0, r5
  40660c:	6179      	str	r1, [r7, #20]
  40660e:	6139      	str	r1, [r7, #16]
  406610:	f8c1 e00c 	str.w	lr, [r1, #12]
  406614:	f8c1 e008 	str.w	lr, [r1, #8]
  406618:	604e      	str	r6, [r1, #4]
  40661a:	50e2      	str	r2, [r4, r3]
  40661c:	f000 f9ec 	bl	4069f8 <__malloc_unlock>
  406620:	3408      	adds	r4, #8
  406622:	e6dd      	b.n	4063e0 <_malloc_r+0x18c>
  406624:	687b      	ldr	r3, [r7, #4]
  406626:	e679      	b.n	40631c <_malloc_r+0xc8>
  406628:	f108 0801 	add.w	r8, r8, #1
  40662c:	f018 0f03 	tst.w	r8, #3
  406630:	f10c 0c08 	add.w	ip, ip, #8
  406634:	f47f ae85 	bne.w	406342 <_malloc_r+0xee>
  406638:	e02d      	b.n	406696 <_malloc_r+0x442>
  40663a:	68dc      	ldr	r4, [r3, #12]
  40663c:	42a3      	cmp	r3, r4
  40663e:	bf08      	it	eq
  406640:	3002      	addeq	r0, #2
  406642:	f43f ae3e 	beq.w	4062c2 <_malloc_r+0x6e>
  406646:	e6bb      	b.n	4063c0 <_malloc_r+0x16c>
  406648:	4419      	add	r1, r3
  40664a:	461c      	mov	r4, r3
  40664c:	684a      	ldr	r2, [r1, #4]
  40664e:	68db      	ldr	r3, [r3, #12]
  406650:	f854 6f08 	ldr.w	r6, [r4, #8]!
  406654:	f042 0201 	orr.w	r2, r2, #1
  406658:	604a      	str	r2, [r1, #4]
  40665a:	4628      	mov	r0, r5
  40665c:	60f3      	str	r3, [r6, #12]
  40665e:	609e      	str	r6, [r3, #8]
  406660:	f000 f9ca 	bl	4069f8 <__malloc_unlock>
  406664:	e6bc      	b.n	4063e0 <_malloc_r+0x18c>
  406666:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40666a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40666e:	00c3      	lsls	r3, r0, #3
  406670:	e612      	b.n	406298 <_malloc_r+0x44>
  406672:	099a      	lsrs	r2, r3, #6
  406674:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406678:	00c9      	lsls	r1, r1, #3
  40667a:	3238      	adds	r2, #56	; 0x38
  40667c:	e7a4      	b.n	4065c8 <_malloc_r+0x374>
  40667e:	42bc      	cmp	r4, r7
  406680:	d054      	beq.n	40672c <_malloc_r+0x4d8>
  406682:	68bc      	ldr	r4, [r7, #8]
  406684:	6862      	ldr	r2, [r4, #4]
  406686:	f022 0203 	bic.w	r2, r2, #3
  40668a:	e75d      	b.n	406548 <_malloc_r+0x2f4>
  40668c:	f859 3908 	ldr.w	r3, [r9], #-8
  406690:	4599      	cmp	r9, r3
  406692:	f040 8086 	bne.w	4067a2 <_malloc_r+0x54e>
  406696:	f010 0f03 	tst.w	r0, #3
  40669a:	f100 30ff 	add.w	r0, r0, #4294967295
  40669e:	d1f5      	bne.n	40668c <_malloc_r+0x438>
  4066a0:	687b      	ldr	r3, [r7, #4]
  4066a2:	ea23 0304 	bic.w	r3, r3, r4
  4066a6:	607b      	str	r3, [r7, #4]
  4066a8:	0064      	lsls	r4, r4, #1
  4066aa:	429c      	cmp	r4, r3
  4066ac:	f63f aec7 	bhi.w	40643e <_malloc_r+0x1ea>
  4066b0:	2c00      	cmp	r4, #0
  4066b2:	f43f aec4 	beq.w	40643e <_malloc_r+0x1ea>
  4066b6:	421c      	tst	r4, r3
  4066b8:	4640      	mov	r0, r8
  4066ba:	f47f ae3e 	bne.w	40633a <_malloc_r+0xe6>
  4066be:	0064      	lsls	r4, r4, #1
  4066c0:	421c      	tst	r4, r3
  4066c2:	f100 0004 	add.w	r0, r0, #4
  4066c6:	d0fa      	beq.n	4066be <_malloc_r+0x46a>
  4066c8:	e637      	b.n	40633a <_malloc_r+0xe6>
  4066ca:	468c      	mov	ip, r1
  4066cc:	e78c      	b.n	4065e8 <_malloc_r+0x394>
  4066ce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4066d2:	d815      	bhi.n	406700 <_malloc_r+0x4ac>
  4066d4:	0bf3      	lsrs	r3, r6, #15
  4066d6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4066da:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4066de:	00c3      	lsls	r3, r0, #3
  4066e0:	e5da      	b.n	406298 <_malloc_r+0x44>
  4066e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4066e6:	e6ed      	b.n	4064c4 <_malloc_r+0x270>
  4066e8:	687b      	ldr	r3, [r7, #4]
  4066ea:	1092      	asrs	r2, r2, #2
  4066ec:	2101      	movs	r1, #1
  4066ee:	fa01 f202 	lsl.w	r2, r1, r2
  4066f2:	4313      	orrs	r3, r2
  4066f4:	607b      	str	r3, [r7, #4]
  4066f6:	4662      	mov	r2, ip
  4066f8:	e779      	b.n	4065ee <_malloc_r+0x39a>
  4066fa:	2301      	movs	r3, #1
  4066fc:	6053      	str	r3, [r2, #4]
  4066fe:	e729      	b.n	406554 <_malloc_r+0x300>
  406700:	f240 5254 	movw	r2, #1364	; 0x554
  406704:	4293      	cmp	r3, r2
  406706:	d822      	bhi.n	40674e <_malloc_r+0x4fa>
  406708:	0cb3      	lsrs	r3, r6, #18
  40670a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40670e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  406712:	00c3      	lsls	r3, r0, #3
  406714:	e5c0      	b.n	406298 <_malloc_r+0x44>
  406716:	f103 0b10 	add.w	fp, r3, #16
  40671a:	e6ae      	b.n	40647a <_malloc_r+0x226>
  40671c:	2a54      	cmp	r2, #84	; 0x54
  40671e:	d829      	bhi.n	406774 <_malloc_r+0x520>
  406720:	0b1a      	lsrs	r2, r3, #12
  406722:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  406726:	00c9      	lsls	r1, r1, #3
  406728:	326e      	adds	r2, #110	; 0x6e
  40672a:	e74d      	b.n	4065c8 <_malloc_r+0x374>
  40672c:	4b20      	ldr	r3, [pc, #128]	; (4067b0 <_malloc_r+0x55c>)
  40672e:	6819      	ldr	r1, [r3, #0]
  406730:	4459      	add	r1, fp
  406732:	6019      	str	r1, [r3, #0]
  406734:	e6b2      	b.n	40649c <_malloc_r+0x248>
  406736:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40673a:	2800      	cmp	r0, #0
  40673c:	f47f aeae 	bne.w	40649c <_malloc_r+0x248>
  406740:	eb08 030b 	add.w	r3, r8, fp
  406744:	68ba      	ldr	r2, [r7, #8]
  406746:	f043 0301 	orr.w	r3, r3, #1
  40674a:	6053      	str	r3, [r2, #4]
  40674c:	e6ee      	b.n	40652c <_malloc_r+0x2d8>
  40674e:	207f      	movs	r0, #127	; 0x7f
  406750:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  406754:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406758:	e59e      	b.n	406298 <_malloc_r+0x44>
  40675a:	f104 0108 	add.w	r1, r4, #8
  40675e:	4628      	mov	r0, r5
  406760:	9300      	str	r3, [sp, #0]
  406762:	f000 fe8b 	bl	40747c <_free_r>
  406766:	9b00      	ldr	r3, [sp, #0]
  406768:	6819      	ldr	r1, [r3, #0]
  40676a:	e6df      	b.n	40652c <_malloc_r+0x2d8>
  40676c:	2001      	movs	r0, #1
  40676e:	f04f 0900 	mov.w	r9, #0
  406772:	e6bc      	b.n	4064ee <_malloc_r+0x29a>
  406774:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406778:	d805      	bhi.n	406786 <_malloc_r+0x532>
  40677a:	0bda      	lsrs	r2, r3, #15
  40677c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406780:	00c9      	lsls	r1, r1, #3
  406782:	3277      	adds	r2, #119	; 0x77
  406784:	e720      	b.n	4065c8 <_malloc_r+0x374>
  406786:	f240 5154 	movw	r1, #1364	; 0x554
  40678a:	428a      	cmp	r2, r1
  40678c:	d805      	bhi.n	40679a <_malloc_r+0x546>
  40678e:	0c9a      	lsrs	r2, r3, #18
  406790:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406794:	00c9      	lsls	r1, r1, #3
  406796:	327c      	adds	r2, #124	; 0x7c
  406798:	e716      	b.n	4065c8 <_malloc_r+0x374>
  40679a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40679e:	227e      	movs	r2, #126	; 0x7e
  4067a0:	e712      	b.n	4065c8 <_malloc_r+0x374>
  4067a2:	687b      	ldr	r3, [r7, #4]
  4067a4:	e780      	b.n	4066a8 <_malloc_r+0x454>
  4067a6:	08f0      	lsrs	r0, r6, #3
  4067a8:	f106 0308 	add.w	r3, r6, #8
  4067ac:	e600      	b.n	4063b0 <_malloc_r+0x15c>
  4067ae:	bf00      	nop
  4067b0:	20000a80 	.word	0x20000a80
	...

004067c0 <memchr>:
  4067c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4067c4:	2a10      	cmp	r2, #16
  4067c6:	db2b      	blt.n	406820 <memchr+0x60>
  4067c8:	f010 0f07 	tst.w	r0, #7
  4067cc:	d008      	beq.n	4067e0 <memchr+0x20>
  4067ce:	f810 3b01 	ldrb.w	r3, [r0], #1
  4067d2:	3a01      	subs	r2, #1
  4067d4:	428b      	cmp	r3, r1
  4067d6:	d02d      	beq.n	406834 <memchr+0x74>
  4067d8:	f010 0f07 	tst.w	r0, #7
  4067dc:	b342      	cbz	r2, 406830 <memchr+0x70>
  4067de:	d1f6      	bne.n	4067ce <memchr+0xe>
  4067e0:	b4f0      	push	{r4, r5, r6, r7}
  4067e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4067e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4067ea:	f022 0407 	bic.w	r4, r2, #7
  4067ee:	f07f 0700 	mvns.w	r7, #0
  4067f2:	2300      	movs	r3, #0
  4067f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4067f8:	3c08      	subs	r4, #8
  4067fa:	ea85 0501 	eor.w	r5, r5, r1
  4067fe:	ea86 0601 	eor.w	r6, r6, r1
  406802:	fa85 f547 	uadd8	r5, r5, r7
  406806:	faa3 f587 	sel	r5, r3, r7
  40680a:	fa86 f647 	uadd8	r6, r6, r7
  40680e:	faa5 f687 	sel	r6, r5, r7
  406812:	b98e      	cbnz	r6, 406838 <memchr+0x78>
  406814:	d1ee      	bne.n	4067f4 <memchr+0x34>
  406816:	bcf0      	pop	{r4, r5, r6, r7}
  406818:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40681c:	f002 0207 	and.w	r2, r2, #7
  406820:	b132      	cbz	r2, 406830 <memchr+0x70>
  406822:	f810 3b01 	ldrb.w	r3, [r0], #1
  406826:	3a01      	subs	r2, #1
  406828:	ea83 0301 	eor.w	r3, r3, r1
  40682c:	b113      	cbz	r3, 406834 <memchr+0x74>
  40682e:	d1f8      	bne.n	406822 <memchr+0x62>
  406830:	2000      	movs	r0, #0
  406832:	4770      	bx	lr
  406834:	3801      	subs	r0, #1
  406836:	4770      	bx	lr
  406838:	2d00      	cmp	r5, #0
  40683a:	bf06      	itte	eq
  40683c:	4635      	moveq	r5, r6
  40683e:	3803      	subeq	r0, #3
  406840:	3807      	subne	r0, #7
  406842:	f015 0f01 	tst.w	r5, #1
  406846:	d107      	bne.n	406858 <memchr+0x98>
  406848:	3001      	adds	r0, #1
  40684a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40684e:	bf02      	ittt	eq
  406850:	3001      	addeq	r0, #1
  406852:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406856:	3001      	addeq	r0, #1
  406858:	bcf0      	pop	{r4, r5, r6, r7}
  40685a:	3801      	subs	r0, #1
  40685c:	4770      	bx	lr
  40685e:	bf00      	nop

00406860 <memcmp>:
  406860:	2a03      	cmp	r2, #3
  406862:	b470      	push	{r4, r5, r6}
  406864:	d922      	bls.n	4068ac <memcmp+0x4c>
  406866:	ea40 0301 	orr.w	r3, r0, r1
  40686a:	079b      	lsls	r3, r3, #30
  40686c:	d011      	beq.n	406892 <memcmp+0x32>
  40686e:	7803      	ldrb	r3, [r0, #0]
  406870:	780c      	ldrb	r4, [r1, #0]
  406872:	42a3      	cmp	r3, r4
  406874:	d11d      	bne.n	4068b2 <memcmp+0x52>
  406876:	440a      	add	r2, r1
  406878:	3101      	adds	r1, #1
  40687a:	e005      	b.n	406888 <memcmp+0x28>
  40687c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406880:	f811 4b01 	ldrb.w	r4, [r1], #1
  406884:	42a3      	cmp	r3, r4
  406886:	d114      	bne.n	4068b2 <memcmp+0x52>
  406888:	4291      	cmp	r1, r2
  40688a:	d1f7      	bne.n	40687c <memcmp+0x1c>
  40688c:	2000      	movs	r0, #0
  40688e:	bc70      	pop	{r4, r5, r6}
  406890:	4770      	bx	lr
  406892:	680d      	ldr	r5, [r1, #0]
  406894:	6806      	ldr	r6, [r0, #0]
  406896:	42ae      	cmp	r6, r5
  406898:	460c      	mov	r4, r1
  40689a:	4603      	mov	r3, r0
  40689c:	f101 0104 	add.w	r1, r1, #4
  4068a0:	f100 0004 	add.w	r0, r0, #4
  4068a4:	d108      	bne.n	4068b8 <memcmp+0x58>
  4068a6:	3a04      	subs	r2, #4
  4068a8:	2a03      	cmp	r2, #3
  4068aa:	d8f2      	bhi.n	406892 <memcmp+0x32>
  4068ac:	2a00      	cmp	r2, #0
  4068ae:	d1de      	bne.n	40686e <memcmp+0xe>
  4068b0:	e7ec      	b.n	40688c <memcmp+0x2c>
  4068b2:	1b18      	subs	r0, r3, r4
  4068b4:	bc70      	pop	{r4, r5, r6}
  4068b6:	4770      	bx	lr
  4068b8:	4621      	mov	r1, r4
  4068ba:	4618      	mov	r0, r3
  4068bc:	e7d7      	b.n	40686e <memcmp+0xe>
  4068be:	bf00      	nop

004068c0 <memcpy>:
  4068c0:	4684      	mov	ip, r0
  4068c2:	ea41 0300 	orr.w	r3, r1, r0
  4068c6:	f013 0303 	ands.w	r3, r3, #3
  4068ca:	d16d      	bne.n	4069a8 <memcpy+0xe8>
  4068cc:	3a40      	subs	r2, #64	; 0x40
  4068ce:	d341      	bcc.n	406954 <memcpy+0x94>
  4068d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4068d4:	f840 3b04 	str.w	r3, [r0], #4
  4068d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4068dc:	f840 3b04 	str.w	r3, [r0], #4
  4068e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4068e4:	f840 3b04 	str.w	r3, [r0], #4
  4068e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4068ec:	f840 3b04 	str.w	r3, [r0], #4
  4068f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4068f4:	f840 3b04 	str.w	r3, [r0], #4
  4068f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4068fc:	f840 3b04 	str.w	r3, [r0], #4
  406900:	f851 3b04 	ldr.w	r3, [r1], #4
  406904:	f840 3b04 	str.w	r3, [r0], #4
  406908:	f851 3b04 	ldr.w	r3, [r1], #4
  40690c:	f840 3b04 	str.w	r3, [r0], #4
  406910:	f851 3b04 	ldr.w	r3, [r1], #4
  406914:	f840 3b04 	str.w	r3, [r0], #4
  406918:	f851 3b04 	ldr.w	r3, [r1], #4
  40691c:	f840 3b04 	str.w	r3, [r0], #4
  406920:	f851 3b04 	ldr.w	r3, [r1], #4
  406924:	f840 3b04 	str.w	r3, [r0], #4
  406928:	f851 3b04 	ldr.w	r3, [r1], #4
  40692c:	f840 3b04 	str.w	r3, [r0], #4
  406930:	f851 3b04 	ldr.w	r3, [r1], #4
  406934:	f840 3b04 	str.w	r3, [r0], #4
  406938:	f851 3b04 	ldr.w	r3, [r1], #4
  40693c:	f840 3b04 	str.w	r3, [r0], #4
  406940:	f851 3b04 	ldr.w	r3, [r1], #4
  406944:	f840 3b04 	str.w	r3, [r0], #4
  406948:	f851 3b04 	ldr.w	r3, [r1], #4
  40694c:	f840 3b04 	str.w	r3, [r0], #4
  406950:	3a40      	subs	r2, #64	; 0x40
  406952:	d2bd      	bcs.n	4068d0 <memcpy+0x10>
  406954:	3230      	adds	r2, #48	; 0x30
  406956:	d311      	bcc.n	40697c <memcpy+0xbc>
  406958:	f851 3b04 	ldr.w	r3, [r1], #4
  40695c:	f840 3b04 	str.w	r3, [r0], #4
  406960:	f851 3b04 	ldr.w	r3, [r1], #4
  406964:	f840 3b04 	str.w	r3, [r0], #4
  406968:	f851 3b04 	ldr.w	r3, [r1], #4
  40696c:	f840 3b04 	str.w	r3, [r0], #4
  406970:	f851 3b04 	ldr.w	r3, [r1], #4
  406974:	f840 3b04 	str.w	r3, [r0], #4
  406978:	3a10      	subs	r2, #16
  40697a:	d2ed      	bcs.n	406958 <memcpy+0x98>
  40697c:	320c      	adds	r2, #12
  40697e:	d305      	bcc.n	40698c <memcpy+0xcc>
  406980:	f851 3b04 	ldr.w	r3, [r1], #4
  406984:	f840 3b04 	str.w	r3, [r0], #4
  406988:	3a04      	subs	r2, #4
  40698a:	d2f9      	bcs.n	406980 <memcpy+0xc0>
  40698c:	3204      	adds	r2, #4
  40698e:	d008      	beq.n	4069a2 <memcpy+0xe2>
  406990:	07d2      	lsls	r2, r2, #31
  406992:	bf1c      	itt	ne
  406994:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406998:	f800 3b01 	strbne.w	r3, [r0], #1
  40699c:	d301      	bcc.n	4069a2 <memcpy+0xe2>
  40699e:	880b      	ldrh	r3, [r1, #0]
  4069a0:	8003      	strh	r3, [r0, #0]
  4069a2:	4660      	mov	r0, ip
  4069a4:	4770      	bx	lr
  4069a6:	bf00      	nop
  4069a8:	2a08      	cmp	r2, #8
  4069aa:	d313      	bcc.n	4069d4 <memcpy+0x114>
  4069ac:	078b      	lsls	r3, r1, #30
  4069ae:	d08d      	beq.n	4068cc <memcpy+0xc>
  4069b0:	f010 0303 	ands.w	r3, r0, #3
  4069b4:	d08a      	beq.n	4068cc <memcpy+0xc>
  4069b6:	f1c3 0304 	rsb	r3, r3, #4
  4069ba:	1ad2      	subs	r2, r2, r3
  4069bc:	07db      	lsls	r3, r3, #31
  4069be:	bf1c      	itt	ne
  4069c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4069c4:	f800 3b01 	strbne.w	r3, [r0], #1
  4069c8:	d380      	bcc.n	4068cc <memcpy+0xc>
  4069ca:	f831 3b02 	ldrh.w	r3, [r1], #2
  4069ce:	f820 3b02 	strh.w	r3, [r0], #2
  4069d2:	e77b      	b.n	4068cc <memcpy+0xc>
  4069d4:	3a04      	subs	r2, #4
  4069d6:	d3d9      	bcc.n	40698c <memcpy+0xcc>
  4069d8:	3a01      	subs	r2, #1
  4069da:	f811 3b01 	ldrb.w	r3, [r1], #1
  4069de:	f800 3b01 	strb.w	r3, [r0], #1
  4069e2:	d2f9      	bcs.n	4069d8 <memcpy+0x118>
  4069e4:	780b      	ldrb	r3, [r1, #0]
  4069e6:	7003      	strb	r3, [r0, #0]
  4069e8:	784b      	ldrb	r3, [r1, #1]
  4069ea:	7043      	strb	r3, [r0, #1]
  4069ec:	788b      	ldrb	r3, [r1, #2]
  4069ee:	7083      	strb	r3, [r0, #2]
  4069f0:	4660      	mov	r0, ip
  4069f2:	4770      	bx	lr

004069f4 <__malloc_lock>:
  4069f4:	4770      	bx	lr
  4069f6:	bf00      	nop

004069f8 <__malloc_unlock>:
  4069f8:	4770      	bx	lr
  4069fa:	bf00      	nop

004069fc <_Balloc>:
  4069fc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4069fe:	b570      	push	{r4, r5, r6, lr}
  406a00:	4605      	mov	r5, r0
  406a02:	460c      	mov	r4, r1
  406a04:	b14b      	cbz	r3, 406a1a <_Balloc+0x1e>
  406a06:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  406a0a:	b180      	cbz	r0, 406a2e <_Balloc+0x32>
  406a0c:	6802      	ldr	r2, [r0, #0]
  406a0e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406a12:	2300      	movs	r3, #0
  406a14:	6103      	str	r3, [r0, #16]
  406a16:	60c3      	str	r3, [r0, #12]
  406a18:	bd70      	pop	{r4, r5, r6, pc}
  406a1a:	2221      	movs	r2, #33	; 0x21
  406a1c:	2104      	movs	r1, #4
  406a1e:	f000 fcad 	bl	40737c <_calloc_r>
  406a22:	64e8      	str	r0, [r5, #76]	; 0x4c
  406a24:	4603      	mov	r3, r0
  406a26:	2800      	cmp	r0, #0
  406a28:	d1ed      	bne.n	406a06 <_Balloc+0xa>
  406a2a:	2000      	movs	r0, #0
  406a2c:	bd70      	pop	{r4, r5, r6, pc}
  406a2e:	2101      	movs	r1, #1
  406a30:	fa01 f604 	lsl.w	r6, r1, r4
  406a34:	1d72      	adds	r2, r6, #5
  406a36:	4628      	mov	r0, r5
  406a38:	0092      	lsls	r2, r2, #2
  406a3a:	f000 fc9f 	bl	40737c <_calloc_r>
  406a3e:	2800      	cmp	r0, #0
  406a40:	d0f3      	beq.n	406a2a <_Balloc+0x2e>
  406a42:	6044      	str	r4, [r0, #4]
  406a44:	6086      	str	r6, [r0, #8]
  406a46:	e7e4      	b.n	406a12 <_Balloc+0x16>

00406a48 <_Bfree>:
  406a48:	b131      	cbz	r1, 406a58 <_Bfree+0x10>
  406a4a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406a4c:	684a      	ldr	r2, [r1, #4]
  406a4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406a52:	6008      	str	r0, [r1, #0]
  406a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406a58:	4770      	bx	lr
  406a5a:	bf00      	nop

00406a5c <__multadd>:
  406a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  406a5e:	690c      	ldr	r4, [r1, #16]
  406a60:	b083      	sub	sp, #12
  406a62:	460d      	mov	r5, r1
  406a64:	4606      	mov	r6, r0
  406a66:	f101 0e14 	add.w	lr, r1, #20
  406a6a:	2700      	movs	r7, #0
  406a6c:	f8de 0000 	ldr.w	r0, [lr]
  406a70:	b281      	uxth	r1, r0
  406a72:	fb02 3301 	mla	r3, r2, r1, r3
  406a76:	0c01      	lsrs	r1, r0, #16
  406a78:	0c18      	lsrs	r0, r3, #16
  406a7a:	fb02 0101 	mla	r1, r2, r1, r0
  406a7e:	b29b      	uxth	r3, r3
  406a80:	3701      	adds	r7, #1
  406a82:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406a86:	42bc      	cmp	r4, r7
  406a88:	f84e 3b04 	str.w	r3, [lr], #4
  406a8c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406a90:	dcec      	bgt.n	406a6c <__multadd+0x10>
  406a92:	b13b      	cbz	r3, 406aa4 <__multadd+0x48>
  406a94:	68aa      	ldr	r2, [r5, #8]
  406a96:	4294      	cmp	r4, r2
  406a98:	da07      	bge.n	406aaa <__multadd+0x4e>
  406a9a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  406a9e:	3401      	adds	r4, #1
  406aa0:	6153      	str	r3, [r2, #20]
  406aa2:	612c      	str	r4, [r5, #16]
  406aa4:	4628      	mov	r0, r5
  406aa6:	b003      	add	sp, #12
  406aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406aaa:	6869      	ldr	r1, [r5, #4]
  406aac:	9301      	str	r3, [sp, #4]
  406aae:	3101      	adds	r1, #1
  406ab0:	4630      	mov	r0, r6
  406ab2:	f7ff ffa3 	bl	4069fc <_Balloc>
  406ab6:	692a      	ldr	r2, [r5, #16]
  406ab8:	3202      	adds	r2, #2
  406aba:	f105 010c 	add.w	r1, r5, #12
  406abe:	4607      	mov	r7, r0
  406ac0:	0092      	lsls	r2, r2, #2
  406ac2:	300c      	adds	r0, #12
  406ac4:	f7ff fefc 	bl	4068c0 <memcpy>
  406ac8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  406aca:	6869      	ldr	r1, [r5, #4]
  406acc:	9b01      	ldr	r3, [sp, #4]
  406ace:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406ad2:	6028      	str	r0, [r5, #0]
  406ad4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406ad8:	463d      	mov	r5, r7
  406ada:	e7de      	b.n	406a9a <__multadd+0x3e>

00406adc <__hi0bits>:
  406adc:	0c02      	lsrs	r2, r0, #16
  406ade:	0412      	lsls	r2, r2, #16
  406ae0:	4603      	mov	r3, r0
  406ae2:	b9b2      	cbnz	r2, 406b12 <__hi0bits+0x36>
  406ae4:	0403      	lsls	r3, r0, #16
  406ae6:	2010      	movs	r0, #16
  406ae8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  406aec:	bf04      	itt	eq
  406aee:	021b      	lsleq	r3, r3, #8
  406af0:	3008      	addeq	r0, #8
  406af2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406af6:	bf04      	itt	eq
  406af8:	011b      	lsleq	r3, r3, #4
  406afa:	3004      	addeq	r0, #4
  406afc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406b00:	bf04      	itt	eq
  406b02:	009b      	lsleq	r3, r3, #2
  406b04:	3002      	addeq	r0, #2
  406b06:	2b00      	cmp	r3, #0
  406b08:	db02      	blt.n	406b10 <__hi0bits+0x34>
  406b0a:	005b      	lsls	r3, r3, #1
  406b0c:	d403      	bmi.n	406b16 <__hi0bits+0x3a>
  406b0e:	2020      	movs	r0, #32
  406b10:	4770      	bx	lr
  406b12:	2000      	movs	r0, #0
  406b14:	e7e8      	b.n	406ae8 <__hi0bits+0xc>
  406b16:	3001      	adds	r0, #1
  406b18:	4770      	bx	lr
  406b1a:	bf00      	nop

00406b1c <__lo0bits>:
  406b1c:	6803      	ldr	r3, [r0, #0]
  406b1e:	f013 0207 	ands.w	r2, r3, #7
  406b22:	4601      	mov	r1, r0
  406b24:	d007      	beq.n	406b36 <__lo0bits+0x1a>
  406b26:	07da      	lsls	r2, r3, #31
  406b28:	d421      	bmi.n	406b6e <__lo0bits+0x52>
  406b2a:	0798      	lsls	r0, r3, #30
  406b2c:	d421      	bmi.n	406b72 <__lo0bits+0x56>
  406b2e:	089b      	lsrs	r3, r3, #2
  406b30:	600b      	str	r3, [r1, #0]
  406b32:	2002      	movs	r0, #2
  406b34:	4770      	bx	lr
  406b36:	b298      	uxth	r0, r3
  406b38:	b198      	cbz	r0, 406b62 <__lo0bits+0x46>
  406b3a:	4610      	mov	r0, r2
  406b3c:	f013 0fff 	tst.w	r3, #255	; 0xff
  406b40:	bf04      	itt	eq
  406b42:	0a1b      	lsreq	r3, r3, #8
  406b44:	3008      	addeq	r0, #8
  406b46:	071a      	lsls	r2, r3, #28
  406b48:	bf04      	itt	eq
  406b4a:	091b      	lsreq	r3, r3, #4
  406b4c:	3004      	addeq	r0, #4
  406b4e:	079a      	lsls	r2, r3, #30
  406b50:	bf04      	itt	eq
  406b52:	089b      	lsreq	r3, r3, #2
  406b54:	3002      	addeq	r0, #2
  406b56:	07da      	lsls	r2, r3, #31
  406b58:	d407      	bmi.n	406b6a <__lo0bits+0x4e>
  406b5a:	085b      	lsrs	r3, r3, #1
  406b5c:	d104      	bne.n	406b68 <__lo0bits+0x4c>
  406b5e:	2020      	movs	r0, #32
  406b60:	4770      	bx	lr
  406b62:	0c1b      	lsrs	r3, r3, #16
  406b64:	2010      	movs	r0, #16
  406b66:	e7e9      	b.n	406b3c <__lo0bits+0x20>
  406b68:	3001      	adds	r0, #1
  406b6a:	600b      	str	r3, [r1, #0]
  406b6c:	4770      	bx	lr
  406b6e:	2000      	movs	r0, #0
  406b70:	4770      	bx	lr
  406b72:	085b      	lsrs	r3, r3, #1
  406b74:	600b      	str	r3, [r1, #0]
  406b76:	2001      	movs	r0, #1
  406b78:	4770      	bx	lr
  406b7a:	bf00      	nop

00406b7c <__i2b>:
  406b7c:	b510      	push	{r4, lr}
  406b7e:	460c      	mov	r4, r1
  406b80:	2101      	movs	r1, #1
  406b82:	f7ff ff3b 	bl	4069fc <_Balloc>
  406b86:	2201      	movs	r2, #1
  406b88:	6144      	str	r4, [r0, #20]
  406b8a:	6102      	str	r2, [r0, #16]
  406b8c:	bd10      	pop	{r4, pc}
  406b8e:	bf00      	nop

00406b90 <__multiply>:
  406b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406b94:	690c      	ldr	r4, [r1, #16]
  406b96:	6915      	ldr	r5, [r2, #16]
  406b98:	42ac      	cmp	r4, r5
  406b9a:	b083      	sub	sp, #12
  406b9c:	468b      	mov	fp, r1
  406b9e:	4616      	mov	r6, r2
  406ba0:	da04      	bge.n	406bac <__multiply+0x1c>
  406ba2:	4622      	mov	r2, r4
  406ba4:	46b3      	mov	fp, r6
  406ba6:	462c      	mov	r4, r5
  406ba8:	460e      	mov	r6, r1
  406baa:	4615      	mov	r5, r2
  406bac:	f8db 3008 	ldr.w	r3, [fp, #8]
  406bb0:	f8db 1004 	ldr.w	r1, [fp, #4]
  406bb4:	eb04 0805 	add.w	r8, r4, r5
  406bb8:	4598      	cmp	r8, r3
  406bba:	bfc8      	it	gt
  406bbc:	3101      	addgt	r1, #1
  406bbe:	f7ff ff1d 	bl	4069fc <_Balloc>
  406bc2:	f100 0914 	add.w	r9, r0, #20
  406bc6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  406bca:	45d1      	cmp	r9, sl
  406bcc:	9000      	str	r0, [sp, #0]
  406bce:	d205      	bcs.n	406bdc <__multiply+0x4c>
  406bd0:	464b      	mov	r3, r9
  406bd2:	2100      	movs	r1, #0
  406bd4:	f843 1b04 	str.w	r1, [r3], #4
  406bd8:	459a      	cmp	sl, r3
  406bda:	d8fb      	bhi.n	406bd4 <__multiply+0x44>
  406bdc:	f106 0c14 	add.w	ip, r6, #20
  406be0:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406be4:	f10b 0b14 	add.w	fp, fp, #20
  406be8:	459c      	cmp	ip, r3
  406bea:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  406bee:	d24c      	bcs.n	406c8a <__multiply+0xfa>
  406bf0:	f8cd a004 	str.w	sl, [sp, #4]
  406bf4:	469a      	mov	sl, r3
  406bf6:	f8dc 5000 	ldr.w	r5, [ip]
  406bfa:	b2af      	uxth	r7, r5
  406bfc:	b1ef      	cbz	r7, 406c3a <__multiply+0xaa>
  406bfe:	2100      	movs	r1, #0
  406c00:	464d      	mov	r5, r9
  406c02:	465e      	mov	r6, fp
  406c04:	460c      	mov	r4, r1
  406c06:	f856 2b04 	ldr.w	r2, [r6], #4
  406c0a:	6828      	ldr	r0, [r5, #0]
  406c0c:	b293      	uxth	r3, r2
  406c0e:	b281      	uxth	r1, r0
  406c10:	fb07 1303 	mla	r3, r7, r3, r1
  406c14:	0c12      	lsrs	r2, r2, #16
  406c16:	0c01      	lsrs	r1, r0, #16
  406c18:	4423      	add	r3, r4
  406c1a:	fb07 1102 	mla	r1, r7, r2, r1
  406c1e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  406c22:	b29b      	uxth	r3, r3
  406c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406c28:	45b6      	cmp	lr, r6
  406c2a:	f845 3b04 	str.w	r3, [r5], #4
  406c2e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  406c32:	d8e8      	bhi.n	406c06 <__multiply+0x76>
  406c34:	602c      	str	r4, [r5, #0]
  406c36:	f8dc 5000 	ldr.w	r5, [ip]
  406c3a:	0c2d      	lsrs	r5, r5, #16
  406c3c:	d01d      	beq.n	406c7a <__multiply+0xea>
  406c3e:	f8d9 3000 	ldr.w	r3, [r9]
  406c42:	4648      	mov	r0, r9
  406c44:	461c      	mov	r4, r3
  406c46:	4659      	mov	r1, fp
  406c48:	2200      	movs	r2, #0
  406c4a:	880e      	ldrh	r6, [r1, #0]
  406c4c:	0c24      	lsrs	r4, r4, #16
  406c4e:	fb05 4406 	mla	r4, r5, r6, r4
  406c52:	4422      	add	r2, r4
  406c54:	b29b      	uxth	r3, r3
  406c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406c5a:	f840 3b04 	str.w	r3, [r0], #4
  406c5e:	f851 3b04 	ldr.w	r3, [r1], #4
  406c62:	6804      	ldr	r4, [r0, #0]
  406c64:	0c1b      	lsrs	r3, r3, #16
  406c66:	b2a6      	uxth	r6, r4
  406c68:	fb05 6303 	mla	r3, r5, r3, r6
  406c6c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406c70:	458e      	cmp	lr, r1
  406c72:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406c76:	d8e8      	bhi.n	406c4a <__multiply+0xba>
  406c78:	6003      	str	r3, [r0, #0]
  406c7a:	f10c 0c04 	add.w	ip, ip, #4
  406c7e:	45e2      	cmp	sl, ip
  406c80:	f109 0904 	add.w	r9, r9, #4
  406c84:	d8b7      	bhi.n	406bf6 <__multiply+0x66>
  406c86:	f8dd a004 	ldr.w	sl, [sp, #4]
  406c8a:	f1b8 0f00 	cmp.w	r8, #0
  406c8e:	dd0b      	ble.n	406ca8 <__multiply+0x118>
  406c90:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406c94:	f1aa 0a04 	sub.w	sl, sl, #4
  406c98:	b11b      	cbz	r3, 406ca2 <__multiply+0x112>
  406c9a:	e005      	b.n	406ca8 <__multiply+0x118>
  406c9c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406ca0:	b913      	cbnz	r3, 406ca8 <__multiply+0x118>
  406ca2:	f1b8 0801 	subs.w	r8, r8, #1
  406ca6:	d1f9      	bne.n	406c9c <__multiply+0x10c>
  406ca8:	9800      	ldr	r0, [sp, #0]
  406caa:	f8c0 8010 	str.w	r8, [r0, #16]
  406cae:	b003      	add	sp, #12
  406cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406cb4 <__pow5mult>:
  406cb4:	f012 0303 	ands.w	r3, r2, #3
  406cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406cbc:	4614      	mov	r4, r2
  406cbe:	4607      	mov	r7, r0
  406cc0:	d12e      	bne.n	406d20 <__pow5mult+0x6c>
  406cc2:	460d      	mov	r5, r1
  406cc4:	10a4      	asrs	r4, r4, #2
  406cc6:	d01c      	beq.n	406d02 <__pow5mult+0x4e>
  406cc8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  406cca:	b396      	cbz	r6, 406d32 <__pow5mult+0x7e>
  406ccc:	07e3      	lsls	r3, r4, #31
  406cce:	f04f 0800 	mov.w	r8, #0
  406cd2:	d406      	bmi.n	406ce2 <__pow5mult+0x2e>
  406cd4:	1064      	asrs	r4, r4, #1
  406cd6:	d014      	beq.n	406d02 <__pow5mult+0x4e>
  406cd8:	6830      	ldr	r0, [r6, #0]
  406cda:	b1a8      	cbz	r0, 406d08 <__pow5mult+0x54>
  406cdc:	4606      	mov	r6, r0
  406cde:	07e3      	lsls	r3, r4, #31
  406ce0:	d5f8      	bpl.n	406cd4 <__pow5mult+0x20>
  406ce2:	4632      	mov	r2, r6
  406ce4:	4629      	mov	r1, r5
  406ce6:	4638      	mov	r0, r7
  406ce8:	f7ff ff52 	bl	406b90 <__multiply>
  406cec:	b1b5      	cbz	r5, 406d1c <__pow5mult+0x68>
  406cee:	686a      	ldr	r2, [r5, #4]
  406cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406cf2:	1064      	asrs	r4, r4, #1
  406cf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406cf8:	6029      	str	r1, [r5, #0]
  406cfa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406cfe:	4605      	mov	r5, r0
  406d00:	d1ea      	bne.n	406cd8 <__pow5mult+0x24>
  406d02:	4628      	mov	r0, r5
  406d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406d08:	4632      	mov	r2, r6
  406d0a:	4631      	mov	r1, r6
  406d0c:	4638      	mov	r0, r7
  406d0e:	f7ff ff3f 	bl	406b90 <__multiply>
  406d12:	6030      	str	r0, [r6, #0]
  406d14:	f8c0 8000 	str.w	r8, [r0]
  406d18:	4606      	mov	r6, r0
  406d1a:	e7e0      	b.n	406cde <__pow5mult+0x2a>
  406d1c:	4605      	mov	r5, r0
  406d1e:	e7d9      	b.n	406cd4 <__pow5mult+0x20>
  406d20:	1e5a      	subs	r2, r3, #1
  406d22:	4d0b      	ldr	r5, [pc, #44]	; (406d50 <__pow5mult+0x9c>)
  406d24:	2300      	movs	r3, #0
  406d26:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406d2a:	f7ff fe97 	bl	406a5c <__multadd>
  406d2e:	4605      	mov	r5, r0
  406d30:	e7c8      	b.n	406cc4 <__pow5mult+0x10>
  406d32:	2101      	movs	r1, #1
  406d34:	4638      	mov	r0, r7
  406d36:	f7ff fe61 	bl	4069fc <_Balloc>
  406d3a:	f240 2171 	movw	r1, #625	; 0x271
  406d3e:	2201      	movs	r2, #1
  406d40:	2300      	movs	r3, #0
  406d42:	6141      	str	r1, [r0, #20]
  406d44:	6102      	str	r2, [r0, #16]
  406d46:	4606      	mov	r6, r0
  406d48:	64b8      	str	r0, [r7, #72]	; 0x48
  406d4a:	6003      	str	r3, [r0, #0]
  406d4c:	e7be      	b.n	406ccc <__pow5mult+0x18>
  406d4e:	bf00      	nop
  406d50:	00409290 	.word	0x00409290

00406d54 <__lshift>:
  406d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406d58:	4691      	mov	r9, r2
  406d5a:	690a      	ldr	r2, [r1, #16]
  406d5c:	688b      	ldr	r3, [r1, #8]
  406d5e:	ea4f 1469 	mov.w	r4, r9, asr #5
  406d62:	eb04 0802 	add.w	r8, r4, r2
  406d66:	f108 0501 	add.w	r5, r8, #1
  406d6a:	429d      	cmp	r5, r3
  406d6c:	460e      	mov	r6, r1
  406d6e:	4607      	mov	r7, r0
  406d70:	6849      	ldr	r1, [r1, #4]
  406d72:	dd04      	ble.n	406d7e <__lshift+0x2a>
  406d74:	005b      	lsls	r3, r3, #1
  406d76:	429d      	cmp	r5, r3
  406d78:	f101 0101 	add.w	r1, r1, #1
  406d7c:	dcfa      	bgt.n	406d74 <__lshift+0x20>
  406d7e:	4638      	mov	r0, r7
  406d80:	f7ff fe3c 	bl	4069fc <_Balloc>
  406d84:	2c00      	cmp	r4, #0
  406d86:	f100 0314 	add.w	r3, r0, #20
  406d8a:	dd06      	ble.n	406d9a <__lshift+0x46>
  406d8c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406d90:	2100      	movs	r1, #0
  406d92:	f843 1b04 	str.w	r1, [r3], #4
  406d96:	429a      	cmp	r2, r3
  406d98:	d1fb      	bne.n	406d92 <__lshift+0x3e>
  406d9a:	6934      	ldr	r4, [r6, #16]
  406d9c:	f106 0114 	add.w	r1, r6, #20
  406da0:	f019 091f 	ands.w	r9, r9, #31
  406da4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406da8:	d01d      	beq.n	406de6 <__lshift+0x92>
  406daa:	f1c9 0c20 	rsb	ip, r9, #32
  406dae:	2200      	movs	r2, #0
  406db0:	680c      	ldr	r4, [r1, #0]
  406db2:	fa04 f409 	lsl.w	r4, r4, r9
  406db6:	4314      	orrs	r4, r2
  406db8:	f843 4b04 	str.w	r4, [r3], #4
  406dbc:	f851 2b04 	ldr.w	r2, [r1], #4
  406dc0:	458e      	cmp	lr, r1
  406dc2:	fa22 f20c 	lsr.w	r2, r2, ip
  406dc6:	d8f3      	bhi.n	406db0 <__lshift+0x5c>
  406dc8:	601a      	str	r2, [r3, #0]
  406dca:	b10a      	cbz	r2, 406dd0 <__lshift+0x7c>
  406dcc:	f108 0502 	add.w	r5, r8, #2
  406dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406dd2:	6872      	ldr	r2, [r6, #4]
  406dd4:	3d01      	subs	r5, #1
  406dd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406dda:	6105      	str	r5, [r0, #16]
  406ddc:	6031      	str	r1, [r6, #0]
  406dde:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406de6:	3b04      	subs	r3, #4
  406de8:	f851 2b04 	ldr.w	r2, [r1], #4
  406dec:	f843 2f04 	str.w	r2, [r3, #4]!
  406df0:	458e      	cmp	lr, r1
  406df2:	d8f9      	bhi.n	406de8 <__lshift+0x94>
  406df4:	e7ec      	b.n	406dd0 <__lshift+0x7c>
  406df6:	bf00      	nop

00406df8 <__mcmp>:
  406df8:	b430      	push	{r4, r5}
  406dfa:	690b      	ldr	r3, [r1, #16]
  406dfc:	4605      	mov	r5, r0
  406dfe:	6900      	ldr	r0, [r0, #16]
  406e00:	1ac0      	subs	r0, r0, r3
  406e02:	d10f      	bne.n	406e24 <__mcmp+0x2c>
  406e04:	009b      	lsls	r3, r3, #2
  406e06:	3514      	adds	r5, #20
  406e08:	3114      	adds	r1, #20
  406e0a:	4419      	add	r1, r3
  406e0c:	442b      	add	r3, r5
  406e0e:	e001      	b.n	406e14 <__mcmp+0x1c>
  406e10:	429d      	cmp	r5, r3
  406e12:	d207      	bcs.n	406e24 <__mcmp+0x2c>
  406e14:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406e18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406e1c:	4294      	cmp	r4, r2
  406e1e:	d0f7      	beq.n	406e10 <__mcmp+0x18>
  406e20:	d302      	bcc.n	406e28 <__mcmp+0x30>
  406e22:	2001      	movs	r0, #1
  406e24:	bc30      	pop	{r4, r5}
  406e26:	4770      	bx	lr
  406e28:	f04f 30ff 	mov.w	r0, #4294967295
  406e2c:	e7fa      	b.n	406e24 <__mcmp+0x2c>
  406e2e:	bf00      	nop

00406e30 <__mdiff>:
  406e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406e34:	690f      	ldr	r7, [r1, #16]
  406e36:	460e      	mov	r6, r1
  406e38:	6911      	ldr	r1, [r2, #16]
  406e3a:	1a7f      	subs	r7, r7, r1
  406e3c:	2f00      	cmp	r7, #0
  406e3e:	4690      	mov	r8, r2
  406e40:	d117      	bne.n	406e72 <__mdiff+0x42>
  406e42:	0089      	lsls	r1, r1, #2
  406e44:	f106 0514 	add.w	r5, r6, #20
  406e48:	f102 0e14 	add.w	lr, r2, #20
  406e4c:	186b      	adds	r3, r5, r1
  406e4e:	4471      	add	r1, lr
  406e50:	e001      	b.n	406e56 <__mdiff+0x26>
  406e52:	429d      	cmp	r5, r3
  406e54:	d25c      	bcs.n	406f10 <__mdiff+0xe0>
  406e56:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  406e5a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  406e5e:	42a2      	cmp	r2, r4
  406e60:	d0f7      	beq.n	406e52 <__mdiff+0x22>
  406e62:	d25e      	bcs.n	406f22 <__mdiff+0xf2>
  406e64:	4633      	mov	r3, r6
  406e66:	462c      	mov	r4, r5
  406e68:	4646      	mov	r6, r8
  406e6a:	4675      	mov	r5, lr
  406e6c:	4698      	mov	r8, r3
  406e6e:	2701      	movs	r7, #1
  406e70:	e005      	b.n	406e7e <__mdiff+0x4e>
  406e72:	db58      	blt.n	406f26 <__mdiff+0xf6>
  406e74:	f106 0514 	add.w	r5, r6, #20
  406e78:	f108 0414 	add.w	r4, r8, #20
  406e7c:	2700      	movs	r7, #0
  406e7e:	6871      	ldr	r1, [r6, #4]
  406e80:	f7ff fdbc 	bl	4069fc <_Balloc>
  406e84:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406e88:	6936      	ldr	r6, [r6, #16]
  406e8a:	60c7      	str	r7, [r0, #12]
  406e8c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406e90:	46a6      	mov	lr, r4
  406e92:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406e96:	f100 0414 	add.w	r4, r0, #20
  406e9a:	2300      	movs	r3, #0
  406e9c:	f85e 1b04 	ldr.w	r1, [lr], #4
  406ea0:	f855 8b04 	ldr.w	r8, [r5], #4
  406ea4:	b28a      	uxth	r2, r1
  406ea6:	fa13 f388 	uxtah	r3, r3, r8
  406eaa:	0c09      	lsrs	r1, r1, #16
  406eac:	1a9a      	subs	r2, r3, r2
  406eae:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  406eb2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406eb6:	b292      	uxth	r2, r2
  406eb8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406ebc:	45f4      	cmp	ip, lr
  406ebe:	f844 2b04 	str.w	r2, [r4], #4
  406ec2:	ea4f 4323 	mov.w	r3, r3, asr #16
  406ec6:	d8e9      	bhi.n	406e9c <__mdiff+0x6c>
  406ec8:	42af      	cmp	r7, r5
  406eca:	d917      	bls.n	406efc <__mdiff+0xcc>
  406ecc:	46a4      	mov	ip, r4
  406ece:	46ae      	mov	lr, r5
  406ed0:	f85e 2b04 	ldr.w	r2, [lr], #4
  406ed4:	fa13 f382 	uxtah	r3, r3, r2
  406ed8:	1419      	asrs	r1, r3, #16
  406eda:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  406ede:	b29b      	uxth	r3, r3
  406ee0:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  406ee4:	4577      	cmp	r7, lr
  406ee6:	f84c 2b04 	str.w	r2, [ip], #4
  406eea:	ea4f 4321 	mov.w	r3, r1, asr #16
  406eee:	d8ef      	bhi.n	406ed0 <__mdiff+0xa0>
  406ef0:	43ed      	mvns	r5, r5
  406ef2:	442f      	add	r7, r5
  406ef4:	f027 0703 	bic.w	r7, r7, #3
  406ef8:	3704      	adds	r7, #4
  406efa:	443c      	add	r4, r7
  406efc:	3c04      	subs	r4, #4
  406efe:	b922      	cbnz	r2, 406f0a <__mdiff+0xda>
  406f00:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406f04:	3e01      	subs	r6, #1
  406f06:	2b00      	cmp	r3, #0
  406f08:	d0fa      	beq.n	406f00 <__mdiff+0xd0>
  406f0a:	6106      	str	r6, [r0, #16]
  406f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406f10:	2100      	movs	r1, #0
  406f12:	f7ff fd73 	bl	4069fc <_Balloc>
  406f16:	2201      	movs	r2, #1
  406f18:	2300      	movs	r3, #0
  406f1a:	6102      	str	r2, [r0, #16]
  406f1c:	6143      	str	r3, [r0, #20]
  406f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406f22:	4674      	mov	r4, lr
  406f24:	e7ab      	b.n	406e7e <__mdiff+0x4e>
  406f26:	4633      	mov	r3, r6
  406f28:	f106 0414 	add.w	r4, r6, #20
  406f2c:	f102 0514 	add.w	r5, r2, #20
  406f30:	4616      	mov	r6, r2
  406f32:	2701      	movs	r7, #1
  406f34:	4698      	mov	r8, r3
  406f36:	e7a2      	b.n	406e7e <__mdiff+0x4e>

00406f38 <__d2b>:
  406f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406f3c:	b082      	sub	sp, #8
  406f3e:	2101      	movs	r1, #1
  406f40:	461c      	mov	r4, r3
  406f42:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406f46:	4615      	mov	r5, r2
  406f48:	9e08      	ldr	r6, [sp, #32]
  406f4a:	f7ff fd57 	bl	4069fc <_Balloc>
  406f4e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406f52:	4680      	mov	r8, r0
  406f54:	b10f      	cbz	r7, 406f5a <__d2b+0x22>
  406f56:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  406f5a:	9401      	str	r4, [sp, #4]
  406f5c:	b31d      	cbz	r5, 406fa6 <__d2b+0x6e>
  406f5e:	a802      	add	r0, sp, #8
  406f60:	f840 5d08 	str.w	r5, [r0, #-8]!
  406f64:	f7ff fdda 	bl	406b1c <__lo0bits>
  406f68:	2800      	cmp	r0, #0
  406f6a:	d134      	bne.n	406fd6 <__d2b+0x9e>
  406f6c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406f70:	f8c8 2014 	str.w	r2, [r8, #20]
  406f74:	2b00      	cmp	r3, #0
  406f76:	bf0c      	ite	eq
  406f78:	2101      	moveq	r1, #1
  406f7a:	2102      	movne	r1, #2
  406f7c:	f8c8 3018 	str.w	r3, [r8, #24]
  406f80:	f8c8 1010 	str.w	r1, [r8, #16]
  406f84:	b9df      	cbnz	r7, 406fbe <__d2b+0x86>
  406f86:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  406f8a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406f8e:	6030      	str	r0, [r6, #0]
  406f90:	6918      	ldr	r0, [r3, #16]
  406f92:	f7ff fda3 	bl	406adc <__hi0bits>
  406f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406f98:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406f9c:	6018      	str	r0, [r3, #0]
  406f9e:	4640      	mov	r0, r8
  406fa0:	b002      	add	sp, #8
  406fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406fa6:	a801      	add	r0, sp, #4
  406fa8:	f7ff fdb8 	bl	406b1c <__lo0bits>
  406fac:	9b01      	ldr	r3, [sp, #4]
  406fae:	f8c8 3014 	str.w	r3, [r8, #20]
  406fb2:	2101      	movs	r1, #1
  406fb4:	3020      	adds	r0, #32
  406fb6:	f8c8 1010 	str.w	r1, [r8, #16]
  406fba:	2f00      	cmp	r7, #0
  406fbc:	d0e3      	beq.n	406f86 <__d2b+0x4e>
  406fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406fc0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  406fc4:	4407      	add	r7, r0
  406fc6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  406fca:	6037      	str	r7, [r6, #0]
  406fcc:	6018      	str	r0, [r3, #0]
  406fce:	4640      	mov	r0, r8
  406fd0:	b002      	add	sp, #8
  406fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406fd6:	e89d 000a 	ldmia.w	sp, {r1, r3}
  406fda:	f1c0 0220 	rsb	r2, r0, #32
  406fde:	fa03 f202 	lsl.w	r2, r3, r2
  406fe2:	430a      	orrs	r2, r1
  406fe4:	40c3      	lsrs	r3, r0
  406fe6:	9301      	str	r3, [sp, #4]
  406fe8:	f8c8 2014 	str.w	r2, [r8, #20]
  406fec:	e7c2      	b.n	406f74 <__d2b+0x3c>
  406fee:	bf00      	nop

00406ff0 <_sbrk_r>:
  406ff0:	b538      	push	{r3, r4, r5, lr}
  406ff2:	4c07      	ldr	r4, [pc, #28]	; (407010 <_sbrk_r+0x20>)
  406ff4:	2300      	movs	r3, #0
  406ff6:	4605      	mov	r5, r0
  406ff8:	4608      	mov	r0, r1
  406ffa:	6023      	str	r3, [r4, #0]
  406ffc:	f7fb ff3e 	bl	402e7c <_sbrk>
  407000:	1c43      	adds	r3, r0, #1
  407002:	d000      	beq.n	407006 <_sbrk_r+0x16>
  407004:	bd38      	pop	{r3, r4, r5, pc}
  407006:	6823      	ldr	r3, [r4, #0]
  407008:	2b00      	cmp	r3, #0
  40700a:	d0fb      	beq.n	407004 <_sbrk_r+0x14>
  40700c:	602b      	str	r3, [r5, #0]
  40700e:	bd38      	pop	{r3, r4, r5, pc}
  407010:	2000d1fc 	.word	0x2000d1fc

00407014 <strchr>:
  407014:	b2c9      	uxtb	r1, r1
  407016:	2900      	cmp	r1, #0
  407018:	d041      	beq.n	40709e <strchr+0x8a>
  40701a:	0782      	lsls	r2, r0, #30
  40701c:	b4f0      	push	{r4, r5, r6, r7}
  40701e:	d067      	beq.n	4070f0 <strchr+0xdc>
  407020:	7803      	ldrb	r3, [r0, #0]
  407022:	2b00      	cmp	r3, #0
  407024:	d068      	beq.n	4070f8 <strchr+0xe4>
  407026:	4299      	cmp	r1, r3
  407028:	d037      	beq.n	40709a <strchr+0x86>
  40702a:	1c43      	adds	r3, r0, #1
  40702c:	e004      	b.n	407038 <strchr+0x24>
  40702e:	f813 0b01 	ldrb.w	r0, [r3], #1
  407032:	b390      	cbz	r0, 40709a <strchr+0x86>
  407034:	4281      	cmp	r1, r0
  407036:	d02f      	beq.n	407098 <strchr+0x84>
  407038:	079a      	lsls	r2, r3, #30
  40703a:	461c      	mov	r4, r3
  40703c:	d1f7      	bne.n	40702e <strchr+0x1a>
  40703e:	6825      	ldr	r5, [r4, #0]
  407040:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  407044:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  407048:	ea83 0605 	eor.w	r6, r3, r5
  40704c:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  407050:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  407054:	ea20 0006 	bic.w	r0, r0, r6
  407058:	ea22 0205 	bic.w	r2, r2, r5
  40705c:	4302      	orrs	r2, r0
  40705e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407062:	d111      	bne.n	407088 <strchr+0x74>
  407064:	4620      	mov	r0, r4
  407066:	f850 6f04 	ldr.w	r6, [r0, #4]!
  40706a:	ea83 0706 	eor.w	r7, r3, r6
  40706e:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  407072:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  407076:	ea25 0507 	bic.w	r5, r5, r7
  40707a:	ea22 0206 	bic.w	r2, r2, r6
  40707e:	432a      	orrs	r2, r5
  407080:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407084:	d0ef      	beq.n	407066 <strchr+0x52>
  407086:	4604      	mov	r4, r0
  407088:	7820      	ldrb	r0, [r4, #0]
  40708a:	b918      	cbnz	r0, 407094 <strchr+0x80>
  40708c:	e005      	b.n	40709a <strchr+0x86>
  40708e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  407092:	b110      	cbz	r0, 40709a <strchr+0x86>
  407094:	4281      	cmp	r1, r0
  407096:	d1fa      	bne.n	40708e <strchr+0x7a>
  407098:	4620      	mov	r0, r4
  40709a:	bcf0      	pop	{r4, r5, r6, r7}
  40709c:	4770      	bx	lr
  40709e:	0783      	lsls	r3, r0, #30
  4070a0:	d024      	beq.n	4070ec <strchr+0xd8>
  4070a2:	7803      	ldrb	r3, [r0, #0]
  4070a4:	2b00      	cmp	r3, #0
  4070a6:	d0f9      	beq.n	40709c <strchr+0x88>
  4070a8:	1c43      	adds	r3, r0, #1
  4070aa:	e003      	b.n	4070b4 <strchr+0xa0>
  4070ac:	7802      	ldrb	r2, [r0, #0]
  4070ae:	3301      	adds	r3, #1
  4070b0:	2a00      	cmp	r2, #0
  4070b2:	d0f3      	beq.n	40709c <strchr+0x88>
  4070b4:	0799      	lsls	r1, r3, #30
  4070b6:	4618      	mov	r0, r3
  4070b8:	d1f8      	bne.n	4070ac <strchr+0x98>
  4070ba:	6819      	ldr	r1, [r3, #0]
  4070bc:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4070c0:	ea22 0201 	bic.w	r2, r2, r1
  4070c4:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4070c8:	d108      	bne.n	4070dc <strchr+0xc8>
  4070ca:	f853 1f04 	ldr.w	r1, [r3, #4]!
  4070ce:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4070d2:	ea22 0201 	bic.w	r2, r2, r1
  4070d6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4070da:	d0f6      	beq.n	4070ca <strchr+0xb6>
  4070dc:	781a      	ldrb	r2, [r3, #0]
  4070de:	4618      	mov	r0, r3
  4070e0:	b142      	cbz	r2, 4070f4 <strchr+0xe0>
  4070e2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4070e6:	2b00      	cmp	r3, #0
  4070e8:	d1fb      	bne.n	4070e2 <strchr+0xce>
  4070ea:	4770      	bx	lr
  4070ec:	4603      	mov	r3, r0
  4070ee:	e7e4      	b.n	4070ba <strchr+0xa6>
  4070f0:	4604      	mov	r4, r0
  4070f2:	e7a4      	b.n	40703e <strchr+0x2a>
  4070f4:	4618      	mov	r0, r3
  4070f6:	4770      	bx	lr
  4070f8:	4618      	mov	r0, r3
  4070fa:	e7ce      	b.n	40709a <strchr+0x86>
  4070fc:	0000      	movs	r0, r0
	...

00407100 <strlen>:
  407100:	f890 f000 	pld	[r0]
  407104:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407108:	f020 0107 	bic.w	r1, r0, #7
  40710c:	f06f 0c00 	mvn.w	ip, #0
  407110:	f010 0407 	ands.w	r4, r0, #7
  407114:	f891 f020 	pld	[r1, #32]
  407118:	f040 8049 	bne.w	4071ae <strlen+0xae>
  40711c:	f04f 0400 	mov.w	r4, #0
  407120:	f06f 0007 	mvn.w	r0, #7
  407124:	e9d1 2300 	ldrd	r2, r3, [r1]
  407128:	f891 f040 	pld	[r1, #64]	; 0x40
  40712c:	f100 0008 	add.w	r0, r0, #8
  407130:	fa82 f24c 	uadd8	r2, r2, ip
  407134:	faa4 f28c 	sel	r2, r4, ip
  407138:	fa83 f34c 	uadd8	r3, r3, ip
  40713c:	faa2 f38c 	sel	r3, r2, ip
  407140:	bb4b      	cbnz	r3, 407196 <strlen+0x96>
  407142:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  407146:	fa82 f24c 	uadd8	r2, r2, ip
  40714a:	f100 0008 	add.w	r0, r0, #8
  40714e:	faa4 f28c 	sel	r2, r4, ip
  407152:	fa83 f34c 	uadd8	r3, r3, ip
  407156:	faa2 f38c 	sel	r3, r2, ip
  40715a:	b9e3      	cbnz	r3, 407196 <strlen+0x96>
  40715c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  407160:	fa82 f24c 	uadd8	r2, r2, ip
  407164:	f100 0008 	add.w	r0, r0, #8
  407168:	faa4 f28c 	sel	r2, r4, ip
  40716c:	fa83 f34c 	uadd8	r3, r3, ip
  407170:	faa2 f38c 	sel	r3, r2, ip
  407174:	b97b      	cbnz	r3, 407196 <strlen+0x96>
  407176:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40717a:	f101 0120 	add.w	r1, r1, #32
  40717e:	fa82 f24c 	uadd8	r2, r2, ip
  407182:	f100 0008 	add.w	r0, r0, #8
  407186:	faa4 f28c 	sel	r2, r4, ip
  40718a:	fa83 f34c 	uadd8	r3, r3, ip
  40718e:	faa2 f38c 	sel	r3, r2, ip
  407192:	2b00      	cmp	r3, #0
  407194:	d0c6      	beq.n	407124 <strlen+0x24>
  407196:	2a00      	cmp	r2, #0
  407198:	bf04      	itt	eq
  40719a:	3004      	addeq	r0, #4
  40719c:	461a      	moveq	r2, r3
  40719e:	ba12      	rev	r2, r2
  4071a0:	fab2 f282 	clz	r2, r2
  4071a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4071a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4071ac:	4770      	bx	lr
  4071ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4071b2:	f004 0503 	and.w	r5, r4, #3
  4071b6:	f1c4 0000 	rsb	r0, r4, #0
  4071ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4071be:	f014 0f04 	tst.w	r4, #4
  4071c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4071c6:	fa0c f505 	lsl.w	r5, ip, r5
  4071ca:	ea62 0205 	orn	r2, r2, r5
  4071ce:	bf1c      	itt	ne
  4071d0:	ea63 0305 	ornne	r3, r3, r5
  4071d4:	4662      	movne	r2, ip
  4071d6:	f04f 0400 	mov.w	r4, #0
  4071da:	e7a9      	b.n	407130 <strlen+0x30>

004071dc <__ssprint_r>:
  4071dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4071e0:	6893      	ldr	r3, [r2, #8]
  4071e2:	b083      	sub	sp, #12
  4071e4:	4690      	mov	r8, r2
  4071e6:	2b00      	cmp	r3, #0
  4071e8:	d070      	beq.n	4072cc <__ssprint_r+0xf0>
  4071ea:	4682      	mov	sl, r0
  4071ec:	460c      	mov	r4, r1
  4071ee:	6817      	ldr	r7, [r2, #0]
  4071f0:	688d      	ldr	r5, [r1, #8]
  4071f2:	6808      	ldr	r0, [r1, #0]
  4071f4:	e042      	b.n	40727c <__ssprint_r+0xa0>
  4071f6:	89a3      	ldrh	r3, [r4, #12]
  4071f8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4071fc:	d02e      	beq.n	40725c <__ssprint_r+0x80>
  4071fe:	6965      	ldr	r5, [r4, #20]
  407200:	6921      	ldr	r1, [r4, #16]
  407202:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  407206:	eba0 0b01 	sub.w	fp, r0, r1
  40720a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40720e:	f10b 0001 	add.w	r0, fp, #1
  407212:	106d      	asrs	r5, r5, #1
  407214:	4430      	add	r0, r6
  407216:	42a8      	cmp	r0, r5
  407218:	462a      	mov	r2, r5
  40721a:	bf84      	itt	hi
  40721c:	4605      	movhi	r5, r0
  40721e:	462a      	movhi	r2, r5
  407220:	055b      	lsls	r3, r3, #21
  407222:	d538      	bpl.n	407296 <__ssprint_r+0xba>
  407224:	4611      	mov	r1, r2
  407226:	4650      	mov	r0, sl
  407228:	f7ff f814 	bl	406254 <_malloc_r>
  40722c:	2800      	cmp	r0, #0
  40722e:	d03c      	beq.n	4072aa <__ssprint_r+0xce>
  407230:	465a      	mov	r2, fp
  407232:	6921      	ldr	r1, [r4, #16]
  407234:	9001      	str	r0, [sp, #4]
  407236:	f7ff fb43 	bl	4068c0 <memcpy>
  40723a:	89a2      	ldrh	r2, [r4, #12]
  40723c:	9b01      	ldr	r3, [sp, #4]
  40723e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  407242:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  407246:	81a2      	strh	r2, [r4, #12]
  407248:	eba5 020b 	sub.w	r2, r5, fp
  40724c:	eb03 000b 	add.w	r0, r3, fp
  407250:	6165      	str	r5, [r4, #20]
  407252:	6123      	str	r3, [r4, #16]
  407254:	6020      	str	r0, [r4, #0]
  407256:	60a2      	str	r2, [r4, #8]
  407258:	4635      	mov	r5, r6
  40725a:	46b3      	mov	fp, r6
  40725c:	465a      	mov	r2, fp
  40725e:	4649      	mov	r1, r9
  407260:	f000 fa08 	bl	407674 <memmove>
  407264:	f8d8 3008 	ldr.w	r3, [r8, #8]
  407268:	68a2      	ldr	r2, [r4, #8]
  40726a:	6820      	ldr	r0, [r4, #0]
  40726c:	1b55      	subs	r5, r2, r5
  40726e:	4458      	add	r0, fp
  407270:	1b9e      	subs	r6, r3, r6
  407272:	60a5      	str	r5, [r4, #8]
  407274:	6020      	str	r0, [r4, #0]
  407276:	f8c8 6008 	str.w	r6, [r8, #8]
  40727a:	b33e      	cbz	r6, 4072cc <__ssprint_r+0xf0>
  40727c:	687e      	ldr	r6, [r7, #4]
  40727e:	463b      	mov	r3, r7
  407280:	3708      	adds	r7, #8
  407282:	2e00      	cmp	r6, #0
  407284:	d0fa      	beq.n	40727c <__ssprint_r+0xa0>
  407286:	42ae      	cmp	r6, r5
  407288:	f8d3 9000 	ldr.w	r9, [r3]
  40728c:	46ab      	mov	fp, r5
  40728e:	d2b2      	bcs.n	4071f6 <__ssprint_r+0x1a>
  407290:	4635      	mov	r5, r6
  407292:	46b3      	mov	fp, r6
  407294:	e7e2      	b.n	40725c <__ssprint_r+0x80>
  407296:	4650      	mov	r0, sl
  407298:	f000 fa50 	bl	40773c <_realloc_r>
  40729c:	4603      	mov	r3, r0
  40729e:	2800      	cmp	r0, #0
  4072a0:	d1d2      	bne.n	407248 <__ssprint_r+0x6c>
  4072a2:	6921      	ldr	r1, [r4, #16]
  4072a4:	4650      	mov	r0, sl
  4072a6:	f000 f8e9 	bl	40747c <_free_r>
  4072aa:	230c      	movs	r3, #12
  4072ac:	f8ca 3000 	str.w	r3, [sl]
  4072b0:	89a3      	ldrh	r3, [r4, #12]
  4072b2:	2200      	movs	r2, #0
  4072b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4072b8:	f04f 30ff 	mov.w	r0, #4294967295
  4072bc:	81a3      	strh	r3, [r4, #12]
  4072be:	f8c8 2008 	str.w	r2, [r8, #8]
  4072c2:	f8c8 2004 	str.w	r2, [r8, #4]
  4072c6:	b003      	add	sp, #12
  4072c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4072cc:	2000      	movs	r0, #0
  4072ce:	f8c8 0004 	str.w	r0, [r8, #4]
  4072d2:	b003      	add	sp, #12
  4072d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004072d8 <__register_exitproc>:
  4072d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4072dc:	4c25      	ldr	r4, [pc, #148]	; (407374 <__register_exitproc+0x9c>)
  4072de:	6825      	ldr	r5, [r4, #0]
  4072e0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4072e4:	4606      	mov	r6, r0
  4072e6:	4688      	mov	r8, r1
  4072e8:	4692      	mov	sl, r2
  4072ea:	4699      	mov	r9, r3
  4072ec:	b3c4      	cbz	r4, 407360 <__register_exitproc+0x88>
  4072ee:	6860      	ldr	r0, [r4, #4]
  4072f0:	281f      	cmp	r0, #31
  4072f2:	dc17      	bgt.n	407324 <__register_exitproc+0x4c>
  4072f4:	1c43      	adds	r3, r0, #1
  4072f6:	b176      	cbz	r6, 407316 <__register_exitproc+0x3e>
  4072f8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4072fc:	2201      	movs	r2, #1
  4072fe:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  407302:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  407306:	4082      	lsls	r2, r0
  407308:	4311      	orrs	r1, r2
  40730a:	2e02      	cmp	r6, #2
  40730c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  407310:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  407314:	d01e      	beq.n	407354 <__register_exitproc+0x7c>
  407316:	3002      	adds	r0, #2
  407318:	6063      	str	r3, [r4, #4]
  40731a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40731e:	2000      	movs	r0, #0
  407320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407324:	4b14      	ldr	r3, [pc, #80]	; (407378 <__register_exitproc+0xa0>)
  407326:	b303      	cbz	r3, 40736a <__register_exitproc+0x92>
  407328:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40732c:	f3af 8000 	nop.w
  407330:	4604      	mov	r4, r0
  407332:	b1d0      	cbz	r0, 40736a <__register_exitproc+0x92>
  407334:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  407338:	2700      	movs	r7, #0
  40733a:	e880 0088 	stmia.w	r0, {r3, r7}
  40733e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407342:	4638      	mov	r0, r7
  407344:	2301      	movs	r3, #1
  407346:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40734a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40734e:	2e00      	cmp	r6, #0
  407350:	d0e1      	beq.n	407316 <__register_exitproc+0x3e>
  407352:	e7d1      	b.n	4072f8 <__register_exitproc+0x20>
  407354:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  407358:	430a      	orrs	r2, r1
  40735a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40735e:	e7da      	b.n	407316 <__register_exitproc+0x3e>
  407360:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  407364:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407368:	e7c1      	b.n	4072ee <__register_exitproc+0x16>
  40736a:	f04f 30ff 	mov.w	r0, #4294967295
  40736e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407372:	bf00      	nop
  407374:	00409128 	.word	0x00409128
  407378:	00000000 	.word	0x00000000

0040737c <_calloc_r>:
  40737c:	b510      	push	{r4, lr}
  40737e:	fb02 f101 	mul.w	r1, r2, r1
  407382:	f7fe ff67 	bl	406254 <_malloc_r>
  407386:	4604      	mov	r4, r0
  407388:	b1d8      	cbz	r0, 4073c2 <_calloc_r+0x46>
  40738a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40738e:	f022 0203 	bic.w	r2, r2, #3
  407392:	3a04      	subs	r2, #4
  407394:	2a24      	cmp	r2, #36	; 0x24
  407396:	d818      	bhi.n	4073ca <_calloc_r+0x4e>
  407398:	2a13      	cmp	r2, #19
  40739a:	d914      	bls.n	4073c6 <_calloc_r+0x4a>
  40739c:	2300      	movs	r3, #0
  40739e:	2a1b      	cmp	r2, #27
  4073a0:	6003      	str	r3, [r0, #0]
  4073a2:	6043      	str	r3, [r0, #4]
  4073a4:	d916      	bls.n	4073d4 <_calloc_r+0x58>
  4073a6:	2a24      	cmp	r2, #36	; 0x24
  4073a8:	6083      	str	r3, [r0, #8]
  4073aa:	60c3      	str	r3, [r0, #12]
  4073ac:	bf11      	iteee	ne
  4073ae:	f100 0210 	addne.w	r2, r0, #16
  4073b2:	6103      	streq	r3, [r0, #16]
  4073b4:	6143      	streq	r3, [r0, #20]
  4073b6:	f100 0218 	addeq.w	r2, r0, #24
  4073ba:	2300      	movs	r3, #0
  4073bc:	6013      	str	r3, [r2, #0]
  4073be:	6053      	str	r3, [r2, #4]
  4073c0:	6093      	str	r3, [r2, #8]
  4073c2:	4620      	mov	r0, r4
  4073c4:	bd10      	pop	{r4, pc}
  4073c6:	4602      	mov	r2, r0
  4073c8:	e7f7      	b.n	4073ba <_calloc_r+0x3e>
  4073ca:	2100      	movs	r1, #0
  4073cc:	f7fc fa4c 	bl	403868 <memset>
  4073d0:	4620      	mov	r0, r4
  4073d2:	bd10      	pop	{r4, pc}
  4073d4:	f100 0208 	add.w	r2, r0, #8
  4073d8:	e7ef      	b.n	4073ba <_calloc_r+0x3e>
  4073da:	bf00      	nop

004073dc <_malloc_trim_r>:
  4073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4073de:	4f24      	ldr	r7, [pc, #144]	; (407470 <_malloc_trim_r+0x94>)
  4073e0:	460c      	mov	r4, r1
  4073e2:	4606      	mov	r6, r0
  4073e4:	f7ff fb06 	bl	4069f4 <__malloc_lock>
  4073e8:	68bb      	ldr	r3, [r7, #8]
  4073ea:	685d      	ldr	r5, [r3, #4]
  4073ec:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4073f0:	310f      	adds	r1, #15
  4073f2:	f025 0503 	bic.w	r5, r5, #3
  4073f6:	4429      	add	r1, r5
  4073f8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4073fc:	f021 010f 	bic.w	r1, r1, #15
  407400:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407404:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407408:	db07      	blt.n	40741a <_malloc_trim_r+0x3e>
  40740a:	2100      	movs	r1, #0
  40740c:	4630      	mov	r0, r6
  40740e:	f7ff fdef 	bl	406ff0 <_sbrk_r>
  407412:	68bb      	ldr	r3, [r7, #8]
  407414:	442b      	add	r3, r5
  407416:	4298      	cmp	r0, r3
  407418:	d004      	beq.n	407424 <_malloc_trim_r+0x48>
  40741a:	4630      	mov	r0, r6
  40741c:	f7ff faec 	bl	4069f8 <__malloc_unlock>
  407420:	2000      	movs	r0, #0
  407422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407424:	4261      	negs	r1, r4
  407426:	4630      	mov	r0, r6
  407428:	f7ff fde2 	bl	406ff0 <_sbrk_r>
  40742c:	3001      	adds	r0, #1
  40742e:	d00d      	beq.n	40744c <_malloc_trim_r+0x70>
  407430:	4b10      	ldr	r3, [pc, #64]	; (407474 <_malloc_trim_r+0x98>)
  407432:	68ba      	ldr	r2, [r7, #8]
  407434:	6819      	ldr	r1, [r3, #0]
  407436:	1b2d      	subs	r5, r5, r4
  407438:	f045 0501 	orr.w	r5, r5, #1
  40743c:	4630      	mov	r0, r6
  40743e:	1b09      	subs	r1, r1, r4
  407440:	6055      	str	r5, [r2, #4]
  407442:	6019      	str	r1, [r3, #0]
  407444:	f7ff fad8 	bl	4069f8 <__malloc_unlock>
  407448:	2001      	movs	r0, #1
  40744a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40744c:	2100      	movs	r1, #0
  40744e:	4630      	mov	r0, r6
  407450:	f7ff fdce 	bl	406ff0 <_sbrk_r>
  407454:	68ba      	ldr	r2, [r7, #8]
  407456:	1a83      	subs	r3, r0, r2
  407458:	2b0f      	cmp	r3, #15
  40745a:	ddde      	ble.n	40741a <_malloc_trim_r+0x3e>
  40745c:	4c06      	ldr	r4, [pc, #24]	; (407478 <_malloc_trim_r+0x9c>)
  40745e:	4905      	ldr	r1, [pc, #20]	; (407474 <_malloc_trim_r+0x98>)
  407460:	6824      	ldr	r4, [r4, #0]
  407462:	f043 0301 	orr.w	r3, r3, #1
  407466:	1b00      	subs	r0, r0, r4
  407468:	6053      	str	r3, [r2, #4]
  40746a:	6008      	str	r0, [r1, #0]
  40746c:	e7d5      	b.n	40741a <_malloc_trim_r+0x3e>
  40746e:	bf00      	nop
  407470:	20000440 	.word	0x20000440
  407474:	20000a80 	.word	0x20000a80
  407478:	20000848 	.word	0x20000848

0040747c <_free_r>:
  40747c:	2900      	cmp	r1, #0
  40747e:	d044      	beq.n	40750a <_free_r+0x8e>
  407480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407484:	460d      	mov	r5, r1
  407486:	4680      	mov	r8, r0
  407488:	f7ff fab4 	bl	4069f4 <__malloc_lock>
  40748c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407490:	4969      	ldr	r1, [pc, #420]	; (407638 <_free_r+0x1bc>)
  407492:	f027 0301 	bic.w	r3, r7, #1
  407496:	f1a5 0408 	sub.w	r4, r5, #8
  40749a:	18e2      	adds	r2, r4, r3
  40749c:	688e      	ldr	r6, [r1, #8]
  40749e:	6850      	ldr	r0, [r2, #4]
  4074a0:	42b2      	cmp	r2, r6
  4074a2:	f020 0003 	bic.w	r0, r0, #3
  4074a6:	d05e      	beq.n	407566 <_free_r+0xea>
  4074a8:	07fe      	lsls	r6, r7, #31
  4074aa:	6050      	str	r0, [r2, #4]
  4074ac:	d40b      	bmi.n	4074c6 <_free_r+0x4a>
  4074ae:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4074b2:	1be4      	subs	r4, r4, r7
  4074b4:	f101 0e08 	add.w	lr, r1, #8
  4074b8:	68a5      	ldr	r5, [r4, #8]
  4074ba:	4575      	cmp	r5, lr
  4074bc:	443b      	add	r3, r7
  4074be:	d06d      	beq.n	40759c <_free_r+0x120>
  4074c0:	68e7      	ldr	r7, [r4, #12]
  4074c2:	60ef      	str	r7, [r5, #12]
  4074c4:	60bd      	str	r5, [r7, #8]
  4074c6:	1815      	adds	r5, r2, r0
  4074c8:	686d      	ldr	r5, [r5, #4]
  4074ca:	07ed      	lsls	r5, r5, #31
  4074cc:	d53e      	bpl.n	40754c <_free_r+0xd0>
  4074ce:	f043 0201 	orr.w	r2, r3, #1
  4074d2:	6062      	str	r2, [r4, #4]
  4074d4:	50e3      	str	r3, [r4, r3]
  4074d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4074da:	d217      	bcs.n	40750c <_free_r+0x90>
  4074dc:	08db      	lsrs	r3, r3, #3
  4074de:	1c58      	adds	r0, r3, #1
  4074e0:	109a      	asrs	r2, r3, #2
  4074e2:	684d      	ldr	r5, [r1, #4]
  4074e4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4074e8:	60a7      	str	r7, [r4, #8]
  4074ea:	2301      	movs	r3, #1
  4074ec:	4093      	lsls	r3, r2
  4074ee:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4074f2:	432b      	orrs	r3, r5
  4074f4:	3a08      	subs	r2, #8
  4074f6:	60e2      	str	r2, [r4, #12]
  4074f8:	604b      	str	r3, [r1, #4]
  4074fa:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4074fe:	60fc      	str	r4, [r7, #12]
  407500:	4640      	mov	r0, r8
  407502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407506:	f7ff ba77 	b.w	4069f8 <__malloc_unlock>
  40750a:	4770      	bx	lr
  40750c:	0a5a      	lsrs	r2, r3, #9
  40750e:	2a04      	cmp	r2, #4
  407510:	d852      	bhi.n	4075b8 <_free_r+0x13c>
  407512:	099a      	lsrs	r2, r3, #6
  407514:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407518:	00ff      	lsls	r7, r7, #3
  40751a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40751e:	19c8      	adds	r0, r1, r7
  407520:	59ca      	ldr	r2, [r1, r7]
  407522:	3808      	subs	r0, #8
  407524:	4290      	cmp	r0, r2
  407526:	d04f      	beq.n	4075c8 <_free_r+0x14c>
  407528:	6851      	ldr	r1, [r2, #4]
  40752a:	f021 0103 	bic.w	r1, r1, #3
  40752e:	428b      	cmp	r3, r1
  407530:	d232      	bcs.n	407598 <_free_r+0x11c>
  407532:	6892      	ldr	r2, [r2, #8]
  407534:	4290      	cmp	r0, r2
  407536:	d1f7      	bne.n	407528 <_free_r+0xac>
  407538:	68c3      	ldr	r3, [r0, #12]
  40753a:	60a0      	str	r0, [r4, #8]
  40753c:	60e3      	str	r3, [r4, #12]
  40753e:	609c      	str	r4, [r3, #8]
  407540:	60c4      	str	r4, [r0, #12]
  407542:	4640      	mov	r0, r8
  407544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407548:	f7ff ba56 	b.w	4069f8 <__malloc_unlock>
  40754c:	6895      	ldr	r5, [r2, #8]
  40754e:	4f3b      	ldr	r7, [pc, #236]	; (40763c <_free_r+0x1c0>)
  407550:	42bd      	cmp	r5, r7
  407552:	4403      	add	r3, r0
  407554:	d040      	beq.n	4075d8 <_free_r+0x15c>
  407556:	68d0      	ldr	r0, [r2, #12]
  407558:	60e8      	str	r0, [r5, #12]
  40755a:	f043 0201 	orr.w	r2, r3, #1
  40755e:	6085      	str	r5, [r0, #8]
  407560:	6062      	str	r2, [r4, #4]
  407562:	50e3      	str	r3, [r4, r3]
  407564:	e7b7      	b.n	4074d6 <_free_r+0x5a>
  407566:	07ff      	lsls	r7, r7, #31
  407568:	4403      	add	r3, r0
  40756a:	d407      	bmi.n	40757c <_free_r+0x100>
  40756c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407570:	1aa4      	subs	r4, r4, r2
  407572:	4413      	add	r3, r2
  407574:	68a0      	ldr	r0, [r4, #8]
  407576:	68e2      	ldr	r2, [r4, #12]
  407578:	60c2      	str	r2, [r0, #12]
  40757a:	6090      	str	r0, [r2, #8]
  40757c:	4a30      	ldr	r2, [pc, #192]	; (407640 <_free_r+0x1c4>)
  40757e:	6812      	ldr	r2, [r2, #0]
  407580:	f043 0001 	orr.w	r0, r3, #1
  407584:	4293      	cmp	r3, r2
  407586:	6060      	str	r0, [r4, #4]
  407588:	608c      	str	r4, [r1, #8]
  40758a:	d3b9      	bcc.n	407500 <_free_r+0x84>
  40758c:	4b2d      	ldr	r3, [pc, #180]	; (407644 <_free_r+0x1c8>)
  40758e:	4640      	mov	r0, r8
  407590:	6819      	ldr	r1, [r3, #0]
  407592:	f7ff ff23 	bl	4073dc <_malloc_trim_r>
  407596:	e7b3      	b.n	407500 <_free_r+0x84>
  407598:	4610      	mov	r0, r2
  40759a:	e7cd      	b.n	407538 <_free_r+0xbc>
  40759c:	1811      	adds	r1, r2, r0
  40759e:	6849      	ldr	r1, [r1, #4]
  4075a0:	07c9      	lsls	r1, r1, #31
  4075a2:	d444      	bmi.n	40762e <_free_r+0x1b2>
  4075a4:	6891      	ldr	r1, [r2, #8]
  4075a6:	68d2      	ldr	r2, [r2, #12]
  4075a8:	60ca      	str	r2, [r1, #12]
  4075aa:	4403      	add	r3, r0
  4075ac:	f043 0001 	orr.w	r0, r3, #1
  4075b0:	6091      	str	r1, [r2, #8]
  4075b2:	6060      	str	r0, [r4, #4]
  4075b4:	50e3      	str	r3, [r4, r3]
  4075b6:	e7a3      	b.n	407500 <_free_r+0x84>
  4075b8:	2a14      	cmp	r2, #20
  4075ba:	d816      	bhi.n	4075ea <_free_r+0x16e>
  4075bc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4075c0:	00ff      	lsls	r7, r7, #3
  4075c2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4075c6:	e7aa      	b.n	40751e <_free_r+0xa2>
  4075c8:	10aa      	asrs	r2, r5, #2
  4075ca:	2301      	movs	r3, #1
  4075cc:	684d      	ldr	r5, [r1, #4]
  4075ce:	4093      	lsls	r3, r2
  4075d0:	432b      	orrs	r3, r5
  4075d2:	604b      	str	r3, [r1, #4]
  4075d4:	4603      	mov	r3, r0
  4075d6:	e7b0      	b.n	40753a <_free_r+0xbe>
  4075d8:	f043 0201 	orr.w	r2, r3, #1
  4075dc:	614c      	str	r4, [r1, #20]
  4075de:	610c      	str	r4, [r1, #16]
  4075e0:	60e5      	str	r5, [r4, #12]
  4075e2:	60a5      	str	r5, [r4, #8]
  4075e4:	6062      	str	r2, [r4, #4]
  4075e6:	50e3      	str	r3, [r4, r3]
  4075e8:	e78a      	b.n	407500 <_free_r+0x84>
  4075ea:	2a54      	cmp	r2, #84	; 0x54
  4075ec:	d806      	bhi.n	4075fc <_free_r+0x180>
  4075ee:	0b1a      	lsrs	r2, r3, #12
  4075f0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4075f4:	00ff      	lsls	r7, r7, #3
  4075f6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4075fa:	e790      	b.n	40751e <_free_r+0xa2>
  4075fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407600:	d806      	bhi.n	407610 <_free_r+0x194>
  407602:	0bda      	lsrs	r2, r3, #15
  407604:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407608:	00ff      	lsls	r7, r7, #3
  40760a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40760e:	e786      	b.n	40751e <_free_r+0xa2>
  407610:	f240 5054 	movw	r0, #1364	; 0x554
  407614:	4282      	cmp	r2, r0
  407616:	d806      	bhi.n	407626 <_free_r+0x1aa>
  407618:	0c9a      	lsrs	r2, r3, #18
  40761a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40761e:	00ff      	lsls	r7, r7, #3
  407620:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407624:	e77b      	b.n	40751e <_free_r+0xa2>
  407626:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40762a:	257e      	movs	r5, #126	; 0x7e
  40762c:	e777      	b.n	40751e <_free_r+0xa2>
  40762e:	f043 0101 	orr.w	r1, r3, #1
  407632:	6061      	str	r1, [r4, #4]
  407634:	6013      	str	r3, [r2, #0]
  407636:	e763      	b.n	407500 <_free_r+0x84>
  407638:	20000440 	.word	0x20000440
  40763c:	20000448 	.word	0x20000448
  407640:	2000084c 	.word	0x2000084c
  407644:	20000ab0 	.word	0x20000ab0

00407648 <__ascii_mbtowc>:
  407648:	b082      	sub	sp, #8
  40764a:	b149      	cbz	r1, 407660 <__ascii_mbtowc+0x18>
  40764c:	b15a      	cbz	r2, 407666 <__ascii_mbtowc+0x1e>
  40764e:	b16b      	cbz	r3, 40766c <__ascii_mbtowc+0x24>
  407650:	7813      	ldrb	r3, [r2, #0]
  407652:	600b      	str	r3, [r1, #0]
  407654:	7812      	ldrb	r2, [r2, #0]
  407656:	1c10      	adds	r0, r2, #0
  407658:	bf18      	it	ne
  40765a:	2001      	movne	r0, #1
  40765c:	b002      	add	sp, #8
  40765e:	4770      	bx	lr
  407660:	a901      	add	r1, sp, #4
  407662:	2a00      	cmp	r2, #0
  407664:	d1f3      	bne.n	40764e <__ascii_mbtowc+0x6>
  407666:	4610      	mov	r0, r2
  407668:	b002      	add	sp, #8
  40766a:	4770      	bx	lr
  40766c:	f06f 0001 	mvn.w	r0, #1
  407670:	e7f4      	b.n	40765c <__ascii_mbtowc+0x14>
  407672:	bf00      	nop

00407674 <memmove>:
  407674:	4288      	cmp	r0, r1
  407676:	b5f0      	push	{r4, r5, r6, r7, lr}
  407678:	d90d      	bls.n	407696 <memmove+0x22>
  40767a:	188b      	adds	r3, r1, r2
  40767c:	4298      	cmp	r0, r3
  40767e:	d20a      	bcs.n	407696 <memmove+0x22>
  407680:	1884      	adds	r4, r0, r2
  407682:	2a00      	cmp	r2, #0
  407684:	d051      	beq.n	40772a <memmove+0xb6>
  407686:	4622      	mov	r2, r4
  407688:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40768c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407690:	4299      	cmp	r1, r3
  407692:	d1f9      	bne.n	407688 <memmove+0x14>
  407694:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407696:	2a0f      	cmp	r2, #15
  407698:	d948      	bls.n	40772c <memmove+0xb8>
  40769a:	ea41 0300 	orr.w	r3, r1, r0
  40769e:	079b      	lsls	r3, r3, #30
  4076a0:	d146      	bne.n	407730 <memmove+0xbc>
  4076a2:	f100 0410 	add.w	r4, r0, #16
  4076a6:	f101 0310 	add.w	r3, r1, #16
  4076aa:	4615      	mov	r5, r2
  4076ac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4076b0:	f844 6c10 	str.w	r6, [r4, #-16]
  4076b4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4076b8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4076bc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4076c0:	f844 6c08 	str.w	r6, [r4, #-8]
  4076c4:	3d10      	subs	r5, #16
  4076c6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4076ca:	f844 6c04 	str.w	r6, [r4, #-4]
  4076ce:	2d0f      	cmp	r5, #15
  4076d0:	f103 0310 	add.w	r3, r3, #16
  4076d4:	f104 0410 	add.w	r4, r4, #16
  4076d8:	d8e8      	bhi.n	4076ac <memmove+0x38>
  4076da:	f1a2 0310 	sub.w	r3, r2, #16
  4076de:	f023 030f 	bic.w	r3, r3, #15
  4076e2:	f002 0e0f 	and.w	lr, r2, #15
  4076e6:	3310      	adds	r3, #16
  4076e8:	f1be 0f03 	cmp.w	lr, #3
  4076ec:	4419      	add	r1, r3
  4076ee:	4403      	add	r3, r0
  4076f0:	d921      	bls.n	407736 <memmove+0xc2>
  4076f2:	1f1e      	subs	r6, r3, #4
  4076f4:	460d      	mov	r5, r1
  4076f6:	4674      	mov	r4, lr
  4076f8:	3c04      	subs	r4, #4
  4076fa:	f855 7b04 	ldr.w	r7, [r5], #4
  4076fe:	f846 7f04 	str.w	r7, [r6, #4]!
  407702:	2c03      	cmp	r4, #3
  407704:	d8f8      	bhi.n	4076f8 <memmove+0x84>
  407706:	f1ae 0404 	sub.w	r4, lr, #4
  40770a:	f024 0403 	bic.w	r4, r4, #3
  40770e:	3404      	adds	r4, #4
  407710:	4421      	add	r1, r4
  407712:	4423      	add	r3, r4
  407714:	f002 0203 	and.w	r2, r2, #3
  407718:	b162      	cbz	r2, 407734 <memmove+0xc0>
  40771a:	3b01      	subs	r3, #1
  40771c:	440a      	add	r2, r1
  40771e:	f811 4b01 	ldrb.w	r4, [r1], #1
  407722:	f803 4f01 	strb.w	r4, [r3, #1]!
  407726:	428a      	cmp	r2, r1
  407728:	d1f9      	bne.n	40771e <memmove+0xaa>
  40772a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40772c:	4603      	mov	r3, r0
  40772e:	e7f3      	b.n	407718 <memmove+0xa4>
  407730:	4603      	mov	r3, r0
  407732:	e7f2      	b.n	40771a <memmove+0xa6>
  407734:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407736:	4672      	mov	r2, lr
  407738:	e7ee      	b.n	407718 <memmove+0xa4>
  40773a:	bf00      	nop

0040773c <_realloc_r>:
  40773c:	2900      	cmp	r1, #0
  40773e:	f000 8095 	beq.w	40786c <_realloc_r+0x130>
  407742:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407746:	460d      	mov	r5, r1
  407748:	4616      	mov	r6, r2
  40774a:	b083      	sub	sp, #12
  40774c:	4680      	mov	r8, r0
  40774e:	f106 070b 	add.w	r7, r6, #11
  407752:	f7ff f94f 	bl	4069f4 <__malloc_lock>
  407756:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40775a:	2f16      	cmp	r7, #22
  40775c:	f02e 0403 	bic.w	r4, lr, #3
  407760:	f1a5 0908 	sub.w	r9, r5, #8
  407764:	d83c      	bhi.n	4077e0 <_realloc_r+0xa4>
  407766:	2210      	movs	r2, #16
  407768:	4617      	mov	r7, r2
  40776a:	42be      	cmp	r6, r7
  40776c:	d83d      	bhi.n	4077ea <_realloc_r+0xae>
  40776e:	4294      	cmp	r4, r2
  407770:	da43      	bge.n	4077fa <_realloc_r+0xbe>
  407772:	4bc4      	ldr	r3, [pc, #784]	; (407a84 <_realloc_r+0x348>)
  407774:	6899      	ldr	r1, [r3, #8]
  407776:	eb09 0004 	add.w	r0, r9, r4
  40777a:	4288      	cmp	r0, r1
  40777c:	f000 80b4 	beq.w	4078e8 <_realloc_r+0x1ac>
  407780:	6843      	ldr	r3, [r0, #4]
  407782:	f023 0101 	bic.w	r1, r3, #1
  407786:	4401      	add	r1, r0
  407788:	6849      	ldr	r1, [r1, #4]
  40778a:	07c9      	lsls	r1, r1, #31
  40778c:	d54c      	bpl.n	407828 <_realloc_r+0xec>
  40778e:	f01e 0f01 	tst.w	lr, #1
  407792:	f000 809b 	beq.w	4078cc <_realloc_r+0x190>
  407796:	4631      	mov	r1, r6
  407798:	4640      	mov	r0, r8
  40779a:	f7fe fd5b 	bl	406254 <_malloc_r>
  40779e:	4606      	mov	r6, r0
  4077a0:	2800      	cmp	r0, #0
  4077a2:	d03a      	beq.n	40781a <_realloc_r+0xde>
  4077a4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4077a8:	f023 0301 	bic.w	r3, r3, #1
  4077ac:	444b      	add	r3, r9
  4077ae:	f1a0 0208 	sub.w	r2, r0, #8
  4077b2:	429a      	cmp	r2, r3
  4077b4:	f000 8121 	beq.w	4079fa <_realloc_r+0x2be>
  4077b8:	1f22      	subs	r2, r4, #4
  4077ba:	2a24      	cmp	r2, #36	; 0x24
  4077bc:	f200 8107 	bhi.w	4079ce <_realloc_r+0x292>
  4077c0:	2a13      	cmp	r2, #19
  4077c2:	f200 80db 	bhi.w	40797c <_realloc_r+0x240>
  4077c6:	4603      	mov	r3, r0
  4077c8:	462a      	mov	r2, r5
  4077ca:	6811      	ldr	r1, [r2, #0]
  4077cc:	6019      	str	r1, [r3, #0]
  4077ce:	6851      	ldr	r1, [r2, #4]
  4077d0:	6059      	str	r1, [r3, #4]
  4077d2:	6892      	ldr	r2, [r2, #8]
  4077d4:	609a      	str	r2, [r3, #8]
  4077d6:	4629      	mov	r1, r5
  4077d8:	4640      	mov	r0, r8
  4077da:	f7ff fe4f 	bl	40747c <_free_r>
  4077de:	e01c      	b.n	40781a <_realloc_r+0xde>
  4077e0:	f027 0707 	bic.w	r7, r7, #7
  4077e4:	2f00      	cmp	r7, #0
  4077e6:	463a      	mov	r2, r7
  4077e8:	dabf      	bge.n	40776a <_realloc_r+0x2e>
  4077ea:	2600      	movs	r6, #0
  4077ec:	230c      	movs	r3, #12
  4077ee:	4630      	mov	r0, r6
  4077f0:	f8c8 3000 	str.w	r3, [r8]
  4077f4:	b003      	add	sp, #12
  4077f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4077fa:	462e      	mov	r6, r5
  4077fc:	1be3      	subs	r3, r4, r7
  4077fe:	2b0f      	cmp	r3, #15
  407800:	d81e      	bhi.n	407840 <_realloc_r+0x104>
  407802:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407806:	f003 0301 	and.w	r3, r3, #1
  40780a:	4323      	orrs	r3, r4
  40780c:	444c      	add	r4, r9
  40780e:	f8c9 3004 	str.w	r3, [r9, #4]
  407812:	6863      	ldr	r3, [r4, #4]
  407814:	f043 0301 	orr.w	r3, r3, #1
  407818:	6063      	str	r3, [r4, #4]
  40781a:	4640      	mov	r0, r8
  40781c:	f7ff f8ec 	bl	4069f8 <__malloc_unlock>
  407820:	4630      	mov	r0, r6
  407822:	b003      	add	sp, #12
  407824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407828:	f023 0303 	bic.w	r3, r3, #3
  40782c:	18e1      	adds	r1, r4, r3
  40782e:	4291      	cmp	r1, r2
  407830:	db1f      	blt.n	407872 <_realloc_r+0x136>
  407832:	68c3      	ldr	r3, [r0, #12]
  407834:	6882      	ldr	r2, [r0, #8]
  407836:	462e      	mov	r6, r5
  407838:	60d3      	str	r3, [r2, #12]
  40783a:	460c      	mov	r4, r1
  40783c:	609a      	str	r2, [r3, #8]
  40783e:	e7dd      	b.n	4077fc <_realloc_r+0xc0>
  407840:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407844:	eb09 0107 	add.w	r1, r9, r7
  407848:	f002 0201 	and.w	r2, r2, #1
  40784c:	444c      	add	r4, r9
  40784e:	f043 0301 	orr.w	r3, r3, #1
  407852:	4317      	orrs	r7, r2
  407854:	f8c9 7004 	str.w	r7, [r9, #4]
  407858:	604b      	str	r3, [r1, #4]
  40785a:	6863      	ldr	r3, [r4, #4]
  40785c:	f043 0301 	orr.w	r3, r3, #1
  407860:	3108      	adds	r1, #8
  407862:	6063      	str	r3, [r4, #4]
  407864:	4640      	mov	r0, r8
  407866:	f7ff fe09 	bl	40747c <_free_r>
  40786a:	e7d6      	b.n	40781a <_realloc_r+0xde>
  40786c:	4611      	mov	r1, r2
  40786e:	f7fe bcf1 	b.w	406254 <_malloc_r>
  407872:	f01e 0f01 	tst.w	lr, #1
  407876:	d18e      	bne.n	407796 <_realloc_r+0x5a>
  407878:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40787c:	eba9 0a01 	sub.w	sl, r9, r1
  407880:	f8da 1004 	ldr.w	r1, [sl, #4]
  407884:	f021 0103 	bic.w	r1, r1, #3
  407888:	440b      	add	r3, r1
  40788a:	4423      	add	r3, r4
  40788c:	4293      	cmp	r3, r2
  40788e:	db25      	blt.n	4078dc <_realloc_r+0x1a0>
  407890:	68c2      	ldr	r2, [r0, #12]
  407892:	6881      	ldr	r1, [r0, #8]
  407894:	4656      	mov	r6, sl
  407896:	60ca      	str	r2, [r1, #12]
  407898:	6091      	str	r1, [r2, #8]
  40789a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40789e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4078a2:	1f22      	subs	r2, r4, #4
  4078a4:	2a24      	cmp	r2, #36	; 0x24
  4078a6:	60c1      	str	r1, [r0, #12]
  4078a8:	6088      	str	r0, [r1, #8]
  4078aa:	f200 8094 	bhi.w	4079d6 <_realloc_r+0x29a>
  4078ae:	2a13      	cmp	r2, #19
  4078b0:	d96f      	bls.n	407992 <_realloc_r+0x256>
  4078b2:	6829      	ldr	r1, [r5, #0]
  4078b4:	f8ca 1008 	str.w	r1, [sl, #8]
  4078b8:	6869      	ldr	r1, [r5, #4]
  4078ba:	f8ca 100c 	str.w	r1, [sl, #12]
  4078be:	2a1b      	cmp	r2, #27
  4078c0:	f200 80a2 	bhi.w	407a08 <_realloc_r+0x2cc>
  4078c4:	3508      	adds	r5, #8
  4078c6:	f10a 0210 	add.w	r2, sl, #16
  4078ca:	e063      	b.n	407994 <_realloc_r+0x258>
  4078cc:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4078d0:	eba9 0a03 	sub.w	sl, r9, r3
  4078d4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4078d8:	f021 0103 	bic.w	r1, r1, #3
  4078dc:	1863      	adds	r3, r4, r1
  4078de:	4293      	cmp	r3, r2
  4078e0:	f6ff af59 	blt.w	407796 <_realloc_r+0x5a>
  4078e4:	4656      	mov	r6, sl
  4078e6:	e7d8      	b.n	40789a <_realloc_r+0x15e>
  4078e8:	6841      	ldr	r1, [r0, #4]
  4078ea:	f021 0b03 	bic.w	fp, r1, #3
  4078ee:	44a3      	add	fp, r4
  4078f0:	f107 0010 	add.w	r0, r7, #16
  4078f4:	4583      	cmp	fp, r0
  4078f6:	da56      	bge.n	4079a6 <_realloc_r+0x26a>
  4078f8:	f01e 0f01 	tst.w	lr, #1
  4078fc:	f47f af4b 	bne.w	407796 <_realloc_r+0x5a>
  407900:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407904:	eba9 0a01 	sub.w	sl, r9, r1
  407908:	f8da 1004 	ldr.w	r1, [sl, #4]
  40790c:	f021 0103 	bic.w	r1, r1, #3
  407910:	448b      	add	fp, r1
  407912:	4558      	cmp	r0, fp
  407914:	dce2      	bgt.n	4078dc <_realloc_r+0x1a0>
  407916:	4656      	mov	r6, sl
  407918:	f8da 100c 	ldr.w	r1, [sl, #12]
  40791c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407920:	1f22      	subs	r2, r4, #4
  407922:	2a24      	cmp	r2, #36	; 0x24
  407924:	60c1      	str	r1, [r0, #12]
  407926:	6088      	str	r0, [r1, #8]
  407928:	f200 808f 	bhi.w	407a4a <_realloc_r+0x30e>
  40792c:	2a13      	cmp	r2, #19
  40792e:	f240 808a 	bls.w	407a46 <_realloc_r+0x30a>
  407932:	6829      	ldr	r1, [r5, #0]
  407934:	f8ca 1008 	str.w	r1, [sl, #8]
  407938:	6869      	ldr	r1, [r5, #4]
  40793a:	f8ca 100c 	str.w	r1, [sl, #12]
  40793e:	2a1b      	cmp	r2, #27
  407940:	f200 808a 	bhi.w	407a58 <_realloc_r+0x31c>
  407944:	3508      	adds	r5, #8
  407946:	f10a 0210 	add.w	r2, sl, #16
  40794a:	6829      	ldr	r1, [r5, #0]
  40794c:	6011      	str	r1, [r2, #0]
  40794e:	6869      	ldr	r1, [r5, #4]
  407950:	6051      	str	r1, [r2, #4]
  407952:	68a9      	ldr	r1, [r5, #8]
  407954:	6091      	str	r1, [r2, #8]
  407956:	eb0a 0107 	add.w	r1, sl, r7
  40795a:	ebab 0207 	sub.w	r2, fp, r7
  40795e:	f042 0201 	orr.w	r2, r2, #1
  407962:	6099      	str	r1, [r3, #8]
  407964:	604a      	str	r2, [r1, #4]
  407966:	f8da 3004 	ldr.w	r3, [sl, #4]
  40796a:	f003 0301 	and.w	r3, r3, #1
  40796e:	431f      	orrs	r7, r3
  407970:	4640      	mov	r0, r8
  407972:	f8ca 7004 	str.w	r7, [sl, #4]
  407976:	f7ff f83f 	bl	4069f8 <__malloc_unlock>
  40797a:	e751      	b.n	407820 <_realloc_r+0xe4>
  40797c:	682b      	ldr	r3, [r5, #0]
  40797e:	6003      	str	r3, [r0, #0]
  407980:	686b      	ldr	r3, [r5, #4]
  407982:	6043      	str	r3, [r0, #4]
  407984:	2a1b      	cmp	r2, #27
  407986:	d82d      	bhi.n	4079e4 <_realloc_r+0x2a8>
  407988:	f100 0308 	add.w	r3, r0, #8
  40798c:	f105 0208 	add.w	r2, r5, #8
  407990:	e71b      	b.n	4077ca <_realloc_r+0x8e>
  407992:	4632      	mov	r2, r6
  407994:	6829      	ldr	r1, [r5, #0]
  407996:	6011      	str	r1, [r2, #0]
  407998:	6869      	ldr	r1, [r5, #4]
  40799a:	6051      	str	r1, [r2, #4]
  40799c:	68a9      	ldr	r1, [r5, #8]
  40799e:	6091      	str	r1, [r2, #8]
  4079a0:	461c      	mov	r4, r3
  4079a2:	46d1      	mov	r9, sl
  4079a4:	e72a      	b.n	4077fc <_realloc_r+0xc0>
  4079a6:	eb09 0107 	add.w	r1, r9, r7
  4079aa:	ebab 0b07 	sub.w	fp, fp, r7
  4079ae:	f04b 0201 	orr.w	r2, fp, #1
  4079b2:	6099      	str	r1, [r3, #8]
  4079b4:	604a      	str	r2, [r1, #4]
  4079b6:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4079ba:	f003 0301 	and.w	r3, r3, #1
  4079be:	431f      	orrs	r7, r3
  4079c0:	4640      	mov	r0, r8
  4079c2:	f845 7c04 	str.w	r7, [r5, #-4]
  4079c6:	f7ff f817 	bl	4069f8 <__malloc_unlock>
  4079ca:	462e      	mov	r6, r5
  4079cc:	e728      	b.n	407820 <_realloc_r+0xe4>
  4079ce:	4629      	mov	r1, r5
  4079d0:	f7ff fe50 	bl	407674 <memmove>
  4079d4:	e6ff      	b.n	4077d6 <_realloc_r+0x9a>
  4079d6:	4629      	mov	r1, r5
  4079d8:	4630      	mov	r0, r6
  4079da:	461c      	mov	r4, r3
  4079dc:	46d1      	mov	r9, sl
  4079de:	f7ff fe49 	bl	407674 <memmove>
  4079e2:	e70b      	b.n	4077fc <_realloc_r+0xc0>
  4079e4:	68ab      	ldr	r3, [r5, #8]
  4079e6:	6083      	str	r3, [r0, #8]
  4079e8:	68eb      	ldr	r3, [r5, #12]
  4079ea:	60c3      	str	r3, [r0, #12]
  4079ec:	2a24      	cmp	r2, #36	; 0x24
  4079ee:	d017      	beq.n	407a20 <_realloc_r+0x2e4>
  4079f0:	f100 0310 	add.w	r3, r0, #16
  4079f4:	f105 0210 	add.w	r2, r5, #16
  4079f8:	e6e7      	b.n	4077ca <_realloc_r+0x8e>
  4079fa:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4079fe:	f023 0303 	bic.w	r3, r3, #3
  407a02:	441c      	add	r4, r3
  407a04:	462e      	mov	r6, r5
  407a06:	e6f9      	b.n	4077fc <_realloc_r+0xc0>
  407a08:	68a9      	ldr	r1, [r5, #8]
  407a0a:	f8ca 1010 	str.w	r1, [sl, #16]
  407a0e:	68e9      	ldr	r1, [r5, #12]
  407a10:	f8ca 1014 	str.w	r1, [sl, #20]
  407a14:	2a24      	cmp	r2, #36	; 0x24
  407a16:	d00c      	beq.n	407a32 <_realloc_r+0x2f6>
  407a18:	3510      	adds	r5, #16
  407a1a:	f10a 0218 	add.w	r2, sl, #24
  407a1e:	e7b9      	b.n	407994 <_realloc_r+0x258>
  407a20:	692b      	ldr	r3, [r5, #16]
  407a22:	6103      	str	r3, [r0, #16]
  407a24:	696b      	ldr	r3, [r5, #20]
  407a26:	6143      	str	r3, [r0, #20]
  407a28:	f105 0218 	add.w	r2, r5, #24
  407a2c:	f100 0318 	add.w	r3, r0, #24
  407a30:	e6cb      	b.n	4077ca <_realloc_r+0x8e>
  407a32:	692a      	ldr	r2, [r5, #16]
  407a34:	f8ca 2018 	str.w	r2, [sl, #24]
  407a38:	696a      	ldr	r2, [r5, #20]
  407a3a:	f8ca 201c 	str.w	r2, [sl, #28]
  407a3e:	3518      	adds	r5, #24
  407a40:	f10a 0220 	add.w	r2, sl, #32
  407a44:	e7a6      	b.n	407994 <_realloc_r+0x258>
  407a46:	4632      	mov	r2, r6
  407a48:	e77f      	b.n	40794a <_realloc_r+0x20e>
  407a4a:	4629      	mov	r1, r5
  407a4c:	4630      	mov	r0, r6
  407a4e:	9301      	str	r3, [sp, #4]
  407a50:	f7ff fe10 	bl	407674 <memmove>
  407a54:	9b01      	ldr	r3, [sp, #4]
  407a56:	e77e      	b.n	407956 <_realloc_r+0x21a>
  407a58:	68a9      	ldr	r1, [r5, #8]
  407a5a:	f8ca 1010 	str.w	r1, [sl, #16]
  407a5e:	68e9      	ldr	r1, [r5, #12]
  407a60:	f8ca 1014 	str.w	r1, [sl, #20]
  407a64:	2a24      	cmp	r2, #36	; 0x24
  407a66:	d003      	beq.n	407a70 <_realloc_r+0x334>
  407a68:	3510      	adds	r5, #16
  407a6a:	f10a 0218 	add.w	r2, sl, #24
  407a6e:	e76c      	b.n	40794a <_realloc_r+0x20e>
  407a70:	692a      	ldr	r2, [r5, #16]
  407a72:	f8ca 2018 	str.w	r2, [sl, #24]
  407a76:	696a      	ldr	r2, [r5, #20]
  407a78:	f8ca 201c 	str.w	r2, [sl, #28]
  407a7c:	3518      	adds	r5, #24
  407a7e:	f10a 0220 	add.w	r2, sl, #32
  407a82:	e762      	b.n	40794a <_realloc_r+0x20e>
  407a84:	20000440 	.word	0x20000440

00407a88 <__ascii_wctomb>:
  407a88:	b121      	cbz	r1, 407a94 <__ascii_wctomb+0xc>
  407a8a:	2aff      	cmp	r2, #255	; 0xff
  407a8c:	d804      	bhi.n	407a98 <__ascii_wctomb+0x10>
  407a8e:	700a      	strb	r2, [r1, #0]
  407a90:	2001      	movs	r0, #1
  407a92:	4770      	bx	lr
  407a94:	4608      	mov	r0, r1
  407a96:	4770      	bx	lr
  407a98:	238a      	movs	r3, #138	; 0x8a
  407a9a:	6003      	str	r3, [r0, #0]
  407a9c:	f04f 30ff 	mov.w	r0, #4294967295
  407aa0:	4770      	bx	lr
  407aa2:	bf00      	nop

00407aa4 <__aeabi_drsub>:
  407aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407aa8:	e002      	b.n	407ab0 <__adddf3>
  407aaa:	bf00      	nop

00407aac <__aeabi_dsub>:
  407aac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407ab0 <__adddf3>:
  407ab0:	b530      	push	{r4, r5, lr}
  407ab2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  407ab6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407aba:	ea94 0f05 	teq	r4, r5
  407abe:	bf08      	it	eq
  407ac0:	ea90 0f02 	teqeq	r0, r2
  407ac4:	bf1f      	itttt	ne
  407ac6:	ea54 0c00 	orrsne.w	ip, r4, r0
  407aca:	ea55 0c02 	orrsne.w	ip, r5, r2
  407ace:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  407ad2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407ad6:	f000 80e2 	beq.w	407c9e <__adddf3+0x1ee>
  407ada:	ea4f 5454 	mov.w	r4, r4, lsr #21
  407ade:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  407ae2:	bfb8      	it	lt
  407ae4:	426d      	neglt	r5, r5
  407ae6:	dd0c      	ble.n	407b02 <__adddf3+0x52>
  407ae8:	442c      	add	r4, r5
  407aea:	ea80 0202 	eor.w	r2, r0, r2
  407aee:	ea81 0303 	eor.w	r3, r1, r3
  407af2:	ea82 0000 	eor.w	r0, r2, r0
  407af6:	ea83 0101 	eor.w	r1, r3, r1
  407afa:	ea80 0202 	eor.w	r2, r0, r2
  407afe:	ea81 0303 	eor.w	r3, r1, r3
  407b02:	2d36      	cmp	r5, #54	; 0x36
  407b04:	bf88      	it	hi
  407b06:	bd30      	pophi	{r4, r5, pc}
  407b08:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407b0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407b10:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  407b14:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  407b18:	d002      	beq.n	407b20 <__adddf3+0x70>
  407b1a:	4240      	negs	r0, r0
  407b1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407b20:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407b24:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407b28:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  407b2c:	d002      	beq.n	407b34 <__adddf3+0x84>
  407b2e:	4252      	negs	r2, r2
  407b30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407b34:	ea94 0f05 	teq	r4, r5
  407b38:	f000 80a7 	beq.w	407c8a <__adddf3+0x1da>
  407b3c:	f1a4 0401 	sub.w	r4, r4, #1
  407b40:	f1d5 0e20 	rsbs	lr, r5, #32
  407b44:	db0d      	blt.n	407b62 <__adddf3+0xb2>
  407b46:	fa02 fc0e 	lsl.w	ip, r2, lr
  407b4a:	fa22 f205 	lsr.w	r2, r2, r5
  407b4e:	1880      	adds	r0, r0, r2
  407b50:	f141 0100 	adc.w	r1, r1, #0
  407b54:	fa03 f20e 	lsl.w	r2, r3, lr
  407b58:	1880      	adds	r0, r0, r2
  407b5a:	fa43 f305 	asr.w	r3, r3, r5
  407b5e:	4159      	adcs	r1, r3
  407b60:	e00e      	b.n	407b80 <__adddf3+0xd0>
  407b62:	f1a5 0520 	sub.w	r5, r5, #32
  407b66:	f10e 0e20 	add.w	lr, lr, #32
  407b6a:	2a01      	cmp	r2, #1
  407b6c:	fa03 fc0e 	lsl.w	ip, r3, lr
  407b70:	bf28      	it	cs
  407b72:	f04c 0c02 	orrcs.w	ip, ip, #2
  407b76:	fa43 f305 	asr.w	r3, r3, r5
  407b7a:	18c0      	adds	r0, r0, r3
  407b7c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407b80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407b84:	d507      	bpl.n	407b96 <__adddf3+0xe6>
  407b86:	f04f 0e00 	mov.w	lr, #0
  407b8a:	f1dc 0c00 	rsbs	ip, ip, #0
  407b8e:	eb7e 0000 	sbcs.w	r0, lr, r0
  407b92:	eb6e 0101 	sbc.w	r1, lr, r1
  407b96:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407b9a:	d31b      	bcc.n	407bd4 <__adddf3+0x124>
  407b9c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407ba0:	d30c      	bcc.n	407bbc <__adddf3+0x10c>
  407ba2:	0849      	lsrs	r1, r1, #1
  407ba4:	ea5f 0030 	movs.w	r0, r0, rrx
  407ba8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407bac:	f104 0401 	add.w	r4, r4, #1
  407bb0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407bb4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407bb8:	f080 809a 	bcs.w	407cf0 <__adddf3+0x240>
  407bbc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407bc0:	bf08      	it	eq
  407bc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407bc6:	f150 0000 	adcs.w	r0, r0, #0
  407bca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407bce:	ea41 0105 	orr.w	r1, r1, r5
  407bd2:	bd30      	pop	{r4, r5, pc}
  407bd4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407bd8:	4140      	adcs	r0, r0
  407bda:	eb41 0101 	adc.w	r1, r1, r1
  407bde:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407be2:	f1a4 0401 	sub.w	r4, r4, #1
  407be6:	d1e9      	bne.n	407bbc <__adddf3+0x10c>
  407be8:	f091 0f00 	teq	r1, #0
  407bec:	bf04      	itt	eq
  407bee:	4601      	moveq	r1, r0
  407bf0:	2000      	moveq	r0, #0
  407bf2:	fab1 f381 	clz	r3, r1
  407bf6:	bf08      	it	eq
  407bf8:	3320      	addeq	r3, #32
  407bfa:	f1a3 030b 	sub.w	r3, r3, #11
  407bfe:	f1b3 0220 	subs.w	r2, r3, #32
  407c02:	da0c      	bge.n	407c1e <__adddf3+0x16e>
  407c04:	320c      	adds	r2, #12
  407c06:	dd08      	ble.n	407c1a <__adddf3+0x16a>
  407c08:	f102 0c14 	add.w	ip, r2, #20
  407c0c:	f1c2 020c 	rsb	r2, r2, #12
  407c10:	fa01 f00c 	lsl.w	r0, r1, ip
  407c14:	fa21 f102 	lsr.w	r1, r1, r2
  407c18:	e00c      	b.n	407c34 <__adddf3+0x184>
  407c1a:	f102 0214 	add.w	r2, r2, #20
  407c1e:	bfd8      	it	le
  407c20:	f1c2 0c20 	rsble	ip, r2, #32
  407c24:	fa01 f102 	lsl.w	r1, r1, r2
  407c28:	fa20 fc0c 	lsr.w	ip, r0, ip
  407c2c:	bfdc      	itt	le
  407c2e:	ea41 010c 	orrle.w	r1, r1, ip
  407c32:	4090      	lslle	r0, r2
  407c34:	1ae4      	subs	r4, r4, r3
  407c36:	bfa2      	ittt	ge
  407c38:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407c3c:	4329      	orrge	r1, r5
  407c3e:	bd30      	popge	{r4, r5, pc}
  407c40:	ea6f 0404 	mvn.w	r4, r4
  407c44:	3c1f      	subs	r4, #31
  407c46:	da1c      	bge.n	407c82 <__adddf3+0x1d2>
  407c48:	340c      	adds	r4, #12
  407c4a:	dc0e      	bgt.n	407c6a <__adddf3+0x1ba>
  407c4c:	f104 0414 	add.w	r4, r4, #20
  407c50:	f1c4 0220 	rsb	r2, r4, #32
  407c54:	fa20 f004 	lsr.w	r0, r0, r4
  407c58:	fa01 f302 	lsl.w	r3, r1, r2
  407c5c:	ea40 0003 	orr.w	r0, r0, r3
  407c60:	fa21 f304 	lsr.w	r3, r1, r4
  407c64:	ea45 0103 	orr.w	r1, r5, r3
  407c68:	bd30      	pop	{r4, r5, pc}
  407c6a:	f1c4 040c 	rsb	r4, r4, #12
  407c6e:	f1c4 0220 	rsb	r2, r4, #32
  407c72:	fa20 f002 	lsr.w	r0, r0, r2
  407c76:	fa01 f304 	lsl.w	r3, r1, r4
  407c7a:	ea40 0003 	orr.w	r0, r0, r3
  407c7e:	4629      	mov	r1, r5
  407c80:	bd30      	pop	{r4, r5, pc}
  407c82:	fa21 f004 	lsr.w	r0, r1, r4
  407c86:	4629      	mov	r1, r5
  407c88:	bd30      	pop	{r4, r5, pc}
  407c8a:	f094 0f00 	teq	r4, #0
  407c8e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  407c92:	bf06      	itte	eq
  407c94:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407c98:	3401      	addeq	r4, #1
  407c9a:	3d01      	subne	r5, #1
  407c9c:	e74e      	b.n	407b3c <__adddf3+0x8c>
  407c9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407ca2:	bf18      	it	ne
  407ca4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407ca8:	d029      	beq.n	407cfe <__adddf3+0x24e>
  407caa:	ea94 0f05 	teq	r4, r5
  407cae:	bf08      	it	eq
  407cb0:	ea90 0f02 	teqeq	r0, r2
  407cb4:	d005      	beq.n	407cc2 <__adddf3+0x212>
  407cb6:	ea54 0c00 	orrs.w	ip, r4, r0
  407cba:	bf04      	itt	eq
  407cbc:	4619      	moveq	r1, r3
  407cbe:	4610      	moveq	r0, r2
  407cc0:	bd30      	pop	{r4, r5, pc}
  407cc2:	ea91 0f03 	teq	r1, r3
  407cc6:	bf1e      	ittt	ne
  407cc8:	2100      	movne	r1, #0
  407cca:	2000      	movne	r0, #0
  407ccc:	bd30      	popne	{r4, r5, pc}
  407cce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  407cd2:	d105      	bne.n	407ce0 <__adddf3+0x230>
  407cd4:	0040      	lsls	r0, r0, #1
  407cd6:	4149      	adcs	r1, r1
  407cd8:	bf28      	it	cs
  407cda:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407cde:	bd30      	pop	{r4, r5, pc}
  407ce0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407ce4:	bf3c      	itt	cc
  407ce6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407cea:	bd30      	popcc	{r4, r5, pc}
  407cec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407cf0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407cf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407cf8:	f04f 0000 	mov.w	r0, #0
  407cfc:	bd30      	pop	{r4, r5, pc}
  407cfe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407d02:	bf1a      	itte	ne
  407d04:	4619      	movne	r1, r3
  407d06:	4610      	movne	r0, r2
  407d08:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407d0c:	bf1c      	itt	ne
  407d0e:	460b      	movne	r3, r1
  407d10:	4602      	movne	r2, r0
  407d12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407d16:	bf06      	itte	eq
  407d18:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407d1c:	ea91 0f03 	teqeq	r1, r3
  407d20:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407d24:	bd30      	pop	{r4, r5, pc}
  407d26:	bf00      	nop

00407d28 <__aeabi_ui2d>:
  407d28:	f090 0f00 	teq	r0, #0
  407d2c:	bf04      	itt	eq
  407d2e:	2100      	moveq	r1, #0
  407d30:	4770      	bxeq	lr
  407d32:	b530      	push	{r4, r5, lr}
  407d34:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407d38:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407d3c:	f04f 0500 	mov.w	r5, #0
  407d40:	f04f 0100 	mov.w	r1, #0
  407d44:	e750      	b.n	407be8 <__adddf3+0x138>
  407d46:	bf00      	nop

00407d48 <__aeabi_i2d>:
  407d48:	f090 0f00 	teq	r0, #0
  407d4c:	bf04      	itt	eq
  407d4e:	2100      	moveq	r1, #0
  407d50:	4770      	bxeq	lr
  407d52:	b530      	push	{r4, r5, lr}
  407d54:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407d58:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407d5c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407d60:	bf48      	it	mi
  407d62:	4240      	negmi	r0, r0
  407d64:	f04f 0100 	mov.w	r1, #0
  407d68:	e73e      	b.n	407be8 <__adddf3+0x138>
  407d6a:	bf00      	nop

00407d6c <__aeabi_f2d>:
  407d6c:	0042      	lsls	r2, r0, #1
  407d6e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  407d72:	ea4f 0131 	mov.w	r1, r1, rrx
  407d76:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407d7a:	bf1f      	itttt	ne
  407d7c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407d80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407d84:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407d88:	4770      	bxne	lr
  407d8a:	f092 0f00 	teq	r2, #0
  407d8e:	bf14      	ite	ne
  407d90:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407d94:	4770      	bxeq	lr
  407d96:	b530      	push	{r4, r5, lr}
  407d98:	f44f 7460 	mov.w	r4, #896	; 0x380
  407d9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407da0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407da4:	e720      	b.n	407be8 <__adddf3+0x138>
  407da6:	bf00      	nop

00407da8 <__aeabi_ul2d>:
  407da8:	ea50 0201 	orrs.w	r2, r0, r1
  407dac:	bf08      	it	eq
  407dae:	4770      	bxeq	lr
  407db0:	b530      	push	{r4, r5, lr}
  407db2:	f04f 0500 	mov.w	r5, #0
  407db6:	e00a      	b.n	407dce <__aeabi_l2d+0x16>

00407db8 <__aeabi_l2d>:
  407db8:	ea50 0201 	orrs.w	r2, r0, r1
  407dbc:	bf08      	it	eq
  407dbe:	4770      	bxeq	lr
  407dc0:	b530      	push	{r4, r5, lr}
  407dc2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407dc6:	d502      	bpl.n	407dce <__aeabi_l2d+0x16>
  407dc8:	4240      	negs	r0, r0
  407dca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407dce:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407dd2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407dd6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407dda:	f43f aedc 	beq.w	407b96 <__adddf3+0xe6>
  407dde:	f04f 0203 	mov.w	r2, #3
  407de2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407de6:	bf18      	it	ne
  407de8:	3203      	addne	r2, #3
  407dea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407dee:	bf18      	it	ne
  407df0:	3203      	addne	r2, #3
  407df2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407df6:	f1c2 0320 	rsb	r3, r2, #32
  407dfa:	fa00 fc03 	lsl.w	ip, r0, r3
  407dfe:	fa20 f002 	lsr.w	r0, r0, r2
  407e02:	fa01 fe03 	lsl.w	lr, r1, r3
  407e06:	ea40 000e 	orr.w	r0, r0, lr
  407e0a:	fa21 f102 	lsr.w	r1, r1, r2
  407e0e:	4414      	add	r4, r2
  407e10:	e6c1      	b.n	407b96 <__adddf3+0xe6>
  407e12:	bf00      	nop

00407e14 <__aeabi_dmul>:
  407e14:	b570      	push	{r4, r5, r6, lr}
  407e16:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407e1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407e1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407e22:	bf1d      	ittte	ne
  407e24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407e28:	ea94 0f0c 	teqne	r4, ip
  407e2c:	ea95 0f0c 	teqne	r5, ip
  407e30:	f000 f8de 	bleq	407ff0 <__aeabi_dmul+0x1dc>
  407e34:	442c      	add	r4, r5
  407e36:	ea81 0603 	eor.w	r6, r1, r3
  407e3a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407e3e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407e42:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407e46:	bf18      	it	ne
  407e48:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407e4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407e50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407e54:	d038      	beq.n	407ec8 <__aeabi_dmul+0xb4>
  407e56:	fba0 ce02 	umull	ip, lr, r0, r2
  407e5a:	f04f 0500 	mov.w	r5, #0
  407e5e:	fbe1 e502 	umlal	lr, r5, r1, r2
  407e62:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407e66:	fbe0 e503 	umlal	lr, r5, r0, r3
  407e6a:	f04f 0600 	mov.w	r6, #0
  407e6e:	fbe1 5603 	umlal	r5, r6, r1, r3
  407e72:	f09c 0f00 	teq	ip, #0
  407e76:	bf18      	it	ne
  407e78:	f04e 0e01 	orrne.w	lr, lr, #1
  407e7c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407e80:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407e84:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407e88:	d204      	bcs.n	407e94 <__aeabi_dmul+0x80>
  407e8a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407e8e:	416d      	adcs	r5, r5
  407e90:	eb46 0606 	adc.w	r6, r6, r6
  407e94:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407e98:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407e9c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407ea0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407ea4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407ea8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407eac:	bf88      	it	hi
  407eae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407eb2:	d81e      	bhi.n	407ef2 <__aeabi_dmul+0xde>
  407eb4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407eb8:	bf08      	it	eq
  407eba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407ebe:	f150 0000 	adcs.w	r0, r0, #0
  407ec2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407ec6:	bd70      	pop	{r4, r5, r6, pc}
  407ec8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407ecc:	ea46 0101 	orr.w	r1, r6, r1
  407ed0:	ea40 0002 	orr.w	r0, r0, r2
  407ed4:	ea81 0103 	eor.w	r1, r1, r3
  407ed8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407edc:	bfc2      	ittt	gt
  407ede:	ebd4 050c 	rsbsgt	r5, r4, ip
  407ee2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407ee6:	bd70      	popgt	{r4, r5, r6, pc}
  407ee8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407eec:	f04f 0e00 	mov.w	lr, #0
  407ef0:	3c01      	subs	r4, #1
  407ef2:	f300 80ab 	bgt.w	40804c <__aeabi_dmul+0x238>
  407ef6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407efa:	bfde      	ittt	le
  407efc:	2000      	movle	r0, #0
  407efe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407f02:	bd70      	pople	{r4, r5, r6, pc}
  407f04:	f1c4 0400 	rsb	r4, r4, #0
  407f08:	3c20      	subs	r4, #32
  407f0a:	da35      	bge.n	407f78 <__aeabi_dmul+0x164>
  407f0c:	340c      	adds	r4, #12
  407f0e:	dc1b      	bgt.n	407f48 <__aeabi_dmul+0x134>
  407f10:	f104 0414 	add.w	r4, r4, #20
  407f14:	f1c4 0520 	rsb	r5, r4, #32
  407f18:	fa00 f305 	lsl.w	r3, r0, r5
  407f1c:	fa20 f004 	lsr.w	r0, r0, r4
  407f20:	fa01 f205 	lsl.w	r2, r1, r5
  407f24:	ea40 0002 	orr.w	r0, r0, r2
  407f28:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407f2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407f30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407f34:	fa21 f604 	lsr.w	r6, r1, r4
  407f38:	eb42 0106 	adc.w	r1, r2, r6
  407f3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407f40:	bf08      	it	eq
  407f42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407f46:	bd70      	pop	{r4, r5, r6, pc}
  407f48:	f1c4 040c 	rsb	r4, r4, #12
  407f4c:	f1c4 0520 	rsb	r5, r4, #32
  407f50:	fa00 f304 	lsl.w	r3, r0, r4
  407f54:	fa20 f005 	lsr.w	r0, r0, r5
  407f58:	fa01 f204 	lsl.w	r2, r1, r4
  407f5c:	ea40 0002 	orr.w	r0, r0, r2
  407f60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407f64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407f68:	f141 0100 	adc.w	r1, r1, #0
  407f6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407f70:	bf08      	it	eq
  407f72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407f76:	bd70      	pop	{r4, r5, r6, pc}
  407f78:	f1c4 0520 	rsb	r5, r4, #32
  407f7c:	fa00 f205 	lsl.w	r2, r0, r5
  407f80:	ea4e 0e02 	orr.w	lr, lr, r2
  407f84:	fa20 f304 	lsr.w	r3, r0, r4
  407f88:	fa01 f205 	lsl.w	r2, r1, r5
  407f8c:	ea43 0302 	orr.w	r3, r3, r2
  407f90:	fa21 f004 	lsr.w	r0, r1, r4
  407f94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407f98:	fa21 f204 	lsr.w	r2, r1, r4
  407f9c:	ea20 0002 	bic.w	r0, r0, r2
  407fa0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407fa4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407fa8:	bf08      	it	eq
  407faa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407fae:	bd70      	pop	{r4, r5, r6, pc}
  407fb0:	f094 0f00 	teq	r4, #0
  407fb4:	d10f      	bne.n	407fd6 <__aeabi_dmul+0x1c2>
  407fb6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407fba:	0040      	lsls	r0, r0, #1
  407fbc:	eb41 0101 	adc.w	r1, r1, r1
  407fc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407fc4:	bf08      	it	eq
  407fc6:	3c01      	subeq	r4, #1
  407fc8:	d0f7      	beq.n	407fba <__aeabi_dmul+0x1a6>
  407fca:	ea41 0106 	orr.w	r1, r1, r6
  407fce:	f095 0f00 	teq	r5, #0
  407fd2:	bf18      	it	ne
  407fd4:	4770      	bxne	lr
  407fd6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407fda:	0052      	lsls	r2, r2, #1
  407fdc:	eb43 0303 	adc.w	r3, r3, r3
  407fe0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407fe4:	bf08      	it	eq
  407fe6:	3d01      	subeq	r5, #1
  407fe8:	d0f7      	beq.n	407fda <__aeabi_dmul+0x1c6>
  407fea:	ea43 0306 	orr.w	r3, r3, r6
  407fee:	4770      	bx	lr
  407ff0:	ea94 0f0c 	teq	r4, ip
  407ff4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407ff8:	bf18      	it	ne
  407ffa:	ea95 0f0c 	teqne	r5, ip
  407ffe:	d00c      	beq.n	40801a <__aeabi_dmul+0x206>
  408000:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408004:	bf18      	it	ne
  408006:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40800a:	d1d1      	bne.n	407fb0 <__aeabi_dmul+0x19c>
  40800c:	ea81 0103 	eor.w	r1, r1, r3
  408010:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408014:	f04f 0000 	mov.w	r0, #0
  408018:	bd70      	pop	{r4, r5, r6, pc}
  40801a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40801e:	bf06      	itte	eq
  408020:	4610      	moveq	r0, r2
  408022:	4619      	moveq	r1, r3
  408024:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408028:	d019      	beq.n	40805e <__aeabi_dmul+0x24a>
  40802a:	ea94 0f0c 	teq	r4, ip
  40802e:	d102      	bne.n	408036 <__aeabi_dmul+0x222>
  408030:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  408034:	d113      	bne.n	40805e <__aeabi_dmul+0x24a>
  408036:	ea95 0f0c 	teq	r5, ip
  40803a:	d105      	bne.n	408048 <__aeabi_dmul+0x234>
  40803c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408040:	bf1c      	itt	ne
  408042:	4610      	movne	r0, r2
  408044:	4619      	movne	r1, r3
  408046:	d10a      	bne.n	40805e <__aeabi_dmul+0x24a>
  408048:	ea81 0103 	eor.w	r1, r1, r3
  40804c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408050:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408054:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408058:	f04f 0000 	mov.w	r0, #0
  40805c:	bd70      	pop	{r4, r5, r6, pc}
  40805e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408062:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  408066:	bd70      	pop	{r4, r5, r6, pc}

00408068 <__aeabi_ddiv>:
  408068:	b570      	push	{r4, r5, r6, lr}
  40806a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40806e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408072:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408076:	bf1d      	ittte	ne
  408078:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40807c:	ea94 0f0c 	teqne	r4, ip
  408080:	ea95 0f0c 	teqne	r5, ip
  408084:	f000 f8a7 	bleq	4081d6 <__aeabi_ddiv+0x16e>
  408088:	eba4 0405 	sub.w	r4, r4, r5
  40808c:	ea81 0e03 	eor.w	lr, r1, r3
  408090:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408094:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408098:	f000 8088 	beq.w	4081ac <__aeabi_ddiv+0x144>
  40809c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4080a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4080a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4080a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4080ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4080b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4080b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4080b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4080bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4080c0:	429d      	cmp	r5, r3
  4080c2:	bf08      	it	eq
  4080c4:	4296      	cmpeq	r6, r2
  4080c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4080ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4080ce:	d202      	bcs.n	4080d6 <__aeabi_ddiv+0x6e>
  4080d0:	085b      	lsrs	r3, r3, #1
  4080d2:	ea4f 0232 	mov.w	r2, r2, rrx
  4080d6:	1ab6      	subs	r6, r6, r2
  4080d8:	eb65 0503 	sbc.w	r5, r5, r3
  4080dc:	085b      	lsrs	r3, r3, #1
  4080de:	ea4f 0232 	mov.w	r2, r2, rrx
  4080e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4080e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4080ea:	ebb6 0e02 	subs.w	lr, r6, r2
  4080ee:	eb75 0e03 	sbcs.w	lr, r5, r3
  4080f2:	bf22      	ittt	cs
  4080f4:	1ab6      	subcs	r6, r6, r2
  4080f6:	4675      	movcs	r5, lr
  4080f8:	ea40 000c 	orrcs.w	r0, r0, ip
  4080fc:	085b      	lsrs	r3, r3, #1
  4080fe:	ea4f 0232 	mov.w	r2, r2, rrx
  408102:	ebb6 0e02 	subs.w	lr, r6, r2
  408106:	eb75 0e03 	sbcs.w	lr, r5, r3
  40810a:	bf22      	ittt	cs
  40810c:	1ab6      	subcs	r6, r6, r2
  40810e:	4675      	movcs	r5, lr
  408110:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408114:	085b      	lsrs	r3, r3, #1
  408116:	ea4f 0232 	mov.w	r2, r2, rrx
  40811a:	ebb6 0e02 	subs.w	lr, r6, r2
  40811e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408122:	bf22      	ittt	cs
  408124:	1ab6      	subcs	r6, r6, r2
  408126:	4675      	movcs	r5, lr
  408128:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40812c:	085b      	lsrs	r3, r3, #1
  40812e:	ea4f 0232 	mov.w	r2, r2, rrx
  408132:	ebb6 0e02 	subs.w	lr, r6, r2
  408136:	eb75 0e03 	sbcs.w	lr, r5, r3
  40813a:	bf22      	ittt	cs
  40813c:	1ab6      	subcs	r6, r6, r2
  40813e:	4675      	movcs	r5, lr
  408140:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408144:	ea55 0e06 	orrs.w	lr, r5, r6
  408148:	d018      	beq.n	40817c <__aeabi_ddiv+0x114>
  40814a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40814e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408152:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408156:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40815a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40815e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408162:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408166:	d1c0      	bne.n	4080ea <__aeabi_ddiv+0x82>
  408168:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40816c:	d10b      	bne.n	408186 <__aeabi_ddiv+0x11e>
  40816e:	ea41 0100 	orr.w	r1, r1, r0
  408172:	f04f 0000 	mov.w	r0, #0
  408176:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40817a:	e7b6      	b.n	4080ea <__aeabi_ddiv+0x82>
  40817c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408180:	bf04      	itt	eq
  408182:	4301      	orreq	r1, r0
  408184:	2000      	moveq	r0, #0
  408186:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40818a:	bf88      	it	hi
  40818c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408190:	f63f aeaf 	bhi.w	407ef2 <__aeabi_dmul+0xde>
  408194:	ebb5 0c03 	subs.w	ip, r5, r3
  408198:	bf04      	itt	eq
  40819a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40819e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4081a2:	f150 0000 	adcs.w	r0, r0, #0
  4081a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4081aa:	bd70      	pop	{r4, r5, r6, pc}
  4081ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4081b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4081b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4081b8:	bfc2      	ittt	gt
  4081ba:	ebd4 050c 	rsbsgt	r5, r4, ip
  4081be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4081c2:	bd70      	popgt	{r4, r5, r6, pc}
  4081c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4081c8:	f04f 0e00 	mov.w	lr, #0
  4081cc:	3c01      	subs	r4, #1
  4081ce:	e690      	b.n	407ef2 <__aeabi_dmul+0xde>
  4081d0:	ea45 0e06 	orr.w	lr, r5, r6
  4081d4:	e68d      	b.n	407ef2 <__aeabi_dmul+0xde>
  4081d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4081da:	ea94 0f0c 	teq	r4, ip
  4081de:	bf08      	it	eq
  4081e0:	ea95 0f0c 	teqeq	r5, ip
  4081e4:	f43f af3b 	beq.w	40805e <__aeabi_dmul+0x24a>
  4081e8:	ea94 0f0c 	teq	r4, ip
  4081ec:	d10a      	bne.n	408204 <__aeabi_ddiv+0x19c>
  4081ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4081f2:	f47f af34 	bne.w	40805e <__aeabi_dmul+0x24a>
  4081f6:	ea95 0f0c 	teq	r5, ip
  4081fa:	f47f af25 	bne.w	408048 <__aeabi_dmul+0x234>
  4081fe:	4610      	mov	r0, r2
  408200:	4619      	mov	r1, r3
  408202:	e72c      	b.n	40805e <__aeabi_dmul+0x24a>
  408204:	ea95 0f0c 	teq	r5, ip
  408208:	d106      	bne.n	408218 <__aeabi_ddiv+0x1b0>
  40820a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40820e:	f43f aefd 	beq.w	40800c <__aeabi_dmul+0x1f8>
  408212:	4610      	mov	r0, r2
  408214:	4619      	mov	r1, r3
  408216:	e722      	b.n	40805e <__aeabi_dmul+0x24a>
  408218:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40821c:	bf18      	it	ne
  40821e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408222:	f47f aec5 	bne.w	407fb0 <__aeabi_dmul+0x19c>
  408226:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40822a:	f47f af0d 	bne.w	408048 <__aeabi_dmul+0x234>
  40822e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408232:	f47f aeeb 	bne.w	40800c <__aeabi_dmul+0x1f8>
  408236:	e712      	b.n	40805e <__aeabi_dmul+0x24a>

00408238 <__gedf2>:
  408238:	f04f 3cff 	mov.w	ip, #4294967295
  40823c:	e006      	b.n	40824c <__cmpdf2+0x4>
  40823e:	bf00      	nop

00408240 <__ledf2>:
  408240:	f04f 0c01 	mov.w	ip, #1
  408244:	e002      	b.n	40824c <__cmpdf2+0x4>
  408246:	bf00      	nop

00408248 <__cmpdf2>:
  408248:	f04f 0c01 	mov.w	ip, #1
  40824c:	f84d cd04 	str.w	ip, [sp, #-4]!
  408250:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408254:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408258:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40825c:	bf18      	it	ne
  40825e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408262:	d01b      	beq.n	40829c <__cmpdf2+0x54>
  408264:	b001      	add	sp, #4
  408266:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40826a:	bf0c      	ite	eq
  40826c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408270:	ea91 0f03 	teqne	r1, r3
  408274:	bf02      	ittt	eq
  408276:	ea90 0f02 	teqeq	r0, r2
  40827a:	2000      	moveq	r0, #0
  40827c:	4770      	bxeq	lr
  40827e:	f110 0f00 	cmn.w	r0, #0
  408282:	ea91 0f03 	teq	r1, r3
  408286:	bf58      	it	pl
  408288:	4299      	cmppl	r1, r3
  40828a:	bf08      	it	eq
  40828c:	4290      	cmpeq	r0, r2
  40828e:	bf2c      	ite	cs
  408290:	17d8      	asrcs	r0, r3, #31
  408292:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408296:	f040 0001 	orr.w	r0, r0, #1
  40829a:	4770      	bx	lr
  40829c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4082a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4082a4:	d102      	bne.n	4082ac <__cmpdf2+0x64>
  4082a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4082aa:	d107      	bne.n	4082bc <__cmpdf2+0x74>
  4082ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4082b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4082b4:	d1d6      	bne.n	408264 <__cmpdf2+0x1c>
  4082b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4082ba:	d0d3      	beq.n	408264 <__cmpdf2+0x1c>
  4082bc:	f85d 0b04 	ldr.w	r0, [sp], #4
  4082c0:	4770      	bx	lr
  4082c2:	bf00      	nop

004082c4 <__aeabi_cdrcmple>:
  4082c4:	4684      	mov	ip, r0
  4082c6:	4610      	mov	r0, r2
  4082c8:	4662      	mov	r2, ip
  4082ca:	468c      	mov	ip, r1
  4082cc:	4619      	mov	r1, r3
  4082ce:	4663      	mov	r3, ip
  4082d0:	e000      	b.n	4082d4 <__aeabi_cdcmpeq>
  4082d2:	bf00      	nop

004082d4 <__aeabi_cdcmpeq>:
  4082d4:	b501      	push	{r0, lr}
  4082d6:	f7ff ffb7 	bl	408248 <__cmpdf2>
  4082da:	2800      	cmp	r0, #0
  4082dc:	bf48      	it	mi
  4082de:	f110 0f00 	cmnmi.w	r0, #0
  4082e2:	bd01      	pop	{r0, pc}

004082e4 <__aeabi_dcmpeq>:
  4082e4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4082e8:	f7ff fff4 	bl	4082d4 <__aeabi_cdcmpeq>
  4082ec:	bf0c      	ite	eq
  4082ee:	2001      	moveq	r0, #1
  4082f0:	2000      	movne	r0, #0
  4082f2:	f85d fb08 	ldr.w	pc, [sp], #8
  4082f6:	bf00      	nop

004082f8 <__aeabi_dcmplt>:
  4082f8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4082fc:	f7ff ffea 	bl	4082d4 <__aeabi_cdcmpeq>
  408300:	bf34      	ite	cc
  408302:	2001      	movcc	r0, #1
  408304:	2000      	movcs	r0, #0
  408306:	f85d fb08 	ldr.w	pc, [sp], #8
  40830a:	bf00      	nop

0040830c <__aeabi_dcmple>:
  40830c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408310:	f7ff ffe0 	bl	4082d4 <__aeabi_cdcmpeq>
  408314:	bf94      	ite	ls
  408316:	2001      	movls	r0, #1
  408318:	2000      	movhi	r0, #0
  40831a:	f85d fb08 	ldr.w	pc, [sp], #8
  40831e:	bf00      	nop

00408320 <__aeabi_dcmpge>:
  408320:	f84d ed08 	str.w	lr, [sp, #-8]!
  408324:	f7ff ffce 	bl	4082c4 <__aeabi_cdrcmple>
  408328:	bf94      	ite	ls
  40832a:	2001      	movls	r0, #1
  40832c:	2000      	movhi	r0, #0
  40832e:	f85d fb08 	ldr.w	pc, [sp], #8
  408332:	bf00      	nop

00408334 <__aeabi_dcmpgt>:
  408334:	f84d ed08 	str.w	lr, [sp, #-8]!
  408338:	f7ff ffc4 	bl	4082c4 <__aeabi_cdrcmple>
  40833c:	bf34      	ite	cc
  40833e:	2001      	movcc	r0, #1
  408340:	2000      	movcs	r0, #0
  408342:	f85d fb08 	ldr.w	pc, [sp], #8
  408346:	bf00      	nop

00408348 <__aeabi_dcmpun>:
  408348:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40834c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408350:	d102      	bne.n	408358 <__aeabi_dcmpun+0x10>
  408352:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408356:	d10a      	bne.n	40836e <__aeabi_dcmpun+0x26>
  408358:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40835c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408360:	d102      	bne.n	408368 <__aeabi_dcmpun+0x20>
  408362:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408366:	d102      	bne.n	40836e <__aeabi_dcmpun+0x26>
  408368:	f04f 0000 	mov.w	r0, #0
  40836c:	4770      	bx	lr
  40836e:	f04f 0001 	mov.w	r0, #1
  408372:	4770      	bx	lr

00408374 <__aeabi_d2iz>:
  408374:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408378:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40837c:	d215      	bcs.n	4083aa <__aeabi_d2iz+0x36>
  40837e:	d511      	bpl.n	4083a4 <__aeabi_d2iz+0x30>
  408380:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408384:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408388:	d912      	bls.n	4083b0 <__aeabi_d2iz+0x3c>
  40838a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40838e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408392:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408396:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40839a:	fa23 f002 	lsr.w	r0, r3, r2
  40839e:	bf18      	it	ne
  4083a0:	4240      	negne	r0, r0
  4083a2:	4770      	bx	lr
  4083a4:	f04f 0000 	mov.w	r0, #0
  4083a8:	4770      	bx	lr
  4083aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4083ae:	d105      	bne.n	4083bc <__aeabi_d2iz+0x48>
  4083b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4083b4:	bf08      	it	eq
  4083b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4083ba:	4770      	bx	lr
  4083bc:	f04f 0000 	mov.w	r0, #0
  4083c0:	4770      	bx	lr
  4083c2:	bf00      	nop

004083c4 <OV2640_JPEG_INIT>:
  4083c4:	00ff ff2c df2e 01ff 323c 0111 0209 2804     ..,.....<2.....(
  4083d4:	e513 4814 0c2c 7833 333a fb3b 003e 1143     ...H,.3x:3;.>.C.
  4083e4:	1016 9239 da35 1a22 c337 0023 c034 1a36     ..9.5.".7.#.4.6.
  4083f4:	8806 c007 870d 410e 004c 0048 005b 0342     .......AL.H.[.B.
  408404:	814a 9921 4024 3825 8226 005c 0063 7061     J.!.$@%8&.\.c.ap
  408414:	8062 057c 8020 3028 006c 806d 006e 0270     b.|. .(0l.m.n.p.
  408424:	9471 c173 4012 1117 4318 0019 4b1a 0932     q.s..@...C...K2.
  408434:	c037 604f a850 006d 383d 3f46 604f 3c0c     7.O`P.m.=8F?O`.<
  408444:	00ff 7fe5 c0f9 2441 14e0 ff76 a033 2042     ......A$..v.3.B 
  408454:	1843 004c d587 3f88 03d7 10d9 82d3 08c8     C.L....?........
  408464:	80c9 007c 007d 037c 487d 487d 087c 207d     ..|.}.|.}H}H|.} 
  408474:	107d 0e7d 0090 0e91 1a91 3191 5a91 6991     }.}........1.Z.i
  408484:	7591 7e91 8891 8f91 9691 a391 af91 c491     .u.~............
  408494:	d791 e891 2091 0092 0693 e393 0593 0593     ..... ..........
  4084a4:	0093 0493 0093 0093 0093 0093 0093 0093     ................
  4084b4:	0093 0096 0897 1997 0297 0c97 2497 3097     .............$.0
  4084c4:	2897 2697 0297 9897 8097 0097 0097 edc3     .(.&............
  4084d4:	00a4 00a8 11c5 51c6 80bf 10c7 66b6 a5b8     .......Q.....f..
  4084e4:	64b7 7cb9 afb3 97b4 ffb5 c5b0 94b1 0fb2     .d.|............
  4084f4:	5cc4 64c0 4bc1 008c 3d86 0050 c851 9652     .\.d.K...=P.Q.R.
  408504:	0053 0054 0055 c85a 965b 005c 00d3 edc3     S.T.U.Z.[.\.....
  408514:	007f 00da 1fe5 67e1 00e0 7fdd 0005 4012     .......g.......@
  408524:	04d3 16c0 12c1 008c 3d86 0050 2c51 2452     .........=P.Q,R$
  408534:	0053 0054 0055 2c5a 245b 005c ffff 0000     S.T.U.Z,[$\.....

00408544 <OV2640_YUV422>:
  408544:	00ff 0005 10da 03d7 00df 8033 403c 77e1     ..........3.<@.w
  408554:	0000 ffff                                   ....

00408558 <OV2640_JPEG>:
  408558:	14e0 77e1 1fe5 03d7 10da 00e0 01ff 0804     ...w............
  408568:	ffff 0000                                   ....

0040856c <OV2640_JPEG_320x240>:
  40856c:	01ff 4012 1117 4318 0019 4b1a 0932 ca4f     ...@...C...K2.O.
  40857c:	a850 235a 006d 1239 da35 1a22 c337 0023     P.Z#m.9.5.".7.#.
  40858c:	c034 1a36 8806 c007 870d 410e 004c 00ff     4.6........AL...
  40859c:	04e0 64c0 4bc1 3586 8950 c851 9652 0053     ...d.K.5P.Q.R.S.
  4085ac:	0054 0055 0057 505a 3c5b 005c 00e0 ffff     T.U.W.ZP[<\.....

004085bc <OV2640_JPEG_640x480>:
  4085bc:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  4085cc:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  4085dc:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  4085ec:	04e0 c8c0 96c1 3d86 8950 9051 2c52 0053     .......=P.Q.R,S.
  4085fc:	0054 8855 0057 a05a 785b 005c 04d3 00e0     T.U.W.Z.[x\.....
  40860c:	ffff 0000                                   ....

00408610 <OV2640_JPEG_800x600>:
  408610:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408620:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408630:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408640:	04e0 c8c0 96c1 3586 8950 9051 2c52 0053     .......5P.Q.R,S.
  408650:	0054 8855 0057 c85a 965b 005c 02d3 00e0     T.U.W.Z.[.\.....
  408660:	ffff 0000                                   ....

00408664 <OV2640_JPEG_1024x768>:
  408664:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408674:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408684:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408694:	c8c0 96c1 008c 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  4086a4:	0054 8855 005a c05b 015c 02d3 ffff 0000     T.U.Z.[.\.......

004086b4 <OV2640_JPEG_1280x1024>:
  4086b4:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  4086c4:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  4086d4:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  4086e4:	04e0 c8c0 96c1 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  4086f4:	0054 8855 0057 405a f05b 015c 02d3 00e0     T.U.W.Z@[.\.....
  408704:	ffff 0000                                   ....

00408708 <OV2640_JPEG_1600x1200>:
  408708:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408718:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408728:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408738:	04e0 c8c0 96c1 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408748:	0054 8855 0057 905a 2c5b 055c 02d3 00e0     T.U.W.Z.[,\.....
  408758:	ffff 0000                                   ....

0040875c <OV2640_QVGA_YUV422_10FPS>:
  40875c:	000e 8012 05fe 0013 0511 0012 10d5 d40c     ................
  40876c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40877c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40878c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40879c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  4087ac:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4087bc:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  4087cc:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  4087dc:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  4087ec:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  4087fc:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40880c:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40881c:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40882c:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  40883c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040884c <OV2640_QVGA_YUV422_15FPS>:
  40884c:	000e 8012 05fe 0013 0311 0012 10d5 d40c     ................
  40885c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40886c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40887c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40888c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40889c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4088ac:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  4088bc:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  4088cc:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  4088dc:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  4088ec:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  4088fc:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40890c:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40891c:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  40892c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040893c <OV2640_QVGA_YUV422_20FPS>:
  40893c:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  40894c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40895c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40896c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40897c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40898c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40899c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  4089ac:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  4089bc:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  4089cc:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  4089dc:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  4089ec:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  4089fc:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  408a0c:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  408a1c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

00408a2c <OV2640_QVGA_YUV422_30FPS>:
  408a2c:	000e 8012 05fe 0013 0111 0012 10d5 d40c     ................
  408a3c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  408a4c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  408a5c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  408a6c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  408a7c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  408a8c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  408a9c:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  408aac:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  408abc:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  408acc:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  408adc:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  408aec:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  408afc:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  408b0c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

00408b1c <OV2640_QVGA_RGB888>:
  408b1c:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  408b2c:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  408b3c:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  408b4c:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  408b5c:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  408b6c:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  408b7c:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  408b8c:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  408b9c:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  408bac:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  408bbc:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  408bcc:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  408bdc:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  408bec:	605d 6eac ffbe 00bf 5031 7832 3f82 0112     ]`.n....1P2x.?..
  408bfc:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  408c0c:	0228 ffff                                   (...

00408c10 <OV2640_QQVGA_YUV422>:
  408c10:	000e 8012 0013 0111 0012 10d5 540c 340d     .............T.4
  408c20:	0116 2517 a018 0319 f01a 891b 0322 1829     ...%........".).
  408c30:	f82b 012c a031 f032 c433 b43a 3f36 6004     +.,.1.2.3.:.6?.`
  408c40:	8027 0f3d 803e 403f 7f40 6a41 2942 e544     '.=.>.?@@.AjB)D.
  408c50:	4145 0247 6449 a14a 704b 1a4c 504d 134e     EAG.IdJ.KpL.MPN.
  408c60:	0064 8867 1a68 3814 3c24 3025 7226 9750     d.g.h..8$<%0&rP.
  408c70:	7e51 0052 0053 0020 2321 1438 00e9 5556     Q~R.S. .!#8...VU
  408c80:	ff57 ff58 ff59 045f 00ec ff13 7f80 3f81     W.X.Y._........?
  408c90:	3282 0183 1138 7084 0085 0386 0187 0588     .2..8..p........
  408ca0:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  408cb0:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  408cc0:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  408cd0:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  408ce0:	885c 605d 6eac ffbe 00bf 2831 3c32 0034     \.]`.n....1(2<4.
  408cf0:	3f82 0012 3f36 0053 0033 891b 0322 0228     .?..6?S.3...".(.
  408d00:	00d9 ffff                                   ....

00408d04 <OV2640_QQVGA_RGB888>:
  408d04:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  408d14:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  408d24:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  408d34:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  408d44:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  408d54:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  408d64:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  408d74:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  408d84:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  408d94:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  408da4:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  408db4:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  408dc4:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  408dd4:	605d 6eac ffbe 00bf 2831 3c32 3f82 0112     ]`.n....1(2<.?..
  408de4:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  408df4:	0228 ffff                                   (...

00408df8 <OV2640_TEST_PATTERN>:
  408df8:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  408e08:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  408e18:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  408e28:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  408e38:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  408e48:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  408e58:	9750 7e51 0052 0053 0020 2321 0738 0284     P.Q~R.S. .!#8...
  408e68:	1438 00e9 5556 ff57 ff58 ff59 045f 00ec     8...VUW.X.Y._...
  408e78:	ff13 7f80 3f81 3282 0183 1138 0085 0386     .....?.2..8.....
  408e88:	0187 0588 3089 308d 858f 3093 8595 3099     .....0.0...0...0
  408e98:	859b 089c 129d 239e 459f 55a0 64a1 72a2     .......#.E.U.d.r
  408ea8:	7fa3 8ba4 95a5 a7a6 b5a7 cba8 dda9 ecaa     ................
  408eb8:	1aab 78ce 6ecf 0ad0 0cd1 84d2 90d3 1ed4     ...x.n..........
  408ec8:	245a 1f5b 885c 605d 6eac ffbe 00bf 5031     Z$[.\.]`.n....1P
  408ed8:	7832 3f82 0012 3f36 0053 c433 891b 0322     2x.?..6?S.3...".
  408ee8:	0228 ffff                                   (...

00408eec <OV2640_VGA_YUV422_20FPS>:
  408eec:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  408efc:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  408f0c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  408f1c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  408f2c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  408f3c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  408f4c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  408f5c:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  408f6c:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  408f7c:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  408f8c:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  408f9c:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  408fac:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  408fbc:	885c 605d 6eac ffbe 00bf a031 f032 3f82     \.]`.n....1.2..?
  408fcc:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...
  408fdc:	c200 0001 00c0 0000 0800 0000 0000 0000     ................
	...
  408ff4:	6d69 6761 5f65 7274 6e61 6673 7265 2520     image_transfer %
  409004:	0d75 000a 0000 0000 6f43 706d 656c 6574     u.......Complete
  409014:	0a0d 0000 6f4e 656e 0000 0000 6d69 6761     ....None....imag
  409024:	5f65 7274 6e61 6673 7265 0000 6573 2074     e_transfer..set 
  409034:	6175 7472 662e 6f6c 2077 2030 6e6f 0d20     uart.flow 0 on .
  409044:	000a 0000 6573 2074 7562 2e73 6f63 6d6d     ....set bus.comm
  409054:	6e61 2e64 7872 625f 6675 6973 657a 3520     and.rx_bufsize 5
  409064:	3030 0d30 000a 0000 6573 2074 7973 6920     000.....set sy i
  409074:	6720 7720 616c 206e 3032 0a0d 0000 0000      g wlan 20......
  409084:	6573 2074 7973 6920 6720 6e20 7465 6f77     set sy i g netwo
  409094:	6b72 3120 0d39 000a 6573 2074 7973 6920     rk 19...set sy i
  4090a4:	6720 7320 666f 6174 2070 3132 0a0d 0000      g softap 21....
  4090b4:	6573 2074 7973 7473 6d65 632e 646d 672e     set system.cmd.g
  4090c4:	6970 206f 3331 0a0d 0000 0000 6573 2074     pio 13......set 
  4090d4:	6c77 6e20 6f20 3120 0d34 000a 6573 2074     wl n o 14...set 
  4090e4:	7973 6320 7020 6f20 6666 0a0d 0000 0000     sy c p off......
  4090f4:	6573 2074 7973 6320 6520 6f20 6666 0a0d     set sy c e off..
  409104:	0000 0000 6173 6576 0a0d 0000 6573 7574     ....save....setu
  409114:	2070 6577 0d62 000a 6f70 6c6c 6120 6c6c     p web...poll all
  409124:	0a0d 0000                                   ....

00409128 <_global_impure_ptr>:
  409128:	0018 2000 4e49 0046 6e69 0066 414e 004e     ... INF.inf.NAN.
  409138:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  409148:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  409158:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  409168:	296c 0000 0030 0000                         l)..0...

00409170 <blanks.7208>:
  409170:	2020 2020 2020 2020 2020 2020 2020 2020                     

00409180 <zeroes.7209>:
  409180:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  409190:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

004091a0 <__mprec_bigtens>:
  4091a0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  4091b0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4091c0:	bf3c 7f73 4fdd 7515                         <.s..O.u

004091c8 <__mprec_tens>:
  4091c8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  4091d8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  4091e8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  4091f8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  409208:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  409218:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  409228:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  409238:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  409248:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  409258:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  409268:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  409278:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  409288:	9db4 79d9 7843 44ea                         ...yCx.D

00409290 <p05.6040>:
  409290:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  4092a0:	4f50 4953 0058 0000 002e 0000               POSIX.......

004092ac <_ctype_>:
  4092ac:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4092bc:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4092cc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4092dc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  4092ec:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  4092fc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40930c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40931c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40932c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

004093b0 <_init>:
  4093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4093b2:	bf00      	nop
  4093b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4093b6:	bc08      	pop	{r3}
  4093b8:	469e      	mov	lr, r3
  4093ba:	4770      	bx	lr

004093bc <__init_array_start>:
  4093bc:	00405265 	.word	0x00405265

004093c0 <__frame_dummy_init_array_entry>:
  4093c0:	004000f1                                ..@.

004093c4 <_fini>:
  4093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4093c6:	bf00      	nop
  4093c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4093ca:	bc08      	pop	{r3}
  4093cc:	469e      	mov	lr, r3
  4093ce:	4770      	bx	lr

004093d0 <__fini_array_start>:
  4093d0:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__malloc_av_>:
	...
20000448:	0440 2000 0440 2000 0448 2000 0448 2000     @.. @.. H.. H.. 
20000458:	0450 2000 0450 2000 0458 2000 0458 2000     P.. P.. X.. X.. 
20000468:	0460 2000 0460 2000 0468 2000 0468 2000     `.. `.. h.. h.. 
20000478:	0470 2000 0470 2000 0478 2000 0478 2000     p.. p.. x.. x.. 
20000488:	0480 2000 0480 2000 0488 2000 0488 2000     ... ... ... ... 
20000498:	0490 2000 0490 2000 0498 2000 0498 2000     ... ... ... ... 
200004a8:	04a0 2000 04a0 2000 04a8 2000 04a8 2000     ... ... ... ... 
200004b8:	04b0 2000 04b0 2000 04b8 2000 04b8 2000     ... ... ... ... 
200004c8:	04c0 2000 04c0 2000 04c8 2000 04c8 2000     ... ... ... ... 
200004d8:	04d0 2000 04d0 2000 04d8 2000 04d8 2000     ... ... ... ... 
200004e8:	04e0 2000 04e0 2000 04e8 2000 04e8 2000     ... ... ... ... 
200004f8:	04f0 2000 04f0 2000 04f8 2000 04f8 2000     ... ... ... ... 
20000508:	0500 2000 0500 2000 0508 2000 0508 2000     ... ... ... ... 
20000518:	0510 2000 0510 2000 0518 2000 0518 2000     ... ... ... ... 
20000528:	0520 2000 0520 2000 0528 2000 0528 2000      ..  .. (.. (.. 
20000538:	0530 2000 0530 2000 0538 2000 0538 2000     0.. 0.. 8.. 8.. 
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 

20000848 <__malloc_sbrk_base>:
20000848:	ffff ffff                                   ....

2000084c <__malloc_trim_threshold>:
2000084c:	0000 0002                                   ....

20000850 <__global_locale>:
20000850:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000870:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000890:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000910:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000930:	7a89 0040 7649 0040 0000 0000 92ac 0040     .z@.Iv@.......@.
20000940:	92a8 0040 914c 0040 914c 0040 914c 0040     ..@.L.@.L.@.L.@.
20000950:	914c 0040 914c 0040 914c 0040 914c 0040     L.@.L.@.L.@.L.@.
20000960:	914c 0040 914c 0040 ffff ffff ffff ffff     L.@.L.@.........
20000970:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000998:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
